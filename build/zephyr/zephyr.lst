
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00010000 <_vector_table>:
   10000:	e8 93 00 20 ad 3e 01 00 9d 9d 01 00 65 3e 01 00     ... .>......e>..
   10010:	65 3e 01 00 65 3e 01 00 65 3e 01 00 65 3e 01 00     e>..e>..e>..e>..
	...
   1002c:	35 3b 01 00 65 3e 01 00 00 00 00 00 d5 3a 01 00     5;..e>.......:..
   1003c:	65 3e 01 00                                         e>..

00010040 <_irq_vector_table>:
   10040:	c5 3b 01 00 c5 3b 01 00 c5 3b 01 00 c5 3b 01 00     .;...;...;...;..
   10050:	c5 3b 01 00 c5 3b 01 00 c5 3b 01 00 c5 3b 01 00     .;...;...;...;..
   10060:	c5 3b 01 00 c5 3b 01 00 c5 3b 01 00 c5 3b 01 00     .;...;...;...;..
   10070:	c5 3b 01 00 c5 3b 01 00 c5 3b 01 00 c5 3b 01 00     .;...;...;...;..
   10080:	c5 3b 01 00 c5 3b 01 00 c5 3b 01 00 c5 3b 01 00     .;...;...;...;..
   10090:	c5 3b 01 00 c5 3b 01 00 c5 3b 01 00 c5 3b 01 00     .;...;...;...;..
   100a0:	c5 3b 01 00 c5 3b 01 00 c5 3b 01 00 c5 3b 01 00     .;...;...;...;..
   100b0:	c5 3b 01 00 c5 3b 01 00 c5 3b 01 00 c5 3b 01 00     .;...;...;...;..
   100c0:	c5 3b 01 00 c5 3b 01 00 c5 3b 01 00 c5 3b 01 00     .;...;...;...;..
   100d0:	c5 3b 01 00 c5 3b 01 00 c5 3b 01 00 c5 3b 01 00     .;...;...;...;..
   100e0:	c5 3b 01 00 c5 3b 01 00 c5 3b 01 00 c5 3b 01 00     .;...;...;...;..
   100f0:	c5 3b 01 00 c5 3b 01 00 c5 3b 01 00 c5 3b 01 00     .;...;...;...;..
   10100:	c5 3b 01 00 c5 3b 01 00 c5 3b 01 00 c5 3b 01 00     .;...;...;...;..
   10110:	c5 3b 01 00 c5 3b 01 00 c5 3b 01 00 c5 3b 01 00     .;...;...;...;..
   10120:	c5 3b 01 00 c5 3b 01 00 c5 3b 01 00 c5 3b 01 00     .;...;...;...;..
   10130:	c5 3b 01 00 c5 3b 01 00 c5 3b 01 00 c5 3b 01 00     .;...;...;...;..
   10140:	c5 3b 01 00 c5 3b 01 00 c5 3b 01 00 c5 3b 01 00     .;...;...;...;..
   10150:	c5 3b 01 00                                         .;..

Disassembly of section text:

00010158 <__aeabi_fmul>:
   10158:	f04f 0cff 	mov.w	ip, #255	; 0xff
   1015c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   10160:	bf1e      	ittt	ne
   10162:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   10166:	ea92 0f0c 	teqne	r2, ip
   1016a:	ea93 0f0c 	teqne	r3, ip
   1016e:	d06f      	beq.n	10250 <__aeabi_fmul+0xf8>
   10170:	441a      	add	r2, r3
   10172:	ea80 0c01 	eor.w	ip, r0, r1
   10176:	0240      	lsls	r0, r0, #9
   10178:	bf18      	it	ne
   1017a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
   1017e:	d01e      	beq.n	101be <__aeabi_fmul+0x66>
   10180:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   10184:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
   10188:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
   1018c:	fba0 3101 	umull	r3, r1, r0, r1
   10190:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   10194:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
   10198:	bf3e      	ittt	cc
   1019a:	0049      	lslcc	r1, r1, #1
   1019c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
   101a0:	005b      	lslcc	r3, r3, #1
   101a2:	ea40 0001 	orr.w	r0, r0, r1
   101a6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
   101aa:	2afd      	cmp	r2, #253	; 0xfd
   101ac:	d81d      	bhi.n	101ea <__aeabi_fmul+0x92>
   101ae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   101b2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   101b6:	bf08      	it	eq
   101b8:	f020 0001 	biceq.w	r0, r0, #1
   101bc:	4770      	bx	lr
   101be:	f090 0f00 	teq	r0, #0
   101c2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   101c6:	bf08      	it	eq
   101c8:	0249      	lsleq	r1, r1, #9
   101ca:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   101ce:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
   101d2:	3a7f      	subs	r2, #127	; 0x7f
   101d4:	bfc2      	ittt	gt
   101d6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   101da:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   101de:	4770      	bxgt	lr
   101e0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   101e4:	f04f 0300 	mov.w	r3, #0
   101e8:	3a01      	subs	r2, #1
   101ea:	dc5d      	bgt.n	102a8 <__aeabi_fmul+0x150>
   101ec:	f112 0f19 	cmn.w	r2, #25
   101f0:	bfdc      	itt	le
   101f2:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
   101f6:	4770      	bxle	lr
   101f8:	f1c2 0200 	rsb	r2, r2, #0
   101fc:	0041      	lsls	r1, r0, #1
   101fe:	fa21 f102 	lsr.w	r1, r1, r2
   10202:	f1c2 0220 	rsb	r2, r2, #32
   10206:	fa00 fc02 	lsl.w	ip, r0, r2
   1020a:	ea5f 0031 	movs.w	r0, r1, rrx
   1020e:	f140 0000 	adc.w	r0, r0, #0
   10212:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
   10216:	bf08      	it	eq
   10218:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   1021c:	4770      	bx	lr
   1021e:	f092 0f00 	teq	r2, #0
   10222:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   10226:	bf02      	ittt	eq
   10228:	0040      	lsleq	r0, r0, #1
   1022a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   1022e:	3a01      	subeq	r2, #1
   10230:	d0f9      	beq.n	10226 <__aeabi_fmul+0xce>
   10232:	ea40 000c 	orr.w	r0, r0, ip
   10236:	f093 0f00 	teq	r3, #0
   1023a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   1023e:	bf02      	ittt	eq
   10240:	0049      	lsleq	r1, r1, #1
   10242:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   10246:	3b01      	subeq	r3, #1
   10248:	d0f9      	beq.n	1023e <__aeabi_fmul+0xe6>
   1024a:	ea41 010c 	orr.w	r1, r1, ip
   1024e:	e78f      	b.n	10170 <__aeabi_fmul+0x18>
   10250:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   10254:	ea92 0f0c 	teq	r2, ip
   10258:	bf18      	it	ne
   1025a:	ea93 0f0c 	teqne	r3, ip
   1025e:	d00a      	beq.n	10276 <__aeabi_fmul+0x11e>
   10260:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   10264:	bf18      	it	ne
   10266:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   1026a:	d1d8      	bne.n	1021e <__aeabi_fmul+0xc6>
   1026c:	ea80 0001 	eor.w	r0, r0, r1
   10270:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   10274:	4770      	bx	lr
   10276:	f090 0f00 	teq	r0, #0
   1027a:	bf17      	itett	ne
   1027c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
   10280:	4608      	moveq	r0, r1
   10282:	f091 0f00 	teqne	r1, #0
   10286:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
   1028a:	d014      	beq.n	102b6 <__aeabi_fmul+0x15e>
   1028c:	ea92 0f0c 	teq	r2, ip
   10290:	d101      	bne.n	10296 <__aeabi_fmul+0x13e>
   10292:	0242      	lsls	r2, r0, #9
   10294:	d10f      	bne.n	102b6 <__aeabi_fmul+0x15e>
   10296:	ea93 0f0c 	teq	r3, ip
   1029a:	d103      	bne.n	102a4 <__aeabi_fmul+0x14c>
   1029c:	024b      	lsls	r3, r1, #9
   1029e:	bf18      	it	ne
   102a0:	4608      	movne	r0, r1
   102a2:	d108      	bne.n	102b6 <__aeabi_fmul+0x15e>
   102a4:	ea80 0001 	eor.w	r0, r0, r1
   102a8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   102ac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   102b0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   102b4:	4770      	bx	lr
   102b6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   102ba:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
   102be:	4770      	bx	lr

000102c0 <__aeabi_drsub>:
   102c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   102c4:	e002      	b.n	102cc <__adddf3>
   102c6:	bf00      	nop

000102c8 <__aeabi_dsub>:
   102c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000102cc <__adddf3>:
   102cc:	b530      	push	{r4, r5, lr}
   102ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
   102d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
   102d6:	ea94 0f05 	teq	r4, r5
   102da:	bf08      	it	eq
   102dc:	ea90 0f02 	teqeq	r0, r2
   102e0:	bf1f      	itttt	ne
   102e2:	ea54 0c00 	orrsne.w	ip, r4, r0
   102e6:	ea55 0c02 	orrsne.w	ip, r5, r2
   102ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   102ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   102f2:	f000 80e2 	beq.w	104ba <__adddf3+0x1ee>
   102f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
   102fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   102fe:	bfb8      	it	lt
   10300:	426d      	neglt	r5, r5
   10302:	dd0c      	ble.n	1031e <__adddf3+0x52>
   10304:	442c      	add	r4, r5
   10306:	ea80 0202 	eor.w	r2, r0, r2
   1030a:	ea81 0303 	eor.w	r3, r1, r3
   1030e:	ea82 0000 	eor.w	r0, r2, r0
   10312:	ea83 0101 	eor.w	r1, r3, r1
   10316:	ea80 0202 	eor.w	r2, r0, r2
   1031a:	ea81 0303 	eor.w	r3, r1, r3
   1031e:	2d36      	cmp	r5, #54	; 0x36
   10320:	bf88      	it	hi
   10322:	bd30      	pophi	{r4, r5, pc}
   10324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   10328:	ea4f 3101 	mov.w	r1, r1, lsl #12
   1032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   10330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   10334:	d002      	beq.n	1033c <__adddf3+0x70>
   10336:	4240      	negs	r0, r0
   10338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   10340:	ea4f 3303 	mov.w	r3, r3, lsl #12
   10344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   10348:	d002      	beq.n	10350 <__adddf3+0x84>
   1034a:	4252      	negs	r2, r2
   1034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   10350:	ea94 0f05 	teq	r4, r5
   10354:	f000 80a7 	beq.w	104a6 <__adddf3+0x1da>
   10358:	f1a4 0401 	sub.w	r4, r4, #1
   1035c:	f1d5 0e20 	rsbs	lr, r5, #32
   10360:	db0d      	blt.n	1037e <__adddf3+0xb2>
   10362:	fa02 fc0e 	lsl.w	ip, r2, lr
   10366:	fa22 f205 	lsr.w	r2, r2, r5
   1036a:	1880      	adds	r0, r0, r2
   1036c:	f141 0100 	adc.w	r1, r1, #0
   10370:	fa03 f20e 	lsl.w	r2, r3, lr
   10374:	1880      	adds	r0, r0, r2
   10376:	fa43 f305 	asr.w	r3, r3, r5
   1037a:	4159      	adcs	r1, r3
   1037c:	e00e      	b.n	1039c <__adddf3+0xd0>
   1037e:	f1a5 0520 	sub.w	r5, r5, #32
   10382:	f10e 0e20 	add.w	lr, lr, #32
   10386:	2a01      	cmp	r2, #1
   10388:	fa03 fc0e 	lsl.w	ip, r3, lr
   1038c:	bf28      	it	cs
   1038e:	f04c 0c02 	orrcs.w	ip, ip, #2
   10392:	fa43 f305 	asr.w	r3, r3, r5
   10396:	18c0      	adds	r0, r0, r3
   10398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   1039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   103a0:	d507      	bpl.n	103b2 <__adddf3+0xe6>
   103a2:	f04f 0e00 	mov.w	lr, #0
   103a6:	f1dc 0c00 	rsbs	ip, ip, #0
   103aa:	eb7e 0000 	sbcs.w	r0, lr, r0
   103ae:	eb6e 0101 	sbc.w	r1, lr, r1
   103b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   103b6:	d31b      	bcc.n	103f0 <__adddf3+0x124>
   103b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   103bc:	d30c      	bcc.n	103d8 <__adddf3+0x10c>
   103be:	0849      	lsrs	r1, r1, #1
   103c0:	ea5f 0030 	movs.w	r0, r0, rrx
   103c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
   103c8:	f104 0401 	add.w	r4, r4, #1
   103cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
   103d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   103d4:	f080 809a 	bcs.w	1050c <__adddf3+0x240>
   103d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   103dc:	bf08      	it	eq
   103de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   103e2:	f150 0000 	adcs.w	r0, r0, #0
   103e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   103ea:	ea41 0105 	orr.w	r1, r1, r5
   103ee:	bd30      	pop	{r4, r5, pc}
   103f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   103f4:	4140      	adcs	r0, r0
   103f6:	eb41 0101 	adc.w	r1, r1, r1
   103fa:	3c01      	subs	r4, #1
   103fc:	bf28      	it	cs
   103fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   10402:	d2e9      	bcs.n	103d8 <__adddf3+0x10c>
   10404:	f091 0f00 	teq	r1, #0
   10408:	bf04      	itt	eq
   1040a:	4601      	moveq	r1, r0
   1040c:	2000      	moveq	r0, #0
   1040e:	fab1 f381 	clz	r3, r1
   10412:	bf08      	it	eq
   10414:	3320      	addeq	r3, #32
   10416:	f1a3 030b 	sub.w	r3, r3, #11
   1041a:	f1b3 0220 	subs.w	r2, r3, #32
   1041e:	da0c      	bge.n	1043a <__adddf3+0x16e>
   10420:	320c      	adds	r2, #12
   10422:	dd08      	ble.n	10436 <__adddf3+0x16a>
   10424:	f102 0c14 	add.w	ip, r2, #20
   10428:	f1c2 020c 	rsb	r2, r2, #12
   1042c:	fa01 f00c 	lsl.w	r0, r1, ip
   10430:	fa21 f102 	lsr.w	r1, r1, r2
   10434:	e00c      	b.n	10450 <__adddf3+0x184>
   10436:	f102 0214 	add.w	r2, r2, #20
   1043a:	bfd8      	it	le
   1043c:	f1c2 0c20 	rsble	ip, r2, #32
   10440:	fa01 f102 	lsl.w	r1, r1, r2
   10444:	fa20 fc0c 	lsr.w	ip, r0, ip
   10448:	bfdc      	itt	le
   1044a:	ea41 010c 	orrle.w	r1, r1, ip
   1044e:	4090      	lslle	r0, r2
   10450:	1ae4      	subs	r4, r4, r3
   10452:	bfa2      	ittt	ge
   10454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   10458:	4329      	orrge	r1, r5
   1045a:	bd30      	popge	{r4, r5, pc}
   1045c:	ea6f 0404 	mvn.w	r4, r4
   10460:	3c1f      	subs	r4, #31
   10462:	da1c      	bge.n	1049e <__adddf3+0x1d2>
   10464:	340c      	adds	r4, #12
   10466:	dc0e      	bgt.n	10486 <__adddf3+0x1ba>
   10468:	f104 0414 	add.w	r4, r4, #20
   1046c:	f1c4 0220 	rsb	r2, r4, #32
   10470:	fa20 f004 	lsr.w	r0, r0, r4
   10474:	fa01 f302 	lsl.w	r3, r1, r2
   10478:	ea40 0003 	orr.w	r0, r0, r3
   1047c:	fa21 f304 	lsr.w	r3, r1, r4
   10480:	ea45 0103 	orr.w	r1, r5, r3
   10484:	bd30      	pop	{r4, r5, pc}
   10486:	f1c4 040c 	rsb	r4, r4, #12
   1048a:	f1c4 0220 	rsb	r2, r4, #32
   1048e:	fa20 f002 	lsr.w	r0, r0, r2
   10492:	fa01 f304 	lsl.w	r3, r1, r4
   10496:	ea40 0003 	orr.w	r0, r0, r3
   1049a:	4629      	mov	r1, r5
   1049c:	bd30      	pop	{r4, r5, pc}
   1049e:	fa21 f004 	lsr.w	r0, r1, r4
   104a2:	4629      	mov	r1, r5
   104a4:	bd30      	pop	{r4, r5, pc}
   104a6:	f094 0f00 	teq	r4, #0
   104aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   104ae:	bf06      	itte	eq
   104b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   104b4:	3401      	addeq	r4, #1
   104b6:	3d01      	subne	r5, #1
   104b8:	e74e      	b.n	10358 <__adddf3+0x8c>
   104ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   104be:	bf18      	it	ne
   104c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   104c4:	d029      	beq.n	1051a <__adddf3+0x24e>
   104c6:	ea94 0f05 	teq	r4, r5
   104ca:	bf08      	it	eq
   104cc:	ea90 0f02 	teqeq	r0, r2
   104d0:	d005      	beq.n	104de <__adddf3+0x212>
   104d2:	ea54 0c00 	orrs.w	ip, r4, r0
   104d6:	bf04      	itt	eq
   104d8:	4619      	moveq	r1, r3
   104da:	4610      	moveq	r0, r2
   104dc:	bd30      	pop	{r4, r5, pc}
   104de:	ea91 0f03 	teq	r1, r3
   104e2:	bf1e      	ittt	ne
   104e4:	2100      	movne	r1, #0
   104e6:	2000      	movne	r0, #0
   104e8:	bd30      	popne	{r4, r5, pc}
   104ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   104ee:	d105      	bne.n	104fc <__adddf3+0x230>
   104f0:	0040      	lsls	r0, r0, #1
   104f2:	4149      	adcs	r1, r1
   104f4:	bf28      	it	cs
   104f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   104fa:	bd30      	pop	{r4, r5, pc}
   104fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   10500:	bf3c      	itt	cc
   10502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   10506:	bd30      	popcc	{r4, r5, pc}
   10508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   1050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   10510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   10514:	f04f 0000 	mov.w	r0, #0
   10518:	bd30      	pop	{r4, r5, pc}
   1051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   1051e:	bf1a      	itte	ne
   10520:	4619      	movne	r1, r3
   10522:	4610      	movne	r0, r2
   10524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   10528:	bf1c      	itt	ne
   1052a:	460b      	movne	r3, r1
   1052c:	4602      	movne	r2, r0
   1052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   10532:	bf06      	itte	eq
   10534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   10538:	ea91 0f03 	teqeq	r1, r3
   1053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   10540:	bd30      	pop	{r4, r5, pc}
   10542:	bf00      	nop

00010544 <__aeabi_ui2d>:
   10544:	f090 0f00 	teq	r0, #0
   10548:	bf04      	itt	eq
   1054a:	2100      	moveq	r1, #0
   1054c:	4770      	bxeq	lr
   1054e:	b530      	push	{r4, r5, lr}
   10550:	f44f 6480 	mov.w	r4, #1024	; 0x400
   10554:	f104 0432 	add.w	r4, r4, #50	; 0x32
   10558:	f04f 0500 	mov.w	r5, #0
   1055c:	f04f 0100 	mov.w	r1, #0
   10560:	e750      	b.n	10404 <__adddf3+0x138>
   10562:	bf00      	nop

00010564 <__aeabi_i2d>:
   10564:	f090 0f00 	teq	r0, #0
   10568:	bf04      	itt	eq
   1056a:	2100      	moveq	r1, #0
   1056c:	4770      	bxeq	lr
   1056e:	b530      	push	{r4, r5, lr}
   10570:	f44f 6480 	mov.w	r4, #1024	; 0x400
   10574:	f104 0432 	add.w	r4, r4, #50	; 0x32
   10578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   1057c:	bf48      	it	mi
   1057e:	4240      	negmi	r0, r0
   10580:	f04f 0100 	mov.w	r1, #0
   10584:	e73e      	b.n	10404 <__adddf3+0x138>
   10586:	bf00      	nop

00010588 <__aeabi_f2d>:
   10588:	0042      	lsls	r2, r0, #1
   1058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
   1058e:	ea4f 0131 	mov.w	r1, r1, rrx
   10592:	ea4f 7002 	mov.w	r0, r2, lsl #28
   10596:	bf1f      	itttt	ne
   10598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   1059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   105a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   105a4:	4770      	bxne	lr
   105a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   105aa:	bf08      	it	eq
   105ac:	4770      	bxeq	lr
   105ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   105b2:	bf04      	itt	eq
   105b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   105b8:	4770      	bxeq	lr
   105ba:	b530      	push	{r4, r5, lr}
   105bc:	f44f 7460 	mov.w	r4, #896	; 0x380
   105c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   105c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   105c8:	e71c      	b.n	10404 <__adddf3+0x138>
   105ca:	bf00      	nop

000105cc <__aeabi_ul2d>:
   105cc:	ea50 0201 	orrs.w	r2, r0, r1
   105d0:	bf08      	it	eq
   105d2:	4770      	bxeq	lr
   105d4:	b530      	push	{r4, r5, lr}
   105d6:	f04f 0500 	mov.w	r5, #0
   105da:	e00a      	b.n	105f2 <__aeabi_l2d+0x16>

000105dc <__aeabi_l2d>:
   105dc:	ea50 0201 	orrs.w	r2, r0, r1
   105e0:	bf08      	it	eq
   105e2:	4770      	bxeq	lr
   105e4:	b530      	push	{r4, r5, lr}
   105e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   105ea:	d502      	bpl.n	105f2 <__aeabi_l2d+0x16>
   105ec:	4240      	negs	r0, r0
   105ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   105f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
   105f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
   105fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   105fe:	f43f aed8 	beq.w	103b2 <__adddf3+0xe6>
   10602:	f04f 0203 	mov.w	r2, #3
   10606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   1060a:	bf18      	it	ne
   1060c:	3203      	addne	r2, #3
   1060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   10612:	bf18      	it	ne
   10614:	3203      	addne	r2, #3
   10616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   1061a:	f1c2 0320 	rsb	r3, r2, #32
   1061e:	fa00 fc03 	lsl.w	ip, r0, r3
   10622:	fa20 f002 	lsr.w	r0, r0, r2
   10626:	fa01 fe03 	lsl.w	lr, r1, r3
   1062a:	ea40 000e 	orr.w	r0, r0, lr
   1062e:	fa21 f102 	lsr.w	r1, r1, r2
   10632:	4414      	add	r4, r2
   10634:	e6bd      	b.n	103b2 <__adddf3+0xe6>
   10636:	bf00      	nop

00010638 <__aeabi_dmul>:
   10638:	b570      	push	{r4, r5, r6, lr}
   1063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   1063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   10642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   10646:	bf1d      	ittte	ne
   10648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   1064c:	ea94 0f0c 	teqne	r4, ip
   10650:	ea95 0f0c 	teqne	r5, ip
   10654:	f000 f8de 	bleq	10814 <__aeabi_dmul+0x1dc>
   10658:	442c      	add	r4, r5
   1065a:	ea81 0603 	eor.w	r6, r1, r3
   1065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   10662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   10666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   1066a:	bf18      	it	ne
   1066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   10670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   10674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   10678:	d038      	beq.n	106ec <__aeabi_dmul+0xb4>
   1067a:	fba0 ce02 	umull	ip, lr, r0, r2
   1067e:	f04f 0500 	mov.w	r5, #0
   10682:	fbe1 e502 	umlal	lr, r5, r1, r2
   10686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   1068a:	fbe0 e503 	umlal	lr, r5, r0, r3
   1068e:	f04f 0600 	mov.w	r6, #0
   10692:	fbe1 5603 	umlal	r5, r6, r1, r3
   10696:	f09c 0f00 	teq	ip, #0
   1069a:	bf18      	it	ne
   1069c:	f04e 0e01 	orrne.w	lr, lr, #1
   106a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   106a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   106a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   106ac:	d204      	bcs.n	106b8 <__aeabi_dmul+0x80>
   106ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   106b2:	416d      	adcs	r5, r5
   106b4:	eb46 0606 	adc.w	r6, r6, r6
   106b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   106bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   106c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   106c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   106c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   106cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   106d0:	bf88      	it	hi
   106d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   106d6:	d81e      	bhi.n	10716 <__aeabi_dmul+0xde>
   106d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   106dc:	bf08      	it	eq
   106de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   106e2:	f150 0000 	adcs.w	r0, r0, #0
   106e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   106ea:	bd70      	pop	{r4, r5, r6, pc}
   106ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   106f0:	ea46 0101 	orr.w	r1, r6, r1
   106f4:	ea40 0002 	orr.w	r0, r0, r2
   106f8:	ea81 0103 	eor.w	r1, r1, r3
   106fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   10700:	bfc2      	ittt	gt
   10702:	ebd4 050c 	rsbsgt	r5, r4, ip
   10706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   1070a:	bd70      	popgt	{r4, r5, r6, pc}
   1070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   10710:	f04f 0e00 	mov.w	lr, #0
   10714:	3c01      	subs	r4, #1
   10716:	f300 80ab 	bgt.w	10870 <__aeabi_dmul+0x238>
   1071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
   1071e:	bfde      	ittt	le
   10720:	2000      	movle	r0, #0
   10722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   10726:	bd70      	pople	{r4, r5, r6, pc}
   10728:	f1c4 0400 	rsb	r4, r4, #0
   1072c:	3c20      	subs	r4, #32
   1072e:	da35      	bge.n	1079c <__aeabi_dmul+0x164>
   10730:	340c      	adds	r4, #12
   10732:	dc1b      	bgt.n	1076c <__aeabi_dmul+0x134>
   10734:	f104 0414 	add.w	r4, r4, #20
   10738:	f1c4 0520 	rsb	r5, r4, #32
   1073c:	fa00 f305 	lsl.w	r3, r0, r5
   10740:	fa20 f004 	lsr.w	r0, r0, r4
   10744:	fa01 f205 	lsl.w	r2, r1, r5
   10748:	ea40 0002 	orr.w	r0, r0, r2
   1074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   10750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   10754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   10758:	fa21 f604 	lsr.w	r6, r1, r4
   1075c:	eb42 0106 	adc.w	r1, r2, r6
   10760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   10764:	bf08      	it	eq
   10766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   1076a:	bd70      	pop	{r4, r5, r6, pc}
   1076c:	f1c4 040c 	rsb	r4, r4, #12
   10770:	f1c4 0520 	rsb	r5, r4, #32
   10774:	fa00 f304 	lsl.w	r3, r0, r4
   10778:	fa20 f005 	lsr.w	r0, r0, r5
   1077c:	fa01 f204 	lsl.w	r2, r1, r4
   10780:	ea40 0002 	orr.w	r0, r0, r2
   10784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   10788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   1078c:	f141 0100 	adc.w	r1, r1, #0
   10790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   10794:	bf08      	it	eq
   10796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   1079a:	bd70      	pop	{r4, r5, r6, pc}
   1079c:	f1c4 0520 	rsb	r5, r4, #32
   107a0:	fa00 f205 	lsl.w	r2, r0, r5
   107a4:	ea4e 0e02 	orr.w	lr, lr, r2
   107a8:	fa20 f304 	lsr.w	r3, r0, r4
   107ac:	fa01 f205 	lsl.w	r2, r1, r5
   107b0:	ea43 0302 	orr.w	r3, r3, r2
   107b4:	fa21 f004 	lsr.w	r0, r1, r4
   107b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   107bc:	fa21 f204 	lsr.w	r2, r1, r4
   107c0:	ea20 0002 	bic.w	r0, r0, r2
   107c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   107c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   107cc:	bf08      	it	eq
   107ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   107d2:	bd70      	pop	{r4, r5, r6, pc}
   107d4:	f094 0f00 	teq	r4, #0
   107d8:	d10f      	bne.n	107fa <__aeabi_dmul+0x1c2>
   107da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   107de:	0040      	lsls	r0, r0, #1
   107e0:	eb41 0101 	adc.w	r1, r1, r1
   107e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   107e8:	bf08      	it	eq
   107ea:	3c01      	subeq	r4, #1
   107ec:	d0f7      	beq.n	107de <__aeabi_dmul+0x1a6>
   107ee:	ea41 0106 	orr.w	r1, r1, r6
   107f2:	f095 0f00 	teq	r5, #0
   107f6:	bf18      	it	ne
   107f8:	4770      	bxne	lr
   107fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   107fe:	0052      	lsls	r2, r2, #1
   10800:	eb43 0303 	adc.w	r3, r3, r3
   10804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   10808:	bf08      	it	eq
   1080a:	3d01      	subeq	r5, #1
   1080c:	d0f7      	beq.n	107fe <__aeabi_dmul+0x1c6>
   1080e:	ea43 0306 	orr.w	r3, r3, r6
   10812:	4770      	bx	lr
   10814:	ea94 0f0c 	teq	r4, ip
   10818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   1081c:	bf18      	it	ne
   1081e:	ea95 0f0c 	teqne	r5, ip
   10822:	d00c      	beq.n	1083e <__aeabi_dmul+0x206>
   10824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   10828:	bf18      	it	ne
   1082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   1082e:	d1d1      	bne.n	107d4 <__aeabi_dmul+0x19c>
   10830:	ea81 0103 	eor.w	r1, r1, r3
   10834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   10838:	f04f 0000 	mov.w	r0, #0
   1083c:	bd70      	pop	{r4, r5, r6, pc}
   1083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   10842:	bf06      	itte	eq
   10844:	4610      	moveq	r0, r2
   10846:	4619      	moveq	r1, r3
   10848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   1084c:	d019      	beq.n	10882 <__aeabi_dmul+0x24a>
   1084e:	ea94 0f0c 	teq	r4, ip
   10852:	d102      	bne.n	1085a <__aeabi_dmul+0x222>
   10854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   10858:	d113      	bne.n	10882 <__aeabi_dmul+0x24a>
   1085a:	ea95 0f0c 	teq	r5, ip
   1085e:	d105      	bne.n	1086c <__aeabi_dmul+0x234>
   10860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   10864:	bf1c      	itt	ne
   10866:	4610      	movne	r0, r2
   10868:	4619      	movne	r1, r3
   1086a:	d10a      	bne.n	10882 <__aeabi_dmul+0x24a>
   1086c:	ea81 0103 	eor.w	r1, r1, r3
   10870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   10874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   10878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   1087c:	f04f 0000 	mov.w	r0, #0
   10880:	bd70      	pop	{r4, r5, r6, pc}
   10882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   10886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   1088a:	bd70      	pop	{r4, r5, r6, pc}

0001088c <__aeabi_ddiv>:
   1088c:	b570      	push	{r4, r5, r6, lr}
   1088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   10892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   10896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   1089a:	bf1d      	ittte	ne
   1089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   108a0:	ea94 0f0c 	teqne	r4, ip
   108a4:	ea95 0f0c 	teqne	r5, ip
   108a8:	f000 f8a7 	bleq	109fa <__aeabi_ddiv+0x16e>
   108ac:	eba4 0405 	sub.w	r4, r4, r5
   108b0:	ea81 0e03 	eor.w	lr, r1, r3
   108b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   108b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
   108bc:	f000 8088 	beq.w	109d0 <__aeabi_ddiv+0x144>
   108c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   108c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   108c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   108cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   108d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
   108d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   108d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   108dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
   108e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   108e4:	429d      	cmp	r5, r3
   108e6:	bf08      	it	eq
   108e8:	4296      	cmpeq	r6, r2
   108ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   108ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
   108f2:	d202      	bcs.n	108fa <__aeabi_ddiv+0x6e>
   108f4:	085b      	lsrs	r3, r3, #1
   108f6:	ea4f 0232 	mov.w	r2, r2, rrx
   108fa:	1ab6      	subs	r6, r6, r2
   108fc:	eb65 0503 	sbc.w	r5, r5, r3
   10900:	085b      	lsrs	r3, r3, #1
   10902:	ea4f 0232 	mov.w	r2, r2, rrx
   10906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   1090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   1090e:	ebb6 0e02 	subs.w	lr, r6, r2
   10912:	eb75 0e03 	sbcs.w	lr, r5, r3
   10916:	bf22      	ittt	cs
   10918:	1ab6      	subcs	r6, r6, r2
   1091a:	4675      	movcs	r5, lr
   1091c:	ea40 000c 	orrcs.w	r0, r0, ip
   10920:	085b      	lsrs	r3, r3, #1
   10922:	ea4f 0232 	mov.w	r2, r2, rrx
   10926:	ebb6 0e02 	subs.w	lr, r6, r2
   1092a:	eb75 0e03 	sbcs.w	lr, r5, r3
   1092e:	bf22      	ittt	cs
   10930:	1ab6      	subcs	r6, r6, r2
   10932:	4675      	movcs	r5, lr
   10934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   10938:	085b      	lsrs	r3, r3, #1
   1093a:	ea4f 0232 	mov.w	r2, r2, rrx
   1093e:	ebb6 0e02 	subs.w	lr, r6, r2
   10942:	eb75 0e03 	sbcs.w	lr, r5, r3
   10946:	bf22      	ittt	cs
   10948:	1ab6      	subcs	r6, r6, r2
   1094a:	4675      	movcs	r5, lr
   1094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   10950:	085b      	lsrs	r3, r3, #1
   10952:	ea4f 0232 	mov.w	r2, r2, rrx
   10956:	ebb6 0e02 	subs.w	lr, r6, r2
   1095a:	eb75 0e03 	sbcs.w	lr, r5, r3
   1095e:	bf22      	ittt	cs
   10960:	1ab6      	subcs	r6, r6, r2
   10962:	4675      	movcs	r5, lr
   10964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   10968:	ea55 0e06 	orrs.w	lr, r5, r6
   1096c:	d018      	beq.n	109a0 <__aeabi_ddiv+0x114>
   1096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
   10972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   10976:	ea4f 1606 	mov.w	r6, r6, lsl #4
   1097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   1097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   10982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   10986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   1098a:	d1c0      	bne.n	1090e <__aeabi_ddiv+0x82>
   1098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   10990:	d10b      	bne.n	109aa <__aeabi_ddiv+0x11e>
   10992:	ea41 0100 	orr.w	r1, r1, r0
   10996:	f04f 0000 	mov.w	r0, #0
   1099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   1099e:	e7b6      	b.n	1090e <__aeabi_ddiv+0x82>
   109a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   109a4:	bf04      	itt	eq
   109a6:	4301      	orreq	r1, r0
   109a8:	2000      	moveq	r0, #0
   109aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   109ae:	bf88      	it	hi
   109b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   109b4:	f63f aeaf 	bhi.w	10716 <__aeabi_dmul+0xde>
   109b8:	ebb5 0c03 	subs.w	ip, r5, r3
   109bc:	bf04      	itt	eq
   109be:	ebb6 0c02 	subseq.w	ip, r6, r2
   109c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   109c6:	f150 0000 	adcs.w	r0, r0, #0
   109ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   109ce:	bd70      	pop	{r4, r5, r6, pc}
   109d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   109d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   109d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   109dc:	bfc2      	ittt	gt
   109de:	ebd4 050c 	rsbsgt	r5, r4, ip
   109e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   109e6:	bd70      	popgt	{r4, r5, r6, pc}
   109e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   109ec:	f04f 0e00 	mov.w	lr, #0
   109f0:	3c01      	subs	r4, #1
   109f2:	e690      	b.n	10716 <__aeabi_dmul+0xde>
   109f4:	ea45 0e06 	orr.w	lr, r5, r6
   109f8:	e68d      	b.n	10716 <__aeabi_dmul+0xde>
   109fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   109fe:	ea94 0f0c 	teq	r4, ip
   10a02:	bf08      	it	eq
   10a04:	ea95 0f0c 	teqeq	r5, ip
   10a08:	f43f af3b 	beq.w	10882 <__aeabi_dmul+0x24a>
   10a0c:	ea94 0f0c 	teq	r4, ip
   10a10:	d10a      	bne.n	10a28 <__aeabi_ddiv+0x19c>
   10a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   10a16:	f47f af34 	bne.w	10882 <__aeabi_dmul+0x24a>
   10a1a:	ea95 0f0c 	teq	r5, ip
   10a1e:	f47f af25 	bne.w	1086c <__aeabi_dmul+0x234>
   10a22:	4610      	mov	r0, r2
   10a24:	4619      	mov	r1, r3
   10a26:	e72c      	b.n	10882 <__aeabi_dmul+0x24a>
   10a28:	ea95 0f0c 	teq	r5, ip
   10a2c:	d106      	bne.n	10a3c <__aeabi_ddiv+0x1b0>
   10a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   10a32:	f43f aefd 	beq.w	10830 <__aeabi_dmul+0x1f8>
   10a36:	4610      	mov	r0, r2
   10a38:	4619      	mov	r1, r3
   10a3a:	e722      	b.n	10882 <__aeabi_dmul+0x24a>
   10a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   10a40:	bf18      	it	ne
   10a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   10a46:	f47f aec5 	bne.w	107d4 <__aeabi_dmul+0x19c>
   10a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   10a4e:	f47f af0d 	bne.w	1086c <__aeabi_dmul+0x234>
   10a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   10a56:	f47f aeeb 	bne.w	10830 <__aeabi_dmul+0x1f8>
   10a5a:	e712      	b.n	10882 <__aeabi_dmul+0x24a>

00010a5c <__gedf2>:
   10a5c:	f04f 3cff 	mov.w	ip, #4294967295
   10a60:	e006      	b.n	10a70 <__cmpdf2+0x4>
   10a62:	bf00      	nop

00010a64 <__ledf2>:
   10a64:	f04f 0c01 	mov.w	ip, #1
   10a68:	e002      	b.n	10a70 <__cmpdf2+0x4>
   10a6a:	bf00      	nop

00010a6c <__cmpdf2>:
   10a6c:	f04f 0c01 	mov.w	ip, #1
   10a70:	f84d cd04 	str.w	ip, [sp, #-4]!
   10a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   10a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   10a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   10a80:	bf18      	it	ne
   10a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   10a86:	d01b      	beq.n	10ac0 <__cmpdf2+0x54>
   10a88:	b001      	add	sp, #4
   10a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   10a8e:	bf0c      	ite	eq
   10a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   10a94:	ea91 0f03 	teqne	r1, r3
   10a98:	bf02      	ittt	eq
   10a9a:	ea90 0f02 	teqeq	r0, r2
   10a9e:	2000      	moveq	r0, #0
   10aa0:	4770      	bxeq	lr
   10aa2:	f110 0f00 	cmn.w	r0, #0
   10aa6:	ea91 0f03 	teq	r1, r3
   10aaa:	bf58      	it	pl
   10aac:	4299      	cmppl	r1, r3
   10aae:	bf08      	it	eq
   10ab0:	4290      	cmpeq	r0, r2
   10ab2:	bf2c      	ite	cs
   10ab4:	17d8      	asrcs	r0, r3, #31
   10ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   10aba:	f040 0001 	orr.w	r0, r0, #1
   10abe:	4770      	bx	lr
   10ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   10ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   10ac8:	d102      	bne.n	10ad0 <__cmpdf2+0x64>
   10aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   10ace:	d107      	bne.n	10ae0 <__cmpdf2+0x74>
   10ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   10ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   10ad8:	d1d6      	bne.n	10a88 <__cmpdf2+0x1c>
   10ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   10ade:	d0d3      	beq.n	10a88 <__cmpdf2+0x1c>
   10ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
   10ae4:	4770      	bx	lr
   10ae6:	bf00      	nop

00010ae8 <__aeabi_cdrcmple>:
   10ae8:	4684      	mov	ip, r0
   10aea:	4610      	mov	r0, r2
   10aec:	4662      	mov	r2, ip
   10aee:	468c      	mov	ip, r1
   10af0:	4619      	mov	r1, r3
   10af2:	4663      	mov	r3, ip
   10af4:	e000      	b.n	10af8 <__aeabi_cdcmpeq>
   10af6:	bf00      	nop

00010af8 <__aeabi_cdcmpeq>:
   10af8:	b501      	push	{r0, lr}
   10afa:	f7ff ffb7 	bl	10a6c <__cmpdf2>
   10afe:	2800      	cmp	r0, #0
   10b00:	bf48      	it	mi
   10b02:	f110 0f00 	cmnmi.w	r0, #0
   10b06:	bd01      	pop	{r0, pc}

00010b08 <__aeabi_dcmpeq>:
   10b08:	f84d ed08 	str.w	lr, [sp, #-8]!
   10b0c:	f7ff fff4 	bl	10af8 <__aeabi_cdcmpeq>
   10b10:	bf0c      	ite	eq
   10b12:	2001      	moveq	r0, #1
   10b14:	2000      	movne	r0, #0
   10b16:	f85d fb08 	ldr.w	pc, [sp], #8
   10b1a:	bf00      	nop

00010b1c <__aeabi_dcmplt>:
   10b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
   10b20:	f7ff ffea 	bl	10af8 <__aeabi_cdcmpeq>
   10b24:	bf34      	ite	cc
   10b26:	2001      	movcc	r0, #1
   10b28:	2000      	movcs	r0, #0
   10b2a:	f85d fb08 	ldr.w	pc, [sp], #8
   10b2e:	bf00      	nop

00010b30 <__aeabi_dcmple>:
   10b30:	f84d ed08 	str.w	lr, [sp, #-8]!
   10b34:	f7ff ffe0 	bl	10af8 <__aeabi_cdcmpeq>
   10b38:	bf94      	ite	ls
   10b3a:	2001      	movls	r0, #1
   10b3c:	2000      	movhi	r0, #0
   10b3e:	f85d fb08 	ldr.w	pc, [sp], #8
   10b42:	bf00      	nop

00010b44 <__aeabi_dcmpge>:
   10b44:	f84d ed08 	str.w	lr, [sp, #-8]!
   10b48:	f7ff ffce 	bl	10ae8 <__aeabi_cdrcmple>
   10b4c:	bf94      	ite	ls
   10b4e:	2001      	movls	r0, #1
   10b50:	2000      	movhi	r0, #0
   10b52:	f85d fb08 	ldr.w	pc, [sp], #8
   10b56:	bf00      	nop

00010b58 <__aeabi_dcmpgt>:
   10b58:	f84d ed08 	str.w	lr, [sp, #-8]!
   10b5c:	f7ff ffc4 	bl	10ae8 <__aeabi_cdrcmple>
   10b60:	bf34      	ite	cc
   10b62:	2001      	movcc	r0, #1
   10b64:	2000      	movcs	r0, #0
   10b66:	f85d fb08 	ldr.w	pc, [sp], #8
   10b6a:	bf00      	nop

00010b6c <__aeabi_d2f>:
   10b6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
   10b70:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   10b74:	bf24      	itt	cs
   10b76:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   10b7a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   10b7e:	d90d      	bls.n	10b9c <__aeabi_d2f+0x30>
   10b80:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   10b84:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   10b88:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   10b8c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   10b90:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   10b94:	bf08      	it	eq
   10b96:	f020 0001 	biceq.w	r0, r0, #1
   10b9a:	4770      	bx	lr
   10b9c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   10ba0:	d121      	bne.n	10be6 <__aeabi_d2f+0x7a>
   10ba2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   10ba6:	bfbc      	itt	lt
   10ba8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   10bac:	4770      	bxlt	lr
   10bae:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   10bb2:	ea4f 5252 	mov.w	r2, r2, lsr #21
   10bb6:	f1c2 0218 	rsb	r2, r2, #24
   10bba:	f1c2 0c20 	rsb	ip, r2, #32
   10bbe:	fa10 f30c 	lsls.w	r3, r0, ip
   10bc2:	fa20 f002 	lsr.w	r0, r0, r2
   10bc6:	bf18      	it	ne
   10bc8:	f040 0001 	orrne.w	r0, r0, #1
   10bcc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   10bd0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   10bd4:	fa03 fc0c 	lsl.w	ip, r3, ip
   10bd8:	ea40 000c 	orr.w	r0, r0, ip
   10bdc:	fa23 f302 	lsr.w	r3, r3, r2
   10be0:	ea4f 0343 	mov.w	r3, r3, lsl #1
   10be4:	e7cc      	b.n	10b80 <__aeabi_d2f+0x14>
   10be6:	ea7f 5362 	mvns.w	r3, r2, asr #21
   10bea:	d107      	bne.n	10bfc <__aeabi_d2f+0x90>
   10bec:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   10bf0:	bf1e      	ittt	ne
   10bf2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   10bf6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   10bfa:	4770      	bxne	lr
   10bfc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   10c00:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   10c04:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   10c08:	4770      	bx	lr
   10c0a:	bf00      	nop

00010c0c <__aeabi_frsub>:
   10c0c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   10c10:	e002      	b.n	10c18 <__addsf3>
   10c12:	bf00      	nop

00010c14 <__aeabi_fsub>:
   10c14:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

00010c18 <__addsf3>:
   10c18:	0042      	lsls	r2, r0, #1
   10c1a:	bf1f      	itttt	ne
   10c1c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
   10c20:	ea92 0f03 	teqne	r2, r3
   10c24:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
   10c28:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   10c2c:	d06a      	beq.n	10d04 <__addsf3+0xec>
   10c2e:	ea4f 6212 	mov.w	r2, r2, lsr #24
   10c32:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
   10c36:	bfc1      	itttt	gt
   10c38:	18d2      	addgt	r2, r2, r3
   10c3a:	4041      	eorgt	r1, r0
   10c3c:	4048      	eorgt	r0, r1
   10c3e:	4041      	eorgt	r1, r0
   10c40:	bfb8      	it	lt
   10c42:	425b      	neglt	r3, r3
   10c44:	2b19      	cmp	r3, #25
   10c46:	bf88      	it	hi
   10c48:	4770      	bxhi	lr
   10c4a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   10c4e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   10c52:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   10c56:	bf18      	it	ne
   10c58:	4240      	negne	r0, r0
   10c5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   10c5e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   10c62:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   10c66:	bf18      	it	ne
   10c68:	4249      	negne	r1, r1
   10c6a:	ea92 0f03 	teq	r2, r3
   10c6e:	d03f      	beq.n	10cf0 <__addsf3+0xd8>
   10c70:	f1a2 0201 	sub.w	r2, r2, #1
   10c74:	fa41 fc03 	asr.w	ip, r1, r3
   10c78:	eb10 000c 	adds.w	r0, r0, ip
   10c7c:	f1c3 0320 	rsb	r3, r3, #32
   10c80:	fa01 f103 	lsl.w	r1, r1, r3
   10c84:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   10c88:	d502      	bpl.n	10c90 <__addsf3+0x78>
   10c8a:	4249      	negs	r1, r1
   10c8c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
   10c90:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   10c94:	d313      	bcc.n	10cbe <__addsf3+0xa6>
   10c96:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   10c9a:	d306      	bcc.n	10caa <__addsf3+0x92>
   10c9c:	0840      	lsrs	r0, r0, #1
   10c9e:	ea4f 0131 	mov.w	r1, r1, rrx
   10ca2:	f102 0201 	add.w	r2, r2, #1
   10ca6:	2afe      	cmp	r2, #254	; 0xfe
   10ca8:	d251      	bcs.n	10d4e <__addsf3+0x136>
   10caa:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   10cae:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   10cb2:	bf08      	it	eq
   10cb4:	f020 0001 	biceq.w	r0, r0, #1
   10cb8:	ea40 0003 	orr.w	r0, r0, r3
   10cbc:	4770      	bx	lr
   10cbe:	0049      	lsls	r1, r1, #1
   10cc0:	eb40 0000 	adc.w	r0, r0, r0
   10cc4:	3a01      	subs	r2, #1
   10cc6:	bf28      	it	cs
   10cc8:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
   10ccc:	d2ed      	bcs.n	10caa <__addsf3+0x92>
   10cce:	fab0 fc80 	clz	ip, r0
   10cd2:	f1ac 0c08 	sub.w	ip, ip, #8
   10cd6:	ebb2 020c 	subs.w	r2, r2, ip
   10cda:	fa00 f00c 	lsl.w	r0, r0, ip
   10cde:	bfaa      	itet	ge
   10ce0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
   10ce4:	4252      	neglt	r2, r2
   10ce6:	4318      	orrge	r0, r3
   10ce8:	bfbc      	itt	lt
   10cea:	40d0      	lsrlt	r0, r2
   10cec:	4318      	orrlt	r0, r3
   10cee:	4770      	bx	lr
   10cf0:	f092 0f00 	teq	r2, #0
   10cf4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
   10cf8:	bf06      	itte	eq
   10cfa:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
   10cfe:	3201      	addeq	r2, #1
   10d00:	3b01      	subne	r3, #1
   10d02:	e7b5      	b.n	10c70 <__addsf3+0x58>
   10d04:	ea4f 0341 	mov.w	r3, r1, lsl #1
   10d08:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   10d0c:	bf18      	it	ne
   10d0e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   10d12:	d021      	beq.n	10d58 <__addsf3+0x140>
   10d14:	ea92 0f03 	teq	r2, r3
   10d18:	d004      	beq.n	10d24 <__addsf3+0x10c>
   10d1a:	f092 0f00 	teq	r2, #0
   10d1e:	bf08      	it	eq
   10d20:	4608      	moveq	r0, r1
   10d22:	4770      	bx	lr
   10d24:	ea90 0f01 	teq	r0, r1
   10d28:	bf1c      	itt	ne
   10d2a:	2000      	movne	r0, #0
   10d2c:	4770      	bxne	lr
   10d2e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
   10d32:	d104      	bne.n	10d3e <__addsf3+0x126>
   10d34:	0040      	lsls	r0, r0, #1
   10d36:	bf28      	it	cs
   10d38:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
   10d3c:	4770      	bx	lr
   10d3e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
   10d42:	bf3c      	itt	cc
   10d44:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
   10d48:	4770      	bxcc	lr
   10d4a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   10d4e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
   10d52:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   10d56:	4770      	bx	lr
   10d58:	ea7f 6222 	mvns.w	r2, r2, asr #24
   10d5c:	bf16      	itet	ne
   10d5e:	4608      	movne	r0, r1
   10d60:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
   10d64:	4601      	movne	r1, r0
   10d66:	0242      	lsls	r2, r0, #9
   10d68:	bf06      	itte	eq
   10d6a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
   10d6e:	ea90 0f01 	teqeq	r0, r1
   10d72:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
   10d76:	4770      	bx	lr

00010d78 <__aeabi_ui2f>:
   10d78:	f04f 0300 	mov.w	r3, #0
   10d7c:	e004      	b.n	10d88 <__aeabi_i2f+0x8>
   10d7e:	bf00      	nop

00010d80 <__aeabi_i2f>:
   10d80:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
   10d84:	bf48      	it	mi
   10d86:	4240      	negmi	r0, r0
   10d88:	ea5f 0c00 	movs.w	ip, r0
   10d8c:	bf08      	it	eq
   10d8e:	4770      	bxeq	lr
   10d90:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
   10d94:	4601      	mov	r1, r0
   10d96:	f04f 0000 	mov.w	r0, #0
   10d9a:	e01c      	b.n	10dd6 <__aeabi_l2f+0x2a>

00010d9c <__aeabi_ul2f>:
   10d9c:	ea50 0201 	orrs.w	r2, r0, r1
   10da0:	bf08      	it	eq
   10da2:	4770      	bxeq	lr
   10da4:	f04f 0300 	mov.w	r3, #0
   10da8:	e00a      	b.n	10dc0 <__aeabi_l2f+0x14>
   10daa:	bf00      	nop

00010dac <__aeabi_l2f>:
   10dac:	ea50 0201 	orrs.w	r2, r0, r1
   10db0:	bf08      	it	eq
   10db2:	4770      	bxeq	lr
   10db4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
   10db8:	d502      	bpl.n	10dc0 <__aeabi_l2f+0x14>
   10dba:	4240      	negs	r0, r0
   10dbc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   10dc0:	ea5f 0c01 	movs.w	ip, r1
   10dc4:	bf02      	ittt	eq
   10dc6:	4684      	moveq	ip, r0
   10dc8:	4601      	moveq	r1, r0
   10dca:	2000      	moveq	r0, #0
   10dcc:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
   10dd0:	bf08      	it	eq
   10dd2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
   10dd6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   10dda:	fabc f28c 	clz	r2, ip
   10dde:	3a08      	subs	r2, #8
   10de0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
   10de4:	db10      	blt.n	10e08 <__aeabi_l2f+0x5c>
   10de6:	fa01 fc02 	lsl.w	ip, r1, r2
   10dea:	4463      	add	r3, ip
   10dec:	fa00 fc02 	lsl.w	ip, r0, r2
   10df0:	f1c2 0220 	rsb	r2, r2, #32
   10df4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   10df8:	fa20 f202 	lsr.w	r2, r0, r2
   10dfc:	eb43 0002 	adc.w	r0, r3, r2
   10e00:	bf08      	it	eq
   10e02:	f020 0001 	biceq.w	r0, r0, #1
   10e06:	4770      	bx	lr
   10e08:	f102 0220 	add.w	r2, r2, #32
   10e0c:	fa01 fc02 	lsl.w	ip, r1, r2
   10e10:	f1c2 0220 	rsb	r2, r2, #32
   10e14:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
   10e18:	fa21 f202 	lsr.w	r2, r1, r2
   10e1c:	eb43 0002 	adc.w	r0, r3, r2
   10e20:	bf08      	it	eq
   10e22:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   10e26:	4770      	bx	lr

00010e28 <__aeabi_uldivmod>:
   10e28:	b953      	cbnz	r3, 10e40 <__aeabi_uldivmod+0x18>
   10e2a:	b94a      	cbnz	r2, 10e40 <__aeabi_uldivmod+0x18>
   10e2c:	2900      	cmp	r1, #0
   10e2e:	bf08      	it	eq
   10e30:	2800      	cmpeq	r0, #0
   10e32:	bf1c      	itt	ne
   10e34:	f04f 31ff 	movne.w	r1, #4294967295
   10e38:	f04f 30ff 	movne.w	r0, #4294967295
   10e3c:	f000 b80c 	b.w	10e58 <__aeabi_idiv0>
   10e40:	f1ad 0c08 	sub.w	ip, sp, #8
   10e44:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   10e48:	f000 f846 	bl	10ed8 <__udivmoddi4>
   10e4c:	f8dd e004 	ldr.w	lr, [sp, #4]
   10e50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   10e54:	b004      	add	sp, #16
   10e56:	4770      	bx	lr

00010e58 <__aeabi_idiv0>:
   10e58:	4770      	bx	lr
   10e5a:	bf00      	nop

00010e5c <__aeabi_dcmpun>:
   10e5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   10e60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   10e64:	d102      	bne.n	10e6c <__aeabi_dcmpun+0x10>
   10e66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   10e6a:	d10a      	bne.n	10e82 <__aeabi_dcmpun+0x26>
   10e6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   10e70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   10e74:	d102      	bne.n	10e7c <__aeabi_dcmpun+0x20>
   10e76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   10e7a:	d102      	bne.n	10e82 <__aeabi_dcmpun+0x26>
   10e7c:	f04f 0000 	mov.w	r0, #0
   10e80:	4770      	bx	lr
   10e82:	f04f 0001 	mov.w	r0, #1
   10e86:	4770      	bx	lr

00010e88 <__aeabi_d2iz>:
   10e88:	ea4f 0241 	mov.w	r2, r1, lsl #1
   10e8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   10e90:	d215      	bcs.n	10ebe <__aeabi_d2iz+0x36>
   10e92:	d511      	bpl.n	10eb8 <__aeabi_d2iz+0x30>
   10e94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   10e98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   10e9c:	d912      	bls.n	10ec4 <__aeabi_d2iz+0x3c>
   10e9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   10ea2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   10ea6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   10eaa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   10eae:	fa23 f002 	lsr.w	r0, r3, r2
   10eb2:	bf18      	it	ne
   10eb4:	4240      	negne	r0, r0
   10eb6:	4770      	bx	lr
   10eb8:	f04f 0000 	mov.w	r0, #0
   10ebc:	4770      	bx	lr
   10ebe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   10ec2:	d105      	bne.n	10ed0 <__aeabi_d2iz+0x48>
   10ec4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   10ec8:	bf08      	it	eq
   10eca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   10ece:	4770      	bx	lr
   10ed0:	f04f 0000 	mov.w	r0, #0
   10ed4:	4770      	bx	lr
   10ed6:	bf00      	nop

00010ed8 <__udivmoddi4>:
   10ed8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   10edc:	4686      	mov	lr, r0
   10ede:	468c      	mov	ip, r1
   10ee0:	4608      	mov	r0, r1
   10ee2:	9e08      	ldr	r6, [sp, #32]
   10ee4:	4615      	mov	r5, r2
   10ee6:	4674      	mov	r4, lr
   10ee8:	4619      	mov	r1, r3
   10eea:	2b00      	cmp	r3, #0
   10eec:	f040 80c1 	bne.w	11072 <__udivmoddi4+0x19a>
   10ef0:	4285      	cmp	r5, r0
   10ef2:	fab2 f282 	clz	r2, r2
   10ef6:	d945      	bls.n	10f84 <__udivmoddi4+0xac>
   10ef8:	b14a      	cbz	r2, 10f0e <__udivmoddi4+0x36>
   10efa:	f1c2 0320 	rsb	r3, r2, #32
   10efe:	fa00 fc02 	lsl.w	ip, r0, r2
   10f02:	4095      	lsls	r5, r2
   10f04:	4094      	lsls	r4, r2
   10f06:	fa2e f303 	lsr.w	r3, lr, r3
   10f0a:	ea43 0c0c 	orr.w	ip, r3, ip
   10f0e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   10f12:	b2a8      	uxth	r0, r5
   10f14:	0c23      	lsrs	r3, r4, #16
   10f16:	fbbc f8fe 	udiv	r8, ip, lr
   10f1a:	fb0e cc18 	mls	ip, lr, r8, ip
   10f1e:	fb08 f900 	mul.w	r9, r8, r0
   10f22:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
   10f26:	4599      	cmp	r9, r3
   10f28:	d928      	bls.n	10f7c <__udivmoddi4+0xa4>
   10f2a:	18eb      	adds	r3, r5, r3
   10f2c:	f108 37ff 	add.w	r7, r8, #4294967295
   10f30:	d204      	bcs.n	10f3c <__udivmoddi4+0x64>
   10f32:	4599      	cmp	r9, r3
   10f34:	d902      	bls.n	10f3c <__udivmoddi4+0x64>
   10f36:	f1a8 0702 	sub.w	r7, r8, #2
   10f3a:	442b      	add	r3, r5
   10f3c:	eba3 0309 	sub.w	r3, r3, r9
   10f40:	b2a4      	uxth	r4, r4
   10f42:	fbb3 fcfe 	udiv	ip, r3, lr
   10f46:	fb0e 331c 	mls	r3, lr, ip, r3
   10f4a:	fb0c f000 	mul.w	r0, ip, r0
   10f4e:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   10f52:	42a0      	cmp	r0, r4
   10f54:	d914      	bls.n	10f80 <__udivmoddi4+0xa8>
   10f56:	192c      	adds	r4, r5, r4
   10f58:	f10c 33ff 	add.w	r3, ip, #4294967295
   10f5c:	d204      	bcs.n	10f68 <__udivmoddi4+0x90>
   10f5e:	42a0      	cmp	r0, r4
   10f60:	d902      	bls.n	10f68 <__udivmoddi4+0x90>
   10f62:	f1ac 0302 	sub.w	r3, ip, #2
   10f66:	442c      	add	r4, r5
   10f68:	1a24      	subs	r4, r4, r0
   10f6a:	ea43 4007 	orr.w	r0, r3, r7, lsl #16
   10f6e:	b11e      	cbz	r6, 10f78 <__udivmoddi4+0xa0>
   10f70:	40d4      	lsrs	r4, r2
   10f72:	2300      	movs	r3, #0
   10f74:	6034      	str	r4, [r6, #0]
   10f76:	6073      	str	r3, [r6, #4]
   10f78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   10f7c:	4647      	mov	r7, r8
   10f7e:	e7dd      	b.n	10f3c <__udivmoddi4+0x64>
   10f80:	4663      	mov	r3, ip
   10f82:	e7f1      	b.n	10f68 <__udivmoddi4+0x90>
   10f84:	bb92      	cbnz	r2, 10fec <__udivmoddi4+0x114>
   10f86:	1b43      	subs	r3, r0, r5
   10f88:	2101      	movs	r1, #1
   10f8a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   10f8e:	b2af      	uxth	r7, r5
   10f90:	0c20      	lsrs	r0, r4, #16
   10f92:	fbb3 fcfe 	udiv	ip, r3, lr
   10f96:	fb0e 331c 	mls	r3, lr, ip, r3
   10f9a:	fb0c f807 	mul.w	r8, ip, r7
   10f9e:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
   10fa2:	4598      	cmp	r8, r3
   10fa4:	d961      	bls.n	1106a <__udivmoddi4+0x192>
   10fa6:	18eb      	adds	r3, r5, r3
   10fa8:	f10c 30ff 	add.w	r0, ip, #4294967295
   10fac:	d204      	bcs.n	10fb8 <__udivmoddi4+0xe0>
   10fae:	4598      	cmp	r8, r3
   10fb0:	d902      	bls.n	10fb8 <__udivmoddi4+0xe0>
   10fb2:	f1ac 0002 	sub.w	r0, ip, #2
   10fb6:	442b      	add	r3, r5
   10fb8:	eba3 0308 	sub.w	r3, r3, r8
   10fbc:	b2a4      	uxth	r4, r4
   10fbe:	fbb3 fcfe 	udiv	ip, r3, lr
   10fc2:	fb0e 331c 	mls	r3, lr, ip, r3
   10fc6:	fb0c f707 	mul.w	r7, ip, r7
   10fca:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   10fce:	42a7      	cmp	r7, r4
   10fd0:	d94d      	bls.n	1106e <__udivmoddi4+0x196>
   10fd2:	192c      	adds	r4, r5, r4
   10fd4:	f10c 33ff 	add.w	r3, ip, #4294967295
   10fd8:	d204      	bcs.n	10fe4 <__udivmoddi4+0x10c>
   10fda:	42a7      	cmp	r7, r4
   10fdc:	d902      	bls.n	10fe4 <__udivmoddi4+0x10c>
   10fde:	f1ac 0302 	sub.w	r3, ip, #2
   10fe2:	442c      	add	r4, r5
   10fe4:	1be4      	subs	r4, r4, r7
   10fe6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   10fea:	e7c0      	b.n	10f6e <__udivmoddi4+0x96>
   10fec:	f1c2 0320 	rsb	r3, r2, #32
   10ff0:	4095      	lsls	r5, r2
   10ff2:	4094      	lsls	r4, r2
   10ff4:	fa20 f103 	lsr.w	r1, r0, r3
   10ff8:	fa2e f303 	lsr.w	r3, lr, r3
   10ffc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   11000:	4090      	lsls	r0, r2
   11002:	b2af      	uxth	r7, r5
   11004:	4303      	orrs	r3, r0
   11006:	fbb1 fcfe 	udiv	ip, r1, lr
   1100a:	fb0e 101c 	mls	r0, lr, ip, r1
   1100e:	0c19      	lsrs	r1, r3, #16
   11010:	fb0c f807 	mul.w	r8, ip, r7
   11014:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
   11018:	4588      	cmp	r8, r1
   1101a:	d922      	bls.n	11062 <__udivmoddi4+0x18a>
   1101c:	1869      	adds	r1, r5, r1
   1101e:	f10c 30ff 	add.w	r0, ip, #4294967295
   11022:	d204      	bcs.n	1102e <__udivmoddi4+0x156>
   11024:	4588      	cmp	r8, r1
   11026:	d902      	bls.n	1102e <__udivmoddi4+0x156>
   11028:	f1ac 0002 	sub.w	r0, ip, #2
   1102c:	4429      	add	r1, r5
   1102e:	eba1 0108 	sub.w	r1, r1, r8
   11032:	b29b      	uxth	r3, r3
   11034:	fbb1 fcfe 	udiv	ip, r1, lr
   11038:	fb0e 111c 	mls	r1, lr, ip, r1
   1103c:	fb0c f707 	mul.w	r7, ip, r7
   11040:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   11044:	429f      	cmp	r7, r3
   11046:	d90e      	bls.n	11066 <__udivmoddi4+0x18e>
   11048:	18eb      	adds	r3, r5, r3
   1104a:	f10c 31ff 	add.w	r1, ip, #4294967295
   1104e:	d204      	bcs.n	1105a <__udivmoddi4+0x182>
   11050:	429f      	cmp	r7, r3
   11052:	d902      	bls.n	1105a <__udivmoddi4+0x182>
   11054:	f1ac 0102 	sub.w	r1, ip, #2
   11058:	442b      	add	r3, r5
   1105a:	1bdb      	subs	r3, r3, r7
   1105c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
   11060:	e793      	b.n	10f8a <__udivmoddi4+0xb2>
   11062:	4660      	mov	r0, ip
   11064:	e7e3      	b.n	1102e <__udivmoddi4+0x156>
   11066:	4661      	mov	r1, ip
   11068:	e7f7      	b.n	1105a <__udivmoddi4+0x182>
   1106a:	4660      	mov	r0, ip
   1106c:	e7a4      	b.n	10fb8 <__udivmoddi4+0xe0>
   1106e:	4663      	mov	r3, ip
   11070:	e7b8      	b.n	10fe4 <__udivmoddi4+0x10c>
   11072:	4283      	cmp	r3, r0
   11074:	d906      	bls.n	11084 <__udivmoddi4+0x1ac>
   11076:	b916      	cbnz	r6, 1107e <__udivmoddi4+0x1a6>
   11078:	2100      	movs	r1, #0
   1107a:	4608      	mov	r0, r1
   1107c:	e77c      	b.n	10f78 <__udivmoddi4+0xa0>
   1107e:	e9c6 e000 	strd	lr, r0, [r6]
   11082:	e7f9      	b.n	11078 <__udivmoddi4+0x1a0>
   11084:	fab3 f783 	clz	r7, r3
   11088:	b98f      	cbnz	r7, 110ae <__udivmoddi4+0x1d6>
   1108a:	4283      	cmp	r3, r0
   1108c:	d301      	bcc.n	11092 <__udivmoddi4+0x1ba>
   1108e:	4572      	cmp	r2, lr
   11090:	d808      	bhi.n	110a4 <__udivmoddi4+0x1cc>
   11092:	ebbe 0402 	subs.w	r4, lr, r2
   11096:	eb60 0303 	sbc.w	r3, r0, r3
   1109a:	2001      	movs	r0, #1
   1109c:	469c      	mov	ip, r3
   1109e:	b91e      	cbnz	r6, 110a8 <__udivmoddi4+0x1d0>
   110a0:	2100      	movs	r1, #0
   110a2:	e769      	b.n	10f78 <__udivmoddi4+0xa0>
   110a4:	4638      	mov	r0, r7
   110a6:	e7fa      	b.n	1109e <__udivmoddi4+0x1c6>
   110a8:	e9c6 4c00 	strd	r4, ip, [r6]
   110ac:	e7f8      	b.n	110a0 <__udivmoddi4+0x1c8>
   110ae:	f1c7 0c20 	rsb	ip, r7, #32
   110b2:	40bb      	lsls	r3, r7
   110b4:	fa0e f507 	lsl.w	r5, lr, r7
   110b8:	fa22 f40c 	lsr.w	r4, r2, ip
   110bc:	fa2e f10c 	lsr.w	r1, lr, ip
   110c0:	40ba      	lsls	r2, r7
   110c2:	431c      	orrs	r4, r3
   110c4:	fa20 f30c 	lsr.w	r3, r0, ip
   110c8:	40b8      	lsls	r0, r7
   110ca:	ea4f 4914 	mov.w	r9, r4, lsr #16
   110ce:	4301      	orrs	r1, r0
   110d0:	fa1f fe84 	uxth.w	lr, r4
   110d4:	fbb3 f8f9 	udiv	r8, r3, r9
   110d8:	fb09 3018 	mls	r0, r9, r8, r3
   110dc:	0c0b      	lsrs	r3, r1, #16
   110de:	fb08 fa0e 	mul.w	sl, r8, lr
   110e2:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
   110e6:	459a      	cmp	sl, r3
   110e8:	d940      	bls.n	1116c <__udivmoddi4+0x294>
   110ea:	18e3      	adds	r3, r4, r3
   110ec:	f108 30ff 	add.w	r0, r8, #4294967295
   110f0:	d204      	bcs.n	110fc <__udivmoddi4+0x224>
   110f2:	459a      	cmp	sl, r3
   110f4:	d902      	bls.n	110fc <__udivmoddi4+0x224>
   110f6:	f1a8 0002 	sub.w	r0, r8, #2
   110fa:	4423      	add	r3, r4
   110fc:	eba3 030a 	sub.w	r3, r3, sl
   11100:	b289      	uxth	r1, r1
   11102:	fbb3 f8f9 	udiv	r8, r3, r9
   11106:	fb09 3318 	mls	r3, r9, r8, r3
   1110a:	fb08 fe0e 	mul.w	lr, r8, lr
   1110e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   11112:	458e      	cmp	lr, r1
   11114:	d92c      	bls.n	11170 <__udivmoddi4+0x298>
   11116:	1861      	adds	r1, r4, r1
   11118:	f108 33ff 	add.w	r3, r8, #4294967295
   1111c:	d204      	bcs.n	11128 <__udivmoddi4+0x250>
   1111e:	458e      	cmp	lr, r1
   11120:	d902      	bls.n	11128 <__udivmoddi4+0x250>
   11122:	f1a8 0302 	sub.w	r3, r8, #2
   11126:	4421      	add	r1, r4
   11128:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   1112c:	eba1 010e 	sub.w	r1, r1, lr
   11130:	fba0 9802 	umull	r9, r8, r0, r2
   11134:	4541      	cmp	r1, r8
   11136:	46ce      	mov	lr, r9
   11138:	4643      	mov	r3, r8
   1113a:	d302      	bcc.n	11142 <__udivmoddi4+0x26a>
   1113c:	d106      	bne.n	1114c <__udivmoddi4+0x274>
   1113e:	454d      	cmp	r5, r9
   11140:	d204      	bcs.n	1114c <__udivmoddi4+0x274>
   11142:	3801      	subs	r0, #1
   11144:	ebb9 0e02 	subs.w	lr, r9, r2
   11148:	eb68 0304 	sbc.w	r3, r8, r4
   1114c:	2e00      	cmp	r6, #0
   1114e:	d0a7      	beq.n	110a0 <__udivmoddi4+0x1c8>
   11150:	ebb5 020e 	subs.w	r2, r5, lr
   11154:	eb61 0103 	sbc.w	r1, r1, r3
   11158:	fa01 fc0c 	lsl.w	ip, r1, ip
   1115c:	fa22 f307 	lsr.w	r3, r2, r7
   11160:	40f9      	lsrs	r1, r7
   11162:	ea4c 0303 	orr.w	r3, ip, r3
   11166:	e9c6 3100 	strd	r3, r1, [r6]
   1116a:	e799      	b.n	110a0 <__udivmoddi4+0x1c8>
   1116c:	4640      	mov	r0, r8
   1116e:	e7c5      	b.n	110fc <__udivmoddi4+0x224>
   11170:	4643      	mov	r3, r8
   11172:	e7d9      	b.n	11128 <__udivmoddi4+0x250>

00011174 <strlen>:
   11174:	4603      	mov	r3, r0
   11176:	f813 2b01 	ldrb.w	r2, [r3], #1
   1117a:	2a00      	cmp	r2, #0
   1117c:	d1fb      	bne.n	11176 <strlen+0x2>
   1117e:	1a18      	subs	r0, r3, r0
   11180:	3801      	subs	r0, #1
   11182:	4770      	bx	lr
   11184:	0000      	movs	r0, r0
	...

00011188 <mlx90632_calc_temp_object_iteration>:

    return obj_temp;
}


double mlx90632_calc_temp_object_iteration(double Sto, double emi, double Fa, double Ha, double Ga, double Fb, double TAdut, double TAk4, double Hb){
   11188:	e92d 4df0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl, fp, lr}
   1118c:	b082      	sub	sp, #8
   1118e:	4682      	mov	sl, r0
   11190:	468b      	mov	fp, r1
   11192:	e9cd 2300 	strd	r2, r3, [sp]
    double TA0 = 25;
    double TOdut = 25;
    double first_sqrt;
    int i;

    for (i = 0; i < 3; ++i)
   11196:	f04f 0800 	mov.w	r8, #0
    double TOdut = 25;
   1119a:	2400      	movs	r4, #0
   1119c:	4d2e      	ldr	r5, [pc, #184]	; (11258 <mlx90632_calc_temp_object_iteration+0xd0>)
    for (i = 0; i < 3; ++i)
   1119e:	e04c      	b.n	1123a <mlx90632_calc_temp_object_iteration+0xb2>
    {
        first_sqrt = sqrt ((Sto / (emi * Fa * Ha * (1 + Ga * (TOdut - TO0) + Fb * (TAdut - TA0)))) + TAk4);
   111a0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   111a4:	e9dd 0100 	ldrd	r0, r1, [sp]
   111a8:	f7ff fa46 	bl	10638 <__aeabi_dmul>
   111ac:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
   111b0:	f7ff fa42 	bl	10638 <__aeabi_dmul>
   111b4:	4606      	mov	r6, r0
   111b6:	460f      	mov	r7, r1
   111b8:	2200      	movs	r2, #0
   111ba:	4b27      	ldr	r3, [pc, #156]	; (11258 <mlx90632_calc_temp_object_iteration+0xd0>)
   111bc:	4620      	mov	r0, r4
   111be:	4629      	mov	r1, r5
   111c0:	f7ff f882 	bl	102c8 <__aeabi_dsub>
   111c4:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
   111c8:	f7ff fa36 	bl	10638 <__aeabi_dmul>
   111cc:	2200      	movs	r2, #0
   111ce:	4b23      	ldr	r3, [pc, #140]	; (1125c <mlx90632_calc_temp_object_iteration+0xd4>)
   111d0:	f7ff f87c 	bl	102cc <__adddf3>
   111d4:	4604      	mov	r4, r0
   111d6:	460d      	mov	r5, r1
   111d8:	2200      	movs	r2, #0
   111da:	4b1f      	ldr	r3, [pc, #124]	; (11258 <mlx90632_calc_temp_object_iteration+0xd0>)
   111dc:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
   111e0:	f7ff f872 	bl	102c8 <__aeabi_dsub>
   111e4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   111e8:	f7ff fa26 	bl	10638 <__aeabi_dmul>
   111ec:	4602      	mov	r2, r0
   111ee:	460b      	mov	r3, r1
   111f0:	4620      	mov	r0, r4
   111f2:	4629      	mov	r1, r5
   111f4:	f7ff f86a 	bl	102cc <__adddf3>
   111f8:	4602      	mov	r2, r0
   111fa:	460b      	mov	r3, r1
   111fc:	4630      	mov	r0, r6
   111fe:	4639      	mov	r1, r7
   11200:	f7ff fa1a 	bl	10638 <__aeabi_dmul>
   11204:	4602      	mov	r2, r0
   11206:	460b      	mov	r3, r1
   11208:	4650      	mov	r0, sl
   1120a:	4659      	mov	r1, fp
   1120c:	f7ff fb3e 	bl	1088c <__aeabi_ddiv>
   11210:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
   11214:	f7ff f85a 	bl	102cc <__adddf3>
   11218:	f006 fc2a 	bl	17a70 <sqrt>
        TOdut = sqrt(first_sqrt) - 273.15 - Hb;
   1121c:	f006 fc28 	bl	17a70 <sqrt>
   11220:	a30b      	add	r3, pc, #44	; (adr r3, 11250 <mlx90632_calc_temp_object_iteration+0xc8>)
   11222:	e9d3 2300 	ldrd	r2, r3, [r3]
   11226:	f7ff f84f 	bl	102c8 <__aeabi_dsub>
   1122a:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
   1122e:	f7ff f84b 	bl	102c8 <__aeabi_dsub>
   11232:	4604      	mov	r4, r0
   11234:	460d      	mov	r5, r1
    for (i = 0; i < 3; ++i)
   11236:	f108 0801 	add.w	r8, r8, #1
   1123a:	f1b8 0f02 	cmp.w	r8, #2
   1123e:	ddaf      	ble.n	111a0 <mlx90632_calc_temp_object_iteration+0x18>
    }

    return TOdut;

}
   11240:	4620      	mov	r0, r4
   11242:	4629      	mov	r1, r5
   11244:	b002      	add	sp, #8
   11246:	e8bd 8df0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, fp, pc}
   1124a:	bf00      	nop
   1124c:	f3af 8000 	nop.w
   11250:	66666666 	.word	0x66666666
   11254:	40711266 	.word	0x40711266
   11258:	40390000 	.word	0x40390000
   1125c:	3ff00000 	.word	0x3ff00000

00011260 <mlx90632_calc_temp_object>:
double mlx90632_calc_temp_object(double Ka, double Gb, double Ea, double Eb, double Fa, double Ha, double Ga, double Fb, double Hb){
   11260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11264:	b093      	sub	sp, #76	; 0x4c
   11266:	4680      	mov	r8, r0
   11268:	4689      	mov	r9, r1
   1126a:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
    double emi = mlx90632_get_emissivity();
   1126e:	f001 fc7f 	bl	12b70 <mlx90632_get_emissivity>
   11272:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
    S = (MLX_T_RAW.object_ram_4_7 + MLX_T_RAW.object_ram_5_8) / 2.0;
   11276:	4c4e      	ldr	r4, [pc, #312]	; (113b0 <mlx90632_calc_temp_object+0x150>)
   11278:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
   1127c:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
   11280:	4418      	add	r0, r3
   11282:	f7ff f96f 	bl	10564 <__aeabi_i2d>
   11286:	2200      	movs	r2, #0
   11288:	4b4a      	ldr	r3, [pc, #296]	; (113b4 <mlx90632_calc_temp_object+0x154>)
   1128a:	f7ff f9d5 	bl	10638 <__aeabi_dmul>
   1128e:	4682      	mov	sl, r0
   11290:	468b      	mov	fp, r1
    VRto = MLX_T_RAW.ambient_ram_9 + Ka * (MLX_T_RAW.ambient_ram_6 / MLX90632_REF_3);
   11292:	f9b4 0002 	ldrsh.w	r0, [r4, #2]
   11296:	f7ff f965 	bl	10564 <__aeabi_i2d>
   1129a:	4606      	mov	r6, r0
   1129c:	460f      	mov	r7, r1
   1129e:	f9b4 0000 	ldrsh.w	r0, [r4]
   112a2:	f7ff f95f 	bl	10564 <__aeabi_i2d>
   112a6:	2200      	movs	r2, #0
   112a8:	4b43      	ldr	r3, [pc, #268]	; (113b8 <mlx90632_calc_temp_object+0x158>)
   112aa:	f7ff faef 	bl	1088c <__aeabi_ddiv>
   112ae:	4604      	mov	r4, r0
   112b0:	460d      	mov	r5, r1
   112b2:	4642      	mov	r2, r8
   112b4:	464b      	mov	r3, r9
   112b6:	f7ff f9bf 	bl	10638 <__aeabi_dmul>
   112ba:	4602      	mov	r2, r0
   112bc:	460b      	mov	r3, r1
   112be:	4630      	mov	r0, r6
   112c0:	4639      	mov	r1, r7
   112c2:	f7ff f803 	bl	102cc <__adddf3>
   112c6:	4680      	mov	r8, r0
   112c8:	4689      	mov	r9, r1
    Sto = (S / 12.0) / VRto * (double)(1<<19);
   112ca:	2200      	movs	r2, #0
   112cc:	4b3a      	ldr	r3, [pc, #232]	; (113b8 <mlx90632_calc_temp_object+0x158>)
   112ce:	4650      	mov	r0, sl
   112d0:	4659      	mov	r1, fp
   112d2:	f7ff fadb 	bl	1088c <__aeabi_ddiv>
   112d6:	4642      	mov	r2, r8
   112d8:	464b      	mov	r3, r9
   112da:	f7ff fad7 	bl	1088c <__aeabi_ddiv>
   112de:	2200      	movs	r2, #0
   112e0:	4b36      	ldr	r3, [pc, #216]	; (113bc <mlx90632_calc_temp_object+0x15c>)
   112e2:	f7ff f9a9 	bl	10638 <__aeabi_dmul>
   112e6:	4680      	mov	r8, r0
   112e8:	4689      	mov	r9, r1
    VRta = MLX_T_RAW.ambient_ram_9 + Gb * (MLX_T_RAW.ambient_ram_6 / MLX90632_REF_3);
   112ea:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   112ee:	4620      	mov	r0, r4
   112f0:	4629      	mov	r1, r5
   112f2:	f7ff f9a1 	bl	10638 <__aeabi_dmul>
   112f6:	4602      	mov	r2, r0
   112f8:	460b      	mov	r3, r1
   112fa:	4630      	mov	r0, r6
   112fc:	4639      	mov	r1, r7
   112fe:	f7fe ffe5 	bl	102cc <__adddf3>
   11302:	4602      	mov	r2, r0
   11304:	460b      	mov	r3, r1
    AMB = (MLX_T_RAW.ambient_ram_6 / MLX90632_REF_3) / VRta * (double)(1<<19);
   11306:	4620      	mov	r0, r4
   11308:	4629      	mov	r1, r5
   1130a:	f7ff fabf 	bl	1088c <__aeabi_ddiv>
   1130e:	2200      	movs	r2, #0
   11310:	4b2a      	ldr	r3, [pc, #168]	; (113bc <mlx90632_calc_temp_object+0x15c>)
   11312:	f7ff f991 	bl	10638 <__aeabi_dmul>
    TAdut = ((AMB - Eb) / Ea ) + 25;
   11316:	e9dd 231e 	ldrd	r2, r3, [sp, #120]	; 0x78
   1131a:	f7fe ffd5 	bl	102c8 <__aeabi_dsub>
   1131e:	e9dd 231c 	ldrd	r2, r3, [sp, #112]	; 0x70
   11322:	f7ff fab3 	bl	1088c <__aeabi_ddiv>
   11326:	2200      	movs	r2, #0
   11328:	4b25      	ldr	r3, [pc, #148]	; (113c0 <mlx90632_calc_temp_object+0x160>)
   1132a:	f7fe ffcf 	bl	102cc <__adddf3>
   1132e:	4606      	mov	r6, r0
   11330:	460f      	mov	r7, r1
    TAk4 = (TAdut + 273.15) * (TAdut + 273.15) * (TAdut + 273.15) * (TAdut + 273.15);
   11332:	a31d      	add	r3, pc, #116	; (adr r3, 113a8 <mlx90632_calc_temp_object+0x148>)
   11334:	e9d3 2300 	ldrd	r2, r3, [r3]
   11338:	f7fe ffc8 	bl	102cc <__adddf3>
   1133c:	4604      	mov	r4, r0
   1133e:	460d      	mov	r5, r1
   11340:	4602      	mov	r2, r0
   11342:	460b      	mov	r3, r1
   11344:	f7ff f978 	bl	10638 <__aeabi_dmul>
   11348:	4602      	mov	r2, r0
   1134a:	460b      	mov	r3, r1
   1134c:	4620      	mov	r0, r4
   1134e:	4629      	mov	r1, r5
   11350:	f7ff f972 	bl	10638 <__aeabi_dmul>
   11354:	4602      	mov	r2, r0
   11356:	460b      	mov	r3, r1
   11358:	4620      	mov	r0, r4
   1135a:	4629      	mov	r1, r5
   1135c:	f7ff f96c 	bl	10638 <__aeabi_dmul>
    obj_temp = mlx90632_calc_temp_object_iteration(Sto, emi, Fa, Ha, Ga, Fb, TAdut, TAk4, Hb);
   11360:	e9dd 2328 	ldrd	r2, r3, [sp, #160]	; 0xa0
   11364:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
   11368:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
   1136c:	e9cd 6708 	strd	r6, r7, [sp, #32]
   11370:	e9dd 2326 	ldrd	r2, r3, [sp, #152]	; 0x98
   11374:	e9cd 2306 	strd	r2, r3, [sp, #24]
   11378:	e9dd 2324 	ldrd	r2, r3, [sp, #144]	; 0x90
   1137c:	e9cd 2304 	strd	r2, r3, [sp, #16]
   11380:	e9dd 2322 	ldrd	r2, r3, [sp, #136]	; 0x88
   11384:	e9cd 2302 	strd	r2, r3, [sp, #8]
   11388:	e9dd 2320 	ldrd	r2, r3, [sp, #128]	; 0x80
   1138c:	e9cd 2300 	strd	r2, r3, [sp]
   11390:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
   11394:	4640      	mov	r0, r8
   11396:	4649      	mov	r1, r9
   11398:	f7ff fef6 	bl	11188 <mlx90632_calc_temp_object_iteration>
}
   1139c:	b013      	add	sp, #76	; 0x4c
   1139e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   113a2:	bf00      	nop
   113a4:	f3af 8000 	nop.w
   113a8:	66666666 	.word	0x66666666
   113ac:	40711266 	.word	0x40711266
   113b0:	200084bc 	.word	0x200084bc
   113b4:	3fe00000 	.word	0x3fe00000
   113b8:	40280000 	.word	0x40280000
   113bc:	41200000 	.word	0x41200000
   113c0:	40390000 	.word	0x40390000
   113c4:	00000000 	.word	0x00000000

000113c8 <_dtoa_r>:
   113c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   113cc:	4614      	mov	r4, r2
   113ce:	b097      	sub	sp, #92	; 0x5c
   113d0:	461d      	mov	r5, r3
   113d2:	6a47      	ldr	r7, [r0, #36]	; 0x24
   113d4:	4683      	mov	fp, r0
   113d6:	9e23      	ldr	r6, [sp, #140]	; 0x8c
   113d8:	e9cd 4504 	strd	r4, r5, [sp, #16]
   113dc:	b97f      	cbnz	r7, 113fe <_dtoa_r+0x36>
   113de:	2010      	movs	r0, #16
   113e0:	f006 fc2a 	bl	17c38 <malloc>
   113e4:	4602      	mov	r2, r0
   113e6:	f8cb 0024 	str.w	r0, [fp, #36]	; 0x24
   113ea:	b920      	cbnz	r0, 113f6 <_dtoa_r+0x2e>
   113ec:	4ba2      	ldr	r3, [pc, #648]	; (11678 <_dtoa_r+0x2b0>)
   113ee:	21ea      	movs	r1, #234	; 0xea
   113f0:	48a2      	ldr	r0, [pc, #648]	; (1167c <_dtoa_r+0x2b4>)
   113f2:	f007 fe43 	bl	1907c <__assert_func>
   113f6:	e9c0 7701 	strd	r7, r7, [r0, #4]
   113fa:	6007      	str	r7, [r0, #0]
   113fc:	60c7      	str	r7, [r0, #12]
   113fe:	f8db 3024 	ldr.w	r3, [fp, #36]	; 0x24
   11402:	6819      	ldr	r1, [r3, #0]
   11404:	b159      	cbz	r1, 1141e <_dtoa_r+0x56>
   11406:	685a      	ldr	r2, [r3, #4]
   11408:	2301      	movs	r3, #1
   1140a:	4658      	mov	r0, fp
   1140c:	4093      	lsls	r3, r2
   1140e:	604a      	str	r2, [r1, #4]
   11410:	608b      	str	r3, [r1, #8]
   11412:	f007 f959 	bl	186c8 <_Bfree>
   11416:	f8db 3024 	ldr.w	r3, [fp, #36]	; 0x24
   1141a:	2200      	movs	r2, #0
   1141c:	601a      	str	r2, [r3, #0]
   1141e:	1e2b      	subs	r3, r5, #0
   11420:	bfb7      	itett	lt
   11422:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
   11426:	2300      	movge	r3, #0
   11428:	2201      	movlt	r2, #1
   1142a:	9305      	strlt	r3, [sp, #20]
   1142c:	bfa8      	it	ge
   1142e:	6033      	strge	r3, [r6, #0]
   11430:	9f05      	ldr	r7, [sp, #20]
   11432:	4b93      	ldr	r3, [pc, #588]	; (11680 <_dtoa_r+0x2b8>)
   11434:	bfb8      	it	lt
   11436:	6032      	strlt	r2, [r6, #0]
   11438:	43bb      	bics	r3, r7
   1143a:	d119      	bne.n	11470 <_dtoa_r+0xa8>
   1143c:	f242 730f 	movw	r3, #9999	; 0x270f
   11440:	9a22      	ldr	r2, [sp, #136]	; 0x88
   11442:	6013      	str	r3, [r2, #0]
   11444:	f3c7 0313 	ubfx	r3, r7, #0, #20
   11448:	4323      	orrs	r3, r4
   1144a:	f000 85e0 	beq.w	1200e <_dtoa_r+0xc46>
   1144e:	9b24      	ldr	r3, [sp, #144]	; 0x90
   11450:	b953      	cbnz	r3, 11468 <_dtoa_r+0xa0>
   11452:	4b8c      	ldr	r3, [pc, #560]	; (11684 <_dtoa_r+0x2bc>)
   11454:	e021      	b.n	1149a <_dtoa_r+0xd2>
   11456:	4b8c      	ldr	r3, [pc, #560]	; (11688 <_dtoa_r+0x2c0>)
   11458:	9308      	str	r3, [sp, #32]
   1145a:	3308      	adds	r3, #8
   1145c:	9a24      	ldr	r2, [sp, #144]	; 0x90
   1145e:	6013      	str	r3, [r2, #0]
   11460:	9808      	ldr	r0, [sp, #32]
   11462:	b017      	add	sp, #92	; 0x5c
   11464:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11468:	4b86      	ldr	r3, [pc, #536]	; (11684 <_dtoa_r+0x2bc>)
   1146a:	9308      	str	r3, [sp, #32]
   1146c:	3303      	adds	r3, #3
   1146e:	e7f5      	b.n	1145c <_dtoa_r+0x94>
   11470:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   11474:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
   11478:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   1147c:	2200      	movs	r2, #0
   1147e:	2300      	movs	r3, #0
   11480:	f7ff fb42 	bl	10b08 <__aeabi_dcmpeq>
   11484:	4680      	mov	r8, r0
   11486:	b150      	cbz	r0, 1149e <_dtoa_r+0xd6>
   11488:	2301      	movs	r3, #1
   1148a:	9a22      	ldr	r2, [sp, #136]	; 0x88
   1148c:	6013      	str	r3, [r2, #0]
   1148e:	9b24      	ldr	r3, [sp, #144]	; 0x90
   11490:	b113      	cbz	r3, 11498 <_dtoa_r+0xd0>
   11492:	4b7e      	ldr	r3, [pc, #504]	; (1168c <_dtoa_r+0x2c4>)
   11494:	9a24      	ldr	r2, [sp, #144]	; 0x90
   11496:	6013      	str	r3, [r2, #0]
   11498:	4b7d      	ldr	r3, [pc, #500]	; (11690 <_dtoa_r+0x2c8>)
   1149a:	9308      	str	r3, [sp, #32]
   1149c:	e7e0      	b.n	11460 <_dtoa_r+0x98>
   1149e:	ab14      	add	r3, sp, #80	; 0x50
   114a0:	f3c7 560a 	ubfx	r6, r7, #20, #11
   114a4:	4658      	mov	r0, fp
   114a6:	9301      	str	r3, [sp, #4]
   114a8:	ab15      	add	r3, sp, #84	; 0x54
   114aa:	9300      	str	r3, [sp, #0]
   114ac:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
   114b0:	f007 fb90 	bl	18bd4 <__d2b>
   114b4:	9003      	str	r0, [sp, #12]
   114b6:	2e00      	cmp	r6, #0
   114b8:	d078      	beq.n	115ac <_dtoa_r+0x1e4>
   114ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   114bc:	f2a6 36ff 	subw	r6, r6, #1023	; 0x3ff
   114c0:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
   114c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
   114c8:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
   114cc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   114d0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   114d4:	4619      	mov	r1, r3
   114d6:	2200      	movs	r2, #0
   114d8:	4b6e      	ldr	r3, [pc, #440]	; (11694 <_dtoa_r+0x2cc>)
   114da:	f7fe fef5 	bl	102c8 <__aeabi_dsub>
   114de:	a360      	add	r3, pc, #384	; (adr r3, 11660 <_dtoa_r+0x298>)
   114e0:	e9d3 2300 	ldrd	r2, r3, [r3]
   114e4:	f7ff f8a8 	bl	10638 <__aeabi_dmul>
   114e8:	a35f      	add	r3, pc, #380	; (adr r3, 11668 <_dtoa_r+0x2a0>)
   114ea:	e9d3 2300 	ldrd	r2, r3, [r3]
   114ee:	f7fe feed 	bl	102cc <__adddf3>
   114f2:	4604      	mov	r4, r0
   114f4:	460d      	mov	r5, r1
   114f6:	4630      	mov	r0, r6
   114f8:	f7ff f834 	bl	10564 <__aeabi_i2d>
   114fc:	a35c      	add	r3, pc, #368	; (adr r3, 11670 <_dtoa_r+0x2a8>)
   114fe:	e9d3 2300 	ldrd	r2, r3, [r3]
   11502:	f7ff f899 	bl	10638 <__aeabi_dmul>
   11506:	4602      	mov	r2, r0
   11508:	460b      	mov	r3, r1
   1150a:	4620      	mov	r0, r4
   1150c:	4629      	mov	r1, r5
   1150e:	f7fe fedd 	bl	102cc <__adddf3>
   11512:	4604      	mov	r4, r0
   11514:	460d      	mov	r5, r1
   11516:	f7ff fcb7 	bl	10e88 <__aeabi_d2iz>
   1151a:	2200      	movs	r2, #0
   1151c:	4607      	mov	r7, r0
   1151e:	2300      	movs	r3, #0
   11520:	4620      	mov	r0, r4
   11522:	4629      	mov	r1, r5
   11524:	f7ff fafa 	bl	10b1c <__aeabi_dcmplt>
   11528:	b140      	cbz	r0, 1153c <_dtoa_r+0x174>
   1152a:	4638      	mov	r0, r7
   1152c:	f7ff f81a 	bl	10564 <__aeabi_i2d>
   11530:	4622      	mov	r2, r4
   11532:	462b      	mov	r3, r5
   11534:	f7ff fae8 	bl	10b08 <__aeabi_dcmpeq>
   11538:	b900      	cbnz	r0, 1153c <_dtoa_r+0x174>
   1153a:	3f01      	subs	r7, #1
   1153c:	2f16      	cmp	r7, #22
   1153e:	d854      	bhi.n	115ea <_dtoa_r+0x222>
   11540:	4b55      	ldr	r3, [pc, #340]	; (11698 <_dtoa_r+0x2d0>)
   11542:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
   11546:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   1154a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1154e:	f7ff fae5 	bl	10b1c <__aeabi_dcmplt>
   11552:	2800      	cmp	r0, #0
   11554:	d04b      	beq.n	115ee <_dtoa_r+0x226>
   11556:	3f01      	subs	r7, #1
   11558:	2300      	movs	r3, #0
   1155a:	9312      	str	r3, [sp, #72]	; 0x48
   1155c:	9b14      	ldr	r3, [sp, #80]	; 0x50
   1155e:	1b9b      	subs	r3, r3, r6
   11560:	1e5a      	subs	r2, r3, #1
   11562:	bf4c      	ite	mi
   11564:	f1c3 0301 	rsbmi	r3, r3, #1
   11568:	2300      	movpl	r3, #0
   1156a:	920a      	str	r2, [sp, #40]	; 0x28
   1156c:	bf45      	ittet	mi
   1156e:	9306      	strmi	r3, [sp, #24]
   11570:	2300      	movmi	r3, #0
   11572:	9306      	strpl	r3, [sp, #24]
   11574:	930a      	strmi	r3, [sp, #40]	; 0x28
   11576:	2f00      	cmp	r7, #0
   11578:	db3b      	blt.n	115f2 <_dtoa_r+0x22a>
   1157a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1157c:	970f      	str	r7, [sp, #60]	; 0x3c
   1157e:	443b      	add	r3, r7
   11580:	930a      	str	r3, [sp, #40]	; 0x28
   11582:	2300      	movs	r3, #0
   11584:	930b      	str	r3, [sp, #44]	; 0x2c
   11586:	9b20      	ldr	r3, [sp, #128]	; 0x80
   11588:	2b09      	cmp	r3, #9
   1158a:	f200 8089 	bhi.w	116a0 <_dtoa_r+0x2d8>
   1158e:	2b05      	cmp	r3, #5
   11590:	bfc5      	ittet	gt
   11592:	3b04      	subgt	r3, #4
   11594:	2400      	movgt	r4, #0
   11596:	2401      	movle	r4, #1
   11598:	9320      	strgt	r3, [sp, #128]	; 0x80
   1159a:	9b20      	ldr	r3, [sp, #128]	; 0x80
   1159c:	3b02      	subs	r3, #2
   1159e:	2b03      	cmp	r3, #3
   115a0:	f200 8089 	bhi.w	116b6 <_dtoa_r+0x2ee>
   115a4:	e8df f003 	tbb	[pc, r3]
   115a8:	59383a2d 	.word	0x59383a2d
   115ac:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	; 0x50
   115b0:	441e      	add	r6, r3
   115b2:	f206 4332 	addw	r3, r6, #1074	; 0x432
   115b6:	2b20      	cmp	r3, #32
   115b8:	bfc9      	itett	gt
   115ba:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
   115be:	f1c3 0320 	rsble	r3, r3, #32
   115c2:	409f      	lslgt	r7, r3
   115c4:	f206 4312 	addwgt	r3, r6, #1042	; 0x412
   115c8:	bfd8      	it	le
   115ca:	fa04 f003 	lslle.w	r0, r4, r3
   115ce:	f106 36ff 	add.w	r6, r6, #4294967295
   115d2:	bfc4      	itt	gt
   115d4:	fa24 f303 	lsrgt.w	r3, r4, r3
   115d8:	ea47 0003 	orrgt.w	r0, r7, r3
   115dc:	f7fe ffb2 	bl	10544 <__aeabi_ui2d>
   115e0:	2201      	movs	r2, #1
   115e2:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
   115e6:	9213      	str	r2, [sp, #76]	; 0x4c
   115e8:	e774      	b.n	114d4 <_dtoa_r+0x10c>
   115ea:	2301      	movs	r3, #1
   115ec:	e7b5      	b.n	1155a <_dtoa_r+0x192>
   115ee:	9012      	str	r0, [sp, #72]	; 0x48
   115f0:	e7b4      	b.n	1155c <_dtoa_r+0x194>
   115f2:	9b06      	ldr	r3, [sp, #24]
   115f4:	1bdb      	subs	r3, r3, r7
   115f6:	9306      	str	r3, [sp, #24]
   115f8:	427b      	negs	r3, r7
   115fa:	930b      	str	r3, [sp, #44]	; 0x2c
   115fc:	2300      	movs	r3, #0
   115fe:	930f      	str	r3, [sp, #60]	; 0x3c
   11600:	e7c1      	b.n	11586 <_dtoa_r+0x1be>
   11602:	2300      	movs	r3, #0
   11604:	930e      	str	r3, [sp, #56]	; 0x38
   11606:	9b21      	ldr	r3, [sp, #132]	; 0x84
   11608:	2b00      	cmp	r3, #0
   1160a:	dc57      	bgt.n	116bc <_dtoa_r+0x2f4>
   1160c:	2301      	movs	r3, #1
   1160e:	4699      	mov	r9, r3
   11610:	461a      	mov	r2, r3
   11612:	9309      	str	r3, [sp, #36]	; 0x24
   11614:	9221      	str	r2, [sp, #132]	; 0x84
   11616:	e00c      	b.n	11632 <_dtoa_r+0x26a>
   11618:	2301      	movs	r3, #1
   1161a:	e7f3      	b.n	11604 <_dtoa_r+0x23c>
   1161c:	2300      	movs	r3, #0
   1161e:	930e      	str	r3, [sp, #56]	; 0x38
   11620:	9b21      	ldr	r3, [sp, #132]	; 0x84
   11622:	18fb      	adds	r3, r7, r3
   11624:	f103 0901 	add.w	r9, r3, #1
   11628:	9309      	str	r3, [sp, #36]	; 0x24
   1162a:	464b      	mov	r3, r9
   1162c:	2b01      	cmp	r3, #1
   1162e:	bfb8      	it	lt
   11630:	2301      	movlt	r3, #1
   11632:	f8db 0024 	ldr.w	r0, [fp, #36]	; 0x24
   11636:	2100      	movs	r1, #0
   11638:	2204      	movs	r2, #4
   1163a:	f102 0514 	add.w	r5, r2, #20
   1163e:	429d      	cmp	r5, r3
   11640:	d940      	bls.n	116c4 <_dtoa_r+0x2fc>
   11642:	6041      	str	r1, [r0, #4]
   11644:	4658      	mov	r0, fp
   11646:	f006 ffff 	bl	18648 <_Balloc>
   1164a:	9008      	str	r0, [sp, #32]
   1164c:	2800      	cmp	r0, #0
   1164e:	d13c      	bne.n	116ca <_dtoa_r+0x302>
   11650:	4b12      	ldr	r3, [pc, #72]	; (1169c <_dtoa_r+0x2d4>)
   11652:	4602      	mov	r2, r0
   11654:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
   11658:	e6ca      	b.n	113f0 <_dtoa_r+0x28>
   1165a:	2301      	movs	r3, #1
   1165c:	e7df      	b.n	1161e <_dtoa_r+0x256>
   1165e:	bf00      	nop
   11660:	636f4361 	.word	0x636f4361
   11664:	3fd287a7 	.word	0x3fd287a7
   11668:	8b60c8b3 	.word	0x8b60c8b3
   1166c:	3fc68a28 	.word	0x3fc68a28
   11670:	509f79fb 	.word	0x509f79fb
   11674:	3fd34413 	.word	0x3fd34413
   11678:	0001c55a 	.word	0x0001c55a
   1167c:	0001c571 	.word	0x0001c571
   11680:	7ff00000 	.word	0x7ff00000
   11684:	0001c556 	.word	0x0001c556
   11688:	0001c54d 	.word	0x0001c54d
   1168c:	0001c52a 	.word	0x0001c52a
   11690:	0001c529 	.word	0x0001c529
   11694:	3ff80000 	.word	0x3ff80000
   11698:	0001baf0 	.word	0x0001baf0
   1169c:	0001c5e5 	.word	0x0001c5e5
   116a0:	2401      	movs	r4, #1
   116a2:	2300      	movs	r3, #0
   116a4:	940e      	str	r4, [sp, #56]	; 0x38
   116a6:	9320      	str	r3, [sp, #128]	; 0x80
   116a8:	f04f 33ff 	mov.w	r3, #4294967295
   116ac:	2200      	movs	r2, #0
   116ae:	4699      	mov	r9, r3
   116b0:	9309      	str	r3, [sp, #36]	; 0x24
   116b2:	2312      	movs	r3, #18
   116b4:	e7ae      	b.n	11614 <_dtoa_r+0x24c>
   116b6:	2301      	movs	r3, #1
   116b8:	930e      	str	r3, [sp, #56]	; 0x38
   116ba:	e7f5      	b.n	116a8 <_dtoa_r+0x2e0>
   116bc:	9b21      	ldr	r3, [sp, #132]	; 0x84
   116be:	4699      	mov	r9, r3
   116c0:	9309      	str	r3, [sp, #36]	; 0x24
   116c2:	e7b6      	b.n	11632 <_dtoa_r+0x26a>
   116c4:	3101      	adds	r1, #1
   116c6:	0052      	lsls	r2, r2, #1
   116c8:	e7b7      	b.n	1163a <_dtoa_r+0x272>
   116ca:	f8db 3024 	ldr.w	r3, [fp, #36]	; 0x24
   116ce:	f1b9 0f0e 	cmp.w	r9, #14
   116d2:	9a08      	ldr	r2, [sp, #32]
   116d4:	601a      	str	r2, [r3, #0]
   116d6:	d86f      	bhi.n	117b8 <_dtoa_r+0x3f0>
   116d8:	2c00      	cmp	r4, #0
   116da:	d06d      	beq.n	117b8 <_dtoa_r+0x3f0>
   116dc:	2f00      	cmp	r7, #0
   116de:	dd36      	ble.n	1174e <_dtoa_r+0x386>
   116e0:	f007 020f 	and.w	r2, r7, #15
   116e4:	4ba0      	ldr	r3, [pc, #640]	; (11968 <_dtoa_r+0x5a0>)
   116e6:	05f8      	lsls	r0, r7, #23
   116e8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   116ec:	e9d3 3400 	ldrd	r3, r4, [r3]
   116f0:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
   116f4:	ea4f 1427 	mov.w	r4, r7, asr #4
   116f8:	d517      	bpl.n	1172a <_dtoa_r+0x362>
   116fa:	4b9c      	ldr	r3, [pc, #624]	; (1196c <_dtoa_r+0x5a4>)
   116fc:	f004 040f 	and.w	r4, r4, #15
   11700:	f04f 0803 	mov.w	r8, #3
   11704:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
   11708:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   1170c:	f7ff f8be 	bl	1088c <__aeabi_ddiv>
   11710:	e9cd 0104 	strd	r0, r1, [sp, #16]
   11714:	4d95      	ldr	r5, [pc, #596]	; (1196c <_dtoa_r+0x5a4>)
   11716:	b95c      	cbnz	r4, 11730 <_dtoa_r+0x368>
   11718:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   1171c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   11720:	f7ff f8b4 	bl	1088c <__aeabi_ddiv>
   11724:	e9cd 0104 	strd	r0, r1, [sp, #16]
   11728:	e02b      	b.n	11782 <_dtoa_r+0x3ba>
   1172a:	f04f 0802 	mov.w	r8, #2
   1172e:	e7f1      	b.n	11714 <_dtoa_r+0x34c>
   11730:	07e1      	lsls	r1, r4, #31
   11732:	d509      	bpl.n	11748 <_dtoa_r+0x380>
   11734:	f108 0801 	add.w	r8, r8, #1
   11738:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   1173c:	e9d5 2300 	ldrd	r2, r3, [r5]
   11740:	f7fe ff7a 	bl	10638 <__aeabi_dmul>
   11744:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   11748:	1064      	asrs	r4, r4, #1
   1174a:	3508      	adds	r5, #8
   1174c:	e7e3      	b.n	11716 <_dtoa_r+0x34e>
   1174e:	f000 8107 	beq.w	11960 <_dtoa_r+0x598>
   11752:	427c      	negs	r4, r7
   11754:	4b84      	ldr	r3, [pc, #528]	; (11968 <_dtoa_r+0x5a0>)
   11756:	4d85      	ldr	r5, [pc, #532]	; (1196c <_dtoa_r+0x5a4>)
   11758:	f04f 0802 	mov.w	r8, #2
   1175c:	f004 020f 	and.w	r2, r4, #15
   11760:	1124      	asrs	r4, r4, #4
   11762:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   11766:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   1176a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1176e:	f7fe ff63 	bl	10638 <__aeabi_dmul>
   11772:	2300      	movs	r3, #0
   11774:	e9cd 0104 	strd	r0, r1, [sp, #16]
   11778:	2c00      	cmp	r4, #0
   1177a:	f040 80e5 	bne.w	11948 <_dtoa_r+0x580>
   1177e:	2b00      	cmp	r3, #0
   11780:	d1d0      	bne.n	11724 <_dtoa_r+0x35c>
   11782:	9b12      	ldr	r3, [sp, #72]	; 0x48
   11784:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
   11788:	2b00      	cmp	r3, #0
   1178a:	f000 814c 	beq.w	11a26 <_dtoa_r+0x65e>
   1178e:	2200      	movs	r2, #0
   11790:	4b77      	ldr	r3, [pc, #476]	; (11970 <_dtoa_r+0x5a8>)
   11792:	4620      	mov	r0, r4
   11794:	4629      	mov	r1, r5
   11796:	f7ff f9c1 	bl	10b1c <__aeabi_dcmplt>
   1179a:	2800      	cmp	r0, #0
   1179c:	f000 8143 	beq.w	11a26 <_dtoa_r+0x65e>
   117a0:	f1b9 0f00 	cmp.w	r9, #0
   117a4:	f000 813f 	beq.w	11a26 <_dtoa_r+0x65e>
   117a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   117aa:	2b00      	cmp	r3, #0
   117ac:	f300 80e4 	bgt.w	11978 <_dtoa_r+0x5b0>
   117b0:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
   117b4:	e9cd 3404 	strd	r3, r4, [sp, #16]
   117b8:	9b15      	ldr	r3, [sp, #84]	; 0x54
   117ba:	2b00      	cmp	r3, #0
   117bc:	db02      	blt.n	117c4 <_dtoa_r+0x3fc>
   117be:	2f0e      	cmp	r7, #14
   117c0:	f340 8242 	ble.w	11c48 <_dtoa_r+0x880>
   117c4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   117c6:	2a00      	cmp	r2, #0
   117c8:	f040 8267 	bne.w	11c9a <_dtoa_r+0x8d2>
   117cc:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   117ce:	2500      	movs	r5, #0
   117d0:	f8dd 8018 	ldr.w	r8, [sp, #24]
   117d4:	f1b8 0f00 	cmp.w	r8, #0
   117d8:	d00d      	beq.n	117f6 <_dtoa_r+0x42e>
   117da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   117dc:	2b00      	cmp	r3, #0
   117de:	dd0a      	ble.n	117f6 <_dtoa_r+0x42e>
   117e0:	4543      	cmp	r3, r8
   117e2:	9a06      	ldr	r2, [sp, #24]
   117e4:	bfa8      	it	ge
   117e6:	4643      	movge	r3, r8
   117e8:	1ad2      	subs	r2, r2, r3
   117ea:	eba8 0803 	sub.w	r8, r8, r3
   117ee:	9206      	str	r2, [sp, #24]
   117f0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   117f2:	1ad3      	subs	r3, r2, r3
   117f4:	930a      	str	r3, [sp, #40]	; 0x28
   117f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   117f8:	b30b      	cbz	r3, 1183e <_dtoa_r+0x476>
   117fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   117fc:	2b00      	cmp	r3, #0
   117fe:	f000 82a6 	beq.w	11d4e <_dtoa_r+0x986>
   11802:	2c00      	cmp	r4, #0
   11804:	f000 82a1 	beq.w	11d4a <_dtoa_r+0x982>
   11808:	4629      	mov	r1, r5
   1180a:	4622      	mov	r2, r4
   1180c:	4658      	mov	r0, fp
   1180e:	f007 f885 	bl	1891c <__pow5mult>
   11812:	9a03      	ldr	r2, [sp, #12]
   11814:	4601      	mov	r1, r0
   11816:	4605      	mov	r5, r0
   11818:	4658      	mov	r0, fp
   1181a:	f006 ffd5 	bl	187c8 <__multiply>
   1181e:	9903      	ldr	r1, [sp, #12]
   11820:	4606      	mov	r6, r0
   11822:	4658      	mov	r0, fp
   11824:	f006 ff50 	bl	186c8 <_Bfree>
   11828:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1182a:	1b1b      	subs	r3, r3, r4
   1182c:	930b      	str	r3, [sp, #44]	; 0x2c
   1182e:	f000 8291 	beq.w	11d54 <_dtoa_r+0x98c>
   11832:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   11834:	4631      	mov	r1, r6
   11836:	4658      	mov	r0, fp
   11838:	f007 f870 	bl	1891c <__pow5mult>
   1183c:	9003      	str	r0, [sp, #12]
   1183e:	2101      	movs	r1, #1
   11840:	4658      	mov	r0, fp
   11842:	f006 ffab 	bl	1879c <__i2b>
   11846:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   11848:	4604      	mov	r4, r0
   1184a:	2b00      	cmp	r3, #0
   1184c:	f000 8284 	beq.w	11d58 <_dtoa_r+0x990>
   11850:	461a      	mov	r2, r3
   11852:	4601      	mov	r1, r0
   11854:	4658      	mov	r0, fp
   11856:	f007 f861 	bl	1891c <__pow5mult>
   1185a:	9b20      	ldr	r3, [sp, #128]	; 0x80
   1185c:	4604      	mov	r4, r0
   1185e:	2b01      	cmp	r3, #1
   11860:	dc03      	bgt.n	1186a <_dtoa_r+0x4a2>
   11862:	9b04      	ldr	r3, [sp, #16]
   11864:	2b00      	cmp	r3, #0
   11866:	f000 827c 	beq.w	11d62 <_dtoa_r+0x99a>
   1186a:	2600      	movs	r6, #0
   1186c:	6923      	ldr	r3, [r4, #16]
   1186e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   11872:	6918      	ldr	r0, [r3, #16]
   11874:	f009 fdb5 	bl	1b3e2 <__hi0bits>
   11878:	f1c0 0020 	rsb	r0, r0, #32
   1187c:	960f      	str	r6, [sp, #60]	; 0x3c
   1187e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   11880:	4418      	add	r0, r3
   11882:	f010 001f 	ands.w	r0, r0, #31
   11886:	f000 8291 	beq.w	11dac <_dtoa_r+0x9e4>
   1188a:	f1c0 0320 	rsb	r3, r0, #32
   1188e:	2b04      	cmp	r3, #4
   11890:	f340 8281 	ble.w	11d96 <_dtoa_r+0x9ce>
   11894:	f1c0 001c 	rsb	r0, r0, #28
   11898:	9b06      	ldr	r3, [sp, #24]
   1189a:	4403      	add	r3, r0
   1189c:	4480      	add	r8, r0
   1189e:	9306      	str	r3, [sp, #24]
   118a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   118a2:	4403      	add	r3, r0
   118a4:	930a      	str	r3, [sp, #40]	; 0x28
   118a6:	9b06      	ldr	r3, [sp, #24]
   118a8:	2b00      	cmp	r3, #0
   118aa:	dd05      	ble.n	118b8 <_dtoa_r+0x4f0>
   118ac:	461a      	mov	r2, r3
   118ae:	9903      	ldr	r1, [sp, #12]
   118b0:	4658      	mov	r0, fp
   118b2:	f007 f88d 	bl	189d0 <__lshift>
   118b6:	9003      	str	r0, [sp, #12]
   118b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   118ba:	2b00      	cmp	r3, #0
   118bc:	dd05      	ble.n	118ca <_dtoa_r+0x502>
   118be:	4621      	mov	r1, r4
   118c0:	461a      	mov	r2, r3
   118c2:	4658      	mov	r0, fp
   118c4:	f007 f884 	bl	189d0 <__lshift>
   118c8:	4604      	mov	r4, r0
   118ca:	9b12      	ldr	r3, [sp, #72]	; 0x48
   118cc:	2b00      	cmp	r3, #0
   118ce:	f000 8276 	beq.w	11dbe <_dtoa_r+0x9f6>
   118d2:	4621      	mov	r1, r4
   118d4:	9803      	ldr	r0, [sp, #12]
   118d6:	f009 fdd3 	bl	1b480 <__mcmp>
   118da:	2800      	cmp	r0, #0
   118dc:	f280 826f 	bge.w	11dbe <_dtoa_r+0x9f6>
   118e0:	2300      	movs	r3, #0
   118e2:	220a      	movs	r2, #10
   118e4:	9903      	ldr	r1, [sp, #12]
   118e6:	4658      	mov	r0, fp
   118e8:	f006 ff10 	bl	1870c <__multadd>
   118ec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   118ee:	1e7e      	subs	r6, r7, #1
   118f0:	9003      	str	r0, [sp, #12]
   118f2:	2b00      	cmp	r3, #0
   118f4:	f000 825c 	beq.w	11db0 <_dtoa_r+0x9e8>
   118f8:	2300      	movs	r3, #0
   118fa:	4629      	mov	r1, r5
   118fc:	220a      	movs	r2, #10
   118fe:	4658      	mov	r0, fp
   11900:	f006 ff04 	bl	1870c <__multadd>
   11904:	9b09      	ldr	r3, [sp, #36]	; 0x24
   11906:	4605      	mov	r5, r0
   11908:	2b00      	cmp	r3, #0
   1190a:	dc03      	bgt.n	11914 <_dtoa_r+0x54c>
   1190c:	9b20      	ldr	r3, [sp, #128]	; 0x80
   1190e:	2b02      	cmp	r3, #2
   11910:	f300 825e 	bgt.w	11dd0 <_dtoa_r+0xa08>
   11914:	f1b8 0f00 	cmp.w	r8, #0
   11918:	dd05      	ble.n	11926 <_dtoa_r+0x55e>
   1191a:	4629      	mov	r1, r5
   1191c:	4642      	mov	r2, r8
   1191e:	4658      	mov	r0, fp
   11920:	f007 f856 	bl	189d0 <__lshift>
   11924:	4605      	mov	r5, r0
   11926:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   11928:	2b00      	cmp	r3, #0
   1192a:	f000 82d0 	beq.w	11ece <_dtoa_r+0xb06>
   1192e:	6869      	ldr	r1, [r5, #4]
   11930:	4658      	mov	r0, fp
   11932:	f006 fe89 	bl	18648 <_Balloc>
   11936:	4607      	mov	r7, r0
   11938:	2800      	cmp	r0, #0
   1193a:	f040 827f 	bne.w	11e3c <_dtoa_r+0xa74>
   1193e:	4b0d      	ldr	r3, [pc, #52]	; (11974 <_dtoa_r+0x5ac>)
   11940:	4602      	mov	r2, r0
   11942:	f240 21ea 	movw	r1, #746	; 0x2ea
   11946:	e553      	b.n	113f0 <_dtoa_r+0x28>
   11948:	07e2      	lsls	r2, r4, #31
   1194a:	d506      	bpl.n	1195a <_dtoa_r+0x592>
   1194c:	f108 0801 	add.w	r8, r8, #1
   11950:	e9d5 2300 	ldrd	r2, r3, [r5]
   11954:	f7fe fe70 	bl	10638 <__aeabi_dmul>
   11958:	2301      	movs	r3, #1
   1195a:	1064      	asrs	r4, r4, #1
   1195c:	3508      	adds	r5, #8
   1195e:	e70b      	b.n	11778 <_dtoa_r+0x3b0>
   11960:	f04f 0802 	mov.w	r8, #2
   11964:	e70d      	b.n	11782 <_dtoa_r+0x3ba>
   11966:	bf00      	nop
   11968:	0001baf0 	.word	0x0001baf0
   1196c:	0001bac8 	.word	0x0001bac8
   11970:	3ff00000 	.word	0x3ff00000
   11974:	0001c5e5 	.word	0x0001c5e5
   11978:	4620      	mov	r0, r4
   1197a:	2200      	movs	r2, #0
   1197c:	4bac      	ldr	r3, [pc, #688]	; (11c30 <_dtoa_r+0x868>)
   1197e:	4629      	mov	r1, r5
   11980:	f7fe fe5a 	bl	10638 <__aeabi_dmul>
   11984:	1e7e      	subs	r6, r7, #1
   11986:	f108 0801 	add.w	r8, r8, #1
   1198a:	9c09      	ldr	r4, [sp, #36]	; 0x24
   1198c:	e9cd 0104 	strd	r0, r1, [sp, #16]
   11990:	4640      	mov	r0, r8
   11992:	f7fe fde7 	bl	10564 <__aeabi_i2d>
   11996:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   1199a:	f7fe fe4d 	bl	10638 <__aeabi_dmul>
   1199e:	4ba5      	ldr	r3, [pc, #660]	; (11c34 <_dtoa_r+0x86c>)
   119a0:	2200      	movs	r2, #0
   119a2:	f7fe fc93 	bl	102cc <__adddf3>
   119a6:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
   119aa:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   119ae:	9311      	str	r3, [sp, #68]	; 0x44
   119b0:	2c00      	cmp	r4, #0
   119b2:	d13b      	bne.n	11a2c <_dtoa_r+0x664>
   119b4:	2200      	movs	r2, #0
   119b6:	4ba0      	ldr	r3, [pc, #640]	; (11c38 <_dtoa_r+0x870>)
   119b8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   119bc:	f7fe fc84 	bl	102c8 <__aeabi_dsub>
   119c0:	4602      	mov	r2, r0
   119c2:	460b      	mov	r3, r1
   119c4:	e9cd 2304 	strd	r2, r3, [sp, #16]
   119c8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   119cc:	f7ff f8c4 	bl	10b58 <__aeabi_dcmpgt>
   119d0:	2800      	cmp	r0, #0
   119d2:	f040 8157 	bne.w	11c84 <_dtoa_r+0x8bc>
   119d6:	e9dd 2110 	ldrd	r2, r1, [sp, #64]	; 0x40
   119da:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   119de:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   119e2:	f7ff f89b 	bl	10b1c <__aeabi_dcmplt>
   119e6:	2800      	cmp	r0, #0
   119e8:	f43f aee2 	beq.w	117b0 <_dtoa_r+0x3e8>
   119ec:	2400      	movs	r4, #0
   119ee:	4625      	mov	r5, r4
   119f0:	9b21      	ldr	r3, [sp, #132]	; 0x84
   119f2:	f8dd a020 	ldr.w	sl, [sp, #32]
   119f6:	43de      	mvns	r6, r3
   119f8:	f04f 0800 	mov.w	r8, #0
   119fc:	4621      	mov	r1, r4
   119fe:	4658      	mov	r0, fp
   11a00:	f006 fe62 	bl	186c8 <_Bfree>
   11a04:	2d00      	cmp	r5, #0
   11a06:	f000 80a9 	beq.w	11b5c <_dtoa_r+0x794>
   11a0a:	f1b8 0f00 	cmp.w	r8, #0
   11a0e:	d005      	beq.n	11a1c <_dtoa_r+0x654>
   11a10:	45a8      	cmp	r8, r5
   11a12:	d003      	beq.n	11a1c <_dtoa_r+0x654>
   11a14:	4641      	mov	r1, r8
   11a16:	4658      	mov	r0, fp
   11a18:	f006 fe56 	bl	186c8 <_Bfree>
   11a1c:	4629      	mov	r1, r5
   11a1e:	4658      	mov	r0, fp
   11a20:	f006 fe52 	bl	186c8 <_Bfree>
   11a24:	e09a      	b.n	11b5c <_dtoa_r+0x794>
   11a26:	463e      	mov	r6, r7
   11a28:	464c      	mov	r4, r9
   11a2a:	e7b1      	b.n	11990 <_dtoa_r+0x5c8>
   11a2c:	4b83      	ldr	r3, [pc, #524]	; (11c3c <_dtoa_r+0x874>)
   11a2e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   11a32:	e953 0102 	ldrd	r0, r1, [r3, #-8]
   11a36:	9b08      	ldr	r3, [sp, #32]
   11a38:	441c      	add	r4, r3
   11a3a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   11a3c:	2b00      	cmp	r3, #0
   11a3e:	d04a      	beq.n	11ad6 <_dtoa_r+0x70e>
   11a40:	4602      	mov	r2, r0
   11a42:	460b      	mov	r3, r1
   11a44:	2000      	movs	r0, #0
   11a46:	497e      	ldr	r1, [pc, #504]	; (11c40 <_dtoa_r+0x878>)
   11a48:	f7fe ff20 	bl	1088c <__aeabi_ddiv>
   11a4c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   11a50:	f7fe fc3a 	bl	102c8 <__aeabi_dsub>
   11a54:	f8dd a020 	ldr.w	sl, [sp, #32]
   11a58:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   11a5c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   11a60:	f7ff fa12 	bl	10e88 <__aeabi_d2iz>
   11a64:	4605      	mov	r5, r0
   11a66:	f7fe fd7d 	bl	10564 <__aeabi_i2d>
   11a6a:	4602      	mov	r2, r0
   11a6c:	3530      	adds	r5, #48	; 0x30
   11a6e:	460b      	mov	r3, r1
   11a70:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   11a74:	f7fe fc28 	bl	102c8 <__aeabi_dsub>
   11a78:	f80a 5b01 	strb.w	r5, [sl], #1
   11a7c:	4602      	mov	r2, r0
   11a7e:	460b      	mov	r3, r1
   11a80:	e9cd 0104 	strd	r0, r1, [sp, #16]
   11a84:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   11a88:	f7ff f866 	bl	10b58 <__aeabi_dcmpgt>
   11a8c:	2800      	cmp	r0, #0
   11a8e:	d165      	bne.n	11b5c <_dtoa_r+0x794>
   11a90:	2000      	movs	r0, #0
   11a92:	496c      	ldr	r1, [pc, #432]	; (11c44 <_dtoa_r+0x87c>)
   11a94:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   11a98:	f7fe fc16 	bl	102c8 <__aeabi_dsub>
   11a9c:	4602      	mov	r2, r0
   11a9e:	460b      	mov	r3, r1
   11aa0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   11aa4:	f7ff f858 	bl	10b58 <__aeabi_dcmpgt>
   11aa8:	2800      	cmp	r0, #0
   11aaa:	f040 810d 	bne.w	11cc8 <_dtoa_r+0x900>
   11aae:	45a2      	cmp	sl, r4
   11ab0:	f000 80ea 	beq.w	11c88 <_dtoa_r+0x8c0>
   11ab4:	2200      	movs	r2, #0
   11ab6:	4b5e      	ldr	r3, [pc, #376]	; (11c30 <_dtoa_r+0x868>)
   11ab8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   11abc:	f7fe fdbc 	bl	10638 <__aeabi_dmul>
   11ac0:	2200      	movs	r2, #0
   11ac2:	4b5b      	ldr	r3, [pc, #364]	; (11c30 <_dtoa_r+0x868>)
   11ac4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   11ac8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   11acc:	f7fe fdb4 	bl	10638 <__aeabi_dmul>
   11ad0:	e9cd 0104 	strd	r0, r1, [sp, #16]
   11ad4:	e7c2      	b.n	11a5c <_dtoa_r+0x694>
   11ad6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   11ada:	f7fe fdad 	bl	10638 <__aeabi_dmul>
   11ade:	46a0      	mov	r8, r4
   11ae0:	f8dd a020 	ldr.w	sl, [sp, #32]
   11ae4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   11ae8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   11aec:	f7ff f9cc 	bl	10e88 <__aeabi_d2iz>
   11af0:	4605      	mov	r5, r0
   11af2:	f7fe fd37 	bl	10564 <__aeabi_i2d>
   11af6:	4602      	mov	r2, r0
   11af8:	3530      	adds	r5, #48	; 0x30
   11afa:	460b      	mov	r3, r1
   11afc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   11b00:	f7fe fbe2 	bl	102c8 <__aeabi_dsub>
   11b04:	f80a 5b01 	strb.w	r5, [sl], #1
   11b08:	4602      	mov	r2, r0
   11b0a:	460b      	mov	r3, r1
   11b0c:	45a2      	cmp	sl, r4
   11b0e:	e9cd 2304 	strd	r2, r3, [sp, #16]
   11b12:	f04f 0200 	mov.w	r2, #0
   11b16:	d123      	bne.n	11b60 <_dtoa_r+0x798>
   11b18:	4b49      	ldr	r3, [pc, #292]	; (11c40 <_dtoa_r+0x878>)
   11b1a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   11b1e:	f7fe fbd5 	bl	102cc <__adddf3>
   11b22:	4602      	mov	r2, r0
   11b24:	460b      	mov	r3, r1
   11b26:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   11b2a:	f7ff f815 	bl	10b58 <__aeabi_dcmpgt>
   11b2e:	2800      	cmp	r0, #0
   11b30:	f040 80ca 	bne.w	11cc8 <_dtoa_r+0x900>
   11b34:	2000      	movs	r0, #0
   11b36:	4942      	ldr	r1, [pc, #264]	; (11c40 <_dtoa_r+0x878>)
   11b38:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   11b3c:	f7fe fbc4 	bl	102c8 <__aeabi_dsub>
   11b40:	4602      	mov	r2, r0
   11b42:	460b      	mov	r3, r1
   11b44:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   11b48:	f7fe ffe8 	bl	10b1c <__aeabi_dcmplt>
   11b4c:	b170      	cbz	r0, 11b6c <_dtoa_r+0x7a4>
   11b4e:	46c2      	mov	sl, r8
   11b50:	f108 38ff 	add.w	r8, r8, #4294967295
   11b54:	f81a 3c01 	ldrb.w	r3, [sl, #-1]
   11b58:	2b30      	cmp	r3, #48	; 0x30
   11b5a:	d0f8      	beq.n	11b4e <_dtoa_r+0x786>
   11b5c:	4637      	mov	r7, r6
   11b5e:	e055      	b.n	11c0c <_dtoa_r+0x844>
   11b60:	4b33      	ldr	r3, [pc, #204]	; (11c30 <_dtoa_r+0x868>)
   11b62:	f7fe fd69 	bl	10638 <__aeabi_dmul>
   11b66:	e9cd 0104 	strd	r0, r1, [sp, #16]
   11b6a:	e7bd      	b.n	11ae8 <_dtoa_r+0x720>
   11b6c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
   11b70:	e9cd 3404 	strd	r3, r4, [sp, #16]
   11b74:	9b15      	ldr	r3, [sp, #84]	; 0x54
   11b76:	2b00      	cmp	r3, #0
   11b78:	f6ff ae28 	blt.w	117cc <_dtoa_r+0x404>
   11b7c:	2f0e      	cmp	r7, #14
   11b7e:	f73f ae25 	bgt.w	117cc <_dtoa_r+0x404>
   11b82:	4b2e      	ldr	r3, [pc, #184]	; (11c3c <_dtoa_r+0x874>)
   11b84:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
   11b88:	e9d3 3400 	ldrd	r3, r4, [r3]
   11b8c:	e9cd 3406 	strd	r3, r4, [sp, #24]
   11b90:	9b21      	ldr	r3, [sp, #132]	; 0x84
   11b92:	2b00      	cmp	r3, #0
   11b94:	da02      	bge.n	11b9c <_dtoa_r+0x7d4>
   11b96:	f1b9 0f00 	cmp.w	r9, #0
   11b9a:	d064      	beq.n	11c66 <_dtoa_r+0x89e>
   11b9c:	f8dd a020 	ldr.w	sl, [sp, #32]
   11ba0:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
   11ba4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   11ba8:	4620      	mov	r0, r4
   11baa:	4629      	mov	r1, r5
   11bac:	f7fe fe6e 	bl	1088c <__aeabi_ddiv>
   11bb0:	f7ff f96a 	bl	10e88 <__aeabi_d2iz>
   11bb4:	4606      	mov	r6, r0
   11bb6:	f7fe fcd5 	bl	10564 <__aeabi_i2d>
   11bba:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   11bbe:	f7fe fd3b 	bl	10638 <__aeabi_dmul>
   11bc2:	4602      	mov	r2, r0
   11bc4:	4620      	mov	r0, r4
   11bc6:	f106 0430 	add.w	r4, r6, #48	; 0x30
   11bca:	460b      	mov	r3, r1
   11bcc:	4629      	mov	r1, r5
   11bce:	f7fe fb7b 	bl	102c8 <__aeabi_dsub>
   11bd2:	f80a 4b01 	strb.w	r4, [sl], #1
   11bd6:	9c08      	ldr	r4, [sp, #32]
   11bd8:	4602      	mov	r2, r0
   11bda:	460b      	mov	r3, r1
   11bdc:	ebaa 0404 	sub.w	r4, sl, r4
   11be0:	45a1      	cmp	r9, r4
   11be2:	f040 8082 	bne.w	11cea <_dtoa_r+0x922>
   11be6:	f7fe fb71 	bl	102cc <__adddf3>
   11bea:	4604      	mov	r4, r0
   11bec:	460d      	mov	r5, r1
   11bee:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   11bf2:	f7fe ffb1 	bl	10b58 <__aeabi_dcmpgt>
   11bf6:	2800      	cmp	r0, #0
   11bf8:	d165      	bne.n	11cc6 <_dtoa_r+0x8fe>
   11bfa:	4620      	mov	r0, r4
   11bfc:	4629      	mov	r1, r5
   11bfe:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   11c02:	f7fe ff81 	bl	10b08 <__aeabi_dcmpeq>
   11c06:	b108      	cbz	r0, 11c0c <_dtoa_r+0x844>
   11c08:	07f3      	lsls	r3, r6, #31
   11c0a:	d45c      	bmi.n	11cc6 <_dtoa_r+0x8fe>
   11c0c:	9903      	ldr	r1, [sp, #12]
   11c0e:	4658      	mov	r0, fp
   11c10:	f006 fd5a 	bl	186c8 <_Bfree>
   11c14:	2300      	movs	r3, #0
   11c16:	3701      	adds	r7, #1
   11c18:	f88a 3000 	strb.w	r3, [sl]
   11c1c:	9b22      	ldr	r3, [sp, #136]	; 0x88
   11c1e:	601f      	str	r7, [r3, #0]
   11c20:	9b24      	ldr	r3, [sp, #144]	; 0x90
   11c22:	2b00      	cmp	r3, #0
   11c24:	f43f ac1c 	beq.w	11460 <_dtoa_r+0x98>
   11c28:	f8c3 a000 	str.w	sl, [r3]
   11c2c:	e418      	b.n	11460 <_dtoa_r+0x98>
   11c2e:	bf00      	nop
   11c30:	40240000 	.word	0x40240000
   11c34:	401c0000 	.word	0x401c0000
   11c38:	40140000 	.word	0x40140000
   11c3c:	0001baf0 	.word	0x0001baf0
   11c40:	3fe00000 	.word	0x3fe00000
   11c44:	3ff00000 	.word	0x3ff00000
   11c48:	4ba2      	ldr	r3, [pc, #648]	; (11ed4 <_dtoa_r+0xb0c>)
   11c4a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
   11c4e:	e9d3 3400 	ldrd	r3, r4, [r3]
   11c52:	e9cd 3406 	strd	r3, r4, [sp, #24]
   11c56:	9b21      	ldr	r3, [sp, #132]	; 0x84
   11c58:	2b00      	cmp	r3, #0
   11c5a:	da9f      	bge.n	11b9c <_dtoa_r+0x7d4>
   11c5c:	f1b9 0f00 	cmp.w	r9, #0
   11c60:	dc9c      	bgt.n	11b9c <_dtoa_r+0x7d4>
   11c62:	f47f aec3 	bne.w	119ec <_dtoa_r+0x624>
   11c66:	2200      	movs	r2, #0
   11c68:	4b9b      	ldr	r3, [pc, #620]	; (11ed8 <_dtoa_r+0xb10>)
   11c6a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   11c6e:	f7fe fce3 	bl	10638 <__aeabi_dmul>
   11c72:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   11c76:	f7fe ff65 	bl	10b44 <__aeabi_dcmpge>
   11c7a:	4604      	mov	r4, r0
   11c7c:	2800      	cmp	r0, #0
   11c7e:	f47f aeb5 	bne.w	119ec <_dtoa_r+0x624>
   11c82:	463e      	mov	r6, r7
   11c84:	4625      	mov	r5, r4
   11c86:	e0b4      	b.n	11df2 <_dtoa_r+0xa2a>
   11c88:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
   11c8c:	e9cd 3404 	strd	r3, r4, [sp, #16]
   11c90:	9b15      	ldr	r3, [sp, #84]	; 0x54
   11c92:	2b00      	cmp	r3, #0
   11c94:	db01      	blt.n	11c9a <_dtoa_r+0x8d2>
   11c96:	2f0e      	cmp	r7, #14
   11c98:	ddd6      	ble.n	11c48 <_dtoa_r+0x880>
   11c9a:	9a20      	ldr	r2, [sp, #128]	; 0x80
   11c9c:	2a01      	cmp	r2, #1
   11c9e:	dc36      	bgt.n	11d0e <_dtoa_r+0x946>
   11ca0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   11ca2:	b382      	cbz	r2, 11d06 <_dtoa_r+0x93e>
   11ca4:	f203 4333 	addw	r3, r3, #1075	; 0x433
   11ca8:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   11caa:	f8dd 8018 	ldr.w	r8, [sp, #24]
   11cae:	9a06      	ldr	r2, [sp, #24]
   11cb0:	2101      	movs	r1, #1
   11cb2:	4658      	mov	r0, fp
   11cb4:	441a      	add	r2, r3
   11cb6:	9206      	str	r2, [sp, #24]
   11cb8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   11cba:	441a      	add	r2, r3
   11cbc:	920a      	str	r2, [sp, #40]	; 0x28
   11cbe:	f006 fd6d 	bl	1879c <__i2b>
   11cc2:	4605      	mov	r5, r0
   11cc4:	e586      	b.n	117d4 <_dtoa_r+0x40c>
   11cc6:	463e      	mov	r6, r7
   11cc8:	4653      	mov	r3, sl
   11cca:	469a      	mov	sl, r3
   11ccc:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
   11cd0:	2a39      	cmp	r2, #57	; 0x39
   11cd2:	d106      	bne.n	11ce2 <_dtoa_r+0x91a>
   11cd4:	9a08      	ldr	r2, [sp, #32]
   11cd6:	429a      	cmp	r2, r3
   11cd8:	d1f7      	bne.n	11cca <_dtoa_r+0x902>
   11cda:	2230      	movs	r2, #48	; 0x30
   11cdc:	9908      	ldr	r1, [sp, #32]
   11cde:	3601      	adds	r6, #1
   11ce0:	700a      	strb	r2, [r1, #0]
   11ce2:	781a      	ldrb	r2, [r3, #0]
   11ce4:	3201      	adds	r2, #1
   11ce6:	701a      	strb	r2, [r3, #0]
   11ce8:	e738      	b.n	11b5c <_dtoa_r+0x794>
   11cea:	2200      	movs	r2, #0
   11cec:	4b7b      	ldr	r3, [pc, #492]	; (11edc <_dtoa_r+0xb14>)
   11cee:	f7fe fca3 	bl	10638 <__aeabi_dmul>
   11cf2:	2200      	movs	r2, #0
   11cf4:	2300      	movs	r3, #0
   11cf6:	4604      	mov	r4, r0
   11cf8:	460d      	mov	r5, r1
   11cfa:	f7fe ff05 	bl	10b08 <__aeabi_dcmpeq>
   11cfe:	2800      	cmp	r0, #0
   11d00:	f43f af50 	beq.w	11ba4 <_dtoa_r+0x7dc>
   11d04:	e782      	b.n	11c0c <_dtoa_r+0x844>
   11d06:	9b14      	ldr	r3, [sp, #80]	; 0x50
   11d08:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
   11d0c:	e7cc      	b.n	11ca8 <_dtoa_r+0x8e0>
   11d0e:	f109 34ff 	add.w	r4, r9, #4294967295
   11d12:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   11d14:	42a3      	cmp	r3, r4
   11d16:	db08      	blt.n	11d2a <_dtoa_r+0x962>
   11d18:	f1b9 0f00 	cmp.w	r9, #0
   11d1c:	eba3 0404 	sub.w	r4, r3, r4
   11d20:	db0e      	blt.n	11d40 <_dtoa_r+0x978>
   11d22:	f8dd 8018 	ldr.w	r8, [sp, #24]
   11d26:	464b      	mov	r3, r9
   11d28:	e7c1      	b.n	11cae <_dtoa_r+0x8e6>
   11d2a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   11d2c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   11d2e:	1ae3      	subs	r3, r4, r3
   11d30:	940b      	str	r4, [sp, #44]	; 0x2c
   11d32:	f8dd 8018 	ldr.w	r8, [sp, #24]
   11d36:	2400      	movs	r4, #0
   11d38:	441a      	add	r2, r3
   11d3a:	464b      	mov	r3, r9
   11d3c:	920f      	str	r2, [sp, #60]	; 0x3c
   11d3e:	e7b6      	b.n	11cae <_dtoa_r+0x8e6>
   11d40:	9b06      	ldr	r3, [sp, #24]
   11d42:	eba3 0809 	sub.w	r8, r3, r9
   11d46:	2300      	movs	r3, #0
   11d48:	e7b1      	b.n	11cae <_dtoa_r+0x8e6>
   11d4a:	9e03      	ldr	r6, [sp, #12]
   11d4c:	e571      	b.n	11832 <_dtoa_r+0x46a>
   11d4e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   11d50:	9903      	ldr	r1, [sp, #12]
   11d52:	e570      	b.n	11836 <_dtoa_r+0x46e>
   11d54:	9603      	str	r6, [sp, #12]
   11d56:	e572      	b.n	1183e <_dtoa_r+0x476>
   11d58:	9b20      	ldr	r3, [sp, #128]	; 0x80
   11d5a:	2b01      	cmp	r3, #1
   11d5c:	dc17      	bgt.n	11d8e <_dtoa_r+0x9c6>
   11d5e:	9b04      	ldr	r3, [sp, #16]
   11d60:	b9ab      	cbnz	r3, 11d8e <_dtoa_r+0x9c6>
   11d62:	9b05      	ldr	r3, [sp, #20]
   11d64:	f3c3 0313 	ubfx	r3, r3, #0, #20
   11d68:	b99b      	cbnz	r3, 11d92 <_dtoa_r+0x9ca>
   11d6a:	9b05      	ldr	r3, [sp, #20]
   11d6c:	f023 4600 	bic.w	r6, r3, #2147483648	; 0x80000000
   11d70:	0d36      	lsrs	r6, r6, #20
   11d72:	0536      	lsls	r6, r6, #20
   11d74:	b136      	cbz	r6, 11d84 <_dtoa_r+0x9bc>
   11d76:	9b06      	ldr	r3, [sp, #24]
   11d78:	2601      	movs	r6, #1
   11d7a:	3301      	adds	r3, #1
   11d7c:	9306      	str	r3, [sp, #24]
   11d7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   11d80:	3301      	adds	r3, #1
   11d82:	930a      	str	r3, [sp, #40]	; 0x28
   11d84:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   11d86:	2b00      	cmp	r3, #0
   11d88:	f47f ad70 	bne.w	1186c <_dtoa_r+0x4a4>
   11d8c:	960f      	str	r6, [sp, #60]	; 0x3c
   11d8e:	2001      	movs	r0, #1
   11d90:	e575      	b.n	1187e <_dtoa_r+0x4b6>
   11d92:	2600      	movs	r6, #0
   11d94:	e7f6      	b.n	11d84 <_dtoa_r+0x9bc>
   11d96:	f43f ad86 	beq.w	118a6 <_dtoa_r+0x4de>
   11d9a:	331c      	adds	r3, #28
   11d9c:	9a06      	ldr	r2, [sp, #24]
   11d9e:	441a      	add	r2, r3
   11da0:	4498      	add	r8, r3
   11da2:	9206      	str	r2, [sp, #24]
   11da4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   11da6:	441a      	add	r2, r3
   11da8:	920a      	str	r2, [sp, #40]	; 0x28
   11daa:	e57c      	b.n	118a6 <_dtoa_r+0x4de>
   11dac:	4603      	mov	r3, r0
   11dae:	e7f4      	b.n	11d9a <_dtoa_r+0x9d2>
   11db0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   11db2:	2b00      	cmp	r3, #0
   11db4:	dc2b      	bgt.n	11e0e <_dtoa_r+0xa46>
   11db6:	9b20      	ldr	r3, [sp, #128]	; 0x80
   11db8:	2b02      	cmp	r3, #2
   11dba:	dc09      	bgt.n	11dd0 <_dtoa_r+0xa08>
   11dbc:	e027      	b.n	11e0e <_dtoa_r+0xa46>
   11dbe:	f1b9 0f00 	cmp.w	r9, #0
   11dc2:	dc1d      	bgt.n	11e00 <_dtoa_r+0xa38>
   11dc4:	9b20      	ldr	r3, [sp, #128]	; 0x80
   11dc6:	2b02      	cmp	r3, #2
   11dc8:	dd1a      	ble.n	11e00 <_dtoa_r+0xa38>
   11dca:	463e      	mov	r6, r7
   11dcc:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
   11dd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   11dd2:	2b00      	cmp	r3, #0
   11dd4:	f47f ae0c 	bne.w	119f0 <_dtoa_r+0x628>
   11dd8:	4621      	mov	r1, r4
   11dda:	2205      	movs	r2, #5
   11ddc:	4658      	mov	r0, fp
   11dde:	f006 fc95 	bl	1870c <__multadd>
   11de2:	4601      	mov	r1, r0
   11de4:	4604      	mov	r4, r0
   11de6:	9803      	ldr	r0, [sp, #12]
   11de8:	f009 fb4a 	bl	1b480 <__mcmp>
   11dec:	2800      	cmp	r0, #0
   11dee:	f77f adff 	ble.w	119f0 <_dtoa_r+0x628>
   11df2:	f8dd a020 	ldr.w	sl, [sp, #32]
   11df6:	2331      	movs	r3, #49	; 0x31
   11df8:	3601      	adds	r6, #1
   11dfa:	f80a 3b01 	strb.w	r3, [sl], #1
   11dfe:	e5fb      	b.n	119f8 <_dtoa_r+0x630>
   11e00:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   11e02:	463e      	mov	r6, r7
   11e04:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
   11e08:	2b00      	cmp	r3, #0
   11e0a:	f47f ad83 	bne.w	11914 <_dtoa_r+0x54c>
   11e0e:	9f08      	ldr	r7, [sp, #32]
   11e10:	4621      	mov	r1, r4
   11e12:	9803      	ldr	r0, [sp, #12]
   11e14:	f009 fa15 	bl	1b242 <quorem>
   11e18:	9b08      	ldr	r3, [sp, #32]
   11e1a:	f100 0930 	add.w	r9, r0, #48	; 0x30
   11e1e:	9a09      	ldr	r2, [sp, #36]	; 0x24
   11e20:	f807 9b01 	strb.w	r9, [r7], #1
   11e24:	1afb      	subs	r3, r7, r3
   11e26:	429a      	cmp	r2, r3
   11e28:	f340 80cb 	ble.w	11fc2 <_dtoa_r+0xbfa>
   11e2c:	2300      	movs	r3, #0
   11e2e:	220a      	movs	r2, #10
   11e30:	9903      	ldr	r1, [sp, #12]
   11e32:	4658      	mov	r0, fp
   11e34:	f006 fc6a 	bl	1870c <__multadd>
   11e38:	9003      	str	r0, [sp, #12]
   11e3a:	e7e9      	b.n	11e10 <_dtoa_r+0xa48>
   11e3c:	692a      	ldr	r2, [r5, #16]
   11e3e:	f105 010c 	add.w	r1, r5, #12
   11e42:	300c      	adds	r0, #12
   11e44:	3202      	adds	r2, #2
   11e46:	0092      	lsls	r2, r2, #2
   11e48:	f009 f8ba 	bl	1afc0 <memcpy>
   11e4c:	2201      	movs	r2, #1
   11e4e:	4639      	mov	r1, r7
   11e50:	4658      	mov	r0, fp
   11e52:	f006 fdbd 	bl	189d0 <__lshift>
   11e56:	9b08      	ldr	r3, [sp, #32]
   11e58:	46a8      	mov	r8, r5
   11e5a:	4605      	mov	r5, r0
   11e5c:	f103 0a01 	add.w	sl, r3, #1
   11e60:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   11e64:	4413      	add	r3, r2
   11e66:	930a      	str	r3, [sp, #40]	; 0x28
   11e68:	9b04      	ldr	r3, [sp, #16]
   11e6a:	f003 0301 	and.w	r3, r3, #1
   11e6e:	930b      	str	r3, [sp, #44]	; 0x2c
   11e70:	f10a 33ff 	add.w	r3, sl, #4294967295
   11e74:	4621      	mov	r1, r4
   11e76:	9803      	ldr	r0, [sp, #12]
   11e78:	9306      	str	r3, [sp, #24]
   11e7a:	f009 f9e2 	bl	1b242 <quorem>
   11e7e:	4641      	mov	r1, r8
   11e80:	9009      	str	r0, [sp, #36]	; 0x24
   11e82:	f100 0930 	add.w	r9, r0, #48	; 0x30
   11e86:	9803      	ldr	r0, [sp, #12]
   11e88:	f009 fafa 	bl	1b480 <__mcmp>
   11e8c:	462a      	mov	r2, r5
   11e8e:	4621      	mov	r1, r4
   11e90:	4607      	mov	r7, r0
   11e92:	4658      	mov	r0, fp
   11e94:	f006 fe08 	bl	18aa8 <__mdiff>
   11e98:	68c2      	ldr	r2, [r0, #12]
   11e9a:	4601      	mov	r1, r0
   11e9c:	b302      	cbz	r2, 11ee0 <_dtoa_r+0xb18>
   11e9e:	4658      	mov	r0, fp
   11ea0:	f006 fc12 	bl	186c8 <_Bfree>
   11ea4:	2f00      	cmp	r7, #0
   11ea6:	da3a      	bge.n	11f1e <_dtoa_r+0xb56>
   11ea8:	2201      	movs	r2, #1
   11eaa:	9903      	ldr	r1, [sp, #12]
   11eac:	4658      	mov	r0, fp
   11eae:	f006 fd8f 	bl	189d0 <__lshift>
   11eb2:	4621      	mov	r1, r4
   11eb4:	9003      	str	r0, [sp, #12]
   11eb6:	f009 fae3 	bl	1b480 <__mcmp>
   11eba:	2800      	cmp	r0, #0
   11ebc:	dc03      	bgt.n	11ec6 <_dtoa_r+0xafe>
   11ebe:	d129      	bne.n	11f14 <_dtoa_r+0xb4c>
   11ec0:	f019 0f01 	tst.w	r9, #1
   11ec4:	d026      	beq.n	11f14 <_dtoa_r+0xb4c>
   11ec6:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
   11eca:	d11d      	bne.n	11f08 <_dtoa_r+0xb40>
   11ecc:	e032      	b.n	11f34 <_dtoa_r+0xb6c>
   11ece:	4628      	mov	r0, r5
   11ed0:	e7c1      	b.n	11e56 <_dtoa_r+0xa8e>
   11ed2:	bf00      	nop
   11ed4:	0001baf0 	.word	0x0001baf0
   11ed8:	40140000 	.word	0x40140000
   11edc:	40240000 	.word	0x40240000
   11ee0:	900e      	str	r0, [sp, #56]	; 0x38
   11ee2:	9803      	ldr	r0, [sp, #12]
   11ee4:	f009 facc 	bl	1b480 <__mcmp>
   11ee8:	990e      	ldr	r1, [sp, #56]	; 0x38
   11eea:	900c      	str	r0, [sp, #48]	; 0x30
   11eec:	4658      	mov	r0, fp
   11eee:	f006 fbeb 	bl	186c8 <_Bfree>
   11ef2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   11ef4:	bb5a      	cbnz	r2, 11f4e <_dtoa_r+0xb86>
   11ef6:	9b20      	ldr	r3, [sp, #128]	; 0x80
   11ef8:	b953      	cbnz	r3, 11f10 <_dtoa_r+0xb48>
   11efa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   11efc:	b943      	cbnz	r3, 11f10 <_dtoa_r+0xb48>
   11efe:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
   11f02:	d017      	beq.n	11f34 <_dtoa_r+0xb6c>
   11f04:	2f00      	cmp	r7, #0
   11f06:	dd05      	ble.n	11f14 <_dtoa_r+0xb4c>
   11f08:	9b09      	ldr	r3, [sp, #36]	; 0x24
   11f0a:	f103 0931 	add.w	r9, r3, #49	; 0x31
   11f0e:	e001      	b.n	11f14 <_dtoa_r+0xb4c>
   11f10:	2f00      	cmp	r7, #0
   11f12:	da2a      	bge.n	11f6a <_dtoa_r+0xba2>
   11f14:	f8dd a018 	ldr.w	sl, [sp, #24]
   11f18:	f80a 9b01 	strb.w	r9, [sl], #1
   11f1c:	e56e      	b.n	119fc <_dtoa_r+0x634>
   11f1e:	9b20      	ldr	r3, [sp, #128]	; 0x80
   11f20:	433b      	orrs	r3, r7
   11f22:	d104      	bne.n	11f2e <_dtoa_r+0xb66>
   11f24:	9b04      	ldr	r3, [sp, #16]
   11f26:	f003 0301 	and.w	r3, r3, #1
   11f2a:	2b00      	cmp	r3, #0
   11f2c:	d0bc      	beq.n	11ea8 <_dtoa_r+0xae0>
   11f2e:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
   11f32:	d136      	bne.n	11fa2 <_dtoa_r+0xbda>
   11f34:	9f06      	ldr	r7, [sp, #24]
   11f36:	2339      	movs	r3, #57	; 0x39
   11f38:	f807 3b01 	strb.w	r3, [r7], #1
   11f3c:	46ba      	mov	sl, r7
   11f3e:	3f01      	subs	r7, #1
   11f40:	f81a 3c01 	ldrb.w	r3, [sl, #-1]
   11f44:	2b39      	cmp	r3, #57	; 0x39
   11f46:	d05a      	beq.n	11ffe <_dtoa_r+0xc36>
   11f48:	3301      	adds	r3, #1
   11f4a:	703b      	strb	r3, [r7, #0]
   11f4c:	e556      	b.n	119fc <_dtoa_r+0x634>
   11f4e:	2f00      	cmp	r7, #0
   11f50:	db06      	blt.n	11f60 <_dtoa_r+0xb98>
   11f52:	9b20      	ldr	r3, [sp, #128]	; 0x80
   11f54:	433b      	orrs	r3, r7
   11f56:	d106      	bne.n	11f66 <_dtoa_r+0xb9e>
   11f58:	9b04      	ldr	r3, [sp, #16]
   11f5a:	f003 0301 	and.w	r3, r3, #1
   11f5e:	b913      	cbnz	r3, 11f66 <_dtoa_r+0xb9e>
   11f60:	2a00      	cmp	r2, #0
   11f62:	dca1      	bgt.n	11ea8 <_dtoa_r+0xae0>
   11f64:	e7d6      	b.n	11f14 <_dtoa_r+0xb4c>
   11f66:	2a00      	cmp	r2, #0
   11f68:	dce1      	bgt.n	11f2e <_dtoa_r+0xb66>
   11f6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   11f6c:	4657      	mov	r7, sl
   11f6e:	f80a 9c01 	strb.w	r9, [sl, #-1]
   11f72:	4553      	cmp	r3, sl
   11f74:	d02e      	beq.n	11fd4 <_dtoa_r+0xc0c>
   11f76:	2300      	movs	r3, #0
   11f78:	220a      	movs	r2, #10
   11f7a:	9903      	ldr	r1, [sp, #12]
   11f7c:	4658      	mov	r0, fp
   11f7e:	f006 fbc5 	bl	1870c <__multadd>
   11f82:	45a8      	cmp	r8, r5
   11f84:	9003      	str	r0, [sp, #12]
   11f86:	f04f 0300 	mov.w	r3, #0
   11f8a:	f04f 020a 	mov.w	r2, #10
   11f8e:	4641      	mov	r1, r8
   11f90:	4658      	mov	r0, fp
   11f92:	d10b      	bne.n	11fac <_dtoa_r+0xbe4>
   11f94:	f006 fbba 	bl	1870c <__multadd>
   11f98:	4680      	mov	r8, r0
   11f9a:	4605      	mov	r5, r0
   11f9c:	f10a 0a01 	add.w	sl, sl, #1
   11fa0:	e766      	b.n	11e70 <_dtoa_r+0xaa8>
   11fa2:	f8dd a018 	ldr.w	sl, [sp, #24]
   11fa6:	f109 0901 	add.w	r9, r9, #1
   11faa:	e7b5      	b.n	11f18 <_dtoa_r+0xb50>
   11fac:	f006 fbae 	bl	1870c <__multadd>
   11fb0:	4629      	mov	r1, r5
   11fb2:	4680      	mov	r8, r0
   11fb4:	2300      	movs	r3, #0
   11fb6:	220a      	movs	r2, #10
   11fb8:	4658      	mov	r0, fp
   11fba:	f006 fba7 	bl	1870c <__multadd>
   11fbe:	4605      	mov	r5, r0
   11fc0:	e7ec      	b.n	11f9c <_dtoa_r+0xbd4>
   11fc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
   11fc4:	f04f 0800 	mov.w	r8, #0
   11fc8:	2b00      	cmp	r3, #0
   11fca:	bfcc      	ite	gt
   11fcc:	461f      	movgt	r7, r3
   11fce:	2701      	movle	r7, #1
   11fd0:	9b08      	ldr	r3, [sp, #32]
   11fd2:	441f      	add	r7, r3
   11fd4:	2201      	movs	r2, #1
   11fd6:	9903      	ldr	r1, [sp, #12]
   11fd8:	4658      	mov	r0, fp
   11fda:	f006 fcf9 	bl	189d0 <__lshift>
   11fde:	4621      	mov	r1, r4
   11fe0:	9003      	str	r0, [sp, #12]
   11fe2:	f009 fa4d 	bl	1b480 <__mcmp>
   11fe6:	2800      	cmp	r0, #0
   11fe8:	dca8      	bgt.n	11f3c <_dtoa_r+0xb74>
   11fea:	d102      	bne.n	11ff2 <_dtoa_r+0xc2a>
   11fec:	f019 0f01 	tst.w	r9, #1
   11ff0:	d1a4      	bne.n	11f3c <_dtoa_r+0xb74>
   11ff2:	46ba      	mov	sl, r7
   11ff4:	f817 3d01 	ldrb.w	r3, [r7, #-1]!
   11ff8:	2b30      	cmp	r3, #48	; 0x30
   11ffa:	d0fa      	beq.n	11ff2 <_dtoa_r+0xc2a>
   11ffc:	e4fe      	b.n	119fc <_dtoa_r+0x634>
   11ffe:	9b08      	ldr	r3, [sp, #32]
   12000:	42bb      	cmp	r3, r7
   12002:	d19b      	bne.n	11f3c <_dtoa_r+0xb74>
   12004:	2331      	movs	r3, #49	; 0x31
   12006:	9a08      	ldr	r2, [sp, #32]
   12008:	3601      	adds	r6, #1
   1200a:	7013      	strb	r3, [r2, #0]
   1200c:	e4f6      	b.n	119fc <_dtoa_r+0x634>
   1200e:	9b24      	ldr	r3, [sp, #144]	; 0x90
   12010:	2b00      	cmp	r3, #0
   12012:	f47f aa20 	bne.w	11456 <_dtoa_r+0x8e>
   12016:	4b01      	ldr	r3, [pc, #4]	; (1201c <_dtoa_r+0xc54>)
   12018:	f7ff ba3f 	b.w	1149a <_dtoa_r+0xd2>
   1201c:	0001c54d 	.word	0x0001c54d

00012020 <main>:
#include "peripheral.h"
#include "mlx90632.h"

bool enable_measure = false;

void main(void){
   12020:	b508      	push	{r3, lr}

	peripheral_init();
   12022:	f000 f93f 	bl	122a4 <peripheral_init>
   12026:	e008      	b.n	1203a <main+0x1a>
	
	while (1){

		if(is_button1_pressed())enable_measure = true;
		if(is_button2_pressed())enable_measure = false;
		if(enable_measure) mlx90632_read();
   12028:	4b0b      	ldr	r3, [pc, #44]	; (12058 <main+0x38>)
   1202a:	781b      	ldrb	r3, [r3, #0]
   1202c:	b10b      	cbz	r3, 12032 <main+0x12>
   1202e:	f000 fe67 	bl	12d00 <mlx90632_read>
		msleep(1000);
   12032:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   12036:	f007 fabd 	bl	195b4 <msleep>
		if(is_button1_pressed())enable_measure = true;
   1203a:	f000 f985 	bl	12348 <is_button1_pressed>
   1203e:	b110      	cbz	r0, 12046 <main+0x26>
   12040:	4b05      	ldr	r3, [pc, #20]	; (12058 <main+0x38>)
   12042:	2201      	movs	r2, #1
   12044:	701a      	strb	r2, [r3, #0]
		if(is_button2_pressed())enable_measure = false;
   12046:	f000 f98f 	bl	12368 <is_button2_pressed>
   1204a:	2800      	cmp	r0, #0
   1204c:	d0ec      	beq.n	12028 <main+0x8>
   1204e:	4b02      	ldr	r3, [pc, #8]	; (12058 <main+0x38>)
   12050:	2200      	movs	r2, #0
   12052:	701a      	strb	r2, [r3, #0]
   12054:	e7e8      	b.n	12028 <main+0x8>
   12056:	bf00      	nop
   12058:	200086a0 	.word	0x200086a0

0001205c <interrupt_callback>:

void gpio_enable(Gpio_t* gt, uint8_t channel, bool enable){
	gt[channel].active = enable;
}

void interrupt_callback(const struct device *dev, struct gpio_callback *cb, uint32_t pins){
   1205c:	b570      	push	{r4, r5, r6, lr}
   1205e:	4615      	mov	r5, r2
	for (int i = 0; i < NUM_GPIO_PERIP; i++) {
   12060:	2400      	movs	r4, #0
   12062:	e000      	b.n	12066 <interrupt_callback+0xa>
   12064:	3401      	adds	r4, #1
   12066:	2c01      	cmp	r4, #1
   12068:	dc17      	bgt.n	1209a <interrupt_callback+0x3e>
		if (pins & BIT(gpio_a[i].pin)) {
   1206a:	4b0c      	ldr	r3, [pc, #48]	; (1209c <interrupt_callback+0x40>)
   1206c:	222c      	movs	r2, #44	; 0x2c
   1206e:	fb02 3304 	mla	r3, r2, r4, r3
   12072:	7a1b      	ldrb	r3, [r3, #8]
   12074:	fa25 f303 	lsr.w	r3, r5, r3
   12078:	f013 0f01 	tst.w	r3, #1
   1207c:	d0f2      	beq.n	12064 <interrupt_callback+0x8>
			gpio_a[i].g_int.status = true;
   1207e:	4e07      	ldr	r6, [pc, #28]	; (1209c <interrupt_callback+0x40>)
   12080:	fb02 6604 	mla	r6, r2, r4, r6
   12084:	2301      	movs	r3, #1
   12086:	f886 3020 	strb.w	r3, [r6, #32]
			LOG("GPIO interrupt triggered for %s", gpio_a[i].label);
   1208a:	f007 f95a 	bl	19342 <k_uptime_get_32>
   1208e:	4601      	mov	r1, r0
   12090:	6ab2      	ldr	r2, [r6, #40]	; 0x28
   12092:	4803      	ldr	r0, [pc, #12]	; (120a0 <interrupt_callback+0x44>)
   12094:	f006 f9e0 	bl	18458 <iprintf>
   12098:	e7e4      	b.n	12064 <interrupt_callback+0x8>
    	}
	}
}
   1209a:	bd70      	pop	{r4, r5, r6, pc}
   1209c:	20008000 	.word	0x20008000
   120a0:	0001bbb8 	.word	0x0001bbb8

000120a4 <gpio_init>:
		}
	}
	return pin_list;
}

void gpio_init(Gpio_t* gt, uint8_t channel, uint8_t size){
   120a4:	b510      	push	{r4, lr}
	if (channel < size) {
   120a6:	4291      	cmp	r1, r2
   120a8:	d22a      	bcs.n	12100 <gpio_init+0x5c>
		if (gt[channel].active){
   120aa:	232c      	movs	r3, #44	; 0x2c
   120ac:	fb03 f101 	mul.w	r1, r3, r1
   120b0:	1844      	adds	r4, r0, r1
   120b2:	5c43      	ldrb	r3, [r0, r1]
   120b4:	b1cb      	cbz	r3, 120ea <gpio_init+0x46>
			if (!device_is_ready(gt[channel].dev)){
   120b6:	6860      	ldr	r0, [r4, #4]
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
   120b8:	f008 fd89 	bl	1abce <z_device_is_ready>
   120bc:	b950      	cbnz	r0, 120d4 <gpio_init+0x30>
				LOG("Error: GPIO device %s is not ready", gt[channel].label);
   120be:	f007 f940 	bl	19342 <k_uptime_get_32>
   120c2:	4601      	mov	r1, r0
   120c4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   120c6:	4812      	ldr	r0, [pc, #72]	; (12110 <gpio_init+0x6c>)
   120c8:	f006 f9c6 	bl	18458 <iprintf>
				gt[channel].error = ERROR_GPIO_INIT;
   120cc:	2380      	movs	r3, #128	; 0x80
   120ce:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
   120d2:	e014      	b.n	120fe <gpio_init+0x5a>
			}else			{
				LOG("GPIO device %s is ready", gt[channel].label);
   120d4:	f007 f935 	bl	19342 <k_uptime_get_32>
   120d8:	4601      	mov	r1, r0
   120da:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   120dc:	480d      	ldr	r0, [pc, #52]	; (12114 <gpio_init+0x70>)
   120de:	f006 f9bb 	bl	18458 <iprintf>
				gt[channel].error = 0;
   120e2:	2300      	movs	r3, #0
   120e4:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
   120e8:	e009      	b.n	120fe <gpio_init+0x5a>
			}
		}else{
			LOG("GPIO device %s is not active", gt[channel].label);
   120ea:	f007 f92a 	bl	19342 <k_uptime_get_32>
   120ee:	4601      	mov	r1, r0
   120f0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   120f2:	4809      	ldr	r0, [pc, #36]	; (12118 <gpio_init+0x74>)
   120f4:	f006 f9b0 	bl	18458 <iprintf>
			gt[channel].error = ERROR_GPIO_INIT;
   120f8:	2380      	movs	r3, #128	; 0x80
   120fa:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
		}
	}else{
		LOG("Error: Channel index out of bounds");
		return;	
	}	
}
   120fe:	bd10      	pop	{r4, pc}
		LOG("Error: Channel index out of bounds");
   12100:	f007 f91f 	bl	19342 <k_uptime_get_32>
   12104:	4601      	mov	r1, r0
   12106:	4805      	ldr	r0, [pc, #20]	; (1211c <gpio_init+0x78>)
   12108:	f006 f9a6 	bl	18458 <iprintf>
		return;	
   1210c:	e7f7      	b.n	120fe <gpio_init+0x5a>
   1210e:	bf00      	nop
   12110:	0001bbe4 	.word	0x0001bbe4
   12114:	0001bc10 	.word	0x0001bc10
   12118:	0001bc34 	.word	0x0001bc34
   1211c:	0001bc5c 	.word	0x0001bc5c

00012120 <gpio_configure>:

void gpio_configure(Gpio_t* gt, uint8_t channel,  uint8_t size){
	int ret;
	if (channel < size) {
   12120:	4291      	cmp	r1, r2
   12122:	d226      	bcs.n	12172 <gpio_configure+0x52>
void gpio_configure(Gpio_t* gt, uint8_t channel,  uint8_t size){
   12124:	b510      	push	{r4, lr}
		if (gt[channel].active){
   12126:	232c      	movs	r3, #44	; 0x2c
   12128:	fb03 f101 	mul.w	r1, r3, r1
   1212c:	1844      	adds	r4, r0, r1
   1212e:	5c43      	ldrb	r3, [r0, r1]
   12130:	b903      	cbnz	r3, 12134 <gpio_configure+0x14>
				LOG("GPIO device %s configured successfully", gt[channel].label);
				gt[channel].error = 0;
			}
		}
	}
}
   12132:	bd10      	pop	{r4, pc}
			ret = gpio_pin_configure(gt[channel].dev, gt[channel].pin, gt[channel].flags | gt[channel].direction);
   12134:	6860      	ldr	r0, [r4, #4]
   12136:	7a21      	ldrb	r1, [r4, #8]
   12138:	68e2      	ldr	r2, [r4, #12]
   1213a:	6923      	ldr	r3, [r4, #16]
   1213c:	431a      	orrs	r2, r3
		union { uintptr_t x; gpio_flags_t val; } parm2 = { .val = flags };
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_GPIO_PIN_CONFIGURE);
	}
#endif
	compiler_barrier();
	return z_impl_gpio_pin_configure(port, pin, flags);
   1213e:	f007 f8ce 	bl	192de <z_impl_gpio_pin_configure>
			if (ret < 0){
   12142:	2800      	cmp	r0, #0
   12144:	db0a      	blt.n	1215c <gpio_configure+0x3c>
				LOG("GPIO device %s configured successfully", gt[channel].label);
   12146:	f007 f8fc 	bl	19342 <k_uptime_get_32>
   1214a:	4601      	mov	r1, r0
   1214c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   1214e:	4809      	ldr	r0, [pc, #36]	; (12174 <gpio_configure+0x54>)
   12150:	f006 f982 	bl	18458 <iprintf>
				gt[channel].error = 0;
   12154:	2300      	movs	r3, #0
   12156:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
}
   1215a:	e7ea      	b.n	12132 <gpio_configure+0x12>
				LOG("Error: GPIO device %s cannot be configured", gt[channel].label);
   1215c:	f007 f8f1 	bl	19342 <k_uptime_get_32>
   12160:	4601      	mov	r1, r0
   12162:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   12164:	4804      	ldr	r0, [pc, #16]	; (12178 <gpio_configure+0x58>)
   12166:	f006 f977 	bl	18458 <iprintf>
				gt[channel].error = ERROR_GPIO_INIT;
   1216a:	2380      	movs	r3, #128	; 0x80
   1216c:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
   12170:	e7df      	b.n	12132 <gpio_configure+0x12>
   12172:	4770      	bx	lr
   12174:	0001bcbc 	.word	0x0001bcbc
   12178:	0001bc88 	.word	0x0001bc88

0001217c <gpio_configure_interrupt>:

void gpio_configure_interrupt(Gpio_t* gt, uint8_t channel, uint8_t size){
   1217c:	b570      	push	{r4, r5, r6, lr}
	if (channel < size) {
   1217e:	4291      	cmp	r1, r2
   12180:	d229      	bcs.n	121d6 <gpio_configure_interrupt+0x5a>
   12182:	4604      	mov	r4, r0
   12184:	4615      	mov	r5, r2
		if (gt[channel].active){
   12186:	232c      	movs	r3, #44	; 0x2c
   12188:	fb03 f101 	mul.w	r1, r3, r1
   1218c:	1846      	adds	r6, r0, r1
   1218e:	5c43      	ldrb	r3, [r0, r1]
   12190:	b1c3      	cbz	r3, 121c4 <gpio_configure_interrupt+0x48>
			if(!gt[channel].g_int.active){
   12192:	7e33      	ldrb	r3, [r6, #24]
   12194:	b1bb      	cbz	r3, 121c6 <gpio_configure_interrupt+0x4a>
				LOG("Error: GPIO interrupt for %s is not active", gt[channel].label);
				return;
			}else{
				LOG("GPIO interrupt for %s is active", gt[channel].label);
   12196:	f007 f8d4 	bl	19342 <k_uptime_get_32>
   1219a:	4601      	mov	r1, r0
   1219c:	6ab2      	ldr	r2, [r6, #40]	; 0x28
   1219e:	4811      	ldr	r0, [pc, #68]	; (121e4 <gpio_configure_interrupt+0x68>)
   121a0:	f006 f95a 	bl	18458 <iprintf>
				gpio_pin_interrupt_configure(gt[channel].dev, gt[channel].pin,  gt[channel].g_int.port_config);
   121a4:	6870      	ldr	r0, [r6, #4]
   121a6:	7a31      	ldrb	r1, [r6, #8]
   121a8:	69f2      	ldr	r2, [r6, #28]
	return z_impl_gpio_pin_interrupt_configure(port, pin, flags);
   121aa:	f007 f884 	bl	192b6 <z_impl_gpio_pin_interrupt_configure>
				gpio_init_callback(&cb, interrupt_callback, get_gpio_pin_interrupt_config(gt, size));
   121ae:	4629      	mov	r1, r5
   121b0:	4620      	mov	r0, r4
   121b2:	f007 f8ea 	bl	1938a <get_gpio_pin_interrupt_config>
				      gpio_port_pins_t pin_mask)
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
   121b6:	490c      	ldr	r1, [pc, #48]	; (121e8 <gpio_configure_interrupt+0x6c>)
   121b8:	4b0c      	ldr	r3, [pc, #48]	; (121ec <gpio_configure_interrupt+0x70>)
   121ba:	604b      	str	r3, [r1, #4]
	callback->pin_mask = pin_mask;
   121bc:	6088      	str	r0, [r1, #8]
				gpio_add_callback(gt[channel].dev, &cb);
   121be:	6870      	ldr	r0, [r6, #4]
   121c0:	f007 f8b5 	bl	1932e <gpio_add_callback>
		}
	}else {
		LOG("Error: Channel index out of bounds");
		return;	
	}
}
   121c4:	bd70      	pop	{r4, r5, r6, pc}
				LOG("Error: GPIO interrupt for %s is not active", gt[channel].label);
   121c6:	f007 f8bc 	bl	19342 <k_uptime_get_32>
   121ca:	4601      	mov	r1, r0
   121cc:	6ab2      	ldr	r2, [r6, #40]	; 0x28
   121ce:	4808      	ldr	r0, [pc, #32]	; (121f0 <gpio_configure_interrupt+0x74>)
   121d0:	f006 f942 	bl	18458 <iprintf>
				return;
   121d4:	e7f6      	b.n	121c4 <gpio_configure_interrupt+0x48>
		LOG("Error: Channel index out of bounds");
   121d6:	f007 f8b4 	bl	19342 <k_uptime_get_32>
   121da:	4601      	mov	r1, r0
   121dc:	4805      	ldr	r0, [pc, #20]	; (121f4 <gpio_configure_interrupt+0x78>)
   121de:	f006 f93b 	bl	18458 <iprintf>
		return;	
   121e2:	e7ef      	b.n	121c4 <gpio_configure_interrupt+0x48>
   121e4:	0001bd20 	.word	0x0001bd20
   121e8:	200084b0 	.word	0x200084b0
   121ec:	0001205d 	.word	0x0001205d
   121f0:	0001bcec 	.word	0x0001bcec
   121f4:	0001bc5c 	.word	0x0001bc5c

000121f8 <i2c_scan>:
        LOG("I2c scan found no devices");
    }
    return ret;
}

uint16_t i2c_scan(){
   121f8:	b570      	push	{r4, r5, r6, lr}
   121fa:	b084      	sub	sp, #16
    int error;
    uint16_t address = 0xFFFF;
    for (uint8_t i = 4; i <= 0x7F; i++) {
   121fc:	2404      	movs	r4, #4
    uint16_t address = 0xFFFF;
   121fe:	f64f 76ff 	movw	r6, #65535	; 0xffff
    for (uint8_t i = 4; i <= 0x7F; i++) {
   12202:	e001      	b.n	12208 <i2c_scan+0x10>
   12204:	3401      	adds	r4, #1
   12206:	b2e4      	uxtb	r4, r4
   12208:	f014 0f80 	tst.w	r4, #128	; 0x80
   1220c:	d11a      	bne.n	12244 <i2c_scan+0x4c>
		struct i2c_msg msgs[1];
		uint8_t dst = 1;
   1220e:	2201      	movs	r2, #1
   12210:	f88d 2003 	strb.w	r2, [sp, #3]
		msgs[0].buf = &dst;
   12214:	f10d 0303 	add.w	r3, sp, #3
   12218:	9301      	str	r3, [sp, #4]
		msgs[0].len = 1U;
   1221a:	9202      	str	r2, [sp, #8]
		msgs[0].flags = I2C_MSG_WRITE | I2C_MSG_STOP;
   1221c:	2302      	movs	r3, #2
   1221e:	f88d 300c 	strb.w	r3, [sp, #12]

static inline int z_impl_i2c_transfer(const struct device *dev,
				      struct i2c_msg *msgs, uint8_t num_msgs,
				      uint16_t addr)
{
	const struct i2c_driver_api *api =
   12222:	480a      	ldr	r0, [pc, #40]	; (1224c <i2c_scan+0x54>)
   12224:	6883      	ldr	r3, [r0, #8]
		(const struct i2c_driver_api *)dev->api;

	int res =  api->transfer(dev, msgs, num_msgs, addr);
   12226:	689d      	ldr	r5, [r3, #8]
   12228:	4623      	mov	r3, r4
   1222a:	a901      	add	r1, sp, #4
   1222c:	47a8      	blx	r5
		error = i2c_transfer(I2C_DEV, &msgs[0], 1, i);
		if (error == 0) {
   1222e:	2800      	cmp	r0, #0
   12230:	d1e8      	bne.n	12204 <i2c_scan+0xc>
			LOG("0x%2x address i2c device found.", i);
   12232:	f007 f8e2 	bl	193fa <k_uptime_get_32>
   12236:	4601      	mov	r1, r0
   12238:	4622      	mov	r2, r4
   1223a:	4805      	ldr	r0, [pc, #20]	; (12250 <i2c_scan+0x58>)
   1223c:	f006 f90c 	bl	18458 <iprintf>
            address = i;
   12240:	4626      	mov	r6, r4
   12242:	e7df      	b.n	12204 <i2c_scan+0xc>
		}	
	}
    return address;
}
   12244:	4630      	mov	r0, r6
   12246:	b004      	add	sp, #16
   12248:	bd70      	pop	{r4, r5, r6, pc}
   1224a:	bf00      	nop
   1224c:	0001b84c 	.word	0x0001b84c
   12250:	0001bd6c 	.word	0x0001bd6c

00012254 <i2c_init>:
bool i2c_init(){
   12254:	b510      	push	{r4, lr}
   12256:	4810      	ldr	r0, [pc, #64]	; (12298 <i2c_init+0x44>)
   12258:	f008 fcb9 	bl	1abce <z_device_is_ready>
    if (!device_is_ready(I2C_DEV)) {
   1225c:	4604      	mov	r4, r0
   1225e:	b160      	cbz	r0, 1227a <i2c_init+0x26>
	const struct i2c_driver_api *api =
   12260:	480d      	ldr	r0, [pc, #52]	; (12298 <i2c_init+0x44>)
   12262:	6883      	ldr	r3, [r0, #8]
	return api->configure(dev, dev_config);
   12264:	681b      	ldr	r3, [r3, #0]
   12266:	2104      	movs	r1, #4
   12268:	4798      	blx	r3
    uint16_t addr = i2c_scan();
   1226a:	f7ff ffc5 	bl	121f8 <i2c_scan>
    if(addr == 0xFFFF){
   1226e:	f64f 73ff 	movw	r3, #65535	; 0xffff
   12272:	4298      	cmp	r0, r3
   12274:	d008      	beq.n	12288 <i2c_init+0x34>
}
   12276:	4620      	mov	r0, r4
   12278:	bd10      	pop	{r4, pc}
        LOG("Could not get I2C device");
   1227a:	f007 f8be 	bl	193fa <k_uptime_get_32>
   1227e:	4601      	mov	r1, r0
   12280:	4806      	ldr	r0, [pc, #24]	; (1229c <i2c_init+0x48>)
   12282:	f006 f8e9 	bl	18458 <iprintf>
        return false;
   12286:	e7f6      	b.n	12276 <i2c_init+0x22>
        LOG("I2c scan found no devices");
   12288:	f007 f8b7 	bl	193fa <k_uptime_get_32>
   1228c:	4601      	mov	r1, r0
   1228e:	4804      	ldr	r0, [pc, #16]	; (122a0 <i2c_init+0x4c>)
   12290:	f006 f8e2 	bl	18458 <iprintf>
        ret = false;
   12294:	2400      	movs	r4, #0
   12296:	e7ee      	b.n	12276 <i2c_init+0x22>
   12298:	0001b84c 	.word	0x0001b84c
   1229c:	0001bd98 	.word	0x0001bd98
   122a0:	0001bdbc 	.word	0x0001bdbc

000122a4 <peripheral_init>:


/***********************************************************
 Function Definitions
***********************************************************/
void peripheral_init() {
   122a4:	b510      	push	{r4, lr}
  //Button 1 to start reading measurements
  gpio_enable(gpio_a, BTN1_ch, true);
   122a6:	4c25      	ldr	r4, [pc, #148]	; (1233c <peripheral_init+0x98>)
   122a8:	2201      	movs	r2, #1
   122aa:	2100      	movs	r1, #0
   122ac:	4620      	mov	r0, r4
   122ae:	f007 f867 	bl	19380 <gpio_enable>
  gpio_enable_interrupt(gpio_a, BTN1_ch, true);
   122b2:	2201      	movs	r2, #1
   122b4:	2100      	movs	r1, #0
   122b6:	4620      	mov	r0, r4
   122b8:	f007 f85d 	bl	19376 <gpio_enable_interrupt>
  gpio_init(gpio_a, BTN1_ch, NUM_GPIO_PERIP);
   122bc:	2202      	movs	r2, #2
   122be:	2100      	movs	r1, #0
   122c0:	4620      	mov	r0, r4
   122c2:	f7ff feef 	bl	120a4 <gpio_init>
  gpio_configure(gpio_a, BTN1_ch, NUM_GPIO_PERIP);
   122c6:	2202      	movs	r2, #2
   122c8:	2100      	movs	r1, #0
   122ca:	4620      	mov	r0, r4
   122cc:	f7ff ff28 	bl	12120 <gpio_configure>
  gpio_configure_interrupt(gpio_a, BTN1_ch, NUM_GPIO_PERIP); 
   122d0:	2202      	movs	r2, #2
   122d2:	2100      	movs	r1, #0
   122d4:	4620      	mov	r0, r4
   122d6:	f7ff ff51 	bl	1217c <gpio_configure_interrupt>

  //Button 2 to stop reading measurements
  gpio_enable(gpio_a, BTN2_ch, true);
   122da:	2201      	movs	r2, #1
   122dc:	4611      	mov	r1, r2
   122de:	4620      	mov	r0, r4
   122e0:	f007 f84e 	bl	19380 <gpio_enable>
  gpio_enable_interrupt(gpio_a, BTN2_ch, true);
   122e4:	2201      	movs	r2, #1
   122e6:	4611      	mov	r1, r2
   122e8:	4620      	mov	r0, r4
   122ea:	f007 f844 	bl	19376 <gpio_enable_interrupt>
  gpio_init(gpio_a, BTN2_ch, NUM_GPIO_PERIP);
   122ee:	2202      	movs	r2, #2
   122f0:	2101      	movs	r1, #1
   122f2:	4620      	mov	r0, r4
   122f4:	f7ff fed6 	bl	120a4 <gpio_init>
  gpio_configure(gpio_a, BTN2_ch, NUM_GPIO_PERIP);
   122f8:	2202      	movs	r2, #2
   122fa:	2101      	movs	r1, #1
   122fc:	4620      	mov	r0, r4
   122fe:	f7ff ff0f 	bl	12120 <gpio_configure>
  gpio_configure_interrupt(gpio_a, BTN2_ch, NUM_GPIO_PERIP); 
   12302:	2202      	movs	r2, #2
   12304:	2101      	movs	r1, #1
   12306:	4620      	mov	r0, r4
   12308:	f7ff ff38 	bl	1217c <gpio_configure_interrupt>

  // Initialize the I2C peripheral for communication with the melexis sensor
  bool scan_res = i2c_init(); 
   1230c:	f7ff ffa2 	bl	12254 <i2c_init>
   12310:	4604      	mov	r4, r0
  msleep(100);
   12312:	2064      	movs	r0, #100	; 0x64
   12314:	f007 f94e 	bl	195b4 <msleep>
  if (!scan_res){
   12318:	b144      	cbz	r4, 1232c <peripheral_init+0x88>
    LOG("I2C initialization failed. Check connections.");
    return;
  }else{
    mlx90632_init();
   1231a:	f000 faa9 	bl	12870 <mlx90632_init>
    LOG("Peripheral initialized successfully.\n");
   1231e:	f007 f886 	bl	1942e <k_uptime_get_32>
   12322:	4601      	mov	r1, r0
   12324:	4806      	ldr	r0, [pc, #24]	; (12340 <peripheral_init+0x9c>)
   12326:	f006 f897 	bl	18458 <iprintf>
  }
  
}
   1232a:	bd10      	pop	{r4, pc}
    LOG("I2C initialization failed. Check connections.");
   1232c:	f007 f87f 	bl	1942e <k_uptime_get_32>
   12330:	4601      	mov	r1, r0
   12332:	4804      	ldr	r0, [pc, #16]	; (12344 <peripheral_init+0xa0>)
   12334:	f006 f890 	bl	18458 <iprintf>
    return;
   12338:	e7f7      	b.n	1232a <peripheral_init+0x86>
   1233a:	bf00      	nop
   1233c:	20008000 	.word	0x20008000
   12340:	0001be18 	.word	0x0001be18
   12344:	0001bde0 	.word	0x0001bde0

00012348 <is_button1_pressed>:


bool is_button1_pressed(){
   12348:	b510      	push	{r4, lr}
  bool status = false;
  if (get_gpio_interrupt_status(gpio_a, BTN1_ch)){
   1234a:	2100      	movs	r1, #0
   1234c:	4805      	ldr	r0, [pc, #20]	; (12364 <is_button1_pressed+0x1c>)
   1234e:	f007 f849 	bl	193e4 <get_gpio_interrupt_status>
   12352:	4604      	mov	r4, r0
   12354:	b908      	cbnz	r0, 1235a <is_button1_pressed+0x12>
    status = true;
    reset_gpio_interrupt(gpio_a, BTN1_ch);
  }
	return status; 
}
   12356:	4620      	mov	r0, r4
   12358:	bd10      	pop	{r4, pc}
    reset_gpio_interrupt(gpio_a, BTN1_ch);
   1235a:	2100      	movs	r1, #0
   1235c:	4801      	ldr	r0, [pc, #4]	; (12364 <is_button1_pressed+0x1c>)
   1235e:	f007 f835 	bl	193cc <reset_gpio_interrupt>
   12362:	e7f8      	b.n	12356 <is_button1_pressed+0xe>
   12364:	20008000 	.word	0x20008000

00012368 <is_button2_pressed>:

bool is_button2_pressed(){
   12368:	b510      	push	{r4, lr}
  bool status = false;
  if (get_gpio_interrupt_status(gpio_a, BTN2_ch)){
   1236a:	2101      	movs	r1, #1
   1236c:	4805      	ldr	r0, [pc, #20]	; (12384 <is_button2_pressed+0x1c>)
   1236e:	f007 f839 	bl	193e4 <get_gpio_interrupt_status>
   12372:	4604      	mov	r4, r0
   12374:	b908      	cbnz	r0, 1237a <is_button2_pressed+0x12>
    status = true;
    reset_gpio_interrupt(gpio_a, BTN2_ch);
  }
	return status; 
}
   12376:	4620      	mov	r0, r4
   12378:	bd10      	pop	{r4, pc}
    reset_gpio_interrupt(gpio_a, BTN2_ch);
   1237a:	2101      	movs	r1, #1
   1237c:	4801      	ldr	r0, [pc, #4]	; (12384 <is_button2_pressed+0x1c>)
   1237e:	f007 f825 	bl	193cc <reset_gpio_interrupt>
   12382:	e7f8      	b.n	12376 <is_button2_pressed+0xe>
   12384:	20008000 	.word	0x20008000

00012388 <i2c_melexis_getStsReg>:
uint16_t i2c_melexis_getStsReg(){
   12388:	b510      	push	{r4, lr}
   1238a:	b082      	sub	sp, #8
    uint16_t reg_value = 0;
   1238c:	2300      	movs	r3, #0
   1238e:	f8ad 3006 	strh.w	r3, [sp, #6]
    ret = mlx90632_i2c_read(MLX90632_REG_STATUS, &reg_value);
   12392:	f10d 0106 	add.w	r1, sp, #6
   12396:	f643 70ff 	movw	r0, #16383	; 0x3fff
   1239a:	f000 fcef 	bl	12d7c <mlx90632_i2c_read>
    if (ret < 0){
   1239e:	1e04      	subs	r4, r0, #0
   123a0:	db03      	blt.n	123aa <i2c_melexis_getStsReg+0x22>
}
   123a2:	f8bd 0006 	ldrh.w	r0, [sp, #6]
   123a6:	b002      	add	sp, #8
   123a8:	bd10      	pop	{r4, pc}
        LOG("Reading status register is failed with error code %i \n", ret); 
   123aa:	f007 f85a 	bl	19462 <k_uptime_get_32>
   123ae:	4601      	mov	r1, r0
   123b0:	4622      	mov	r2, r4
   123b2:	4802      	ldr	r0, [pc, #8]	; (123bc <i2c_melexis_getStsReg+0x34>)
   123b4:	f006 f850 	bl	18458 <iprintf>
   123b8:	e7f3      	b.n	123a2 <i2c_melexis_getStsReg+0x1a>
   123ba:	bf00      	nop
   123bc:	0001be48 	.word	0x0001be48

000123c0 <mlx90632_readCalib>:
int32_t mlx90632_readCalib(){
   123c0:	b530      	push	{r4, r5, lr}
   123c2:	b083      	sub	sp, #12
    while(i2c_melexis_e2busy()){
   123c4:	f007 f87b 	bl	194be <i2c_melexis_e2busy>
   123c8:	2800      	cmp	r0, #0
   123ca:	d1fb      	bne.n	123c4 <mlx90632_readCalib+0x4>
    i2c_melexis_setmode(MLX90632_PWR_STATUS_SLEEP_STEP);
   123cc:	2002      	movs	r0, #2
   123ce:	f007 f87b 	bl	194c8 <i2c_melexis_setmode>
    ret = mlx90632_i2c_read(MLX90632_EE_P_R, &kalib_L);
   123d2:	f10d 0106 	add.w	r1, sp, #6
   123d6:	f242 400c 	movw	r0, #9228	; 0x240c
   123da:	f000 fccf 	bl	12d7c <mlx90632_i2c_read>
    if (ret < 0)
   123de:	2800      	cmp	r0, #0
   123e0:	f2c0 823a 	blt.w	12858 <mlx90632_readCalib+0x498>
    ret = mlx90632_i2c_read((MLX90632_EE_P_R + 1), &kalib_M);
   123e4:	a901      	add	r1, sp, #4
   123e6:	f242 400d 	movw	r0, #9229	; 0x240d
   123ea:	f000 fcc7 	bl	12d7c <mlx90632_i2c_read>
    if (ret < 0)
   123ee:	2800      	cmp	r0, #0
   123f0:	f2c0 8232 	blt.w	12858 <mlx90632_readCalib+0x498>
    MLX_K.P_R = (((kalib_M << 16) | kalib_L) / (double)(1<<8));
   123f4:	f8bd 0004 	ldrh.w	r0, [sp, #4]
   123f8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   123fc:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   12400:	f7fe f8b0 	bl	10564 <__aeabi_i2d>
   12404:	2200      	movs	r2, #0
   12406:	4bd8      	ldr	r3, [pc, #864]	; (12768 <mlx90632_readCalib+0x3a8>)
   12408:	f7fe f916 	bl	10638 <__aeabi_dmul>
   1240c:	f7fe fbae 	bl	10b6c <__aeabi_d2f>
   12410:	4dd6      	ldr	r5, [pc, #856]	; (1276c <mlx90632_readCalib+0x3ac>)
   12412:	6028      	str	r0, [r5, #0]
    LOG("P_R Kalibration = %.4f",MLX_K.P_R);
   12414:	f007 f825 	bl	19462 <k_uptime_get_32>
   12418:	4604      	mov	r4, r0
   1241a:	6828      	ldr	r0, [r5, #0]
   1241c:	f7fe f8b4 	bl	10588 <__aeabi_f2d>
   12420:	4602      	mov	r2, r0
   12422:	460b      	mov	r3, r1
   12424:	4621      	mov	r1, r4
   12426:	48d2      	ldr	r0, [pc, #840]	; (12770 <mlx90632_readCalib+0x3b0>)
   12428:	f006 f816 	bl	18458 <iprintf>
    ret = mlx90632_i2c_read(MLX90632_EE_P_G, &kalib_L);
   1242c:	f10d 0106 	add.w	r1, sp, #6
   12430:	f242 400e 	movw	r0, #9230	; 0x240e
   12434:	f000 fca2 	bl	12d7c <mlx90632_i2c_read>
    if (ret < 0)
   12438:	2800      	cmp	r0, #0
   1243a:	f2c0 820d 	blt.w	12858 <mlx90632_readCalib+0x498>
    ret = mlx90632_i2c_read((MLX90632_EE_P_G + 1), &kalib_M);
   1243e:	a901      	add	r1, sp, #4
   12440:	f242 400f 	movw	r0, #9231	; 0x240f
   12444:	f000 fc9a 	bl	12d7c <mlx90632_i2c_read>
    if (ret < 0)
   12448:	2800      	cmp	r0, #0
   1244a:	f2c0 8205 	blt.w	12858 <mlx90632_readCalib+0x498>
    MLX_K.P_G = ((kalib_M << 16) | kalib_L) / (double)(1<<20);
   1244e:	f8bd 0004 	ldrh.w	r0, [sp, #4]
   12452:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   12456:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   1245a:	f7fe f883 	bl	10564 <__aeabi_i2d>
   1245e:	2200      	movs	r2, #0
   12460:	4bc4      	ldr	r3, [pc, #784]	; (12774 <mlx90632_readCalib+0x3b4>)
   12462:	f7fe f8e9 	bl	10638 <__aeabi_dmul>
   12466:	f7fe fb81 	bl	10b6c <__aeabi_d2f>
   1246a:	6068      	str	r0, [r5, #4]
    LOG("P_G Kalibration = %.4f",MLX_K.P_G);
   1246c:	f006 fff9 	bl	19462 <k_uptime_get_32>
   12470:	4604      	mov	r4, r0
   12472:	6868      	ldr	r0, [r5, #4]
   12474:	f7fe f888 	bl	10588 <__aeabi_f2d>
   12478:	4602      	mov	r2, r0
   1247a:	460b      	mov	r3, r1
   1247c:	4621      	mov	r1, r4
   1247e:	48be      	ldr	r0, [pc, #760]	; (12778 <mlx90632_readCalib+0x3b8>)
   12480:	f005 ffea 	bl	18458 <iprintf>
    ret = mlx90632_i2c_read(MLX90632_EE_P_T, &kalib_L);
   12484:	f10d 0106 	add.w	r1, sp, #6
   12488:	f242 4010 	movw	r0, #9232	; 0x2410
   1248c:	f000 fc76 	bl	12d7c <mlx90632_i2c_read>
    if (ret < 0)
   12490:	2800      	cmp	r0, #0
   12492:	f2c0 81e1 	blt.w	12858 <mlx90632_readCalib+0x498>
    ret = mlx90632_i2c_read((MLX90632_EE_P_T + 1), &kalib_M);
   12496:	a901      	add	r1, sp, #4
   12498:	f242 4011 	movw	r0, #9233	; 0x2411
   1249c:	f000 fc6e 	bl	12d7c <mlx90632_i2c_read>
    if (ret < 0)
   124a0:	2800      	cmp	r0, #0
   124a2:	f2c0 81d9 	blt.w	12858 <mlx90632_readCalib+0x498>
    MLX_K.P_T = ((kalib_M << 16) | kalib_L) / (double)(1<<22);
   124a6:	f8bd 0004 	ldrh.w	r0, [sp, #4]
   124aa:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   124ae:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   124b2:	f7fe f857 	bl	10564 <__aeabi_i2d>
   124b6:	2200      	movs	r2, #0
   124b8:	4bb0      	ldr	r3, [pc, #704]	; (1277c <mlx90632_readCalib+0x3bc>)
   124ba:	f7fe f8bd 	bl	10638 <__aeabi_dmul>
   124be:	f7fe fb55 	bl	10b6c <__aeabi_d2f>
   124c2:	60a8      	str	r0, [r5, #8]
    MLX_K.P_T = MLX_K.P_T /(double)(1<<22);
   124c4:	f04f 5152 	mov.w	r1, #880803840	; 0x34800000
   124c8:	f7fd fe46 	bl	10158 <__aeabi_fmul>
   124cc:	60a8      	str	r0, [r5, #8]
    LOG("P_T Kalibration = %.4f",MLX_K.P_T);
   124ce:	f006 ffc8 	bl	19462 <k_uptime_get_32>
   124d2:	4604      	mov	r4, r0
   124d4:	68a8      	ldr	r0, [r5, #8]
   124d6:	f7fe f857 	bl	10588 <__aeabi_f2d>
   124da:	4602      	mov	r2, r0
   124dc:	460b      	mov	r3, r1
   124de:	4621      	mov	r1, r4
   124e0:	48a7      	ldr	r0, [pc, #668]	; (12780 <mlx90632_readCalib+0x3c0>)
   124e2:	f005 ffb9 	bl	18458 <iprintf>
    ret = mlx90632_i2c_read(MLX90632_EE_P_O, &kalib_L);
   124e6:	f10d 0106 	add.w	r1, sp, #6
   124ea:	f242 4012 	movw	r0, #9234	; 0x2412
   124ee:	f000 fc45 	bl	12d7c <mlx90632_i2c_read>
    if (ret < 0)
   124f2:	2800      	cmp	r0, #0
   124f4:	f2c0 81b0 	blt.w	12858 <mlx90632_readCalib+0x498>
    ret = mlx90632_i2c_read((MLX90632_EE_P_O + 1), &kalib_M);
   124f8:	a901      	add	r1, sp, #4
   124fa:	f242 4013 	movw	r0, #9235	; 0x2413
   124fe:	f000 fc3d 	bl	12d7c <mlx90632_i2c_read>
    if (ret < 0)
   12502:	2800      	cmp	r0, #0
   12504:	f2c0 81a8 	blt.w	12858 <mlx90632_readCalib+0x498>
    MLX_K.P_O = ((kalib_M << 16) | kalib_L) / (double)(1<<8);
   12508:	f8bd 0004 	ldrh.w	r0, [sp, #4]
   1250c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   12510:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   12514:	f7fe f826 	bl	10564 <__aeabi_i2d>
   12518:	2200      	movs	r2, #0
   1251a:	4b93      	ldr	r3, [pc, #588]	; (12768 <mlx90632_readCalib+0x3a8>)
   1251c:	f7fe f88c 	bl	10638 <__aeabi_dmul>
   12520:	f7fe fb24 	bl	10b6c <__aeabi_d2f>
   12524:	60e8      	str	r0, [r5, #12]
    LOG("P_O Kalibration = %.4f",MLX_K.P_O);
   12526:	f006 ff9c 	bl	19462 <k_uptime_get_32>
   1252a:	4604      	mov	r4, r0
   1252c:	68e8      	ldr	r0, [r5, #12]
   1252e:	f7fe f82b 	bl	10588 <__aeabi_f2d>
   12532:	4602      	mov	r2, r0
   12534:	460b      	mov	r3, r1
   12536:	4621      	mov	r1, r4
   12538:	4892      	ldr	r0, [pc, #584]	; (12784 <mlx90632_readCalib+0x3c4>)
   1253a:	f005 ff8d 	bl	18458 <iprintf>
    ret = mlx90632_i2c_read(MLX90632_EE_Ea, &kalib_L);
   1253e:	f10d 0106 	add.w	r1, sp, #6
   12542:	f242 4024 	movw	r0, #9252	; 0x2424
   12546:	f000 fc19 	bl	12d7c <mlx90632_i2c_read>
    if (ret < 0)
   1254a:	2800      	cmp	r0, #0
   1254c:	f2c0 8184 	blt.w	12858 <mlx90632_readCalib+0x498>
    ret = mlx90632_i2c_read((MLX90632_EE_Ea + 1), &kalib_M);
   12550:	a901      	add	r1, sp, #4
   12552:	f242 4025 	movw	r0, #9253	; 0x2425
   12556:	f000 fc11 	bl	12d7c <mlx90632_i2c_read>
    if (ret < 0)
   1255a:	2800      	cmp	r0, #0
   1255c:	f2c0 817c 	blt.w	12858 <mlx90632_readCalib+0x498>
    MLX_K.Ea = ((kalib_M << 16) | kalib_L) / (double)(1<<16);
   12560:	f8bd 0004 	ldrh.w	r0, [sp, #4]
   12564:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   12568:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   1256c:	f7fd fffa 	bl	10564 <__aeabi_i2d>
   12570:	2200      	movs	r2, #0
   12572:	4b85      	ldr	r3, [pc, #532]	; (12788 <mlx90632_readCalib+0x3c8>)
   12574:	f7fe f860 	bl	10638 <__aeabi_dmul>
   12578:	f7fe faf8 	bl	10b6c <__aeabi_d2f>
   1257c:	6128      	str	r0, [r5, #16]
    LOG("Ea Kalibration = %.4f",MLX_K.Ea);
   1257e:	f006 ff70 	bl	19462 <k_uptime_get_32>
   12582:	4604      	mov	r4, r0
   12584:	6928      	ldr	r0, [r5, #16]
   12586:	f7fd ffff 	bl	10588 <__aeabi_f2d>
   1258a:	4602      	mov	r2, r0
   1258c:	460b      	mov	r3, r1
   1258e:	4621      	mov	r1, r4
   12590:	487e      	ldr	r0, [pc, #504]	; (1278c <mlx90632_readCalib+0x3cc>)
   12592:	f005 ff61 	bl	18458 <iprintf>
    ret = mlx90632_i2c_read(MLX90632_EE_Eb, &kalib_L);
   12596:	f10d 0106 	add.w	r1, sp, #6
   1259a:	f242 4026 	movw	r0, #9254	; 0x2426
   1259e:	f000 fbed 	bl	12d7c <mlx90632_i2c_read>
    if (ret < 0)
   125a2:	2800      	cmp	r0, #0
   125a4:	f2c0 8158 	blt.w	12858 <mlx90632_readCalib+0x498>
    ret = mlx90632_i2c_read((MLX90632_EE_Eb + 1), &kalib_M);
   125a8:	a901      	add	r1, sp, #4
   125aa:	f242 4027 	movw	r0, #9255	; 0x2427
   125ae:	f000 fbe5 	bl	12d7c <mlx90632_i2c_read>
    if (ret < 0)
   125b2:	2800      	cmp	r0, #0
   125b4:	f2c0 8150 	blt.w	12858 <mlx90632_readCalib+0x498>
    MLX_K.Eb = ((kalib_M << 16) | kalib_L) / (double)(1<<8);
   125b8:	f8bd 0004 	ldrh.w	r0, [sp, #4]
   125bc:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   125c0:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   125c4:	f7fd ffce 	bl	10564 <__aeabi_i2d>
   125c8:	2200      	movs	r2, #0
   125ca:	4b67      	ldr	r3, [pc, #412]	; (12768 <mlx90632_readCalib+0x3a8>)
   125cc:	f7fe f834 	bl	10638 <__aeabi_dmul>
   125d0:	f7fe facc 	bl	10b6c <__aeabi_d2f>
   125d4:	6168      	str	r0, [r5, #20]
    LOG("Eb Kalibration = %.4f",MLX_K.Eb);
   125d6:	f006 ff44 	bl	19462 <k_uptime_get_32>
   125da:	4604      	mov	r4, r0
   125dc:	6968      	ldr	r0, [r5, #20]
   125de:	f7fd ffd3 	bl	10588 <__aeabi_f2d>
   125e2:	4602      	mov	r2, r0
   125e4:	460b      	mov	r3, r1
   125e6:	4621      	mov	r1, r4
   125e8:	4869      	ldr	r0, [pc, #420]	; (12790 <mlx90632_readCalib+0x3d0>)
   125ea:	f005 ff35 	bl	18458 <iprintf>
    ret = mlx90632_i2c_read(MLX90632_EE_Fa, &kalib_L);
   125ee:	f10d 0106 	add.w	r1, sp, #6
   125f2:	f242 4028 	movw	r0, #9256	; 0x2428
   125f6:	f000 fbc1 	bl	12d7c <mlx90632_i2c_read>
    if (ret < 0)
   125fa:	2800      	cmp	r0, #0
   125fc:	f2c0 812c 	blt.w	12858 <mlx90632_readCalib+0x498>
    ret = mlx90632_i2c_read((MLX90632_EE_Fa + 1), &kalib_M);
   12600:	a901      	add	r1, sp, #4
   12602:	f242 4029 	movw	r0, #9257	; 0x2429
   12606:	f000 fbb9 	bl	12d7c <mlx90632_i2c_read>
    if (ret < 0)
   1260a:	2800      	cmp	r0, #0
   1260c:	f2c0 8124 	blt.w	12858 <mlx90632_readCalib+0x498>
    MLX_K.Fa = ((kalib_M << 16) | kalib_L);
   12610:	f8bd 0004 	ldrh.w	r0, [sp, #4]
   12614:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   12618:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   1261c:	f7fe fbb0 	bl	10d80 <__aeabi_i2f>
   12620:	462c      	mov	r4, r5
   12622:	61a8      	str	r0, [r5, #24]
    MLX_K.Fa = MLX_K.Fa / (double)(1<<23);
   12624:	f04f 5150 	mov.w	r1, #872415232	; 0x34000000
   12628:	f7fd fd96 	bl	10158 <__aeabi_fmul>
   1262c:	61a8      	str	r0, [r5, #24]
    MLX_K.Fa = MLX_K.Fa /(double)(1<<23);
   1262e:	f04f 5150 	mov.w	r1, #872415232	; 0x34000000
   12632:	f7fd fd91 	bl	10158 <__aeabi_fmul>
   12636:	61a8      	str	r0, [r5, #24]
    LOG("Fa Kalibration = %.4f",MLX_K.Fa);
   12638:	f006 ff13 	bl	19462 <k_uptime_get_32>
   1263c:	4605      	mov	r5, r0
   1263e:	69a0      	ldr	r0, [r4, #24]
   12640:	f7fd ffa2 	bl	10588 <__aeabi_f2d>
   12644:	4602      	mov	r2, r0
   12646:	460b      	mov	r3, r1
   12648:	4629      	mov	r1, r5
   1264a:	4852      	ldr	r0, [pc, #328]	; (12794 <mlx90632_readCalib+0x3d4>)
   1264c:	f005 ff04 	bl	18458 <iprintf>
    ret = mlx90632_i2c_read(MLX90632_EE_Fb, &kalib_L);
   12650:	f10d 0106 	add.w	r1, sp, #6
   12654:	f242 402a 	movw	r0, #9258	; 0x242a
   12658:	f000 fb90 	bl	12d7c <mlx90632_i2c_read>
    if (ret < 0)
   1265c:	2800      	cmp	r0, #0
   1265e:	f2c0 80fb 	blt.w	12858 <mlx90632_readCalib+0x498>
    ret = mlx90632_i2c_read((MLX90632_EE_Fb + 1), &kalib_M);
   12662:	a901      	add	r1, sp, #4
   12664:	f242 402b 	movw	r0, #9259	; 0x242b
   12668:	f000 fb88 	bl	12d7c <mlx90632_i2c_read>
    if (ret < 0)
   1266c:	2800      	cmp	r0, #0
   1266e:	f2c0 80f3 	blt.w	12858 <mlx90632_readCalib+0x498>
    MLX_K.Fb = ((kalib_M << 16) | kalib_L) / (double)(1<<18);
   12672:	f8bd 0004 	ldrh.w	r0, [sp, #4]
   12676:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   1267a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   1267e:	f7fd ff71 	bl	10564 <__aeabi_i2d>
   12682:	2200      	movs	r2, #0
   12684:	4b44      	ldr	r3, [pc, #272]	; (12798 <mlx90632_readCalib+0x3d8>)
   12686:	f7fd ffd7 	bl	10638 <__aeabi_dmul>
   1268a:	f7fe fa6f 	bl	10b6c <__aeabi_d2f>
   1268e:	4625      	mov	r5, r4
   12690:	61e0      	str	r0, [r4, #28]
    MLX_K.Fb = MLX_K.Fb /(double)(1<<18);
   12692:	f04f 515a 	mov.w	r1, #914358272	; 0x36800000
   12696:	f7fd fd5f 	bl	10158 <__aeabi_fmul>
   1269a:	61e0      	str	r0, [r4, #28]
    LOG("Fb Kalibration = %.4f",MLX_K.Fb);
   1269c:	f006 fee1 	bl	19462 <k_uptime_get_32>
   126a0:	4604      	mov	r4, r0
   126a2:	69e8      	ldr	r0, [r5, #28]
   126a4:	f7fd ff70 	bl	10588 <__aeabi_f2d>
   126a8:	4602      	mov	r2, r0
   126aa:	460b      	mov	r3, r1
   126ac:	4621      	mov	r1, r4
   126ae:	483b      	ldr	r0, [pc, #236]	; (1279c <mlx90632_readCalib+0x3dc>)
   126b0:	f005 fed2 	bl	18458 <iprintf>
    ret = mlx90632_i2c_read(MLX90632_EE_Ga, &kalib_L);
   126b4:	f10d 0106 	add.w	r1, sp, #6
   126b8:	f242 402c 	movw	r0, #9260	; 0x242c
   126bc:	f000 fb5e 	bl	12d7c <mlx90632_i2c_read>
    if (ret < 0)
   126c0:	2800      	cmp	r0, #0
   126c2:	f2c0 80c9 	blt.w	12858 <mlx90632_readCalib+0x498>
    ret = mlx90632_i2c_read((MLX90632_EE_Ga + 1), &kalib_M);
   126c6:	a901      	add	r1, sp, #4
   126c8:	f242 402d 	movw	r0, #9261	; 0x242d
   126cc:	f000 fb56 	bl	12d7c <mlx90632_i2c_read>
    if (ret < 0)
   126d0:	2800      	cmp	r0, #0
   126d2:	f2c0 80c1 	blt.w	12858 <mlx90632_readCalib+0x498>
    MLX_K.Ga = ((kalib_M << 16) | kalib_L) / (double)(1<<18);
   126d6:	f8bd 0004 	ldrh.w	r0, [sp, #4]
   126da:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   126de:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   126e2:	f7fd ff3f 	bl	10564 <__aeabi_i2d>
   126e6:	2200      	movs	r2, #0
   126e8:	4b2b      	ldr	r3, [pc, #172]	; (12798 <mlx90632_readCalib+0x3d8>)
   126ea:	f7fd ffa5 	bl	10638 <__aeabi_dmul>
   126ee:	f7fe fa3d 	bl	10b6c <__aeabi_d2f>
   126f2:	6228      	str	r0, [r5, #32]
    MLX_K.Ga = MLX_K.Ga /(double)(1<<18);
   126f4:	f04f 515a 	mov.w	r1, #914358272	; 0x36800000
   126f8:	f7fd fd2e 	bl	10158 <__aeabi_fmul>
   126fc:	6228      	str	r0, [r5, #32]
    LOG("Ga Kalibration = %.4f",MLX_K.Ga);
   126fe:	f006 feb0 	bl	19462 <k_uptime_get_32>
   12702:	4604      	mov	r4, r0
   12704:	6a28      	ldr	r0, [r5, #32]
   12706:	f7fd ff3f 	bl	10588 <__aeabi_f2d>
   1270a:	4602      	mov	r2, r0
   1270c:	460b      	mov	r3, r1
   1270e:	4621      	mov	r1, r4
   12710:	4823      	ldr	r0, [pc, #140]	; (127a0 <mlx90632_readCalib+0x3e0>)
   12712:	f005 fea1 	bl	18458 <iprintf>
    ret = mlx90632_i2c_read(MLX90632_EE_Gb, &kalib_L);
   12716:	f10d 0106 	add.w	r1, sp, #6
   1271a:	f242 402e 	movw	r0, #9262	; 0x242e
   1271e:	f000 fb2d 	bl	12d7c <mlx90632_i2c_read>
    if (ret < 0)
   12722:	2800      	cmp	r0, #0
   12724:	f2c0 8098 	blt.w	12858 <mlx90632_readCalib+0x498>
    MLX_K.Gb = (kalib_L) / (double)(1<<10);
   12728:	f8bd 0006 	ldrh.w	r0, [sp, #6]
   1272c:	f7fd ff1a 	bl	10564 <__aeabi_i2d>
   12730:	2200      	movs	r2, #0
   12732:	4b1c      	ldr	r3, [pc, #112]	; (127a4 <mlx90632_readCalib+0x3e4>)
   12734:	f7fd ff80 	bl	10638 <__aeabi_dmul>
   12738:	f7fe fa18 	bl	10b6c <__aeabi_d2f>
   1273c:	6268      	str	r0, [r5, #36]	; 0x24
    LOG("Gb Kalibration = %.4f",MLX_K.Gb);
   1273e:	f006 fe90 	bl	19462 <k_uptime_get_32>
   12742:	4604      	mov	r4, r0
   12744:	6a68      	ldr	r0, [r5, #36]	; 0x24
   12746:	f7fd ff1f 	bl	10588 <__aeabi_f2d>
   1274a:	4602      	mov	r2, r0
   1274c:	460b      	mov	r3, r1
   1274e:	4621      	mov	r1, r4
   12750:	4815      	ldr	r0, [pc, #84]	; (127a8 <mlx90632_readCalib+0x3e8>)
   12752:	f005 fe81 	bl	18458 <iprintf>
    ret = mlx90632_i2c_read(MLX90632_EE_Ka, &kalib_L);
   12756:	f10d 0106 	add.w	r1, sp, #6
   1275a:	f242 402f 	movw	r0, #9263	; 0x242f
   1275e:	f000 fb0d 	bl	12d7c <mlx90632_i2c_read>
    if (ret < 0)
   12762:	2800      	cmp	r0, #0
   12764:	db78      	blt.n	12858 <mlx90632_readCalib+0x498>
   12766:	e021      	b.n	127ac <mlx90632_readCalib+0x3ec>
   12768:	3f700000 	.word	0x3f700000
   1276c:	200084c4 	.word	0x200084c4
   12770:	0001be88 	.word	0x0001be88
   12774:	3eb00000 	.word	0x3eb00000
   12778:	0001bea8 	.word	0x0001bea8
   1277c:	3e900000 	.word	0x3e900000
   12780:	0001bec8 	.word	0x0001bec8
   12784:	0001bee8 	.word	0x0001bee8
   12788:	3ef00000 	.word	0x3ef00000
   1278c:	0001bf08 	.word	0x0001bf08
   12790:	0001bf28 	.word	0x0001bf28
   12794:	0001bf48 	.word	0x0001bf48
   12798:	3ed00000 	.word	0x3ed00000
   1279c:	0001bf68 	.word	0x0001bf68
   127a0:	0001bf88 	.word	0x0001bf88
   127a4:	3f500000 	.word	0x3f500000
   127a8:	0001bfa8 	.word	0x0001bfa8
    MLX_K.Ka = (kalib_L) / (double)(1<<10);
   127ac:	f8bd 0006 	ldrh.w	r0, [sp, #6]
   127b0:	f7fd fed8 	bl	10564 <__aeabi_i2d>
   127b4:	2200      	movs	r2, #0
   127b6:	4b29      	ldr	r3, [pc, #164]	; (1285c <mlx90632_readCalib+0x49c>)
   127b8:	f7fd ff3e 	bl	10638 <__aeabi_dmul>
   127bc:	f7fe f9d6 	bl	10b6c <__aeabi_d2f>
   127c0:	62a8      	str	r0, [r5, #40]	; 0x28
    LOG("Ka Kalibration = %.4f",MLX_K.Ka);
   127c2:	f006 fe4e 	bl	19462 <k_uptime_get_32>
   127c6:	4604      	mov	r4, r0
   127c8:	6aa8      	ldr	r0, [r5, #40]	; 0x28
   127ca:	f7fd fedd 	bl	10588 <__aeabi_f2d>
   127ce:	4602      	mov	r2, r0
   127d0:	460b      	mov	r3, r1
   127d2:	4621      	mov	r1, r4
   127d4:	4822      	ldr	r0, [pc, #136]	; (12860 <mlx90632_readCalib+0x4a0>)
   127d6:	f005 fe3f 	bl	18458 <iprintf>
    ret = mlx90632_i2c_read(MLX90632_EE_Ha, &kalib_L);
   127da:	f10d 0106 	add.w	r1, sp, #6
   127de:	f242 4081 	movw	r0, #9345	; 0x2481
   127e2:	f000 facb 	bl	12d7c <mlx90632_i2c_read>
    if (ret < 0)
   127e6:	2800      	cmp	r0, #0
   127e8:	db36      	blt.n	12858 <mlx90632_readCalib+0x498>
    MLX_K.Ha = (kalib_L) / (double)(1<<14);
   127ea:	f8bd 0006 	ldrh.w	r0, [sp, #6]
   127ee:	f7fd feb9 	bl	10564 <__aeabi_i2d>
   127f2:	2200      	movs	r2, #0
   127f4:	4b1b      	ldr	r3, [pc, #108]	; (12864 <mlx90632_readCalib+0x4a4>)
   127f6:	f7fd ff1f 	bl	10638 <__aeabi_dmul>
   127fa:	f7fe f9b7 	bl	10b6c <__aeabi_d2f>
   127fe:	62e8      	str	r0, [r5, #44]	; 0x2c
    LOG("Ha Kalibration = %.4f",MLX_K.Ha);
   12800:	f006 fe2f 	bl	19462 <k_uptime_get_32>
   12804:	4604      	mov	r4, r0
   12806:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
   12808:	f7fd febe 	bl	10588 <__aeabi_f2d>
   1280c:	4602      	mov	r2, r0
   1280e:	460b      	mov	r3, r1
   12810:	4621      	mov	r1, r4
   12812:	4815      	ldr	r0, [pc, #84]	; (12868 <mlx90632_readCalib+0x4a8>)
   12814:	f005 fe20 	bl	18458 <iprintf>
    ret = mlx90632_i2c_read(MLX90632_EE_Hb, &kalib_L);
   12818:	f10d 0106 	add.w	r1, sp, #6
   1281c:	f242 4082 	movw	r0, #9346	; 0x2482
   12820:	f000 faac 	bl	12d7c <mlx90632_i2c_read>
    if (ret < 0)
   12824:	2800      	cmp	r0, #0
   12826:	db17      	blt.n	12858 <mlx90632_readCalib+0x498>
    MLX_K.Hb = (kalib_L) / (double)(1<<14);
   12828:	f8bd 0006 	ldrh.w	r0, [sp, #6]
   1282c:	f7fd fe9a 	bl	10564 <__aeabi_i2d>
   12830:	2200      	movs	r2, #0
   12832:	4b0c      	ldr	r3, [pc, #48]	; (12864 <mlx90632_readCalib+0x4a4>)
   12834:	f7fd ff00 	bl	10638 <__aeabi_dmul>
   12838:	f7fe f998 	bl	10b6c <__aeabi_d2f>
   1283c:	6328      	str	r0, [r5, #48]	; 0x30
    LOG("Hb Kalibration = %.4f",MLX_K.Hb);
   1283e:	f006 fe10 	bl	19462 <k_uptime_get_32>
   12842:	4604      	mov	r4, r0
   12844:	6b28      	ldr	r0, [r5, #48]	; 0x30
   12846:	f7fd fe9f 	bl	10588 <__aeabi_f2d>
   1284a:	4602      	mov	r2, r0
   1284c:	460b      	mov	r3, r1
   1284e:	4621      	mov	r1, r4
   12850:	4806      	ldr	r0, [pc, #24]	; (1286c <mlx90632_readCalib+0x4ac>)
   12852:	f005 fe01 	bl	18458 <iprintf>
    return 0;
   12856:	2000      	movs	r0, #0
}
   12858:	b003      	add	sp, #12
   1285a:	bd30      	pop	{r4, r5, pc}
   1285c:	3f500000 	.word	0x3f500000
   12860:	0001bfc8 	.word	0x0001bfc8
   12864:	3f100000 	.word	0x3f100000
   12868:	0001bfe8 	.word	0x0001bfe8
   1286c:	0001c008 	.word	0x0001c008

00012870 <mlx90632_init>:
int32_t mlx90632_init(void){
   12870:	b510      	push	{r4, lr}
   12872:	b082      	sub	sp, #8
    ret = mlx90632_i2c_read(MLX90632_EE_VERSION, &eeprom_version);
   12874:	f10d 0106 	add.w	r1, sp, #6
   12878:	f242 400b 	movw	r0, #9227	; 0x240b
   1287c:	f000 fa7e 	bl	12d7c <mlx90632_i2c_read>
    if (ret < 0)
   12880:	2800      	cmp	r0, #0
   12882:	db3f      	blt.n	12904 <mlx90632_init+0x94>
    if ((eeprom_version & 0x00FF) != MLX90632_DSPv5)
   12884:	f89d 3006 	ldrb.w	r3, [sp, #6]
   12888:	2b05      	cmp	r3, #5
   1288a:	d14a      	bne.n	12922 <mlx90632_init+0xb2>
    ret = mlx90632_i2c_read(MLX90632_EE_I2C_ADDRESS, &reg_status);
   1288c:	a901      	add	r1, sp, #4
   1288e:	f242 40d5 	movw	r0, #9429	; 0x24d5
   12892:	f000 fa73 	bl	12d7c <mlx90632_i2c_read>
    if (ret < 0)
   12896:	2800      	cmp	r0, #0
   12898:	db34      	blt.n	12904 <mlx90632_init+0x94>
    if (reg_status != (0x3A >> 1)){
   1289a:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   1289e:	2b1d      	cmp	r3, #29
   128a0:	d132      	bne.n	12908 <mlx90632_init+0x98>
    MLX_STS.refresh = mlx90632_get_refresh_rate();
   128a2:	f006 fe41 	bl	19528 <mlx90632_get_refresh_rate>
   128a6:	4c21      	ldr	r4, [pc, #132]	; (1292c <mlx90632_init+0xbc>)
   128a8:	7020      	strb	r0, [r4, #0]
    LOG("Refresh Value is %d",MLX_STS.refresh);
   128aa:	f006 fdda 	bl	19462 <k_uptime_get_32>
   128ae:	4601      	mov	r1, r0
   128b0:	7822      	ldrb	r2, [r4, #0]
   128b2:	481f      	ldr	r0, [pc, #124]	; (12930 <mlx90632_init+0xc0>)
   128b4:	f005 fdd0 	bl	18458 <iprintf>
    mlx90632_readCalib();
   128b8:	f7ff fd82 	bl	123c0 <mlx90632_readCalib>
    ret = i2c_melexis_setmode(MLX90632_PWR_STATUS_SLEEP_STEP);
   128bc:	2002      	movs	r0, #2
   128be:	f006 fe03 	bl	194c8 <i2c_melexis_setmode>
    if (ret < 0)
   128c2:	2800      	cmp	r0, #0
   128c4:	db1e      	blt.n	12904 <mlx90632_init+0x94>
    ret = mlx90632_i2c_read(MLX90632_REG_STATUS, &reg_status);
   128c6:	a901      	add	r1, sp, #4
   128c8:	f643 70ff 	movw	r0, #16383	; 0x3fff
   128cc:	f000 fa56 	bl	12d7c <mlx90632_i2c_read>
    if (ret < 0)
   128d0:	2800      	cmp	r0, #0
   128d2:	db17      	blt.n	12904 <mlx90632_init+0x94>
    reg_ctrl = reg_status & ~(MLX90632_STAT_DATA_RDY);
   128d4:	f8bd 1004 	ldrh.w	r1, [sp, #4]
   128d8:	f021 0101 	bic.w	r1, r1, #1
    ret = mlx90632_i2c_write(MLX90632_REG_STATUS, reg_ctrl);
   128dc:	f643 70ff 	movw	r0, #16383	; 0x3fff
   128e0:	f000 fa82 	bl	12de8 <mlx90632_i2c_write>
    if (ret < 0)
   128e4:	2800      	cmp	r0, #0
   128e6:	db0d      	blt.n	12904 <mlx90632_init+0x94>
    if ((eeprom_version & 0x7F00) == MLX90632_XTD_RNG_KEY)
   128e8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   128ec:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
   128f0:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
   128f4:	d018      	beq.n	12928 <mlx90632_init+0xb8>
    LOG("Sensor Initialized.");
   128f6:	f006 fdb4 	bl	19462 <k_uptime_get_32>
   128fa:	4601      	mov	r1, r0
   128fc:	480d      	ldr	r0, [pc, #52]	; (12934 <mlx90632_init+0xc4>)
   128fe:	f005 fdab 	bl	18458 <iprintf>
    return 0;
   12902:	2000      	movs	r0, #0
}
   12904:	b002      	add	sp, #8
   12906:	bd10      	pop	{r4, pc}
        LOG("Error: Communication failure. Check wiring. Expected device address: 0x%X, instead read 0x%X",58,(reg_status<<1));
   12908:	f006 fdab 	bl	19462 <k_uptime_get_32>
   1290c:	4601      	mov	r1, r0
   1290e:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   12912:	005b      	lsls	r3, r3, #1
   12914:	223a      	movs	r2, #58	; 0x3a
   12916:	4808      	ldr	r0, [pc, #32]	; (12938 <mlx90632_init+0xc8>)
   12918:	f005 fd9e 	bl	18458 <iprintf>
        return -1;
   1291c:	f04f 30ff 	mov.w	r0, #4294967295
   12920:	e7f0      	b.n	12904 <mlx90632_init+0x94>
        return -EPROTONOSUPPORT;
   12922:	f06f 007a 	mvn.w	r0, #122	; 0x7a
   12926:	e7ed      	b.n	12904 <mlx90632_init+0x94>
        return ERANGE;
   12928:	2022      	movs	r0, #34	; 0x22
   1292a:	e7eb      	b.n	12904 <mlx90632_init+0x94>
   1292c:	20008058 	.word	0x20008058
   12930:	0001c090 	.word	0x0001c090
   12934:	0001c0b0 	.word	0x0001c0b0
   12938:	0001c028 	.word	0x0001c028

0001293c <mlx90632_check_i2c_comm>:
void mlx90632_check_i2c_comm(void){
   1293c:	b500      	push	{lr}
   1293e:	b083      	sub	sp, #12
    ret = mlx90632_i2c_read(MLX90632_REG_STATUS, &reg_status);
   12940:	f10d 0106 	add.w	r1, sp, #6
   12944:	f643 70ff 	movw	r0, #16383	; 0x3fff
   12948:	f000 fa18 	bl	12d7c <mlx90632_i2c_read>
    if (ret < 0)
   1294c:	2800      	cmp	r0, #0
   1294e:	db05      	blt.n	1295c <mlx90632_check_i2c_comm+0x20>
    if(!MLX_STS.comm_sts)
   12950:	4b0b      	ldr	r3, [pc, #44]	; (12980 <mlx90632_check_i2c_comm+0x44>)
   12952:	785b      	ldrb	r3, [r3, #1]
   12954:	b133      	cbz	r3, 12964 <mlx90632_check_i2c_comm+0x28>
}
   12956:	b003      	add	sp, #12
   12958:	f85d fb04 	ldr.w	pc, [sp], #4
        MLX_STS.comm_sts = false;
   1295c:	4b08      	ldr	r3, [pc, #32]	; (12980 <mlx90632_check_i2c_comm+0x44>)
   1295e:	2200      	movs	r2, #0
   12960:	705a      	strb	r2, [r3, #1]
   12962:	e7f5      	b.n	12950 <mlx90632_check_i2c_comm+0x14>
        ret = mlx90632_i2c_read(MLX90632_REG_STATUS, &reg_status);
   12964:	f10d 0106 	add.w	r1, sp, #6
   12968:	f643 70ff 	movw	r0, #16383	; 0x3fff
   1296c:	f000 fa06 	bl	12d7c <mlx90632_i2c_read>
        if (ret >= 0)
   12970:	2800      	cmp	r0, #0
   12972:	dbf0      	blt.n	12956 <mlx90632_check_i2c_comm+0x1a>
             mlx90632_init();
   12974:	f7ff ff7c 	bl	12870 <mlx90632_init>
             MLX_STS.comm_sts = true;
   12978:	4b01      	ldr	r3, [pc, #4]	; (12980 <mlx90632_check_i2c_comm+0x44>)
   1297a:	2201      	movs	r2, #1
   1297c:	705a      	strb	r2, [r3, #1]
}
   1297e:	e7ea      	b.n	12956 <mlx90632_check_i2c_comm+0x1a>
   12980:	20008058 	.word	0x20008058

00012984 <mlx90632_ambTempRaw>:
int32_t mlx90632_ambTempRaw(){
   12984:	b500      	push	{lr}
   12986:	b083      	sub	sp, #12
    ret = mlx90632_i2c_read(MLX90632_RAM_3(1), &tmp_temp);
   12988:	f10d 0106 	add.w	r1, sp, #6
   1298c:	f244 0005 	movw	r0, #16389	; 0x4005
   12990:	f000 f9f4 	bl	12d7c <mlx90632_i2c_read>
    if (ret < 0)
   12994:	2800      	cmp	r0, #0
   12996:	db0f      	blt.n	129b8 <mlx90632_ambTempRaw+0x34>
    MLX_T_RAW.ambient_ram_6 = (int16_t)tmp_temp;
   12998:	f9bd 2006 	ldrsh.w	r2, [sp, #6]
   1299c:	4b08      	ldr	r3, [pc, #32]	; (129c0 <mlx90632_ambTempRaw+0x3c>)
   1299e:	801a      	strh	r2, [r3, #0]
    ret = mlx90632_i2c_read(MLX90632_RAM_3(2), &tmp_temp);
   129a0:	f10d 0106 	add.w	r1, sp, #6
   129a4:	f244 0008 	movw	r0, #16392	; 0x4008
   129a8:	f000 f9e8 	bl	12d7c <mlx90632_i2c_read>
    if (ret < 0)
   129ac:	2800      	cmp	r0, #0
   129ae:	db03      	blt.n	129b8 <mlx90632_ambTempRaw+0x34>
    MLX_T_RAW.ambient_ram_9 = (int16_t)tmp_temp;
   129b0:	f9bd 2006 	ldrsh.w	r2, [sp, #6]
   129b4:	4b02      	ldr	r3, [pc, #8]	; (129c0 <mlx90632_ambTempRaw+0x3c>)
   129b6:	805a      	strh	r2, [r3, #2]
}
   129b8:	b003      	add	sp, #12
   129ba:	f85d fb04 	ldr.w	pc, [sp], #4
   129be:	bf00      	nop
   129c0:	200084bc 	.word	0x200084bc

000129c4 <mlx90632_calc_temp_ambient>:
double mlx90632_calc_temp_ambient(double Gb, double PO, double PR, double PG,  double PT){
   129c4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   129c8:	4680      	mov	r8, r0
   129ca:	4689      	mov	r9, r1
   129cc:	4692      	mov	sl, r2
   129ce:	469b      	mov	fp, r3
    VR_Ta = MLX_T_RAW.ambient_ram_9 + Gb * (MLX_T_RAW.ambient_ram_6  / (MLX90632_REF_3));
   129d0:	4c23      	ldr	r4, [pc, #140]	; (12a60 <mlx90632_calc_temp_ambient+0x9c>)
   129d2:	f9b4 0002 	ldrsh.w	r0, [r4, #2]
   129d6:	f7fd fdc5 	bl	10564 <__aeabi_i2d>
   129da:	4606      	mov	r6, r0
   129dc:	460f      	mov	r7, r1
   129de:	f9b4 0000 	ldrsh.w	r0, [r4]
   129e2:	f7fd fdbf 	bl	10564 <__aeabi_i2d>
   129e6:	2200      	movs	r2, #0
   129e8:	4b1e      	ldr	r3, [pc, #120]	; (12a64 <mlx90632_calc_temp_ambient+0xa0>)
   129ea:	f7fd ff4f 	bl	1088c <__aeabi_ddiv>
   129ee:	4604      	mov	r4, r0
   129f0:	460d      	mov	r5, r1
   129f2:	4642      	mov	r2, r8
   129f4:	464b      	mov	r3, r9
   129f6:	f7fd fe1f 	bl	10638 <__aeabi_dmul>
   129fa:	4602      	mov	r2, r0
   129fc:	460b      	mov	r3, r1
   129fe:	4630      	mov	r0, r6
   12a00:	4639      	mov	r1, r7
   12a02:	f7fd fc63 	bl	102cc <__adddf3>
   12a06:	4602      	mov	r2, r0
   12a08:	460b      	mov	r3, r1
    AMB = (MLX_T_RAW.ambient_ram_6 / (MLX90632_REF_3)) / VR_Ta * 524288.0;
   12a0a:	4620      	mov	r0, r4
   12a0c:	4629      	mov	r1, r5
   12a0e:	f7fd ff3d 	bl	1088c <__aeabi_ddiv>
   12a12:	2200      	movs	r2, #0
   12a14:	4b14      	ldr	r3, [pc, #80]	; (12a68 <mlx90632_calc_temp_ambient+0xa4>)
   12a16:	f7fd fe0f 	bl	10638 <__aeabi_dmul>
    TAMB = PO + ((AMB - PR )/ PG ) + PT * ((AMB - PR ) * (AMB - PR ));
   12a1a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   12a1e:	f7fd fc53 	bl	102c8 <__aeabi_dsub>
   12a22:	4604      	mov	r4, r0
   12a24:	460d      	mov	r5, r1
   12a26:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
   12a2a:	f7fd ff2f 	bl	1088c <__aeabi_ddiv>
   12a2e:	4652      	mov	r2, sl
   12a30:	465b      	mov	r3, fp
   12a32:	f7fd fc4b 	bl	102cc <__adddf3>
   12a36:	4606      	mov	r6, r0
   12a38:	460f      	mov	r7, r1
   12a3a:	4622      	mov	r2, r4
   12a3c:	462b      	mov	r3, r5
   12a3e:	4620      	mov	r0, r4
   12a40:	4629      	mov	r1, r5
   12a42:	f7fd fdf9 	bl	10638 <__aeabi_dmul>
   12a46:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
   12a4a:	f7fd fdf5 	bl	10638 <__aeabi_dmul>
   12a4e:	4602      	mov	r2, r0
   12a50:	460b      	mov	r3, r1
   12a52:	4630      	mov	r0, r6
   12a54:	4639      	mov	r1, r7
   12a56:	f7fd fc39 	bl	102cc <__adddf3>
}
   12a5a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12a5e:	bf00      	nop
   12a60:	200084bc 	.word	0x200084bc
   12a64:	40280000 	.word	0x40280000
   12a68:	41200000 	.word	0x41200000

00012a6c <mlx90632_gatherAmbTemp>:
int32_t mlx90632_gatherAmbTemp(){
   12a6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12a70:	b087      	sub	sp, #28
    ret = mlx90632_ambTempRaw();
   12a72:	f7ff ff87 	bl	12984 <mlx90632_ambTempRaw>
    if (ret < 0)
   12a76:	1e04      	subs	r4, r0, #0
   12a78:	db28      	blt.n	12acc <mlx90632_gatherAmbTemp+0x60>
    MLX_T.ambient = mlx90632_calc_temp_ambient(MLX_K.Gb, MLX_K.P_O, MLX_K.P_R, MLX_K.P_G, MLX_K.P_T);
   12a7a:	4b16      	ldr	r3, [pc, #88]	; (12ad4 <mlx90632_gatherAmbTemp+0x68>)
   12a7c:	6a5e      	ldr	r6, [r3, #36]	; 0x24
   12a7e:	681d      	ldr	r5, [r3, #0]
   12a80:	f8d3 a004 	ldr.w	sl, [r3, #4]
   12a84:	f8d3 b008 	ldr.w	fp, [r3, #8]
   12a88:	68d8      	ldr	r0, [r3, #12]
   12a8a:	f7fd fd7d 	bl	10588 <__aeabi_f2d>
   12a8e:	4680      	mov	r8, r0
   12a90:	4689      	mov	r9, r1
   12a92:	4630      	mov	r0, r6
   12a94:	f7fd fd78 	bl	10588 <__aeabi_f2d>
   12a98:	4606      	mov	r6, r0
   12a9a:	460f      	mov	r7, r1
   12a9c:	4658      	mov	r0, fp
   12a9e:	f7fd fd73 	bl	10588 <__aeabi_f2d>
   12aa2:	e9cd 0104 	strd	r0, r1, [sp, #16]
   12aa6:	4650      	mov	r0, sl
   12aa8:	f7fd fd6e 	bl	10588 <__aeabi_f2d>
   12aac:	e9cd 0102 	strd	r0, r1, [sp, #8]
   12ab0:	4628      	mov	r0, r5
   12ab2:	f7fd fd69 	bl	10588 <__aeabi_f2d>
   12ab6:	e9cd 0100 	strd	r0, r1, [sp]
   12aba:	4642      	mov	r2, r8
   12abc:	464b      	mov	r3, r9
   12abe:	4630      	mov	r0, r6
   12ac0:	4639      	mov	r1, r7
   12ac2:	f7ff ff7f 	bl	129c4 <mlx90632_calc_temp_ambient>
   12ac6:	4b04      	ldr	r3, [pc, #16]	; (12ad8 <mlx90632_gatherAmbTemp+0x6c>)
   12ac8:	e9c3 0100 	strd	r0, r1, [r3]
}
   12acc:	4620      	mov	r0, r4
   12ace:	b007      	add	sp, #28
   12ad0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12ad4:	200084c4 	.word	0x200084c4
   12ad8:	20008378 	.word	0x20008378

00012adc <mlx90632_getObjTempRaw>:
int32_t mlx90632_getObjTempRaw(int cycle_pos){
   12adc:	b510      	push	{r4, lr}
   12ade:	b082      	sub	sp, #8
    if (cycle_pos == 1)
   12ae0:	2801      	cmp	r0, #1
   12ae2:	d004      	beq.n	12aee <mlx90632_getObjTempRaw+0x12>
    else if (cycle_pos == 2)
   12ae4:	2802      	cmp	r0, #2
   12ae6:	d021      	beq.n	12b2c <mlx90632_getObjTempRaw+0x50>
    int32_t ret = 0;
   12ae8:	2000      	movs	r0, #0
}
   12aea:	b002      	add	sp, #8
   12aec:	bd10      	pop	{r4, pc}
        ret = mlx90632_i2c_read(MLX90632_RAM_1(cycle_pos), &tmp_temp);
   12aee:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   12af2:	b284      	uxth	r4, r0
   12af4:	f504 4080 	add.w	r0, r4, #16384	; 0x4000
   12af8:	f10d 0106 	add.w	r1, sp, #6
   12afc:	b200      	sxth	r0, r0
   12afe:	f000 f93d 	bl	12d7c <mlx90632_i2c_read>
        if (ret < 0)
   12b02:	2800      	cmp	r0, #0
   12b04:	dbf1      	blt.n	12aea <mlx90632_getObjTempRaw+0xe>
        MLX_T_RAW.object_ram_4_7 = (int16_t)tmp_temp;
   12b06:	f9bd 2006 	ldrsh.w	r2, [sp, #6]
   12b0a:	4b18      	ldr	r3, [pc, #96]	; (12b6c <mlx90632_getObjTempRaw+0x90>)
   12b0c:	809a      	strh	r2, [r3, #4]
        ret = mlx90632_i2c_read(MLX90632_RAM_2(cycle_pos), &tmp_temp);
   12b0e:	f504 4080 	add.w	r0, r4, #16384	; 0x4000
   12b12:	3001      	adds	r0, #1
   12b14:	f10d 0106 	add.w	r1, sp, #6
   12b18:	b200      	sxth	r0, r0
   12b1a:	f000 f92f 	bl	12d7c <mlx90632_i2c_read>
        if (ret < 0)
   12b1e:	2800      	cmp	r0, #0
   12b20:	dbe3      	blt.n	12aea <mlx90632_getObjTempRaw+0xe>
        MLX_T_RAW.object_ram_5_8 = (int16_t)tmp_temp;
   12b22:	f9bd 2006 	ldrsh.w	r2, [sp, #6]
   12b26:	4b11      	ldr	r3, [pc, #68]	; (12b6c <mlx90632_getObjTempRaw+0x90>)
   12b28:	80da      	strh	r2, [r3, #6]
   12b2a:	e7de      	b.n	12aea <mlx90632_getObjTempRaw+0xe>
        ret = mlx90632_i2c_read(MLX90632_RAM_1(cycle_pos), &tmp_temp);
   12b2c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   12b30:	b284      	uxth	r4, r0
   12b32:	f504 4080 	add.w	r0, r4, #16384	; 0x4000
   12b36:	f10d 0106 	add.w	r1, sp, #6
   12b3a:	b200      	sxth	r0, r0
   12b3c:	f000 f91e 	bl	12d7c <mlx90632_i2c_read>
        if (ret < 0)
   12b40:	2800      	cmp	r0, #0
   12b42:	dbd2      	blt.n	12aea <mlx90632_getObjTempRaw+0xe>
        MLX_T_RAW.object_ram_4_7 = (int16_t)tmp_temp;
   12b44:	f9bd 2006 	ldrsh.w	r2, [sp, #6]
   12b48:	4b08      	ldr	r3, [pc, #32]	; (12b6c <mlx90632_getObjTempRaw+0x90>)
   12b4a:	809a      	strh	r2, [r3, #4]
        ret = mlx90632_i2c_read(MLX90632_RAM_2(cycle_pos), &tmp_temp);
   12b4c:	f504 4080 	add.w	r0, r4, #16384	; 0x4000
   12b50:	3001      	adds	r0, #1
   12b52:	f10d 0106 	add.w	r1, sp, #6
   12b56:	b200      	sxth	r0, r0
   12b58:	f000 f910 	bl	12d7c <mlx90632_i2c_read>
        if (ret < 0)
   12b5c:	2800      	cmp	r0, #0
   12b5e:	dbc4      	blt.n	12aea <mlx90632_getObjTempRaw+0xe>
        MLX_T_RAW.object_ram_5_8 = (int16_t)tmp_temp;
   12b60:	f9bd 2006 	ldrsh.w	r2, [sp, #6]
   12b64:	4b01      	ldr	r3, [pc, #4]	; (12b6c <mlx90632_getObjTempRaw+0x90>)
   12b66:	80da      	strh	r2, [r3, #6]
   12b68:	e7bf      	b.n	12aea <mlx90632_getObjTempRaw+0xe>
   12b6a:	bf00      	nop
   12b6c:	200084bc 	.word	0x200084bc

00012b70 <mlx90632_get_emissivity>:

void mlx90632_set_emissivity(double value){
    emissivity = value;
}

double mlx90632_get_emissivity(void){
   12b70:	b538      	push	{r3, r4, r5, lr}
    if (emissivity == 0.0)
   12b72:	4b07      	ldr	r3, [pc, #28]	; (12b90 <mlx90632_get_emissivity+0x20>)
   12b74:	e9d3 4500 	ldrd	r4, r5, [r3]
   12b78:	2200      	movs	r2, #0
   12b7a:	2300      	movs	r3, #0
   12b7c:	4620      	mov	r0, r4
   12b7e:	4629      	mov	r1, r5
   12b80:	f7fd ffc2 	bl	10b08 <__aeabi_dcmpeq>
   12b84:	b108      	cbz	r0, 12b8a <mlx90632_get_emissivity+0x1a>
    {
        return 1.0;
   12b86:	2400      	movs	r4, #0
   12b88:	4d02      	ldr	r5, [pc, #8]	; (12b94 <mlx90632_get_emissivity+0x24>)
    }
    else
    {
        return emissivity;
    }
}
   12b8a:	4620      	mov	r0, r4
   12b8c:	4629      	mov	r1, r5
   12b8e:	bd38      	pop	{r3, r4, r5, pc}
   12b90:	20008370 	.word	0x20008370
   12b94:	3ff00000 	.word	0x3ff00000

00012b98 <mlx90632_readObjTemp>:
int32_t mlx90632_readObjTemp(int cycle_pos){
   12b98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12b9c:	b095      	sub	sp, #84	; 0x54
    ret = mlx90632_getObjTempRaw(cycle_pos);
   12b9e:	f7ff ff9d 	bl	12adc <mlx90632_getObjTempRaw>
    if (ret < 0)
   12ba2:	1e04      	subs	r4, r0, #0
   12ba4:	db43      	blt.n	12c2e <mlx90632_readObjTemp+0x96>
    MLX_T.object = mlx90632_calc_temp_object(MLX_K.Ka, MLX_K.Gb, MLX_K.Ea, MLX_K.Eb, MLX_K.Fa, MLX_K.Ha, MLX_K.Ga, MLX_K.Fb, MLX_K.Hb);
   12ba6:	4b24      	ldr	r3, [pc, #144]	; (12c38 <mlx90632_readObjTemp+0xa0>)
   12ba8:	f8d3 b028 	ldr.w	fp, [r3, #40]	; 0x28
   12bac:	691a      	ldr	r2, [r3, #16]
   12bae:	920f      	str	r2, [sp, #60]	; 0x3c
   12bb0:	695d      	ldr	r5, [r3, #20]
   12bb2:	699e      	ldr	r6, [r3, #24]
   12bb4:	6adf      	ldr	r7, [r3, #44]	; 0x2c
   12bb6:	f8d3 8020 	ldr.w	r8, [r3, #32]
   12bba:	f8d3 901c 	ldr.w	r9, [r3, #28]
   12bbe:	f8d3 a030 	ldr.w	sl, [r3, #48]	; 0x30
   12bc2:	6a58      	ldr	r0, [r3, #36]	; 0x24
   12bc4:	f7fd fce0 	bl	10588 <__aeabi_f2d>
   12bc8:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   12bcc:	4658      	mov	r0, fp
   12bce:	f7fd fcdb 	bl	10588 <__aeabi_f2d>
   12bd2:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
   12bd6:	4650      	mov	r0, sl
   12bd8:	f7fd fcd6 	bl	10588 <__aeabi_f2d>
   12bdc:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   12be0:	4648      	mov	r0, r9
   12be2:	f7fd fcd1 	bl	10588 <__aeabi_f2d>
   12be6:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
   12bea:	4640      	mov	r0, r8
   12bec:	f7fd fccc 	bl	10588 <__aeabi_f2d>
   12bf0:	e9cd 0108 	strd	r0, r1, [sp, #32]
   12bf4:	4638      	mov	r0, r7
   12bf6:	f7fd fcc7 	bl	10588 <__aeabi_f2d>
   12bfa:	e9cd 0106 	strd	r0, r1, [sp, #24]
   12bfe:	4630      	mov	r0, r6
   12c00:	f7fd fcc2 	bl	10588 <__aeabi_f2d>
   12c04:	e9cd 0104 	strd	r0, r1, [sp, #16]
   12c08:	4628      	mov	r0, r5
   12c0a:	f7fd fcbd 	bl	10588 <__aeabi_f2d>
   12c0e:	e9cd 0102 	strd	r0, r1, [sp, #8]
   12c12:	980f      	ldr	r0, [sp, #60]	; 0x3c
   12c14:	f7fd fcb8 	bl	10588 <__aeabi_f2d>
   12c18:	e9cd 0100 	strd	r0, r1, [sp]
   12c1c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   12c20:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
   12c24:	f7fe fb1c 	bl	11260 <mlx90632_calc_temp_object>
   12c28:	4b04      	ldr	r3, [pc, #16]	; (12c3c <mlx90632_readObjTemp+0xa4>)
   12c2a:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
   12c2e:	4620      	mov	r0, r4
   12c30:	b015      	add	sp, #84	; 0x54
   12c32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12c36:	bf00      	nop
   12c38:	200084c4 	.word	0x200084c4
   12c3c:	20008378 	.word	0x20008378

00012c40 <mlx90632_searchWaitTime>:
    if ( meas_ret == - ETIMEDOUT){
   12c40:	f110 0f74 	cmn.w	r0, #116	; 0x74
   12c44:	d003      	beq.n	12c4e <mlx90632_searchWaitTime+0xe>
         MLX_STS.count_check_meas = 0;
   12c46:	4b0e      	ldr	r3, [pc, #56]	; (12c80 <mlx90632_searchWaitTime+0x40>)
   12c48:	2200      	movs	r2, #0
   12c4a:	711a      	strb	r2, [r3, #4]
}
   12c4c:	4770      	bx	lr
        MLX_STS.count_check_meas ++;
   12c4e:	4a0c      	ldr	r2, [pc, #48]	; (12c80 <mlx90632_searchWaitTime+0x40>)
   12c50:	7913      	ldrb	r3, [r2, #4]
   12c52:	3301      	adds	r3, #1
   12c54:	b2db      	uxtb	r3, r3
   12c56:	7113      	strb	r3, [r2, #4]
         if ( MLX_STS.count_check_meas >= MLX90632_MAX_NUM_CHECK_MEAS){
   12c58:	2b31      	cmp	r3, #49	; 0x31
   12c5a:	d800      	bhi.n	12c5e <mlx90632_searchWaitTime+0x1e>
   12c5c:	4770      	bx	lr
void mlx90632_searchWaitTime(int meas_ret){
   12c5e:	b510      	push	{r4, lr}
            MLX_STS.wait_time_meas = MLX_STS.wait_time_meas + MLX90632_STEP_WAIT_TIME;
   12c60:	4614      	mov	r4, r2
   12c62:	8853      	ldrh	r3, [r2, #2]
   12c64:	33fa      	adds	r3, #250	; 0xfa
   12c66:	8053      	strh	r3, [r2, #2]
            mlx90632_addressed_reset();
   12c68:	f006 fc7a 	bl	19560 <mlx90632_addressed_reset>
            if (MLX_STS.wait_time_meas == MLX90632_MAX_WAIT_TIME)MLX_STS.wait_time_meas = MLX90632_STEP_WAIT_TIME;
   12c6c:	8862      	ldrh	r2, [r4, #2]
   12c6e:	f241 3388 	movw	r3, #5000	; 0x1388
   12c72:	429a      	cmp	r2, r3
   12c74:	d000      	beq.n	12c78 <mlx90632_searchWaitTime+0x38>
}
   12c76:	bd10      	pop	{r4, pc}
            if (MLX_STS.wait_time_meas == MLX90632_MAX_WAIT_TIME)MLX_STS.wait_time_meas = MLX90632_STEP_WAIT_TIME;
   12c78:	22fa      	movs	r2, #250	; 0xfa
   12c7a:	8062      	strh	r2, [r4, #2]
   12c7c:	e7fb      	b.n	12c76 <mlx90632_searchWaitTime+0x36>
   12c7e:	bf00      	nop
   12c80:	20008058 	.word	0x20008058

00012c84 <mlx90632_start_measurement>:
int mlx90632_start_measurement(){
   12c84:	b510      	push	{r4, lr}
   12c86:	b082      	sub	sp, #8
    mlx90632_check_i2c_comm();
   12c88:	f7ff fe58 	bl	1293c <mlx90632_check_i2c_comm>
    ret = i2c_melexis_set_soc ();
   12c8c:	f006 fc31 	bl	194f2 <i2c_melexis_set_soc>
    if (ret < 0)
   12c90:	2800      	cmp	r0, #0
   12c92:	db2e      	blt.n	12cf2 <mlx90632_start_measurement+0x6e>
    ret = mlx90632_i2c_read(MLX90632_REG_STATUS, &reg_status);
   12c94:	f10d 0106 	add.w	r1, sp, #6
   12c98:	f643 70ff 	movw	r0, #16383	; 0x3fff
   12c9c:	f000 f86e 	bl	12d7c <mlx90632_i2c_read>
    if (ret < 0)
   12ca0:	2800      	cmp	r0, #0
   12ca2:	db26      	blt.n	12cf2 <mlx90632_start_measurement+0x6e>
    reg_ctrl = reg_status & (~MLX90632_STAT_DATA_RDY);
   12ca4:	f8bd 1006 	ldrh.w	r1, [sp, #6]
   12ca8:	f021 0101 	bic.w	r1, r1, #1
    ret = mlx90632_i2c_write(MLX90632_REG_STATUS, reg_ctrl);
   12cac:	f643 70ff 	movw	r0, #16383	; 0x3fff
   12cb0:	f000 f89a 	bl	12de8 <mlx90632_i2c_write>
    if (ret < 0)
   12cb4:	2800      	cmp	r0, #0
   12cb6:	db1c      	blt.n	12cf2 <mlx90632_start_measurement+0x6e>
    int ret, tries = MLX90632_MAX_NUMBER_MESUREMENT_READ_TRIES;
   12cb8:	2364      	movs	r3, #100	; 0x64
    while (tries-- > 0) {
   12cba:	1e5c      	subs	r4, r3, #1
   12cbc:	2b00      	cmp	r3, #0
   12cbe:	dd12      	ble.n	12ce6 <mlx90632_start_measurement+0x62>
        mlx90632_i2c_read(MLX90632_REG_STATUS, &reg_status);
   12cc0:	f10d 0106 	add.w	r1, sp, #6
   12cc4:	f643 70ff 	movw	r0, #16383	; 0x3fff
   12cc8:	f000 f858 	bl	12d7c <mlx90632_i2c_read>
        if (reg_status & MLX90632_STAT_DATA_RDY)
   12ccc:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   12cd0:	f013 0f01 	tst.w	r3, #1
   12cd4:	d107      	bne.n	12ce6 <mlx90632_start_measurement+0x62>
        usleep(MLX_STS.wait_time_meas, MLX_STS.wait_time_meas + 100);
   12cd6:	4b09      	ldr	r3, [pc, #36]	; (12cfc <mlx90632_start_measurement+0x78>)
   12cd8:	8858      	ldrh	r0, [r3, #2]
   12cda:	f100 0164 	add.w	r1, r0, #100	; 0x64
   12cde:	f006 fc37 	bl	19550 <usleep>
    while (tries-- > 0) {
   12ce2:	4623      	mov	r3, r4
   12ce4:	e7e9      	b.n	12cba <mlx90632_start_measurement+0x36>
    if (tries < 0){
   12ce6:	2c00      	cmp	r4, #0
   12ce8:	db05      	blt.n	12cf6 <mlx90632_start_measurement+0x72>
    meas_ret = (int)(reg_status & (uint16_t)MLX90632_STAT_CYCLE_POS) >> 2; 
   12cea:	f8bd 0006 	ldrh.w	r0, [sp, #6]
   12cee:	f3c0 0084 	ubfx	r0, r0, #2, #5
}
   12cf2:	b002      	add	sp, #8
   12cf4:	bd10      	pop	{r4, pc}
        return -ETIMEDOUT;
   12cf6:	f06f 0073 	mvn.w	r0, #115	; 0x73
   12cfa:	e7fa      	b.n	12cf2 <mlx90632_start_measurement+0x6e>
   12cfc:	20008058 	.word	0x20008058

00012d00 <mlx90632_read>:
void mlx90632_read(){
   12d00:	b510      	push	{r4, lr}
    start_measurement_ret = mlx90632_start_measurement();
   12d02:	f7ff ffbf 	bl	12c84 <mlx90632_start_measurement>
   12d06:	4604      	mov	r4, r0
    mlx90632_searchWaitTime(start_measurement_ret);
   12d08:	f7ff ff9a 	bl	12c40 <mlx90632_searchWaitTime>
    if (start_measurement_ret >= 0)
   12d0c:	2c00      	cmp	r4, #0
   12d0e:	da00      	bge.n	12d12 <mlx90632_read+0x12>
}
   12d10:	bd10      	pop	{r4, pc}
        ret = mlx90632_gatherAmbTemp();
   12d12:	f7ff feab 	bl	12a6c <mlx90632_gatherAmbTemp>
        if (ret < 0){
   12d16:	2800      	cmp	r0, #0
   12d18:	db17      	blt.n	12d4a <mlx90632_read+0x4a>
            LOG("Ambient temperature measured value: %.4f", MLX_T.ambient);
   12d1a:	f006 fba2 	bl	19462 <k_uptime_get_32>
   12d1e:	4601      	mov	r1, r0
   12d20:	4b11      	ldr	r3, [pc, #68]	; (12d68 <mlx90632_read+0x68>)
   12d22:	e9d3 2300 	ldrd	r2, r3, [r3]
   12d26:	4811      	ldr	r0, [pc, #68]	; (12d6c <mlx90632_read+0x6c>)
   12d28:	f005 fb96 	bl	18458 <iprintf>
        ret = mlx90632_readObjTemp(start_measurement_ret);
   12d2c:	4620      	mov	r0, r4
   12d2e:	f7ff ff33 	bl	12b98 <mlx90632_readObjTemp>
        if (ret < 0){
   12d32:	2800      	cmp	r0, #0
   12d34:	db10      	blt.n	12d58 <mlx90632_read+0x58>
            LOG("Object temperature measured value: %.4f", MLX_T.object);
   12d36:	f006 fb94 	bl	19462 <k_uptime_get_32>
   12d3a:	4601      	mov	r1, r0
   12d3c:	4b0a      	ldr	r3, [pc, #40]	; (12d68 <mlx90632_read+0x68>)
   12d3e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
   12d42:	480b      	ldr	r0, [pc, #44]	; (12d70 <mlx90632_read+0x70>)
   12d44:	f005 fb88 	bl	18458 <iprintf>
}
   12d48:	e7e2      	b.n	12d10 <mlx90632_read+0x10>
            LOG("Reading Amb Temp failed");
   12d4a:	f006 fb8a 	bl	19462 <k_uptime_get_32>
   12d4e:	4601      	mov	r1, r0
   12d50:	4808      	ldr	r0, [pc, #32]	; (12d74 <mlx90632_read+0x74>)
   12d52:	f005 fb81 	bl	18458 <iprintf>
   12d56:	e7e9      	b.n	12d2c <mlx90632_read+0x2c>
            LOG("Reading Object Temp failed");
   12d58:	f006 fb83 	bl	19462 <k_uptime_get_32>
   12d5c:	4601      	mov	r1, r0
   12d5e:	4806      	ldr	r0, [pc, #24]	; (12d78 <mlx90632_read+0x78>)
   12d60:	f005 fb7a 	bl	18458 <iprintf>
   12d64:	e7d4      	b.n	12d10 <mlx90632_read+0x10>
   12d66:	bf00      	nop
   12d68:	20008378 	.word	0x20008378
   12d6c:	0001c0f4 	.word	0x0001c0f4
   12d70:	0001c14c 	.word	0x0001c14c
   12d74:	0001c0d0 	.word	0x0001c0d0
   12d78:	0001c128 	.word	0x0001c128

00012d7c <mlx90632_i2c_read>:
#include "mlx90632_hal.h"

uint8_t error_melexis90632 = 0;

extern int32_t mlx90632_i2c_read(int16_t register_address, uint16_t *value)
{
   12d7c:	b530      	push	{r4, r5, lr}
   12d7e:	b089      	sub	sp, #36	; 0x24
   12d80:	460c      	mov	r4, r1
    //uint8_t *buf_read;
    uint8_t reg_write[2] = {0};
   12d82:	2300      	movs	r3, #0
   12d84:	f8ad 301c 	strh.w	r3, [sp, #28]
    struct i2c_msg msg[2];
    uint16_t buf_read;

    reg_write[0] = (register_address >> 8); //MSB
   12d88:	1202      	asrs	r2, r0, #8
   12d8a:	f88d 201c 	strb.w	r2, [sp, #28]
    reg_write[1] = (register_address & 0xFF); //LSB
   12d8e:	f88d 001d 	strb.w	r0, [sp, #29]

	msg[0].buf = (uint8_t *)reg_write;
   12d92:	aa07      	add	r2, sp, #28
   12d94:	9201      	str	r2, [sp, #4]
	msg[0].len = sizeof(reg_write);
   12d96:	2202      	movs	r2, #2
   12d98:	9202      	str	r2, [sp, #8]
	msg[0].flags = I2C_MSG_WRITE;
   12d9a:	f88d 300c 	strb.w	r3, [sp, #12]

	msg[1].buf = (uint8_t *)value;
   12d9e:	9104      	str	r1, [sp, #16]
	msg[1].len = 2;
   12da0:	9205      	str	r2, [sp, #20]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
   12da2:	2307      	movs	r3, #7
   12da4:	f88d 3018 	strb.w	r3, [sp, #24]
	const struct i2c_driver_api *api =
   12da8:	480d      	ldr	r0, [pc, #52]	; (12de0 <mlx90632_i2c_read+0x64>)
   12daa:	6883      	ldr	r3, [r0, #8]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
   12dac:	689d      	ldr	r5, [r3, #8]
   12dae:	233a      	movs	r3, #58	; 0x3a
   12db0:	a901      	add	r1, sp, #4
   12db2:	47a8      	blx	r5

    if(i2c_transfer(I2C_DEV, msg, 2, 0x3A))
   12db4:	b958      	cbnz	r0, 12dce <mlx90632_i2c_read+0x52>
        error_melexis90632 = (uint8_t)(error_melexis90632 | ERROR_MLX_READ);
		return -1;
	}
    else
    {
        buf_read = *value;
   12db6:	8822      	ldrh	r2, [r4, #0]
        *value = (buf_read >> 8) | ((buf_read & 0x00FF)<<8);
   12db8:	0a13      	lsrs	r3, r2, #8
   12dba:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   12dbe:	8023      	strh	r3, [r4, #0]
        error_melexis90632 = (uint8_t)(error_melexis90632 & (~ERROR_MLX_READ));
   12dc0:	4a08      	ldr	r2, [pc, #32]	; (12de4 <mlx90632_i2c_read+0x68>)
   12dc2:	7813      	ldrb	r3, [r2, #0]
   12dc4:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
   12dc8:	7013      	strb	r3, [r2, #0]
        return 0;
    }
}
   12dca:	b009      	add	sp, #36	; 0x24
   12dcc:	bd30      	pop	{r4, r5, pc}
        error_melexis90632 = (uint8_t)(error_melexis90632 | ERROR_MLX_READ);
   12dce:	4a05      	ldr	r2, [pc, #20]	; (12de4 <mlx90632_i2c_read+0x68>)
   12dd0:	7813      	ldrb	r3, [r2, #0]
   12dd2:	f043 0301 	orr.w	r3, r3, #1
   12dd6:	7013      	strb	r3, [r2, #0]
		return -1;
   12dd8:	f04f 30ff 	mov.w	r0, #4294967295
   12ddc:	e7f5      	b.n	12dca <mlx90632_i2c_read+0x4e>
   12dde:	bf00      	nop
   12de0:	0001b84c 	.word	0x0001b84c
   12de4:	200086a1 	.word	0x200086a1

00012de8 <mlx90632_i2c_write>:

extern int32_t mlx90632_i2c_write(int16_t register_address, uint16_t value)
{
   12de8:	b510      	push	{r4, lr}
   12dea:	b088      	sub	sp, #32
    uint8_t reg_write[2]; 
    uint8_t data[2];
    struct i2c_msg msg[2];

    reg_write[0] = (register_address >> 8); //MSB
   12dec:	1203      	asrs	r3, r0, #8
   12dee:	f88d 301c 	strb.w	r3, [sp, #28]
    reg_write[1] = (register_address & 0xFF); //LSB
   12df2:	f88d 001d 	strb.w	r0, [sp, #29]
    data[0] = (value >> 8); //MSB
   12df6:	0a0b      	lsrs	r3, r1, #8
   12df8:	f88d 3018 	strb.w	r3, [sp, #24]
    data[1] = (value & 0xFF); //LSB
   12dfc:	f88d 1019 	strb.w	r1, [sp, #25]

	msg[0].buf = &reg_write;
   12e00:	ab07      	add	r3, sp, #28
   12e02:	9300      	str	r3, [sp, #0]
	msg[0].len = sizeof(reg_write);
   12e04:	2202      	movs	r2, #2
   12e06:	9201      	str	r2, [sp, #4]
	msg[0].flags = I2C_MSG_WRITE;
   12e08:	2300      	movs	r3, #0
   12e0a:	f88d 3008 	strb.w	r3, [sp, #8]

	msg[1].buf = &data;
   12e0e:	ab06      	add	r3, sp, #24
   12e10:	9303      	str	r3, [sp, #12]
	msg[1].len = sizeof(data);
   12e12:	9204      	str	r2, [sp, #16]
	msg[1].flags = I2C_MSG_WRITE | I2C_MSG_STOP;
   12e14:	f88d 2014 	strb.w	r2, [sp, #20]
	const struct i2c_driver_api *api =
   12e18:	480a      	ldr	r0, [pc, #40]	; (12e44 <mlx90632_i2c_write+0x5c>)
   12e1a:	6883      	ldr	r3, [r0, #8]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
   12e1c:	689c      	ldr	r4, [r3, #8]
   12e1e:	233a      	movs	r3, #58	; 0x3a
   12e20:	4669      	mov	r1, sp
   12e22:	47a0      	blx	r4

    if(i2c_transfer(I2C_DEV, msg, 2, 0x3A))
   12e24:	b930      	cbnz	r0, 12e34 <mlx90632_i2c_write+0x4c>
        error_melexis90632 = (uint8_t)(error_melexis90632 | ERROR_MLX_WRITE);
		return -1;
	}
    else
    {
        error_melexis90632 = (uint8_t)(error_melexis90632 & (~ERROR_MLX_WRITE));
   12e26:	4a08      	ldr	r2, [pc, #32]	; (12e48 <mlx90632_i2c_write+0x60>)
   12e28:	7813      	ldrb	r3, [r2, #0]
   12e2a:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
   12e2e:	7013      	strb	r3, [r2, #0]
        return 0;
    }
}
   12e30:	b008      	add	sp, #32
   12e32:	bd10      	pop	{r4, pc}
        error_melexis90632 = (uint8_t)(error_melexis90632 | ERROR_MLX_WRITE);
   12e34:	4a04      	ldr	r2, [pc, #16]	; (12e48 <mlx90632_i2c_write+0x60>)
   12e36:	7813      	ldrb	r3, [r2, #0]
   12e38:	f043 0302 	orr.w	r3, r3, #2
   12e3c:	7013      	strb	r3, [r2, #0]
		return -1;
   12e3e:	f04f 30ff 	mov.w	r0, #4294967295
   12e42:	e7f5      	b.n	12e30 <mlx90632_i2c_write+0x48>
   12e44:	0001b84c 	.word	0x0001b84c
   12e48:	200086a1 	.word	0x200086a1

00012e4c <char_out>:

	return c;
}

static int char_out(int c, void *ctx_p)
{
   12e4c:	b508      	push	{r3, lr}
	(void) ctx_p;
	return _char_out(c);
   12e4e:	4b02      	ldr	r3, [pc, #8]	; (12e58 <char_out+0xc>)
   12e50:	681b      	ldr	r3, [r3, #0]
   12e52:	4798      	blx	r3
}
   12e54:	bd08      	pop	{r3, pc}
   12e56:	bf00      	nop
   12e58:	20008060 	.word	0x20008060

00012e5c <__printk_hook_install>:
	_char_out = fn;
   12e5c:	4b01      	ldr	r3, [pc, #4]	; (12e64 <__printk_hook_install+0x8>)
   12e5e:	6018      	str	r0, [r3, #0]
}
   12e60:	4770      	bx	lr
   12e62:	bf00      	nop
   12e64:	20008060 	.word	0x20008060

00012e68 <vprintk>:

void vprintk(const char *fmt, va_list ap)
{
   12e68:	b500      	push	{lr}
   12e6a:	b083      	sub	sp, #12
   12e6c:	4602      	mov	r2, r0
   12e6e:	460b      	mov	r3, r1
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap);
#else
static inline
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap)
{
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
   12e70:	2100      	movs	r1, #0
   12e72:	9100      	str	r1, [sp, #0]
   12e74:	4802      	ldr	r0, [pc, #8]	; (12e80 <vprintk+0x18>)
   12e76:	f000 f989 	bl	1318c <z_cbvprintf_impl>

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
   12e7a:	b003      	add	sp, #12
   12e7c:	f85d fb04 	ldr.w	pc, [sp], #4
   12e80:	00012e4d 	.word	0x00012e4d

00012e84 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
   12e84:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   12e88:	b083      	sub	sp, #12
   12e8a:	4604      	mov	r4, r0
   12e8c:	4608      	mov	r0, r1
   12e8e:	4615      	mov	r5, r2
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   12e90:	8b23      	ldrh	r3, [r4, #24]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
   12e92:	f013 0f08 	tst.w	r3, #8
   12e96:	d105      	bne.n	12ea4 <process_event+0x20>
   12e98:	f003 0607 	and.w	r6, r3, #7
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
   12e9c:	2300      	movs	r3, #0
   12e9e:	9300      	str	r3, [sp, #0]
	list->tail = NULL;
   12ea0:	9301      	str	r3, [sp, #4]
}
   12ea2:	e055      	b.n	12f50 <process_event+0xcc>
		if (evt == EVT_COMPLETE) {
   12ea4:	2901      	cmp	r1, #1
   12ea6:	d009      	beq.n	12ebc <process_event+0x38>
			mgr->flags |= ONOFF_FLAG_COMPLETE;
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
   12ea8:	f043 0320 	orr.w	r3, r3, #32
   12eac:	8323      	strh	r3, [r4, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
   12eae:	f385 8811 	msr	BASEPRI, r5
   12eb2:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
   12eb6:	b003      	add	sp, #12
   12eb8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			mgr->flags |= ONOFF_FLAG_COMPLETE;
   12ebc:	f043 0310 	orr.w	r3, r3, #16
   12ec0:	8323      	strh	r3, [r4, #24]
   12ec2:	e7f4      	b.n	12eae <process_event+0x2a>
			evt = process_recheck(mgr);
   12ec4:	4620      	mov	r0, r4
   12ec6:	f006 fbcf 	bl	19668 <process_recheck>
   12eca:	e043      	b.n	12f54 <process_event+0xd0>
			res = mgr->last_res;
   12ecc:	f8d4 9014 	ldr.w	r9, [r4, #20]
			process_complete(mgr, &clients, res);
   12ed0:	464a      	mov	r2, r9
   12ed2:	4669      	mov	r1, sp
   12ed4:	4620      	mov	r0, r4
   12ed6:	f006 fbe0 	bl	1969a <process_complete>
		onoff_transition_fn transit = NULL;
   12eda:	f04f 0800 	mov.w	r8, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   12ede:	8b23      	ldrh	r3, [r4, #24]
   12ee0:	f003 0707 	and.w	r7, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
   12ee4:	42b7      	cmp	r7, r6
   12ee6:	d069      	beq.n	12fbc <process_event+0x138>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
   12ee8:	68a2      	ldr	r2, [r4, #8]
   12eea:	2a00      	cmp	r2, #0
   12eec:	d066      	beq.n	12fbc <process_event+0x138>
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   12eee:	2201      	movs	r2, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
   12ef0:	f043 0308 	orr.w	r3, r3, #8
			mgr->flags = flags;
   12ef4:	8323      	strh	r3, [r4, #24]
   12ef6:	f385 8811 	msr	BASEPRI, r5
   12efa:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
   12efe:	2a00      	cmp	r2, #0
   12f00:	d164      	bne.n	12fcc <process_event+0x148>
   12f02:	9b00      	ldr	r3, [sp, #0]
			if (!sys_slist_is_empty(&clients)) {
   12f04:	b12b      	cbz	r3, 12f12 <process_event+0x8e>
				notify_all(mgr, &clients, state, res);
   12f06:	464b      	mov	r3, r9
   12f08:	463a      	mov	r2, r7
   12f0a:	4669      	mov	r1, sp
   12f0c:	4620      	mov	r0, r4
   12f0e:	f006 fc3d 	bl	1978c <notify_all>
			if (transit != NULL) {
   12f12:	f1b8 0f00 	cmp.w	r8, #0
   12f16:	d002      	beq.n	12f1e <process_event+0x9a>
				transit(mgr, transition_complete);
   12f18:	4934      	ldr	r1, [pc, #208]	; (12fec <process_event+0x168>)
   12f1a:	4620      	mov	r0, r4
   12f1c:	47c0      	blx	r8
	__asm__ volatile(
   12f1e:	f04f 0320 	mov.w	r3, #32
   12f22:	f3ef 8511 	mrs	r5, BASEPRI
   12f26:	f383 8812 	msr	BASEPRI_MAX, r3
   12f2a:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
   12f2e:	8b23      	ldrh	r3, [r4, #24]
   12f30:	f023 0308 	bic.w	r3, r3, #8
   12f34:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
   12f36:	8b23      	ldrh	r3, [r4, #24]
   12f38:	f013 0f10 	tst.w	r3, #16
   12f3c:	d04c      	beq.n	12fd8 <process_event+0x154>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
   12f3e:	f023 0310 	bic.w	r3, r3, #16
   12f42:	8323      	strh	r3, [r4, #24]
			evt = EVT_COMPLETE;
   12f44:	2001      	movs	r0, #1
		state = mgr->flags & ONOFF_STATE_MASK;
   12f46:	8b26      	ldrh	r6, [r4, #24]
   12f48:	f006 0607 	and.w	r6, r6, #7
	} while (evt != EVT_NOP);
   12f4c:	2800      	cmp	r0, #0
   12f4e:	d0ae      	beq.n	12eae <process_event+0x2a>
		if (evt == EVT_RECHECK) {
   12f50:	2802      	cmp	r0, #2
   12f52:	d0b7      	beq.n	12ec4 <process_event+0x40>
		if (evt == EVT_NOP) {
   12f54:	2800      	cmp	r0, #0
   12f56:	d0aa      	beq.n	12eae <process_event+0x2a>
		if (evt == EVT_COMPLETE) {
   12f58:	3801      	subs	r0, #1
   12f5a:	2804      	cmp	r0, #4
   12f5c:	d82a      	bhi.n	12fb4 <process_event+0x130>
   12f5e:	a301      	add	r3, pc, #4	; (adr r3, 12f64 <process_event+0xe0>)
   12f60:	f853 f020 	ldr.w	pc, [r3, r0, lsl #2]
   12f64:	00012ecd 	.word	0x00012ecd
   12f68:	00012fb5 	.word	0x00012fb5
   12f6c:	00012f79 	.word	0x00012f79
   12f70:	00012f8d 	.word	0x00012f8d
   12f74:	00012fa1 	.word	0x00012fa1
			transit = mgr->transitions->start;
   12f78:	6923      	ldr	r3, [r4, #16]
   12f7a:	f8d3 8000 	ldr.w	r8, [r3]
			set_state(mgr, ONOFF_STATE_TO_ON);
   12f7e:	2106      	movs	r1, #6
   12f80:	4620      	mov	r0, r4
   12f82:	f006 fb47 	bl	19614 <set_state>
		res = 0;
   12f86:	f04f 0900 	mov.w	r9, #0
   12f8a:	e7a8      	b.n	12ede <process_event+0x5a>
			transit = mgr->transitions->stop;
   12f8c:	6923      	ldr	r3, [r4, #16]
   12f8e:	f8d3 8004 	ldr.w	r8, [r3, #4]
			set_state(mgr, ONOFF_STATE_TO_OFF);
   12f92:	2104      	movs	r1, #4
   12f94:	4620      	mov	r0, r4
   12f96:	f006 fb3d 	bl	19614 <set_state>
		res = 0;
   12f9a:	f04f 0900 	mov.w	r9, #0
   12f9e:	e79e      	b.n	12ede <process_event+0x5a>
			transit = mgr->transitions->reset;
   12fa0:	6923      	ldr	r3, [r4, #16]
   12fa2:	f8d3 8008 	ldr.w	r8, [r3, #8]
			set_state(mgr, ONOFF_STATE_RESETTING);
   12fa6:	2105      	movs	r1, #5
   12fa8:	4620      	mov	r0, r4
   12faa:	f006 fb33 	bl	19614 <set_state>
		res = 0;
   12fae:	f04f 0900 	mov.w	r9, #0
   12fb2:	e794      	b.n	12ede <process_event+0x5a>
		if (evt == EVT_NOP) {
   12fb4:	f04f 0800 	mov.w	r8, #0
   12fb8:	46c1      	mov	r9, r8
   12fba:	e790      	b.n	12ede <process_event+0x5a>
   12fbc:	9a00      	ldr	r2, [sp, #0]
		    || !sys_slist_is_empty(&clients)
   12fbe:	b10a      	cbz	r2, 12fc4 <process_event+0x140>
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   12fc0:	2200      	movs	r2, #0
   12fc2:	e795      	b.n	12ef0 <process_event+0x6c>
		    || (transit != NULL)) {
   12fc4:	f1b8 0f00 	cmp.w	r8, #0
   12fc8:	d192      	bne.n	12ef0 <process_event+0x6c>
   12fca:	e7b4      	b.n	12f36 <process_event+0xb2>
				notify_monitors(mgr, state, res);
   12fcc:	464a      	mov	r2, r9
   12fce:	4639      	mov	r1, r7
   12fd0:	4620      	mov	r0, r4
   12fd2:	f006 fb27 	bl	19624 <notify_monitors>
   12fd6:	e794      	b.n	12f02 <process_event+0x7e>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
   12fd8:	f013 0f20 	tst.w	r3, #32
   12fdc:	d004      	beq.n	12fe8 <process_event+0x164>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
   12fde:	f023 0320 	bic.w	r3, r3, #32
   12fe2:	8323      	strh	r3, [r4, #24]
			evt = EVT_RECHECK;
   12fe4:	2002      	movs	r0, #2
   12fe6:	e7ae      	b.n	12f46 <process_event+0xc2>
		evt = EVT_NOP;
   12fe8:	2000      	movs	r0, #0
   12fea:	e7ac      	b.n	12f46 <process_event+0xc2>
   12fec:	000197bb 	.word	0x000197bb

00012ff0 <extract_decimal>:
 * the referenced text.
 *
 * @return the decoded integer value.
 */
static size_t extract_decimal(const char **str)
{
   12ff0:	4684      	mov	ip, r0
	const char *sp = *str;
   12ff2:	6802      	ldr	r2, [r0, #0]
	size_t val = 0;
   12ff4:	2000      	movs	r0, #0

	while (isdigit((int)(unsigned char)*sp)) {
   12ff6:	e006      	b.n	13006 <extract_decimal+0x16>
		val = 10U * val + *sp++ - '0';
   12ff8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   12ffc:	3201      	adds	r2, #1
   12ffe:	eb03 0340 	add.w	r3, r3, r0, lsl #1
   13002:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
   13006:	7813      	ldrb	r3, [r2, #0]
   13008:	4903      	ldr	r1, [pc, #12]	; (13018 <extract_decimal+0x28>)
   1300a:	5cc9      	ldrb	r1, [r1, r3]
   1300c:	f011 0f04 	tst.w	r1, #4
   13010:	d1f2      	bne.n	12ff8 <extract_decimal+0x8>
	}
	*str = sp;
   13012:	f8cc 2000 	str.w	r2, [ip]
	return val;
}
   13016:	4770      	bx	lr
   13018:	0001c419 	.word	0x0001c419

0001301c <extract_flags>:
 *
 * @return a pointer the first character that follows the flags.
 */
static inline const char *extract_flags(struct conversion *conv,
					const char *sp)
{
   1301c:	4684      	mov	ip, r0
   1301e:	4608      	mov	r0, r1
	bool loop = true;
   13020:	2201      	movs	r2, #1
   13022:	e026      	b.n	13072 <extract_flags+0x56>

	do {
		switch (*sp) {
		case '-':
			conv->flag_dash = true;
   13024:	f89c 3000 	ldrb.w	r3, [ip]
   13028:	f043 0304 	orr.w	r3, r3, #4
   1302c:	f88c 3000 	strb.w	r3, [ip]
			conv->flag_zero = true;
			break;
		default:
			loop = false;
		}
		if (loop) {
   13030:	b1f2      	cbz	r2, 13070 <extract_flags+0x54>
			++sp;
   13032:	3001      	adds	r0, #1
   13034:	e01c      	b.n	13070 <extract_flags+0x54>
			conv->flag_plus = true;
   13036:	f89c 3000 	ldrb.w	r3, [ip]
   1303a:	f043 0308 	orr.w	r3, r3, #8
   1303e:	f88c 3000 	strb.w	r3, [ip]
			break;
   13042:	e7f5      	b.n	13030 <extract_flags+0x14>
			conv->flag_space = true;
   13044:	f89c 3000 	ldrb.w	r3, [ip]
   13048:	f043 0310 	orr.w	r3, r3, #16
   1304c:	f88c 3000 	strb.w	r3, [ip]
			break;
   13050:	e7ee      	b.n	13030 <extract_flags+0x14>
			conv->flag_hash = true;
   13052:	f89c 3000 	ldrb.w	r3, [ip]
   13056:	f043 0320 	orr.w	r3, r3, #32
   1305a:	f88c 3000 	strb.w	r3, [ip]
			break;
   1305e:	e7e7      	b.n	13030 <extract_flags+0x14>
			conv->flag_zero = true;
   13060:	f89c 3000 	ldrb.w	r3, [ip]
   13064:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   13068:	f88c 3000 	strb.w	r3, [ip]
			break;
   1306c:	e7e0      	b.n	13030 <extract_flags+0x14>
		switch (*sp) {
   1306e:	2200      	movs	r2, #0
		}
	} while (loop);
   13070:	b342      	cbz	r2, 130c4 <extract_flags+0xa8>
		switch (*sp) {
   13072:	7803      	ldrb	r3, [r0, #0]
   13074:	3b20      	subs	r3, #32
   13076:	2b10      	cmp	r3, #16
   13078:	d8f9      	bhi.n	1306e <extract_flags+0x52>
   1307a:	a101      	add	r1, pc, #4	; (adr r1, 13080 <extract_flags+0x64>)
   1307c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
   13080:	00013045 	.word	0x00013045
   13084:	0001306f 	.word	0x0001306f
   13088:	0001306f 	.word	0x0001306f
   1308c:	00013053 	.word	0x00013053
   13090:	0001306f 	.word	0x0001306f
   13094:	0001306f 	.word	0x0001306f
   13098:	0001306f 	.word	0x0001306f
   1309c:	0001306f 	.word	0x0001306f
   130a0:	0001306f 	.word	0x0001306f
   130a4:	0001306f 	.word	0x0001306f
   130a8:	0001306f 	.word	0x0001306f
   130ac:	00013037 	.word	0x00013037
   130b0:	0001306f 	.word	0x0001306f
   130b4:	00013025 	.word	0x00013025
   130b8:	0001306f 	.word	0x0001306f
   130bc:	0001306f 	.word	0x0001306f
   130c0:	00013061 	.word	0x00013061

	/* zero && dash => !zero */
	if (conv->flag_zero && conv->flag_dash) {
   130c4:	f89c 3000 	ldrb.w	r3, [ip]
   130c8:	f003 0344 	and.w	r3, r3, #68	; 0x44
   130cc:	2b44      	cmp	r3, #68	; 0x44
   130ce:	d000      	beq.n	130d2 <extract_flags+0xb6>
	}

	/* space && plus => !plus, handled in emitter code */

	return sp;
}
   130d0:	4770      	bx	lr
		conv->flag_zero = false;
   130d2:	f89c 3000 	ldrb.w	r3, [ip]
   130d6:	f36f 1386 	bfc	r3, #6, #1
   130da:	f88c 3000 	strb.w	r3, [ip]
   130de:	e7f7      	b.n	130d0 <extract_flags+0xb4>

000130e0 <encode_uint>:
 */
static char *encode_uint(uint_value_type value,
			 struct conversion *conv,
			 char *bps,
			 const char *bpe)
{
   130e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   130e4:	4605      	mov	r5, r0
   130e6:	460c      	mov	r4, r1
   130e8:	4693      	mov	fp, r2
   130ea:	4699      	mov	r9, r3
   130ec:	9f0a      	ldr	r7, [sp, #40]	; 0x28
	bool upcase = isupper((int)conv->specifier);
   130ee:	78d0      	ldrb	r0, [r2, #3]
   130f0:	4b25      	ldr	r3, [pc, #148]	; (13188 <encode_uint+0xa8>)
   130f2:	f813 a000 	ldrb.w	sl, [r3, r0]
   130f6:	f00a 0a03 	and.w	sl, sl, #3
	const unsigned int radix = conversion_radix(conv->specifier);
   130fa:	f006 fd89 	bl	19c10 <conversion_radix>
   130fe:	4606      	mov	r6, r0
	char *bp = bps + (bpe - bps);
   13100:	e015      	b.n	1312e <encode_uint+0x4e>

	do {
		unsigned int lsv = (unsigned int)(value % radix);

		*--bp = (lsv <= 9) ? ('0' + lsv)
   13102:	f1ba 0f01 	cmp.w	sl, #1
   13106:	d020      	beq.n	1314a <encode_uint+0x6a>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
   13108:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
   1310a:	3257      	adds	r2, #87	; 0x57
   1310c:	b2d2      	uxtb	r2, r2
   1310e:	f807 2d01 	strb.w	r2, [r7, #-1]!
		value /= radix;
   13112:	4632      	mov	r2, r6
   13114:	4643      	mov	r3, r8
   13116:	4628      	mov	r0, r5
   13118:	4621      	mov	r1, r4
   1311a:	f7fd fe85 	bl	10e28 <__aeabi_uldivmod>
	} while ((value != 0) && (bps < bp));
   1311e:	42b5      	cmp	r5, r6
   13120:	f174 0400 	sbcs.w	r4, r4, #0
   13124:	d315      	bcc.n	13152 <encode_uint+0x72>
   13126:	454f      	cmp	r7, r9
   13128:	d913      	bls.n	13152 <encode_uint+0x72>
		value /= radix;
   1312a:	4605      	mov	r5, r0
   1312c:	460c      	mov	r4, r1
		unsigned int lsv = (unsigned int)(value % radix);
   1312e:	f04f 0800 	mov.w	r8, #0
   13132:	4632      	mov	r2, r6
   13134:	4643      	mov	r3, r8
   13136:	4628      	mov	r0, r5
   13138:	4621      	mov	r1, r4
   1313a:	f7fd fe75 	bl	10e28 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   1313e:	2a09      	cmp	r2, #9
   13140:	d8df      	bhi.n	13102 <encode_uint+0x22>
   13142:	b2d2      	uxtb	r2, r2
   13144:	3230      	adds	r2, #48	; 0x30
   13146:	b2d2      	uxtb	r2, r2
   13148:	e7e1      	b.n	1310e <encode_uint+0x2e>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
   1314a:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
   1314c:	3237      	adds	r2, #55	; 0x37
   1314e:	b2d2      	uxtb	r2, r2
   13150:	e7dd      	b.n	1310e <encode_uint+0x2e>

	/* Record required alternate forms.  This can be determined
	 * from the radix without re-checking specifier.
	 */
	if (conv->flag_hash) {
   13152:	f89b 3000 	ldrb.w	r3, [fp]
   13156:	f013 0f20 	tst.w	r3, #32
   1315a:	d003      	beq.n	13164 <encode_uint+0x84>
		if (radix == 8) {
   1315c:	2e08      	cmp	r6, #8
   1315e:	d004      	beq.n	1316a <encode_uint+0x8a>
			conv->altform_0 = true;
		} else if (radix == 16) {
   13160:	2e10      	cmp	r6, #16
   13162:	d009      	beq.n	13178 <encode_uint+0x98>
			;
		}
	}

	return bp;
}
   13164:	4638      	mov	r0, r7
   13166:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			conv->altform_0 = true;
   1316a:	f89b 3002 	ldrb.w	r3, [fp, #2]
   1316e:	f043 0308 	orr.w	r3, r3, #8
   13172:	f88b 3002 	strb.w	r3, [fp, #2]
   13176:	e7f5      	b.n	13164 <encode_uint+0x84>
			conv->altform_0c = true;
   13178:	f89b 3002 	ldrb.w	r3, [fp, #2]
   1317c:	f043 0310 	orr.w	r3, r3, #16
   13180:	f88b 3002 	strb.w	r3, [fp, #2]
   13184:	e7ee      	b.n	13164 <encode_uint+0x84>
   13186:	bf00      	nop
   13188:	0001c419 	.word	0x0001c419

0001318c <z_cbvprintf_impl>:
	return (int)count;
}

int z_cbvprintf_impl(cbprintf_cb out, void *ctx, const char *fp,
		     va_list ap, uint32_t flags)
{
   1318c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13190:	b091      	sub	sp, #68	; 0x44
   13192:	4606      	mov	r6, r0
   13194:	460d      	mov	r5, r1
   13196:	4691      	mov	r9, r2
   13198:	9303      	str	r3, [sp, #12]
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
   1319a:	2400      	movs	r4, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
   1319c:	f899 0000 	ldrb.w	r0, [r9]
   131a0:	2800      	cmp	r0, #0
   131a2:	f000 82b9 	beq.w	13718 <z_cbvprintf_impl+0x58c>
		if (*fp != '%') {
   131a6:	2825      	cmp	r0, #37	; 0x25
   131a8:	d008      	beq.n	131bc <z_cbvprintf_impl+0x30>
			OUTC(*fp++);
   131aa:	f109 0901 	add.w	r9, r9, #1
   131ae:	4629      	mov	r1, r5
   131b0:	47b0      	blx	r6
   131b2:	2800      	cmp	r0, #0
   131b4:	f2c0 82b1 	blt.w	1371a <z_cbvprintf_impl+0x58e>
   131b8:	3401      	adds	r4, #1
			continue;
   131ba:	e7ef      	b.n	1319c <z_cbvprintf_impl+0x10>
		 * mitigate LLVM code generation bug.
		 */
		struct {
			union argument_value value;
			struct conversion conv;
		} state = {
   131bc:	2300      	movs	r3, #0
   131be:	9304      	str	r3, [sp, #16]
   131c0:	9305      	str	r3, [sp, #20]
   131c2:	9306      	str	r3, [sp, #24]
   131c4:	9307      	str	r3, [sp, #28]
   131c6:	9308      	str	r3, [sp, #32]
   131c8:	9309      	str	r3, [sp, #36]	; 0x24
		int precision = -1;
		const char *bps = NULL;
		const char *bpe = buf + sizeof(buf);
		char sign = 0;

		fp = extract_conversion(conv, sp);
   131ca:	4649      	mov	r1, r9
   131cc:	a806      	add	r0, sp, #24
   131ce:	f006 fcfd 	bl	19bcc <extract_conversion>
   131d2:	9002      	str	r0, [sp, #8]

		/* If dynamic width is specified, process it,
		 * otherwise set width if present.
		 */
		if (conv->width_star) {
   131d4:	f89d 3019 	ldrb.w	r3, [sp, #25]
   131d8:	f013 0f01 	tst.w	r3, #1
   131dc:	f000 8097 	beq.w	1330e <z_cbvprintf_impl+0x182>
			width = va_arg(ap, int);
   131e0:	9b03      	ldr	r3, [sp, #12]
   131e2:	1d1a      	adds	r2, r3, #4
   131e4:	9203      	str	r2, [sp, #12]
   131e6:	681f      	ldr	r7, [r3, #0]

			if (width < 0) {
   131e8:	2f00      	cmp	r7, #0
   131ea:	f2c0 8088 	blt.w	132fe <z_cbvprintf_impl+0x172>

		/* If dynamic precision is specified, process it, otherwise
		 * set precision if present.  For floating point where
		 * precision is not present use 6.
		 */
		if (conv->prec_star) {
   131ee:	f89d 3019 	ldrb.w	r3, [sp, #25]
   131f2:	f013 0f04 	tst.w	r3, #4
   131f6:	f000 809c 	beq.w	13332 <z_cbvprintf_impl+0x1a6>
			int arg = va_arg(ap, int);
   131fa:	9b03      	ldr	r3, [sp, #12]
   131fc:	1d1a      	adds	r2, r3, #4
   131fe:	9203      	str	r2, [sp, #12]
   13200:	f8d3 a000 	ldr.w	sl, [r3]

			if (arg < 0) {
   13204:	f1ba 0f00 	cmp.w	sl, #0
   13208:	f2c0 808a 	blt.w	13320 <z_cbvprintf_impl+0x194>
		}

		/* Reuse width and precision memory in conv for value
		 * padding counts.
		 */
		conv->pad0_value = 0;
   1320c:	2300      	movs	r3, #0
   1320e:	9307      	str	r3, [sp, #28]
		conv->pad0_pre_exp = 0;
   13210:	9308      	str	r3, [sp, #32]
		 * This can't be extracted to a helper function because
		 * passing a pointer to va_list doesn't work on x86_64.  See
		 * https://stackoverflow.com/a/8048892.
		 */
		enum specifier_cat_enum specifier_cat
			= (enum specifier_cat_enum)conv->specifier_cat;
   13212:	f89d 301a 	ldrb.w	r3, [sp, #26]
   13216:	f003 0307 	and.w	r3, r3, #7
		enum length_mod_enum length_mod
			= (enum length_mod_enum)conv->length_mod;
   1321a:	f89d 1019 	ldrb.w	r1, [sp, #25]
   1321e:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		/* Extract the value based on the argument category and length.
		 *
		 * Note that the length modifier doesn't affect the value of a
		 * pointer argument.
		 */
		if (specifier_cat == SPECIFIER_SINT) {
   13222:	2b01      	cmp	r3, #1
   13224:	f000 808e 	beq.w	13344 <z_cbvprintf_impl+0x1b8>
			if (length_mod == LENGTH_HH) {
				value->sint = (signed char)value->sint;
			} else if (length_mod == LENGTH_H) {
				value->sint = (short)value->sint;
			}
		} else if (specifier_cat == SPECIFIER_UINT) {
   13228:	2b02      	cmp	r3, #2
   1322a:	f000 80d3 	beq.w	133d4 <z_cbvprintf_impl+0x248>
			if (length_mod == LENGTH_HH) {
				value->uint = (unsigned char)value->uint;
			} else if (length_mod == LENGTH_H) {
				value->uint = (unsigned short)value->uint;
			}
		} else if (specifier_cat == SPECIFIER_FP) {
   1322e:	2b04      	cmp	r3, #4
   13230:	f000 8124 	beq.w	1347c <z_cbvprintf_impl+0x2f0>
			if (length_mod == LENGTH_UPPER_L) {
				value->ldbl = va_arg(ap, long double);
			} else {
				value->dbl = va_arg(ap, double);
			}
		} else if (specifier_cat == SPECIFIER_PTR) {
   13234:	2b03      	cmp	r3, #3
   13236:	f000 813b 	beq.w	134b0 <z_cbvprintf_impl+0x324>
		/* We've now consumed all arguments related to this
		 * specification.  If the conversion is invalid, or is
		 * something we don't support, then output the original
		 * specification and move on.
		 */
		if (conv->invalid || conv->unsupported) {
   1323a:	f89d 8018 	ldrb.w	r8, [sp, #24]
   1323e:	f018 0b03 	ands.w	fp, r8, #3
   13242:	f040 813b 	bne.w	134bc <z_cbvprintf_impl+0x330>
		}

		/* Do formatting, either into the buffer or
		 * referencing external data.
		 */
		switch (conv->specifier) {
   13246:	f89d 301b 	ldrb.w	r3, [sp, #27]
   1324a:	3b25      	subs	r3, #37	; 0x25
   1324c:	2b53      	cmp	r3, #83	; 0x53
   1324e:	f200 81ca 	bhi.w	135e6 <z_cbvprintf_impl+0x45a>
   13252:	e8df f013 	tbh	[pc, r3, lsl #1]
   13256:	0140      	.short	0x0140
   13258:	01c801c8 	.word	0x01c801c8
   1325c:	01c801c8 	.word	0x01c801c8
   13260:	01c801c8 	.word	0x01c801c8
   13264:	01c801c8 	.word	0x01c801c8
   13268:	01c801c8 	.word	0x01c801c8
   1326c:	01c801c8 	.word	0x01c801c8
   13270:	01c801c8 	.word	0x01c801c8
   13274:	01c801c8 	.word	0x01c801c8
   13278:	01c801c8 	.word	0x01c801c8
   1327c:	01c801c8 	.word	0x01c801c8
   13280:	01c801c8 	.word	0x01c801c8
   13284:	01c801c8 	.word	0x01c801c8
   13288:	01c801c8 	.word	0x01c801c8
   1328c:	01c801c8 	.word	0x01c801c8
   13290:	01c801c8 	.word	0x01c801c8
   13294:	01c801c8 	.word	0x01c801c8
   13298:	01c801c8 	.word	0x01c801c8
   1329c:	01c801c8 	.word	0x01c801c8
   132a0:	01c801c8 	.word	0x01c801c8
   132a4:	01c801c8 	.word	0x01c801c8
   132a8:	01c801c8 	.word	0x01c801c8
   132ac:	01c801c8 	.word	0x01c801c8
   132b0:	01c801c8 	.word	0x01c801c8
   132b4:	01c801c8 	.word	0x01c801c8
   132b8:	01c801c8 	.word	0x01c801c8
   132bc:	01c80181 	.word	0x01c80181
   132c0:	01c801c8 	.word	0x01c801c8
   132c4:	01c801c8 	.word	0x01c801c8
   132c8:	01c801c8 	.word	0x01c801c8
   132cc:	01c801c8 	.word	0x01c801c8
   132d0:	015e01c8 	.word	0x015e01c8
   132d4:	01c80167 	.word	0x01c80167
   132d8:	01c801c8 	.word	0x01c801c8
   132dc:	016701c8 	.word	0x016701c8
   132e0:	01c801c8 	.word	0x01c801c8
   132e4:	01c801c8 	.word	0x01c801c8
   132e8:	018101bd 	.word	0x018101bd
   132ec:	01c801a1 	.word	0x01c801a1
   132f0:	014d01c8 	.word	0x014d01c8
   132f4:	018101c8 	.word	0x018101c8
   132f8:	01c801c8 	.word	0x01c801c8
   132fc:	0181      	.short	0x0181
				conv->flag_dash = true;
   132fe:	f89d 3018 	ldrb.w	r3, [sp, #24]
   13302:	f043 0304 	orr.w	r3, r3, #4
   13306:	f88d 3018 	strb.w	r3, [sp, #24]
				width = -width;
   1330a:	427f      	negs	r7, r7
   1330c:	e76f      	b.n	131ee <z_cbvprintf_impl+0x62>
		} else if (conv->width_present) {
   1330e:	f99d 3018 	ldrsb.w	r3, [sp, #24]
   13312:	2b00      	cmp	r3, #0
   13314:	db02      	blt.n	1331c <z_cbvprintf_impl+0x190>
		int width = -1;
   13316:	f04f 37ff 	mov.w	r7, #4294967295
   1331a:	e768      	b.n	131ee <z_cbvprintf_impl+0x62>
			width = conv->width_value;
   1331c:	9f07      	ldr	r7, [sp, #28]
   1331e:	e766      	b.n	131ee <z_cbvprintf_impl+0x62>
				conv->prec_present = false;
   13320:	f89d 3019 	ldrb.w	r3, [sp, #25]
   13324:	f36f 0341 	bfc	r3, #1, #1
   13328:	f88d 3019 	strb.w	r3, [sp, #25]
		int precision = -1;
   1332c:	f04f 3aff 	mov.w	sl, #4294967295
   13330:	e76c      	b.n	1320c <z_cbvprintf_impl+0x80>
		} else if (conv->prec_present) {
   13332:	f013 0f02 	tst.w	r3, #2
   13336:	d002      	beq.n	1333e <z_cbvprintf_impl+0x1b2>
			precision = conv->prec_value;
   13338:	f8dd a020 	ldr.w	sl, [sp, #32]
   1333c:	e766      	b.n	1320c <z_cbvprintf_impl+0x80>
		int precision = -1;
   1333e:	f04f 3aff 	mov.w	sl, #4294967295
   13342:	e763      	b.n	1320c <z_cbvprintf_impl+0x80>
			switch (length_mod) {
   13344:	1ecb      	subs	r3, r1, #3
   13346:	2b04      	cmp	r3, #4
   13348:	d804      	bhi.n	13354 <z_cbvprintf_impl+0x1c8>
   1334a:	e8df f003 	tbb	[pc, r3]
   1334e:	1d0b      	.short	0x1d0b
   13350:	3529      	.short	0x3529
   13352:	35          	.byte	0x35
   13353:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
   13354:	9b03      	ldr	r3, [sp, #12]
   13356:	1d1a      	adds	r2, r3, #4
   13358:	9203      	str	r2, [sp, #12]
   1335a:	681b      	ldr	r3, [r3, #0]
   1335c:	17da      	asrs	r2, r3, #31
   1335e:	9304      	str	r3, [sp, #16]
   13360:	9205      	str	r2, [sp, #20]
				break;
   13362:	e006      	b.n	13372 <z_cbvprintf_impl+0x1e6>
					value->sint = va_arg(ap, long);
   13364:	9b03      	ldr	r3, [sp, #12]
   13366:	1d1a      	adds	r2, r3, #4
   13368:	9203      	str	r2, [sp, #12]
   1336a:	681b      	ldr	r3, [r3, #0]
   1336c:	17da      	asrs	r2, r3, #31
   1336e:	9304      	str	r3, [sp, #16]
   13370:	9205      	str	r2, [sp, #20]
			if (length_mod == LENGTH_HH) {
   13372:	2901      	cmp	r1, #1
   13374:	d028      	beq.n	133c8 <z_cbvprintf_impl+0x23c>
			} else if (length_mod == LENGTH_H) {
   13376:	2902      	cmp	r1, #2
   13378:	f47f af5f 	bne.w	1323a <z_cbvprintf_impl+0xae>
				value->sint = (short)value->sint;
   1337c:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
   13380:	17da      	asrs	r2, r3, #31
   13382:	9304      	str	r3, [sp, #16]
   13384:	9205      	str	r2, [sp, #20]
   13386:	e758      	b.n	1323a <z_cbvprintf_impl+0xae>
					(sint_value_type)va_arg(ap, long long);
   13388:	9b03      	ldr	r3, [sp, #12]
   1338a:	3307      	adds	r3, #7
   1338c:	f023 0307 	bic.w	r3, r3, #7
   13390:	f103 0208 	add.w	r2, r3, #8
   13394:	9203      	str	r2, [sp, #12]
   13396:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
   1339a:	e9cd 2304 	strd	r2, r3, [sp, #16]
				break;
   1339e:	e7e8      	b.n	13372 <z_cbvprintf_impl+0x1e6>
					(sint_value_type)va_arg(ap, intmax_t);
   133a0:	9b03      	ldr	r3, [sp, #12]
   133a2:	3307      	adds	r3, #7
   133a4:	f023 0307 	bic.w	r3, r3, #7
   133a8:	f103 0208 	add.w	r2, r3, #8
   133ac:	9203      	str	r2, [sp, #12]
   133ae:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
   133b2:	e9cd 2304 	strd	r2, r3, [sp, #16]
				break;
   133b6:	e7dc      	b.n	13372 <z_cbvprintf_impl+0x1e6>
					(sint_value_type)va_arg(ap, ptrdiff_t);
   133b8:	9b03      	ldr	r3, [sp, #12]
   133ba:	1d1a      	adds	r2, r3, #4
   133bc:	9203      	str	r2, [sp, #12]
   133be:	681b      	ldr	r3, [r3, #0]
   133c0:	17da      	asrs	r2, r3, #31
				value->sint =
   133c2:	9304      	str	r3, [sp, #16]
   133c4:	9205      	str	r2, [sp, #20]
				break;
   133c6:	e7d4      	b.n	13372 <z_cbvprintf_impl+0x1e6>
				value->sint = (signed char)value->sint;
   133c8:	f99d 3010 	ldrsb.w	r3, [sp, #16]
   133cc:	17da      	asrs	r2, r3, #31
   133ce:	9304      	str	r3, [sp, #16]
   133d0:	9205      	str	r2, [sp, #20]
   133d2:	e732      	b.n	1323a <z_cbvprintf_impl+0xae>
			switch (length_mod) {
   133d4:	1ecb      	subs	r3, r1, #3
   133d6:	2b04      	cmp	r3, #4
   133d8:	d804      	bhi.n	133e4 <z_cbvprintf_impl+0x258>
   133da:	e8df f003 	tbb	[pc, r3]
   133de:	1f0b      	.short	0x1f0b
   133e0:	4135      	.short	0x4135
   133e2:	41          	.byte	0x41
   133e3:	00          	.byte	0x00
				value->uint = va_arg(ap, unsigned int);
   133e4:	9b03      	ldr	r3, [sp, #12]
   133e6:	1d1a      	adds	r2, r3, #4
   133e8:	9203      	str	r2, [sp, #12]
   133ea:	681b      	ldr	r3, [r3, #0]
   133ec:	9304      	str	r3, [sp, #16]
   133ee:	2300      	movs	r3, #0
   133f0:	9305      	str	r3, [sp, #20]
				break;
   133f2:	e01e      	b.n	13432 <z_cbvprintf_impl+0x2a6>
				    && (conv->specifier == 'c')) {
   133f4:	f89d 301b 	ldrb.w	r3, [sp, #27]
				if ((!WCHAR_IS_SIGNED)
   133f8:	2b63      	cmp	r3, #99	; 0x63
   133fa:	d007      	beq.n	1340c <z_cbvprintf_impl+0x280>
					value->uint = va_arg(ap, unsigned long);
   133fc:	9b03      	ldr	r3, [sp, #12]
   133fe:	1d1a      	adds	r2, r3, #4
   13400:	9203      	str	r2, [sp, #12]
   13402:	681b      	ldr	r3, [r3, #0]
   13404:	9304      	str	r3, [sp, #16]
   13406:	2300      	movs	r3, #0
   13408:	9305      	str	r3, [sp, #20]
   1340a:	e012      	b.n	13432 <z_cbvprintf_impl+0x2a6>
					value->uint = (wchar_t)va_arg(ap,
   1340c:	9b03      	ldr	r3, [sp, #12]
   1340e:	1d1a      	adds	r2, r3, #4
   13410:	9203      	str	r2, [sp, #12]
   13412:	681b      	ldr	r3, [r3, #0]
   13414:	9304      	str	r3, [sp, #16]
   13416:	2300      	movs	r3, #0
   13418:	9305      	str	r3, [sp, #20]
   1341a:	e00a      	b.n	13432 <z_cbvprintf_impl+0x2a6>
					(uint_value_type)va_arg(ap,
   1341c:	9b03      	ldr	r3, [sp, #12]
   1341e:	3307      	adds	r3, #7
   13420:	f023 0307 	bic.w	r3, r3, #7
   13424:	f103 0208 	add.w	r2, r3, #8
   13428:	9203      	str	r2, [sp, #12]
   1342a:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
   1342e:	e9cd 2304 	strd	r2, r3, [sp, #16]
			if (length_mod == LENGTH_HH) {
   13432:	2901      	cmp	r1, #1
   13434:	d01c      	beq.n	13470 <z_cbvprintf_impl+0x2e4>
			} else if (length_mod == LENGTH_H) {
   13436:	2902      	cmp	r1, #2
   13438:	f47f aeff 	bne.w	1323a <z_cbvprintf_impl+0xae>
				value->uint = (unsigned short)value->uint;
   1343c:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   13440:	9304      	str	r3, [sp, #16]
   13442:	2300      	movs	r3, #0
   13444:	9305      	str	r3, [sp, #20]
   13446:	e6f8      	b.n	1323a <z_cbvprintf_impl+0xae>
					(uint_value_type)va_arg(ap,
   13448:	9b03      	ldr	r3, [sp, #12]
   1344a:	3307      	adds	r3, #7
   1344c:	f023 0307 	bic.w	r3, r3, #7
   13450:	f103 0208 	add.w	r2, r3, #8
   13454:	9203      	str	r2, [sp, #12]
   13456:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
   1345a:	e9cd 2304 	strd	r2, r3, [sp, #16]
				break;
   1345e:	e7e8      	b.n	13432 <z_cbvprintf_impl+0x2a6>
					(uint_value_type)va_arg(ap, size_t);
   13460:	9b03      	ldr	r3, [sp, #12]
   13462:	1d1a      	adds	r2, r3, #4
   13464:	9203      	str	r2, [sp, #12]
   13466:	681b      	ldr	r3, [r3, #0]
				value->uint =
   13468:	9304      	str	r3, [sp, #16]
   1346a:	2300      	movs	r3, #0
   1346c:	9305      	str	r3, [sp, #20]
				break;
   1346e:	e7e0      	b.n	13432 <z_cbvprintf_impl+0x2a6>
				value->uint = (unsigned char)value->uint;
   13470:	f89d 3010 	ldrb.w	r3, [sp, #16]
   13474:	9304      	str	r3, [sp, #16]
   13476:	2300      	movs	r3, #0
   13478:	9305      	str	r3, [sp, #20]
   1347a:	e6de      	b.n	1323a <z_cbvprintf_impl+0xae>
			if (length_mod == LENGTH_UPPER_L) {
   1347c:	2908      	cmp	r1, #8
   1347e:	d00b      	beq.n	13498 <z_cbvprintf_impl+0x30c>
				value->dbl = va_arg(ap, double);
   13480:	9b03      	ldr	r3, [sp, #12]
   13482:	3307      	adds	r3, #7
   13484:	f023 0307 	bic.w	r3, r3, #7
   13488:	f103 0208 	add.w	r2, r3, #8
   1348c:	9203      	str	r2, [sp, #12]
   1348e:	e9d3 2300 	ldrd	r2, r3, [r3]
   13492:	e9cd 2304 	strd	r2, r3, [sp, #16]
   13496:	e6d0      	b.n	1323a <z_cbvprintf_impl+0xae>
				value->ldbl = va_arg(ap, long double);
   13498:	9b03      	ldr	r3, [sp, #12]
   1349a:	3307      	adds	r3, #7
   1349c:	f023 0307 	bic.w	r3, r3, #7
   134a0:	f103 0208 	add.w	r2, r3, #8
   134a4:	9203      	str	r2, [sp, #12]
   134a6:	e9d3 2300 	ldrd	r2, r3, [r3]
   134aa:	e9cd 2304 	strd	r2, r3, [sp, #16]
   134ae:	e6c4      	b.n	1323a <z_cbvprintf_impl+0xae>
			value->ptr = va_arg(ap, void *);
   134b0:	9b03      	ldr	r3, [sp, #12]
   134b2:	1d1a      	adds	r2, r3, #4
   134b4:	9203      	str	r2, [sp, #12]
   134b6:	681b      	ldr	r3, [r3, #0]
   134b8:	9304      	str	r3, [sp, #16]
   134ba:	e6be      	b.n	1323a <z_cbvprintf_impl+0xae>
			OUTS(sp, fp);
   134bc:	9f02      	ldr	r7, [sp, #8]
   134be:	463b      	mov	r3, r7
   134c0:	464a      	mov	r2, r9
   134c2:	4629      	mov	r1, r5
   134c4:	4630      	mov	r0, r6
   134c6:	f006 fbd7 	bl	19c78 <outs>
   134ca:	2800      	cmp	r0, #0
   134cc:	f2c0 8125 	blt.w	1371a <z_cbvprintf_impl+0x58e>
   134d0:	4404      	add	r4, r0
		fp = extract_conversion(conv, sp);
   134d2:	46b9      	mov	r9, r7
			continue;
   134d4:	e662      	b.n	1319c <z_cbvprintf_impl+0x10>
		case '%':
			OUTC('%');
   134d6:	4629      	mov	r1, r5
   134d8:	2025      	movs	r0, #37	; 0x25
   134da:	47b0      	blx	r6
   134dc:	2800      	cmp	r0, #0
   134de:	f2c0 811c 	blt.w	1371a <z_cbvprintf_impl+0x58e>
   134e2:	3401      	adds	r4, #1
		char sign = 0;
   134e4:	46d8      	mov	r8, fp
		const char *bpe = buf + sizeof(buf);
   134e6:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
		const char *bps = NULL;
   134ea:	f04f 0900 	mov.w	r9, #0
			break;
   134ee:	e07f      	b.n	135f0 <z_cbvprintf_impl+0x464>
		case 's': {
			bps = (const char *)value->ptr;
   134f0:	f8dd 9010 	ldr.w	r9, [sp, #16]

			size_t len;

			if (precision >= 0) {
   134f4:	f1ba 0f00 	cmp.w	sl, #0
   134f8:	db07      	blt.n	1350a <z_cbvprintf_impl+0x37e>
				len = strnlen(bps, precision);
   134fa:	4651      	mov	r1, sl
   134fc:	4648      	mov	r0, r9
   134fe:	f007 fe94 	bl	1b22a <strnlen>
			} else {
				len = strlen(bps);
			}

			bpe = bps + len;
   13502:	eb09 0a00 	add.w	sl, r9, r0
		char sign = 0;
   13506:	46d8      	mov	r8, fp
			precision = -1;

			break;
   13508:	e072      	b.n	135f0 <z_cbvprintf_impl+0x464>
				len = strlen(bps);
   1350a:	4648      	mov	r0, r9
   1350c:	f7fd fe32 	bl	11174 <strlen>
   13510:	e7f7      	b.n	13502 <z_cbvprintf_impl+0x376>
		}
		case 'c':
			bps = buf;
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
   13512:	9b04      	ldr	r3, [sp, #16]
   13514:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
		char sign = 0;
   13518:	46d8      	mov	r8, fp
			bpe = buf + 1;
   1351a:	f10d 0a29 	add.w	sl, sp, #41	; 0x29
			bps = buf;
   1351e:	f10d 0928 	add.w	r9, sp, #40	; 0x28
			break;
   13522:	e065      	b.n	135f0 <z_cbvprintf_impl+0x464>
		case 'd':
		case 'i':
			if (conv->flag_plus) {
   13524:	f018 0f08 	tst.w	r8, #8
   13528:	d105      	bne.n	13536 <z_cbvprintf_impl+0x3aa>
				sign = '+';
			} else if (conv->flag_space) {
   1352a:	f018 0810 	ands.w	r8, r8, #16
   1352e:	d004      	beq.n	1353a <z_cbvprintf_impl+0x3ae>
				sign = ' ';
   13530:	f04f 0820 	mov.w	r8, #32
   13534:	e001      	b.n	1353a <z_cbvprintf_impl+0x3ae>
				sign = '+';
   13536:	f04f 082b 	mov.w	r8, #43	; 0x2b

			/* sint/uint overlay in the union, and so
			 * can't appear in read and write operations
			 * in the same statement.
			 */
			sint = value->sint;
   1353a:	9a04      	ldr	r2, [sp, #16]
   1353c:	9b05      	ldr	r3, [sp, #20]
			if (sint < 0) {
   1353e:	2b00      	cmp	r3, #0
   13540:	db02      	blt.n	13548 <z_cbvprintf_impl+0x3bc>
				sign = '-';
				value->uint = (uint_value_type)-sint;
			} else {
				value->uint = (uint_value_type)sint;
   13542:	9204      	str	r2, [sp, #16]
   13544:	9305      	str	r3, [sp, #20]
   13546:	e008      	b.n	1355a <z_cbvprintf_impl+0x3ce>
				value->uint = (uint_value_type)-sint;
   13548:	4252      	negs	r2, r2
   1354a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   1354e:	9204      	str	r2, [sp, #16]
   13550:	9305      	str	r3, [sp, #20]
				sign = '-';
   13552:	f04f 082d 	mov.w	r8, #45	; 0x2d
   13556:	e000      	b.n	1355a <z_cbvprintf_impl+0x3ce>
		switch (conv->specifier) {
   13558:	46d8      	mov	r8, fp
			__fallthrough;
		case 'o':
		case 'u':
		case 'x':
		case 'X':
			bps = encode_uint(value->uint, conv, buf, bpe);
   1355a:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
   1355e:	9300      	str	r3, [sp, #0]
   13560:	ab0a      	add	r3, sp, #40	; 0x28
   13562:	aa06      	add	r2, sp, #24
   13564:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   13568:	f7ff fdba 	bl	130e0 <encode_uint>
   1356c:	4681      	mov	r9, r0
			/* Update pad0 values based on precision and converted
			 * length.  Note that a non-empty sign is not in the
			 * converted sequence, but it does not affect the
			 * padding size.
			 */
			if (precision >= 0) {
   1356e:	f1ba 0f00 	cmp.w	sl, #0
   13572:	db6c      	blt.n	1364e <z_cbvprintf_impl+0x4c2>
				size_t len = bpe - bps;
   13574:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
   13578:	eba3 0309 	sub.w	r3, r3, r9

				/* Zero-padding flag is ignored for integer
				 * conversions with precision.
				 */
				conv->flag_zero = false;
   1357c:	f89d 2018 	ldrb.w	r2, [sp, #24]
   13580:	f36f 1286 	bfc	r2, #6, #1
   13584:	f88d 2018 	strb.w	r2, [sp, #24]

				/* Set pad0_value to satisfy precision */
				if (len < (size_t)precision) {
   13588:	459a      	cmp	sl, r3
   1358a:	d963      	bls.n	13654 <z_cbvprintf_impl+0x4c8>
					conv->pad0_value = precision - (int)len;
   1358c:	ebaa 0303 	sub.w	r3, sl, r3
   13590:	9307      	str	r3, [sp, #28]
		const char *bpe = buf + sizeof(buf);
   13592:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
   13596:	e02b      	b.n	135f0 <z_cbvprintf_impl+0x464>
		case 'p':
			/* Implementation-defined: null is "(nil)", non-null
			 * has 0x prefix followed by significant address hex
			 * digits, no leading zeros.
			 */
			if (value->ptr != NULL) {
   13598:	9804      	ldr	r0, [sp, #16]
   1359a:	b928      	cbnz	r0, 135a8 <z_cbvprintf_impl+0x41c>
		char sign = 0;
   1359c:	46d8      	mov	r8, fp

				goto prec_int_pad0;
			}

			bps = "(nil)";
			bpe = bps + 5;
   1359e:	f8df a180 	ldr.w	sl, [pc, #384]	; 13720 <z_cbvprintf_impl+0x594>
			bps = "(nil)";
   135a2:	f1aa 0905 	sub.w	r9, sl, #5
   135a6:	e023      	b.n	135f0 <z_cbvprintf_impl+0x464>
				bps = encode_uint((uintptr_t)value->ptr, conv,
   135a8:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
   135ac:	9300      	str	r3, [sp, #0]
   135ae:	ab0a      	add	r3, sp, #40	; 0x28
   135b0:	aa06      	add	r2, sp, #24
   135b2:	2100      	movs	r1, #0
   135b4:	f7ff fd94 	bl	130e0 <encode_uint>
   135b8:	4681      	mov	r9, r0
				conv->altform_0c = true;
   135ba:	f89d 301a 	ldrb.w	r3, [sp, #26]
   135be:	f043 0310 	orr.w	r3, r3, #16
   135c2:	f88d 301a 	strb.w	r3, [sp, #26]
				conv->specifier = 'x';
   135c6:	2378      	movs	r3, #120	; 0x78
   135c8:	f88d 301b 	strb.w	r3, [sp, #27]
		char sign = 0;
   135cc:	46d8      	mov	r8, fp
				goto prec_int_pad0;
   135ce:	e7ce      	b.n	1356e <z_cbvprintf_impl+0x3e2>

			break;
		case 'n':
			if (IS_ENABLED(CONFIG_CBPRINTF_N_SPECIFIER)) {
				store_count(conv, value->ptr, count);
   135d0:	4622      	mov	r2, r4
   135d2:	9904      	ldr	r1, [sp, #16]
   135d4:	a806      	add	r0, sp, #24
   135d6:	f006 fb30 	bl	19c3a <store_count>
		char sign = 0;
   135da:	46d8      	mov	r8, fp
		const char *bpe = buf + sizeof(buf);
   135dc:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
		const char *bps = NULL;
   135e0:	f04f 0900 	mov.w	r9, #0
			}

			break;
   135e4:	e004      	b.n	135f0 <z_cbvprintf_impl+0x464>
		switch (conv->specifier) {
   135e6:	46d8      	mov	r8, fp
   135e8:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
   135ec:	f04f 0900 	mov.w	r9, #0
		}

		/* If we don't have a converted value to emit, move
		 * on.
		 */
		if (bps == NULL) {
   135f0:	f1b9 0f00 	cmp.w	r9, #0
   135f4:	f000 808d 	beq.w	13712 <z_cbvprintf_impl+0x586>
		 *   * any exponent content from the converted value
		 * * for non-FP:
		 *   * any pad0_prefix
		 *   * the converted value
		 */
		size_t nj_len = (bpe - bps);
   135f8:	ebaa 0209 	sub.w	r2, sl, r9
		int pad_len = 0;

		if (sign != 0) {
   135fc:	f1b8 0f00 	cmp.w	r8, #0
   13600:	d000      	beq.n	13604 <z_cbvprintf_impl+0x478>
			nj_len += 1U;
   13602:	3201      	adds	r2, #1
		}

		if (conv->altform_0c) {
   13604:	f89d 101a 	ldrb.w	r1, [sp, #26]
   13608:	f011 0f10 	tst.w	r1, #16
   1360c:	d025      	beq.n	1365a <z_cbvprintf_impl+0x4ce>
			nj_len += 2U;
   1360e:	3202      	adds	r2, #2
		} else if (conv->altform_0) {
			nj_len += 1U;
		}

		nj_len += conv->pad0_value;
   13610:	9b07      	ldr	r3, [sp, #28]
   13612:	4413      	add	r3, r2
		if (conv->pad_fp) {
   13614:	f011 0f40 	tst.w	r1, #64	; 0x40
   13618:	d001      	beq.n	1361e <z_cbvprintf_impl+0x492>
			nj_len += conv->pad0_pre_exp;
   1361a:	9a08      	ldr	r2, [sp, #32]
   1361c:	4413      	add	r3, r2
		 * result in no padding.
		 *
		 * If a non-negative padding width is present and we're doing
		 * right-justification, emit the padding now.
		 */
		if (width > 0) {
   1361e:	2f00      	cmp	r7, #0
   13620:	dd31      	ble.n	13686 <z_cbvprintf_impl+0x4fa>
			width -= (int)nj_len;
   13622:	1aff      	subs	r7, r7, r3

			if (!conv->flag_dash) {
   13624:	f89d 3018 	ldrb.w	r3, [sp, #24]
   13628:	f013 0f04 	tst.w	r3, #4
   1362c:	d12b      	bne.n	13686 <z_cbvprintf_impl+0x4fa>
				char pad = ' ';

				/* If we're zero-padding we have to emit the
				 * sign first.
				 */
				if (conv->flag_zero) {
   1362e:	f013 0f40 	tst.w	r3, #64	; 0x40
   13632:	d017      	beq.n	13664 <z_cbvprintf_impl+0x4d8>
					if (sign != 0) {
   13634:	f1b8 0f00 	cmp.w	r8, #0
   13638:	d017      	beq.n	1366a <z_cbvprintf_impl+0x4de>
						OUTC(sign);
   1363a:	4629      	mov	r1, r5
   1363c:	4640      	mov	r0, r8
   1363e:	47b0      	blx	r6
   13640:	2800      	cmp	r0, #0
   13642:	db6a      	blt.n	1371a <z_cbvprintf_impl+0x58e>
   13644:	3401      	adds	r4, #1
						sign = 0;
   13646:	46d8      	mov	r8, fp
					}
					pad = '0';
   13648:	f04f 0b30 	mov.w	fp, #48	; 0x30
   1364c:	e00f      	b.n	1366e <z_cbvprintf_impl+0x4e2>
		const char *bpe = buf + sizeof(buf);
   1364e:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
   13652:	e7cd      	b.n	135f0 <z_cbvprintf_impl+0x464>
   13654:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
   13658:	e7ca      	b.n	135f0 <z_cbvprintf_impl+0x464>
		} else if (conv->altform_0) {
   1365a:	f011 0f08 	tst.w	r1, #8
   1365e:	d0d7      	beq.n	13610 <z_cbvprintf_impl+0x484>
			nj_len += 1U;
   13660:	3201      	adds	r2, #1
   13662:	e7d5      	b.n	13610 <z_cbvprintf_impl+0x484>
				char pad = ' ';
   13664:	f04f 0b20 	mov.w	fp, #32
   13668:	e001      	b.n	1366e <z_cbvprintf_impl+0x4e2>
					pad = '0';
   1366a:	f04f 0b30 	mov.w	fp, #48	; 0x30
   1366e:	463b      	mov	r3, r7
				}

				while (width-- > 0) {
   13670:	1e5f      	subs	r7, r3, #1
   13672:	2b00      	cmp	r3, #0
   13674:	dd07      	ble.n	13686 <z_cbvprintf_impl+0x4fa>
					OUTC(pad);
   13676:	4629      	mov	r1, r5
   13678:	4658      	mov	r0, fp
   1367a:	47b0      	blx	r6
   1367c:	2800      	cmp	r0, #0
   1367e:	db4c      	blt.n	1371a <z_cbvprintf_impl+0x58e>
   13680:	3401      	adds	r4, #1
				while (width-- > 0) {
   13682:	463b      	mov	r3, r7
   13684:	e7f4      	b.n	13670 <z_cbvprintf_impl+0x4e4>
		}

		/* If we have a sign that hasn't been emitted, now's the
		 * time....
		 */
		if (sign != 0) {
   13686:	f1b8 0f00 	cmp.w	r8, #0
   1368a:	d005      	beq.n	13698 <z_cbvprintf_impl+0x50c>
			OUTC(sign);
   1368c:	4629      	mov	r1, r5
   1368e:	4640      	mov	r0, r8
   13690:	47b0      	blx	r6
   13692:	2800      	cmp	r0, #0
   13694:	db41      	blt.n	1371a <z_cbvprintf_impl+0x58e>
   13696:	3401      	adds	r4, #1
				OUTC('0');
			}

			OUTS(cp, bpe);
		} else {
			if (conv->altform_0c | conv->altform_0) {
   13698:	f89d 301a 	ldrb.w	r3, [sp, #26]
   1369c:	f3c3 1200 	ubfx	r2, r3, #4, #1
   136a0:	f3c3 03c0 	ubfx	r3, r3, #3, #1
   136a4:	431a      	orrs	r2, r3
   136a6:	d005      	beq.n	136b4 <z_cbvprintf_impl+0x528>
				OUTC('0');
   136a8:	4629      	mov	r1, r5
   136aa:	2030      	movs	r0, #48	; 0x30
   136ac:	47b0      	blx	r6
   136ae:	2800      	cmp	r0, #0
   136b0:	db33      	blt.n	1371a <z_cbvprintf_impl+0x58e>
   136b2:	3401      	adds	r4, #1
			}

			if (conv->altform_0c) {
   136b4:	f89d 301a 	ldrb.w	r3, [sp, #26]
   136b8:	f013 0f10 	tst.w	r3, #16
   136bc:	d006      	beq.n	136cc <z_cbvprintf_impl+0x540>
				OUTC(conv->specifier);
   136be:	4629      	mov	r1, r5
   136c0:	f89d 001b 	ldrb.w	r0, [sp, #27]
   136c4:	47b0      	blx	r6
   136c6:	2800      	cmp	r0, #0
   136c8:	db27      	blt.n	1371a <z_cbvprintf_impl+0x58e>
   136ca:	3401      	adds	r4, #1
			}

			pad_len = conv->pad0_value;
   136cc:	9b07      	ldr	r3, [sp, #28]
			while (pad_len-- > 0) {
   136ce:	f103 38ff 	add.w	r8, r3, #4294967295
   136d2:	2b00      	cmp	r3, #0
   136d4:	dd07      	ble.n	136e6 <z_cbvprintf_impl+0x55a>
				OUTC('0');
   136d6:	4629      	mov	r1, r5
   136d8:	2030      	movs	r0, #48	; 0x30
   136da:	47b0      	blx	r6
   136dc:	2800      	cmp	r0, #0
   136de:	db1c      	blt.n	1371a <z_cbvprintf_impl+0x58e>
   136e0:	3401      	adds	r4, #1
			while (pad_len-- > 0) {
   136e2:	4643      	mov	r3, r8
   136e4:	e7f3      	b.n	136ce <z_cbvprintf_impl+0x542>
			}

			OUTS(bps, bpe);
   136e6:	4653      	mov	r3, sl
   136e8:	464a      	mov	r2, r9
   136ea:	4629      	mov	r1, r5
   136ec:	4630      	mov	r0, r6
   136ee:	f006 fac3 	bl	19c78 <outs>
   136f2:	2800      	cmp	r0, #0
   136f4:	db11      	blt.n	1371a <z_cbvprintf_impl+0x58e>
   136f6:	4404      	add	r4, r0
		}

		/* Finish left justification */
		while (width > 0) {
   136f8:	2f00      	cmp	r7, #0
   136fa:	dd07      	ble.n	1370c <z_cbvprintf_impl+0x580>
			OUTC(' ');
   136fc:	4629      	mov	r1, r5
   136fe:	2020      	movs	r0, #32
   13700:	47b0      	blx	r6
   13702:	2800      	cmp	r0, #0
   13704:	db09      	blt.n	1371a <z_cbvprintf_impl+0x58e>
   13706:	3401      	adds	r4, #1
			--width;
   13708:	3f01      	subs	r7, #1
   1370a:	e7f5      	b.n	136f8 <z_cbvprintf_impl+0x56c>
		fp = extract_conversion(conv, sp);
   1370c:	f8dd 9008 	ldr.w	r9, [sp, #8]
   13710:	e544      	b.n	1319c <z_cbvprintf_impl+0x10>
   13712:	f8dd 9008 	ldr.w	r9, [sp, #8]
   13716:	e541      	b.n	1319c <z_cbvprintf_impl+0x10>
		}
	}

	return count;
   13718:	4620      	mov	r0, r4
#undef OUTS
#undef OUTC
}
   1371a:	b011      	add	sp, #68	; 0x44
   1371c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13720:	0001c185 	.word	0x0001c185

00013724 <nrfx_coredep_delay_us>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
   13724:	b168      	cbz	r0, 13742 <nrfx_coredep_delay_us+0x1e>
{
   13726:	b508      	push	{r3, lr}
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
   13728:	4a06      	ldr	r2, [pc, #24]	; (13744 <nrfx_coredep_delay_us+0x20>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
   1372a:	4b07      	ldr	r3, [pc, #28]	; (13748 <nrfx_coredep_delay_us+0x24>)
   1372c:	681b      	ldr	r3, [r3, #0]
   1372e:	4907      	ldr	r1, [pc, #28]	; (1374c <nrfx_coredep_delay_us+0x28>)
   13730:	fba1 1303 	umull	r1, r3, r1, r3
   13734:	0c9b      	lsrs	r3, r3, #18
    delay_cycles(cycles);
   13736:	fb00 f003 	mul.w	r0, r0, r3
   1373a:	f042 0301 	orr.w	r3, r2, #1
   1373e:	4798      	blx	r3
}
   13740:	bd08      	pop	{r3, pc}
   13742:	4770      	bx	lr
   13744:	0001bac0 	.word	0x0001bac0
   13748:	200080b4 	.word	0x200080b4
   1374c:	431bde83 	.word	0x431bde83

00013750 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
   13750:	f007 b905 	b.w	1a95e <SystemInit>

00013754 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
   13754:	b570      	push	{r4, r5, r6, lr}
   13756:	4605      	mov	r5, r0
   13758:	f04f 0320 	mov.w	r3, #32
   1375c:	f3ef 8611 	mrs	r6, BASEPRI
   13760:	f383 8812 	msr	BASEPRI_MAX, r3
   13764:	f3bf 8f6f 	isb	sy
   13768:	4b0e      	ldr	r3, [pc, #56]	; (137a4 <pm_state_notify+0x50>)
   1376a:	681c      	ldr	r4, [r3, #0]
   1376c:	e00d      	b.n	1378a <pm_state_notify+0x36>
	pm_notifier_key = k_spin_lock(&pm_notifier_lock);
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
		if (entering_state) {
			callback = notifier->state_entry;
		} else {
			callback = notifier->state_exit;
   1376e:	68a2      	ldr	r2, [r4, #8]
		}

		if (callback) {
   13770:	b13a      	cbz	r2, 13782 <pm_state_notify+0x2e>
			callback(z_cpus_pm_state[_current_cpu->id].state);
   13772:	4b0d      	ldr	r3, [pc, #52]	; (137a8 <pm_state_notify+0x54>)
   13774:	7d1b      	ldrb	r3, [r3, #20]
   13776:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1377a:	490c      	ldr	r1, [pc, #48]	; (137ac <pm_state_notify+0x58>)
   1377c:	f811 0023 	ldrb.w	r0, [r1, r3, lsl #2]
   13780:	4790      	blx	r2
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   13782:	4623      	mov	r3, r4
	return node->next;
   13784:	6824      	ldr	r4, [r4, #0]
   13786:	b104      	cbz	r4, 1378a <pm_state_notify+0x36>
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT(slist, snode)
   13788:	b123      	cbz	r3, 13794 <pm_state_notify+0x40>
   1378a:	b12c      	cbz	r4, 13798 <pm_state_notify+0x44>
		if (entering_state) {
   1378c:	2d00      	cmp	r5, #0
   1378e:	d0ee      	beq.n	1376e <pm_state_notify+0x1a>
			callback = notifier->state_entry;
   13790:	6862      	ldr	r2, [r4, #4]
   13792:	e7ed      	b.n	13770 <pm_state_notify+0x1c>
   13794:	461c      	mov	r4, r3
   13796:	e7f8      	b.n	1378a <pm_state_notify+0x36>
	__asm__ volatile(
   13798:	f386 8811 	msr	BASEPRI, r6
   1379c:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
   137a0:	bd70      	pop	{r4, r5, r6, pc}
   137a2:	bf00      	nop
   137a4:	20008510 	.word	0x20008510
   137a8:	2000865c 	.word	0x2000865c
   137ac:	20008504 	.word	0x20008504

000137b0 <pm_exit_pos_ops>:
{
   137b0:	b508      	push	{r3, lr}
	if (pm_state_exit_post_ops != NULL) {
   137b2:	4b06      	ldr	r3, [pc, #24]	; (137cc <pm_exit_pos_ops+0x1c>)
   137b4:	b123      	cbz	r3, 137c0 <pm_exit_pos_ops+0x10>
		pm_state_exit_post_ops(info->state, info->substate_id);
   137b6:	7841      	ldrb	r1, [r0, #1]
   137b8:	7800      	ldrb	r0, [r0, #0]
   137ba:	f006 faa5 	bl	19d08 <pm_state_exit_post_ops>
}
   137be:	bd08      	pop	{r3, pc}
   137c0:	2300      	movs	r3, #0
   137c2:	f383 8811 	msr	BASEPRI, r3
   137c6:	f3bf 8f6f 	isb	sy
   137ca:	e7f8      	b.n	137be <pm_exit_pos_ops+0xe>
   137cc:	00019d09 	.word	0x00019d09

000137d0 <pm_system_resume>:

void pm_system_resume(void)
{
   137d0:	b570      	push	{r4, r5, r6, lr}
	uint8_t id = CURRENT_CPU;
   137d2:	4b0e      	ldr	r3, [pc, #56]	; (1380c <pm_system_resume+0x3c>)
   137d4:	7d1c      	ldrb	r4, [r3, #20]
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
   137d6:	4621      	mov	r1, r4
   137d8:	480d      	ldr	r0, [pc, #52]	; (13810 <pm_system_resume+0x40>)
   137da:	f006 fa9b 	bl	19d14 <atomic_test_and_clear_bit>
   137de:	b900      	cbnz	r0, 137e2 <pm_system_resume+0x12>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
			0, 0};
	}
}
   137e0:	bd70      	pop	{r4, r5, r6, pc}
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
   137e2:	0065      	lsls	r5, r4, #1
   137e4:	eb04 0044 	add.w	r0, r4, r4, lsl #1
   137e8:	4e0a      	ldr	r6, [pc, #40]	; (13814 <pm_system_resume+0x44>)
   137ea:	eb06 0080 	add.w	r0, r6, r0, lsl #2
   137ee:	f7ff ffdf 	bl	137b0 <pm_exit_pos_ops>
		pm_state_notify(false);
   137f2:	2000      	movs	r0, #0
   137f4:	f7ff ffae 	bl	13754 <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
   137f8:	192b      	adds	r3, r5, r4
   137fa:	0099      	lsls	r1, r3, #2
   137fc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
   13800:	2200      	movs	r2, #0
   13802:	5072      	str	r2, [r6, r1]
   13804:	605a      	str	r2, [r3, #4]
   13806:	609a      	str	r2, [r3, #8]
}
   13808:	e7ea      	b.n	137e0 <pm_system_resume+0x10>
   1380a:	bf00      	nop
   1380c:	2000865c 	.word	0x2000865c
   13810:	20008518 	.word	0x20008518
   13814:	20008504 	.word	0x20008504

00013818 <pm_system_suspend>:

	return true;
}

bool pm_system_suspend(int32_t ticks)
{
   13818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1381a:	4605      	mov	r5, r0
	uint8_t id = CURRENT_CPU;
   1381c:	4b38      	ldr	r3, [pc, #224]	; (13900 <pm_system_suspend+0xe8>)
   1381e:	7d1c      	ldrb	r4, [r3, #20]
	__asm__ volatile(
   13820:	f04f 0320 	mov.w	r3, #32
   13824:	f3ef 8611 	mrs	r6, BASEPRI
   13828:	f383 8812 	msr	BASEPRI_MAX, r3
   1382c:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key;

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	key = k_spin_lock(&pm_forced_state_lock);
	if (z_cpus_pm_forced_state[id].state != PM_STATE_ACTIVE) {
   13830:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   13834:	4b33      	ldr	r3, [pc, #204]	; (13904 <pm_system_suspend+0xec>)
   13836:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
   1383a:	2b00      	cmp	r3, #0
   1383c:	d039      	beq.n	138b2 <pm_system_suspend+0x9a>
		z_cpus_pm_state[id] = z_cpus_pm_forced_state[id];
   1383e:	4b32      	ldr	r3, [pc, #200]	; (13908 <pm_system_suspend+0xf0>)
   13840:	eb03 0c82 	add.w	ip, r3, r2, lsl #2
   13844:	4f2f      	ldr	r7, [pc, #188]	; (13904 <pm_system_suspend+0xec>)
   13846:	ea4f 0e82 	mov.w	lr, r2, lsl #2
   1384a:	eb07 0382 	add.w	r3, r7, r2, lsl #2
   1384e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   13852:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
		z_cpus_pm_forced_state[id].state = PM_STATE_ACTIVE;
   13856:	2300      	movs	r3, #0
   13858:	f807 300e 	strb.w	r3, [r7, lr]
	__asm__ volatile(
   1385c:	f386 8811 	msr	BASEPRI, r6
   13860:	f3bf 8f6f 	isb	sy
			z_cpus_pm_state[id] = *info;
		}
	}
	k_spin_unlock(&pm_forced_state_lock, key);

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
   13864:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   13868:	4a27      	ldr	r2, [pc, #156]	; (13908 <pm_system_suspend+0xf0>)
   1386a:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
   1386e:	2b00      	cmp	r3, #0
   13870:	d044      	beq.n	138fc <pm_system_suspend+0xe4>
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		return false;
	}

	if (ticks != K_TICKS_FOREVER) {
   13872:	f1b5 3fff 	cmp.w	r5, #4294967295
   13876:	d12b      	bne.n	138d0 <pm_system_suspend+0xb8>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
   13878:	f003 fbf6 	bl	17068 <k_sched_lock>
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
   1387c:	2001      	movs	r0, #1
   1387e:	f7ff ff69 	bl	13754 <pm_state_notify>
	atomic_set_bit(z_post_ops_required, id);
   13882:	4621      	mov	r1, r4
   13884:	4821      	ldr	r0, [pc, #132]	; (1390c <pm_system_suspend+0xf4>)
   13886:	f006 fa5d 	bl	19d44 <atomic_set_bit>
	if (pm_state_set != NULL) {
   1388a:	4b21      	ldr	r3, [pc, #132]	; (13910 <pm_system_suspend+0xf8>)
   1388c:	b15b      	cbz	r3, 138a6 <pm_system_suspend+0x8e>
		pm_state_set(info->state, info->substate_id);
   1388e:	4a1e      	ldr	r2, [pc, #120]	; (13908 <pm_system_suspend+0xf0>)
   13890:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   13894:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   13898:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   1389c:	7859      	ldrb	r1, [r3, #1]
   1389e:	f812 0024 	ldrb.w	r0, [r2, r4, lsl #2]
   138a2:	f006 fa29 	bl	19cf8 <pm_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_cpus_pm_state[id].state);
	pm_system_resume();
   138a6:	f7ff ff93 	bl	137d0 <pm_system_resume>
	k_sched_unlock();
   138aa:	f003 fddf 	bl	1746c <k_sched_unlock>
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

	return true;
   138ae:	2001      	movs	r0, #1
}
   138b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		info = pm_policy_next_state(id, ticks);
   138b2:	4601      	mov	r1, r0
   138b4:	4620      	mov	r0, r4
   138b6:	f000 f831 	bl	1391c <pm_policy_next_state>
		if (info != NULL) {
   138ba:	2800      	cmp	r0, #0
   138bc:	d0ce      	beq.n	1385c <pm_system_suspend+0x44>
			z_cpus_pm_state[id] = *info;
   138be:	eb04 0144 	add.w	r1, r4, r4, lsl #1
   138c2:	4b11      	ldr	r3, [pc, #68]	; (13908 <pm_system_suspend+0xf0>)
   138c4:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   138c8:	c807      	ldmia	r0, {r0, r1, r2}
   138ca:	e883 0007 	stmia.w	r3, {r0, r1, r2}
   138ce:	e7c5      	b.n	1385c <pm_system_suspend+0x44>
		     k_us_to_ticks_ceil32(
   138d0:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   138d4:	4b0c      	ldr	r3, [pc, #48]	; (13908 <pm_system_suspend+0xf0>)
   138d6:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   138da:	6898      	ldr	r0, [r3, #8]
		} else {
			return t * ((uint64_t)to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
   138dc:	0c41      	lsrs	r1, r0, #17
   138de:	03c0      	lsls	r0, r0, #15
   138e0:	4b0c      	ldr	r3, [pc, #48]	; (13914 <pm_system_suspend+0xfc>)
   138e2:	18c0      	adds	r0, r0, r3
   138e4:	4a0c      	ldr	r2, [pc, #48]	; (13918 <pm_system_suspend+0x100>)
   138e6:	f04f 0300 	mov.w	r3, #0
   138ea:	f141 0100 	adc.w	r1, r1, #0
   138ee:	f7fd fa9b 	bl	10e28 <__aeabi_uldivmod>
		z_set_timeout_expiry(ticks -
   138f2:	2101      	movs	r1, #1
   138f4:	1a28      	subs	r0, r5, r0
   138f6:	f007 fb2a 	bl	1af4e <z_set_timeout_expiry>
   138fa:	e7bd      	b.n	13878 <pm_system_suspend+0x60>
		return false;
   138fc:	2000      	movs	r0, #0
   138fe:	e7d7      	b.n	138b0 <pm_system_suspend+0x98>
   13900:	2000865c 	.word	0x2000865c
   13904:	200084f8 	.word	0x200084f8
   13908:	20008504 	.word	0x20008504
   1390c:	20008518 	.word	0x20008518
   13910:	00019cf9 	.word	0x00019cf9
   13914:	000f423f 	.word	0x000f423f
   13918:	000f4240 	.word	0x000f4240

0001391c <pm_policy_next_state>:
	}
}

#ifdef CONFIG_PM_POLICY_DEFAULT
const struct pm_state_info *pm_policy_next_state(uint8_t cpu, int32_t ticks)
{
   1391c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13920:	b082      	sub	sp, #8
   13922:	460e      	mov	r6, r1
	uint8_t num_cpu_states;
	const struct pm_state_info *cpu_states;

	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
   13924:	a901      	add	r1, sp, #4
   13926:	f000 f845 	bl	139b4 <pm_state_cpu_get_all>

	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
   1392a:	1e44      	subs	r4, r0, #1
   1392c:	b224      	sxth	r4, r4
   1392e:	e007      	b.n	13940 <pm_policy_next_state+0x24>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
		    (exit_latency >= max_latency_ticks)) {
			continue;
		}

		if ((ticks == K_TICKS_FOREVER) ||
   13930:	f1b6 3fff 	cmp.w	r6, #4294967295
   13934:	d033      	beq.n	1399e <pm_policy_next_state+0x82>
		    (ticks >= (min_residency + exit_latency))) {
   13936:	4480      	add	r8, r0
		if ((ticks == K_TICKS_FOREVER) ||
   13938:	45b0      	cmp	r8, r6
   1393a:	d930      	bls.n	1399e <pm_policy_next_state+0x82>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
   1393c:	3c01      	subs	r4, #1
   1393e:	b224      	sxth	r4, r4
   13940:	2c00      	cmp	r4, #0
   13942:	db2b      	blt.n	1399c <pm_policy_next_state+0x80>
		const struct pm_state_info *state = &cpu_states[i];
   13944:	9b01      	ldr	r3, [sp, #4]
   13946:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   1394a:	eb03 0582 	add.w	r5, r3, r2, lsl #2
		if (pm_policy_state_lock_is_active(state->state, state->substate_id)) {
   1394e:	7869      	ldrb	r1, [r5, #1]
   13950:	f813 0022 	ldrb.w	r0, [r3, r2, lsl #2]
   13954:	f006 fa05 	bl	19d62 <pm_policy_state_lock_is_active>
   13958:	2800      	cmp	r0, #0
   1395a:	d1ef      	bne.n	1393c <pm_policy_next_state+0x20>
		min_residency = k_us_to_ticks_ceil32(state->min_residency_us);
   1395c:	6868      	ldr	r0, [r5, #4]
   1395e:	0c41      	lsrs	r1, r0, #17
   13960:	03c0      	lsls	r0, r0, #15
   13962:	4f11      	ldr	r7, [pc, #68]	; (139a8 <pm_policy_next_state+0x8c>)
   13964:	19c0      	adds	r0, r0, r7
   13966:	4a11      	ldr	r2, [pc, #68]	; (139ac <pm_policy_next_state+0x90>)
   13968:	f04f 0300 	mov.w	r3, #0
   1396c:	f141 0100 	adc.w	r1, r1, #0
   13970:	f7fd fa5a 	bl	10e28 <__aeabi_uldivmod>
   13974:	4680      	mov	r8, r0
		exit_latency = k_us_to_ticks_ceil32(state->exit_latency_us);
   13976:	68ab      	ldr	r3, [r5, #8]
   13978:	0c59      	lsrs	r1, r3, #17
   1397a:	03db      	lsls	r3, r3, #15
   1397c:	19d8      	adds	r0, r3, r7
   1397e:	4a0b      	ldr	r2, [pc, #44]	; (139ac <pm_policy_next_state+0x90>)
   13980:	f04f 0300 	mov.w	r3, #0
   13984:	f141 0100 	adc.w	r1, r1, #0
   13988:	f7fd fa4e 	bl	10e28 <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
   1398c:	4b08      	ldr	r3, [pc, #32]	; (139b0 <pm_policy_next_state+0x94>)
   1398e:	681b      	ldr	r3, [r3, #0]
   13990:	f1b3 3fff 	cmp.w	r3, #4294967295
   13994:	d0cc      	beq.n	13930 <pm_policy_next_state+0x14>
   13996:	4283      	cmp	r3, r0
   13998:	d8ca      	bhi.n	13930 <pm_policy_next_state+0x14>
   1399a:	e7cf      	b.n	1393c <pm_policy_next_state+0x20>
			return state;
		}
	}

	return NULL;
   1399c:	2500      	movs	r5, #0
}
   1399e:	4628      	mov	r0, r5
   139a0:	b002      	add	sp, #8
   139a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   139a6:	bf00      	nop
   139a8:	000f423f 	.word	0x000f423f
   139ac:	000f4240 	.word	0x000f4240
   139b0:	20008064 	.word	0x20008064

000139b4 <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD_SEP(DT_PATH(cpus), DT_NUM_CPU_POWER_STATES, (,))
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
   139b4:	b908      	cbnz	r0, 139ba <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
   139b6:	4b02      	ldr	r3, [pc, #8]	; (139c0 <pm_state_cpu_get_all+0xc>)
   139b8:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
   139ba:	2000      	movs	r0, #0
   139bc:	4770      	bx	lr
   139be:	bf00      	nop
   139c0:	0001c188 	.word	0x0001c188

000139c4 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
   139c4:	4901      	ldr	r1, [pc, #4]	; (139cc <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
   139c6:	2210      	movs	r2, #16
	str	r2, [r1]
   139c8:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
   139ca:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
   139cc:	e000ed10 	.word	0xe000ed10

000139d0 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
   139d0:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
   139d2:	4040      	eors	r0, r0
	msr	BASEPRI, r0
   139d4:	f380 8811 	msr	BASEPRI, r0
	isb
   139d8:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
   139dc:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
   139e0:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
   139e2:	b662      	cpsie	i
	isb
   139e4:	f3bf 8f6f 	isb	sy

	bx	lr
   139e8:	4770      	bx	lr
   139ea:	bf00      	nop

000139ec <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
   139ec:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
   139ee:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
   139f0:	f381 8811 	msr	BASEPRI, r1

	wfe
   139f4:	bf20      	wfe

	msr	BASEPRI, r0
   139f6:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
   139fa:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
   139fc:	4770      	bx	lr
   139fe:	bf00      	nop

00013a00 <__NVIC_EnableIRQ>:
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   13a00:	2800      	cmp	r0, #0
   13a02:	db07      	blt.n	13a14 <__NVIC_EnableIRQ+0x14>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   13a04:	f000 021f 	and.w	r2, r0, #31
   13a08:	0940      	lsrs	r0, r0, #5
   13a0a:	2301      	movs	r3, #1
   13a0c:	4093      	lsls	r3, r2
   13a0e:	4a02      	ldr	r2, [pc, #8]	; (13a18 <__NVIC_EnableIRQ+0x18>)
   13a10:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    __COMPILER_BARRIER();
  }
}
   13a14:	4770      	bx	lr
   13a16:	bf00      	nop
   13a18:	e000e100 	.word	0xe000e100

00013a1c <__NVIC_SetPriority>:
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
   13a1c:	2800      	cmp	r0, #0
   13a1e:	db08      	blt.n	13a32 <__NVIC_SetPriority+0x16>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   13a20:	0149      	lsls	r1, r1, #5
   13a22:	b2c9      	uxtb	r1, r1
   13a24:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
   13a28:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
   13a2c:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
   13a30:	4770      	bx	lr
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   13a32:	f000 000f 	and.w	r0, r0, #15
   13a36:	0149      	lsls	r1, r1, #5
   13a38:	b2c9      	uxtb	r1, r1
   13a3a:	4b01      	ldr	r3, [pc, #4]	; (13a40 <__NVIC_SetPriority+0x24>)
   13a3c:	5419      	strb	r1, [r3, r0]
  }
}
   13a3e:	4770      	bx	lr
   13a40:	e000ed14 	.word	0xe000ed14

00013a44 <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
   13a44:	0942      	lsrs	r2, r0, #5
   13a46:	4b05      	ldr	r3, [pc, #20]	; (13a5c <arch_irq_is_enabled+0x18>)
   13a48:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   13a4c:	f000 001f 	and.w	r0, r0, #31
   13a50:	2301      	movs	r3, #1
   13a52:	fa03 f000 	lsl.w	r0, r3, r0
}
   13a56:	4010      	ands	r0, r2
   13a58:	4770      	bx	lr
   13a5a:	bf00      	nop
   13a5c:	e000e100 	.word	0xe000e100

00013a60 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
   13a60:	bf30      	wfi
    b z_SysNmiOnReset
   13a62:	f7ff bffd 	b.w	13a60 <z_SysNmiOnReset>
   13a66:	bf00      	nop

00013a68 <z_arm_prep_c>:
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
   13a68:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   13a6a:	4b0b      	ldr	r3, [pc, #44]	; (13a98 <z_arm_prep_c+0x30>)
   13a6c:	4a0b      	ldr	r2, [pc, #44]	; (13a9c <z_arm_prep_c+0x34>)
   13a6e:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   13a72:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   13a74:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   13a78:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
   13a7c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   13a80:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
   13a84:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
   13a88:	f003 f808 	bl	16a9c <z_bss_zero>
	z_data_copy();
   13a8c:	f003 fe7a 	bl	17784 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
   13a90:	f000 f9f2 	bl	13e78 <z_arm_interrupt_init>
	z_cstart();
   13a94:	f003 f85e 	bl	16b54 <z_cstart>
   13a98:	e000ed00 	.word	0xe000ed00
   13a9c:	00010000 	.word	0x00010000

00013aa0 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
   13aa0:	4a09      	ldr	r2, [pc, #36]	; (13ac8 <arch_swap+0x28>)
   13aa2:	6893      	ldr	r3, [r2, #8]
   13aa4:	6758      	str	r0, [r3, #116]	; 0x74
	_current->arch.swap_return_value = _k_neg_eagain;
   13aa6:	4909      	ldr	r1, [pc, #36]	; (13acc <arch_swap+0x2c>)
   13aa8:	6809      	ldr	r1, [r1, #0]
   13aaa:	6799      	str	r1, [r3, #120]	; 0x78

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   13aac:	4908      	ldr	r1, [pc, #32]	; (13ad0 <arch_swap+0x30>)
   13aae:	684b      	ldr	r3, [r1, #4]
   13ab0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   13ab4:	604b      	str	r3, [r1, #4]
   13ab6:	2300      	movs	r3, #0
   13ab8:	f383 8811 	msr	BASEPRI, r3
   13abc:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
   13ac0:	6893      	ldr	r3, [r2, #8]
}
   13ac2:	6f98      	ldr	r0, [r3, #120]	; 0x78
   13ac4:	4770      	bx	lr
   13ac6:	bf00      	nop
   13ac8:	2000865c 	.word	0x2000865c
   13acc:	0001c354 	.word	0x0001c354
   13ad0:	e000ed00 	.word	0xe000ed00

00013ad4 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
   13ad4:	4915      	ldr	r1, [pc, #84]	; (13b2c <z_arm_pendsv+0x58>)
    ldr r2, [r1, #_kernel_offset_to_current]
   13ad6:	688a      	ldr	r2, [r1, #8]

#if defined(CONFIG_ARM_STORE_EXC_RETURN)
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
   13ad8:	f882 e07d 	strb.w	lr, [r2, #125]	; 0x7d
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
   13adc:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
   13ae0:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
   13ae2:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
   13ae6:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   13aea:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
   13aec:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
   13af0:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
   13af4:	4f0e      	ldr	r7, [pc, #56]	; (13b30 <z_arm_pendsv+0x5c>)
    ldr v3, =_SCS_ICSR_UNPENDSV
   13af6:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
   13afa:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
   13afc:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
   13afe:	603e      	str	r6, [r7, #0]

#endif

#if defined(CONFIG_ARM_STORE_EXC_RETURN)
    /* Restore EXC_RETURN value. */
    ldrsb lr, [r2, #_thread_offset_to_mode_exc_return]
   13b00:	f992 e07d 	ldrsb.w	lr, [r2, #125]	; 0x7d

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
   13b04:	6f50      	ldr	r0, [r2, #116]	; 0x74
    movs r3, #0
   13b06:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
   13b08:	6753      	str	r3, [r2, #116]	; 0x74
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
   13b0a:	f380 8811 	msr	BASEPRI, r0
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
   13b0e:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
   13b12:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
   13b16:	f38c 8809 	msr	PSP, ip
#endif

#ifdef CONFIG_BUILTIN_STACK_GUARD
    /* r2 contains k_thread */
    add r0, r2, #0
   13b1a:	f102 0000 	add.w	r0, r2, #0
    push {r2, lr}
   13b1e:	b504      	push	{r2, lr}
    bl configure_builtin_stack_guard
   13b20:	f006 f942 	bl	19da8 <configure_builtin_stack_guard>
    pop {r2, lr}
   13b24:	e8bd 4004 	ldmia.w	sp!, {r2, lr}

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
   13b28:	4770      	bx	lr
   13b2a:	0000      	.short	0x0000
    ldr r1, =_kernel
   13b2c:	2000865c 	.word	0x2000865c
    ldr v4, =_SCS_ICSR
   13b30:	e000ed04 	.word	0xe000ed04

00013b34 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
   13b34:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
   13b38:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
   13b3a:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
   13b3e:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
   13b42:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
   13b44:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
   13b48:	2902      	cmp	r1, #2
    beq _oops
   13b4a:	d0ff      	beq.n	13b4c <_oops>

00013b4c <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
   13b4c:	b501      	push	{r0, lr}
    push {r1, r2}
    push {r4-r11}
    mov  r1, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    bl z_do_kernel_oops
   13b4e:	f006 f90e 	bl	19d6e <z_do_kernel_oops>
     * the MSP to its value prior to entering the function
     */
    add sp, #40
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    pop {r0, pc}
   13b52:	bd01      	pop	{r0, pc}

00013b54 <arch_new_thread>:
 * of the ESF.
 */
void arch_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		     char *stack_ptr, k_thread_entry_t entry,
		     void *p1, void *p2, void *p3)
{
   13b54:	b410      	push	{r4}
		thread->stack_info.size -= FP_GUARD_EXTRA_SIZE;
	}
#endif /* FP_GUARD_EXTRA_SIZE */
#endif /* CONFIG_MPU_STACK_GUARD */

	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
   13b56:	f1a2 0420 	sub.w	r4, r2, #32
		iframe->pc = (uint32_t)arch_user_mode_enter;
	} else {
		iframe->pc = (uint32_t)z_thread_entry;
	}
#else
	iframe->pc = (uint32_t)z_thread_entry;
   13b5a:	490f      	ldr	r1, [pc, #60]	; (13b98 <arch_new_thread+0x44>)
   13b5c:	f842 1c08 	str.w	r1, [r2, #-8]
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
   13b60:	f021 0101 	bic.w	r1, r1, #1
   13b64:	f842 1c08 	str.w	r1, [r2, #-8]
#endif
	iframe->a1 = (uint32_t)entry;
   13b68:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
   13b6c:	9b01      	ldr	r3, [sp, #4]
   13b6e:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
   13b72:	9b02      	ldr	r3, [sp, #8]
   13b74:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
   13b78:	9b03      	ldr	r3, [sp, #12]
   13b7a:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
   13b7e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   13b82:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe = (struct __basic_sf *)
		((uintptr_t)iframe - sizeof(struct __fpu_sf));
	memset(iframe, 0, sizeof(struct __fpu_sf));
#endif

	thread->callee_saved.psp = (uint32_t)iframe;
   13b86:	6504      	str	r4, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
   13b88:	2300      	movs	r3, #0
   13b8a:	6743      	str	r3, [r0, #116]	; 0x74

#if defined(CONFIG_ARM_STORE_EXC_RETURN) || defined(CONFIG_USERSPACE)
	thread->arch.mode = 0;
   13b8c:	67c3      	str	r3, [r0, #124]	; 0x7c
#if defined(CONFIG_ARM_STORE_EXC_RETURN)
	thread->arch.mode_exc_return = DEFAULT_EXC_RETURN;
   13b8e:	23bc      	movs	r3, #188	; 0xbc
   13b90:	f880 307d 	strb.w	r3, [r0, #125]	; 0x7d
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
   13b94:	bc10      	pop	{r4}
   13b96:	4770      	bx	lr
   13b98:	00019601 	.word	0x00019601

00013b9c <arch_switch_to_main_thread>:
void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
	z_arm_prepare_switch_to_main();

	_current = main_thread;
   13b9c:	4b08      	ldr	r3, [pc, #32]	; (13bc0 <arch_switch_to_main_thread+0x24>)
   13b9e:	6098      	str	r0, [r3, #8]
#endif

#if defined(CONFIG_BUILTIN_STACK_GUARD)
	/* Set PSPLIM register for built-in stack guarding of main thread. */
#if defined(CONFIG_CPU_CORTEX_M_HAS_SPLIM)
	__set_PSPLIM(main_thread->stack_info.start);
   13ba0:	6e43      	ldr	r3, [r0, #100]	; 0x64
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure PSPLIM is RAZ/WI
  (void)ProcStackPtrLimit;
#else
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
   13ba2:	f383 880b 	msr	PSPLIM, r3

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
   13ba6:	4610      	mov	r0, r2
   13ba8:	f381 8809 	msr	PSP, r1
   13bac:	2100      	movs	r1, #0
   13bae:	b663      	cpsie	if
   13bb0:	f381 8811 	msr	BASEPRI, r1
   13bb4:	f3bf 8f6f 	isb	sy
   13bb8:	2200      	movs	r2, #0
   13bba:	2300      	movs	r3, #0
   13bbc:	f005 fd20 	bl	19600 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
   13bc0:	2000865c 	.word	0x2000865c

00013bc4 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
   13bc4:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
   13bc6:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
   13bc8:	4a0b      	ldr	r2, [pc, #44]	; (13bf8 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
   13bca:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
   13bcc:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
   13bce:	bf1e      	ittt	ne
	movne	r1, #0
   13bd0:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
   13bd2:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
   13bd4:	f007 f84b 	blne	1ac6e <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
   13bd8:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
   13bda:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
   13bde:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
   13be2:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
   13be6:	4905      	ldr	r1, [pc, #20]	; (13bfc <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
   13be8:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
   13bea:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
   13bec:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
   13bee:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
   13bf2:	4903      	ldr	r1, [pc, #12]	; (13c00 <_isr_wrapper+0x3c>)
	bx r1
   13bf4:	4708      	bx	r1
   13bf6:	0000      	.short	0x0000
	ldr r2, =_kernel
   13bf8:	2000865c 	.word	0x2000865c
	ldr r1, =_sw_isr_table
   13bfc:	0001b864 	.word	0x0001b864
	ldr r1, =z_arm_int_exit
   13c00:	00013c05 	.word	0x00013c05

00013c04 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
   13c04:	4b04      	ldr	r3, [pc, #16]	; (13c18 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
   13c06:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
   13c08:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
   13c0a:	4288      	cmp	r0, r1
	beq _EXIT_EXC
   13c0c:	d003      	beq.n	13c16 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
   13c0e:	4903      	ldr	r1, [pc, #12]	; (13c1c <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
   13c10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
   13c14:	600a      	str	r2, [r1, #0]

00013c16 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
   13c16:	4770      	bx	lr
	ldr r3, =_kernel
   13c18:	2000865c 	.word	0x2000865c
	ldr r1, =_SCS_ICSR
   13c1c:	e000ed04 	.word	0xe000ed04

00013c20 <mem_manage_fault>:
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
			      bool *recoverable)
{
   13c20:	b510      	push	{r4, lr}
   13c22:	4614      	mov	r4, r2
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   13c24:	4b18      	ldr	r3, [pc, #96]	; (13c88 <mem_manage_fault+0x68>)
   13c26:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error (context area might be"
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
   13c28:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
   13c2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   13c2c:	f013 0f02 	tst.w	r3, #2
   13c30:	d00b      	beq.n	13c4a <mem_manage_fault+0x2a>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		uint32_t temp = SCB->MMFAR;
   13c32:	4b15      	ldr	r3, [pc, #84]	; (13c88 <mem_manage_fault+0x68>)
   13c34:	6b5a      	ldr	r2, [r3, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
   13c36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   13c38:	f013 0f80 	tst.w	r3, #128	; 0x80
   13c3c:	d005      	beq.n	13c4a <mem_manage_fault+0x2a>
			mmfar = temp;
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
			if (from_hard_fault != 0) {
   13c3e:	b121      	cbz	r1, 13c4a <mem_manage_fault+0x2a>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
   13c40:	4a11      	ldr	r2, [pc, #68]	; (13c88 <mem_manage_fault+0x68>)
   13c42:	6a93      	ldr	r3, [r2, #40]	; 0x28
   13c44:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   13c48:	6293      	str	r3, [r2, #40]	; 0x28
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
   13c4a:	4b0f      	ldr	r3, [pc, #60]	; (13c88 <mem_manage_fault+0x68>)
   13c4c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Instruction Access Violation");
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   13c4e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   13c50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   13c52:	f013 0f10 	tst.w	r3, #16
   13c56:	d101      	bne.n	13c5c <mem_manage_fault+0x3c>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
   13c58:	4b0b      	ldr	r3, [pc, #44]	; (13c88 <mem_manage_fault+0x68>)
   13c5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	 * lazy stacking Memory Manage fault. At the time of writing, this
	 * can happen when printing.  If that's true, we should clear the
	 * pending flag in addition to the clearing the reason for the fault
	 */
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   13c5c:	4b0a      	ldr	r3, [pc, #40]	; (13c88 <mem_manage_fault+0x68>)
   13c5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   13c60:	f013 0f20 	tst.w	r3, #32
   13c64:	d004      	beq.n	13c70 <mem_manage_fault+0x50>
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
   13c66:	4a08      	ldr	r2, [pc, #32]	; (13c88 <mem_manage_fault+0x68>)
   13c68:	6a53      	ldr	r3, [r2, #36]	; 0x24
   13c6a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   13c6e:	6253      	str	r3, [r2, #36]	; 0x24
	}
#endif /* CONFIG_ARMV7_M_ARMV8_M_FP */

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
   13c70:	4a05      	ldr	r2, [pc, #20]	; (13c88 <mem_manage_fault+0x68>)
   13c72:	6a93      	ldr	r3, [r2, #40]	; 0x28
   13c74:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
   13c78:	6293      	str	r3, [r2, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);
   13c7a:	2101      	movs	r1, #1
   13c7c:	f006 f898 	bl	19db0 <memory_fault_recoverable>
   13c80:	7020      	strb	r0, [r4, #0]

	return reason;
}
   13c82:	2000      	movs	r0, #0
   13c84:	bd10      	pop	{r4, pc}
   13c86:	bf00      	nop
   13c88:	e000ed00 	.word	0xe000ed00

00013c8c <bus_fault>:
 *
 * @return error code to identify the fatal error reason.
 *
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
{
   13c8c:	b510      	push	{r4, lr}
   13c8e:	4614      	mov	r4, r2
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   13c90:	4b12      	ldr	r3, [pc, #72]	; (13cdc <bus_fault+0x50>)
   13c92:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
   13c94:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
   13c96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   13c98:	f413 7f00 	tst.w	r3, #512	; 0x200
   13c9c:	d00b      	beq.n	13cb6 <bus_fault+0x2a>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
   13c9e:	4b0f      	ldr	r3, [pc, #60]	; (13cdc <bus_fault+0x50>)
   13ca0:	6b9a      	ldr	r2, [r3, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
   13ca2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   13ca4:	f413 4f00 	tst.w	r3, #32768	; 0x8000
   13ca8:	d005      	beq.n	13cb6 <bus_fault+0x2a>
			PR_EXC("  BFAR Address: 0x%x", bfar);
			if (from_hard_fault != 0) {
   13caa:	b121      	cbz	r1, 13cb6 <bus_fault+0x2a>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
   13cac:	4a0b      	ldr	r2, [pc, #44]	; (13cdc <bus_fault+0x50>)
   13cae:	6a93      	ldr	r3, [r2, #40]	; 0x28
   13cb0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
   13cb4:	6293      	str	r3, [r2, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
   13cb6:	4b09      	ldr	r3, [pc, #36]	; (13cdc <bus_fault+0x50>)
   13cb8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Imprecise data bus error");
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
   13cba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   13cbc:	f413 7f80 	tst.w	r3, #256	; 0x100
   13cc0:	d101      	bne.n	13cc6 <bus_fault+0x3a>
		PR_FAULT_INFO("  Instruction bus error");
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
   13cc2:	4b06      	ldr	r3, [pc, #24]	; (13cdc <bus_fault+0x50>)
   13cc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   13cc6:	4a05      	ldr	r2, [pc, #20]	; (13cdc <bus_fault+0x50>)
   13cc8:	6a93      	ldr	r3, [r2, #40]	; 0x28
   13cca:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
   13cce:	6293      	str	r3, [r2, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
   13cd0:	2101      	movs	r1, #1
   13cd2:	f006 f86d 	bl	19db0 <memory_fault_recoverable>
   13cd6:	7020      	strb	r0, [r4, #0]

	return reason;
}
   13cd8:	2000      	movs	r0, #0
   13cda:	bd10      	pop	{r4, pc}
   13cdc:	e000ed00 	.word	0xe000ed00

00013ce0 <usage_fault>:
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   13ce0:	4b0a      	ldr	r3, [pc, #40]	; (13d0c <usage_fault+0x2c>)
   13ce2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Division by zero");
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
   13ce4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unaligned memory access");
	}
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
   13ce6:	6a98      	ldr	r0, [r3, #40]	; 0x28
   13ce8:	f410 1080 	ands.w	r0, r0, #1048576	; 0x100000
   13cec:	d10b      	bne.n	13d06 <usage_fault+0x26>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
   13cee:	4b07      	ldr	r3, [pc, #28]	; (13d0c <usage_fault+0x2c>)
   13cf0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  No coprocessor instructions");
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
   13cf2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
   13cf4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal use of the EPSR");
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
   13cf6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   13cf8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   13cfa:	ea6f 4202 	mvn.w	r2, r2, lsl #16
   13cfe:	ea6f 4212 	mvn.w	r2, r2, lsr #16
   13d02:	629a      	str	r2, [r3, #40]	; 0x28

	return reason;
}
   13d04:	4770      	bx	lr
		reason = K_ERR_STACK_CHK_FAIL;
   13d06:	2002      	movs	r0, #2
   13d08:	e7f1      	b.n	13cee <usage_fault+0xe>
   13d0a:	bf00      	nop
   13d0c:	e000ed00 	.word	0xe000ed00

00013d10 <z_arm_is_synchronous_svc>:
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

static inline bool z_arm_is_synchronous_svc(z_arch_esf_t *esf)
{
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
   13d10:	6981      	ldr	r1, [r0, #24]
	/* Note: ARMv6-M does not support CCR.BFHFNMIGN so this access
	 * could generate a fault if the pc was invalid.
	 */
	uint16_t fault_insn = *(ret_addr - 1);
#else
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
   13d12:	4b0d      	ldr	r3, [pc, #52]	; (13d48 <z_arm_is_synchronous_svc+0x38>)
   13d14:	695a      	ldr	r2, [r3, #20]
   13d16:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   13d1a:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
   13d1c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   13d20:	f3bf 8f6f 	isb	sy
	__DSB();
	__ISB();

	uint16_t fault_insn = *(ret_addr - 1);
   13d24:	f831 1c02 	ldrh.w	r1, [r1, #-2]

	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
   13d28:	695a      	ldr	r2, [r3, #20]
   13d2a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   13d2e:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
   13d30:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   13d34:	f3bf 8f6f 	isb	sy
	__DSB();
	__ISB();
#endif /* ARMV6_M_ARMV8_M_BASELINE && !ARMV8_M_BASELINE */

	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
   13d38:	f64d 7302 	movw	r3, #57090	; 0xdf02
   13d3c:	4299      	cmp	r1, r3
   13d3e:	d001      	beq.n	13d44 <z_arm_is_synchronous_svc+0x34>
		((fault_insn & 0x00ff) == _SVC_CALL_RUNTIME_EXCEPT)) {
		return true;
	}
#undef _SVC_OPCODE
	return false;
   13d40:	2000      	movs	r0, #0
   13d42:	4770      	bx	lr
		return true;
   13d44:	2001      	movs	r0, #1
}
   13d46:	4770      	bx	lr
   13d48:	e000ed00 	.word	0xe000ed00

00013d4c <hard_fault>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t hard_fault(z_arch_esf_t *esf, bool *recoverable)
{
   13d4c:	b538      	push	{r3, r4, r5, lr}
   13d4e:	4605      	mov	r5, r0
		reason = esf->basic.r0;
	}

	*recoverable = memory_fault_recoverable(esf, true);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	*recoverable = false;
   13d50:	2300      	movs	r3, #0
   13d52:	700b      	strb	r3, [r1, #0]

	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   13d54:	4b1a      	ldr	r3, [pc, #104]	; (13dc0 <hard_fault+0x74>)
   13d56:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
   13d58:	f010 0002 	ands.w	r0, r0, #2
   13d5c:	d12d      	bne.n	13dba <hard_fault+0x6e>
   13d5e:	460c      	mov	r4, r1
		PR_EXC("  Bus fault on vector table read");
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
   13d60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   13d62:	2b00      	cmp	r3, #0
   13d64:	db2a      	blt.n	13dbc <hard_fault+0x70>
		PR_EXC("  Debug event");
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
   13d66:	4b16      	ldr	r3, [pc, #88]	; (13dc0 <hard_fault+0x74>)
   13d68:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
   13d6a:	f010 4080 	ands.w	r0, r0, #1073741824	; 0x40000000
   13d6e:	d025      	beq.n	13dbc <hard_fault+0x70>
		PR_EXC("  Fault escalation (see below)");
		if (z_arm_is_synchronous_svc(esf)) {
   13d70:	4628      	mov	r0, r5
   13d72:	f7ff ffcd 	bl	13d10 <z_arm_is_synchronous_svc>
   13d76:	b108      	cbz	r0, 13d7c <hard_fault+0x30>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
			reason = esf->basic.r0;
   13d78:	6828      	ldr	r0, [r5, #0]
   13d7a:	e01f      	b.n	13dbc <hard_fault+0x70>
		} else if ((SCB->CFSR & SCB_CFSR_MEMFAULTSR_Msk) != 0) {
   13d7c:	4b10      	ldr	r3, [pc, #64]	; (13dc0 <hard_fault+0x74>)
   13d7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   13d80:	f013 0fff 	tst.w	r3, #255	; 0xff
   13d84:	d10d      	bne.n	13da2 <hard_fault+0x56>
			reason = mem_manage_fault(esf, 1, recoverable);
		} else if ((SCB->CFSR & SCB_CFSR_BUSFAULTSR_Msk) != 0) {
   13d86:	4b0e      	ldr	r3, [pc, #56]	; (13dc0 <hard_fault+0x74>)
   13d88:	6a98      	ldr	r0, [r3, #40]	; 0x28
   13d8a:	f410 407f 	ands.w	r0, r0, #65280	; 0xff00
   13d8e:	d10e      	bne.n	13dae <hard_fault+0x62>
			reason = bus_fault(esf, 1, recoverable);
		} else if ((SCB->CFSR & SCB_CFSR_USGFAULTSR_Msk) != 0) {
   13d90:	4b0b      	ldr	r3, [pc, #44]	; (13dc0 <hard_fault+0x74>)
   13d92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   13d94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   13d98:	d310      	bcc.n	13dbc <hard_fault+0x70>
			reason = usage_fault(esf);
   13d9a:	4628      	mov	r0, r5
   13d9c:	f7ff ffa0 	bl	13ce0 <usage_fault>
   13da0:	e00c      	b.n	13dbc <hard_fault+0x70>
			reason = mem_manage_fault(esf, 1, recoverable);
   13da2:	4622      	mov	r2, r4
   13da4:	2101      	movs	r1, #1
   13da6:	4628      	mov	r0, r5
   13da8:	f7ff ff3a 	bl	13c20 <mem_manage_fault>
   13dac:	e006      	b.n	13dbc <hard_fault+0x70>
			reason = bus_fault(esf, 1, recoverable);
   13dae:	4622      	mov	r2, r4
   13db0:	2101      	movs	r1, #1
   13db2:	4628      	mov	r0, r5
   13db4:	f7ff ff6a 	bl	13c8c <bus_fault>
   13db8:	e000      	b.n	13dbc <hard_fault+0x70>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   13dba:	2000      	movs	r0, #0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	return reason;
}
   13dbc:	bd38      	pop	{r3, r4, r5, pc}
   13dbe:	bf00      	nop
   13dc0:	e000ed00 	.word	0xe000ed00

00013dc4 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
   13dc4:	b530      	push	{r4, r5, lr}
   13dc6:	b08b      	sub	sp, #44	; 0x2c
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   13dc8:	4b1f      	ldr	r3, [pc, #124]	; (13e48 <z_arm_fault+0x84>)
   13dca:	685d      	ldr	r5, [r3, #4]
   13dcc:	f3c5 0508 	ubfx	r5, r5, #0, #9
   13dd0:	2300      	movs	r3, #0
   13dd2:	f383 8811 	msr	BASEPRI, r3
   13dd6:	f3bf 8f6f 	isb	sy
	arch_irq_unlock(0);

	/* Retrieve the Exception Stack Frame (ESF) to be supplied
	 * as argument to the remainder of the fault handling process.
	 */
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
   13dda:	f10d 0326 	add.w	r3, sp, #38	; 0x26
   13dde:	f006 f80f 	bl	19e00 <get_esf>
   13de2:	4604      	mov	r4, r0

#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
   13de4:	f10d 0227 	add.w	r2, sp, #39	; 0x27
   13de8:	4629      	mov	r1, r5
   13dea:	f005 ffe6 	bl	19dba <fault_handle>
	if (recoverable) {
   13dee:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   13df2:	b10b      	cbz	r3, 13df8 <z_arm_fault+0x34>
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
	}

	z_arm_fatal_error(reason, &esf_copy);
}
   13df4:	b00b      	add	sp, #44	; 0x2c
   13df6:	bd30      	pop	{r4, r5, pc}
   13df8:	4605      	mov	r5, r0
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
   13dfa:	f10d 0c04 	add.w	ip, sp, #4
   13dfe:	6820      	ldr	r0, [r4, #0]
   13e00:	6861      	ldr	r1, [r4, #4]
   13e02:	68a2      	ldr	r2, [r4, #8]
   13e04:	68e3      	ldr	r3, [r4, #12]
   13e06:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   13e0a:	6920      	ldr	r0, [r4, #16]
   13e0c:	6961      	ldr	r1, [r4, #20]
   13e0e:	69a2      	ldr	r2, [r4, #24]
   13e10:	69e3      	ldr	r3, [r4, #28]
   13e12:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
	if (nested_exc) {
   13e16:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
   13e1a:	b14b      	cbz	r3, 13e30 <z_arm_fault+0x6c>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
   13e1c:	9b08      	ldr	r3, [sp, #32]
   13e1e:	f3c3 0208 	ubfx	r2, r3, #0, #9
   13e22:	b95a      	cbnz	r2, 13e3c <z_arm_fault+0x78>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
   13e24:	ea6f 2353 	mvn.w	r3, r3, lsr #9
   13e28:	ea6f 2343 	mvn.w	r3, r3, lsl #9
   13e2c:	9308      	str	r3, [sp, #32]
   13e2e:	e005      	b.n	13e3c <z_arm_fault+0x78>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   13e30:	9b08      	ldr	r3, [sp, #32]
   13e32:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
   13e36:	f023 0301 	bic.w	r3, r3, #1
   13e3a:	9308      	str	r3, [sp, #32]
	z_arm_fatal_error(reason, &esf_copy);
   13e3c:	a901      	add	r1, sp, #4
   13e3e:	4628      	mov	r0, r5
   13e40:	f005 ff91 	bl	19d66 <z_arm_fatal_error>
   13e44:	e7d6      	b.n	13df4 <z_arm_fault+0x30>
   13e46:	bf00      	nop
   13e48:	e000ed00 	.word	0xe000ed00

00013e4c <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   13e4c:	4b04      	ldr	r3, [pc, #16]	; (13e60 <z_arm_fault_init+0x14>)
   13e4e:	695a      	ldr	r2, [r3, #20]
   13e50:	f042 0210 	orr.w	r2, r2, #16
   13e54:	615a      	str	r2, [r3, #20]
	 *
	 * For Non-Secure Firmware this could allow the Non-Secure Main
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
   13e56:	695a      	ldr	r2, [r3, #20]
   13e58:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
   13e5c:	615a      	str	r2, [r3, #20]
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
   13e5e:	4770      	bx	lr
   13e60:	e000ed00 	.word	0xe000ed00

00013e64 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
   13e64:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
   13e68:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
   13e6c:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
   13e6e:	4672      	mov	r2, lr
	bl z_arm_fault
   13e70:	f7ff ffa8 	bl	13dc4 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
   13e74:	bd01      	pop	{r0, pc}
   13e76:	bf00      	nop

00013e78 <z_arm_interrupt_init>:
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
   13e78:	2200      	movs	r2, #0

	for (; irq < CONFIG_NUM_IRQS; irq++) {
   13e7a:	e007      	b.n	13e8c <z_arm_interrupt_init+0x14>
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   13e7c:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   13e80:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
   13e84:	2120      	movs	r1, #32
   13e86:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
   13e8a:	3201      	adds	r2, #1
   13e8c:	2a44      	cmp	r2, #68	; 0x44
   13e8e:	dc09      	bgt.n	13ea4 <z_arm_interrupt_init+0x2c>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
   13e90:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
   13e92:	2b00      	cmp	r3, #0
   13e94:	daf2      	bge.n	13e7c <z_arm_interrupt_init+0x4>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   13e96:	f003 030f 	and.w	r3, r3, #15
   13e9a:	4903      	ldr	r1, [pc, #12]	; (13ea8 <z_arm_interrupt_init+0x30>)
   13e9c:	4419      	add	r1, r3
   13e9e:	2320      	movs	r3, #32
   13ea0:	760b      	strb	r3, [r1, #24]
   13ea2:	e7f2      	b.n	13e8a <z_arm_interrupt_init+0x12>
	}
}
   13ea4:	4770      	bx	lr
   13ea6:	bf00      	nop
   13ea8:	e000ecfc 	.word	0xe000ecfc

00013eac <__start>:
    strb r0, [r1]
#endif /* CONFIG_DEBUG_THREAD_INFO */

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
   13eac:	2000      	movs	r0, #0
    msr CONTROL, r0
   13eae:	f380 8814 	msr	CONTROL, r0
    isb
   13eb2:	f3bf 8f6f 	isb	sy
#if defined(CONFIG_CPU_CORTEX_M_HAS_SPLIM)
    /* Clear SPLIM registers */
    movs.n r0, #0
   13eb6:	2000      	movs	r0, #0
    msr MSPLIM, r0
   13eb8:	f380 880a 	msr	MSPLIM, r0
    msr PSPLIM, r0
   13ebc:	f380 880b 	msr	PSPLIM, r0
#if defined(CONFIG_PM_S2RAM)
    bl arch_pm_s2ram_resume
#endif /* CONFIG_PM_S2RAM */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
   13ec0:	f7ff fc46 	bl	13750 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
   13ec4:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
   13ec6:	490e      	ldr	r1, [pc, #56]	; (13f00 <__start+0x54>)
    str r0, [r1]
   13ec8:	6008      	str	r0, [r1, #0]
    dsb
   13eca:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   13ece:	480d      	ldr	r0, [pc, #52]	; (13f04 <__start+0x58>)
    msr msp, r0
   13ed0:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
   13ed4:	f000 f840 	bl	13f58 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   13ed8:	2020      	movs	r0, #32
    msr BASEPRI, r0
   13eda:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
   13ede:	480a      	ldr	r0, [pc, #40]	; (13f08 <__start+0x5c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
   13ee0:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
   13ee4:	1840      	adds	r0, r0, r1
    msr PSP, r0
   13ee6:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
   13eea:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
   13eee:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
   13ef0:	4308      	orrs	r0, r1
    msr CONTROL, r0
   13ef2:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
   13ef6:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
   13efa:	f7ff fdb5 	bl	13a68 <z_arm_prep_c>
   13efe:	0000      	.short	0x0000
    ldr r1, =_SCS_MPU_CTRL
   13f00:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   13f04:	200093e8 	.word	0x200093e8
    ldr r0, =z_interrupt_stacks
   13f08:	200086a8 	.word	0x200086a8

00013f0c <__NVIC_SystemReset>:
  __ASM volatile ("dsb 0xF":::"memory");
   13f0c:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   13f10:	4905      	ldr	r1, [pc, #20]	; (13f28 <__NVIC_SystemReset+0x1c>)
   13f12:	68ca      	ldr	r2, [r1, #12]
   13f14:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   13f18:	4b04      	ldr	r3, [pc, #16]	; (13f2c <__NVIC_SystemReset+0x20>)
   13f1a:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   13f1c:	60cb      	str	r3, [r1, #12]
   13f1e:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   13f22:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   13f24:	e7fd      	b.n	13f22 <__NVIC_SystemReset+0x16>
   13f26:	bf00      	nop
   13f28:	e000ed00 	.word	0xe000ed00
   13f2c:	05fa0004 	.word	0x05fa0004

00013f30 <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
   13f30:	4b08      	ldr	r3, [pc, #32]	; (13f54 <z_arm_clear_arm_mpu_config+0x24>)
   13f32:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
	int num_regions =
   13f36:	f3c0 2007 	ubfx	r0, r0, #8, #8

	for (i = 0; i < num_regions; i++) {
   13f3a:	2300      	movs	r3, #0
   13f3c:	e006      	b.n	13f4c <z_arm_clear_arm_mpu_config+0x1c>
* \param mpu Pointer to MPU to be used.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegionEx(MPU_Type* mpu, uint32_t rnr)
{
  mpu->RNR = rnr;
   13f3e:	4a05      	ldr	r2, [pc, #20]	; (13f54 <z_arm_clear_arm_mpu_config+0x24>)
   13f40:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
  mpu->RLAR = 0U;
   13f44:	2100      	movs	r1, #0
   13f46:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
   13f4a:	3301      	adds	r3, #1
   13f4c:	4283      	cmp	r3, r0
   13f4e:	dbf6      	blt.n	13f3e <z_arm_clear_arm_mpu_config+0xe>
		ARM_MPU_ClrRegion(i);
	}
}
   13f50:	4770      	bx	lr
   13f52:	bf00      	nop
   13f54:	e000ed00 	.word	0xe000ed00

00013f58 <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
   13f58:	b510      	push	{r4, lr}
  __ASM volatile ("cpsid i" : : : "memory");
   13f5a:	b672      	cpsid	i
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
   13f5c:	2400      	movs	r4, #0
   13f5e:	f384 8813 	msr	FAULTMASK, r4

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
   13f62:	f7ff ffe5 	bl	13f30 <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
   13f66:	4623      	mov	r3, r4
   13f68:	e008      	b.n	13f7c <z_arm_init_arch_hw_at_boot+0x24>
		NVIC->ICER[i] = 0xFFFFFFFF;
   13f6a:	f103 0120 	add.w	r1, r3, #32
   13f6e:	4a0e      	ldr	r2, [pc, #56]	; (13fa8 <z_arm_init_arch_hw_at_boot+0x50>)
   13f70:	f04f 30ff 	mov.w	r0, #4294967295
   13f74:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
   13f78:	3301      	adds	r3, #1
   13f7a:	b2db      	uxtb	r3, r3
   13f7c:	2b0f      	cmp	r3, #15
   13f7e:	d9f4      	bls.n	13f6a <z_arm_init_arch_hw_at_boot+0x12>
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
   13f80:	2300      	movs	r3, #0
   13f82:	e008      	b.n	13f96 <z_arm_init_arch_hw_at_boot+0x3e>
		NVIC->ICPR[i] = 0xFFFFFFFF;
   13f84:	f103 0160 	add.w	r1, r3, #96	; 0x60
   13f88:	4a07      	ldr	r2, [pc, #28]	; (13fa8 <z_arm_init_arch_hw_at_boot+0x50>)
   13f8a:	f04f 30ff 	mov.w	r0, #4294967295
   13f8e:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
   13f92:	3301      	adds	r3, #1
   13f94:	b2db      	uxtb	r3, r3
   13f96:	2b0f      	cmp	r3, #15
   13f98:	d9f4      	bls.n	13f84 <z_arm_init_arch_hw_at_boot+0x2c>
  __ASM volatile ("cpsie i" : : : "memory");
   13f9a:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
   13f9c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   13fa0:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
   13fa4:	bd10      	pop	{r4, pc}
   13fa6:	bf00      	nop
   13fa8:	e000e100 	.word	0xe000e100

00013fac <z_impl_k_thread_abort>:
#include <kswap.h>
#include <zephyr/wait_q.h>
#include <zephyr/sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
   13fac:	b508      	push	{r3, lr}
	if (_current == thread) {
   13fae:	4b0a      	ldr	r3, [pc, #40]	; (13fd8 <z_impl_k_thread_abort+0x2c>)
   13fb0:	689b      	ldr	r3, [r3, #8]
   13fb2:	4283      	cmp	r3, r0
   13fb4:	d002      	beq.n	13fbc <z_impl_k_thread_abort+0x10>
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
		}
	}

	z_thread_abort(thread);
   13fb6:	f003 fbad 	bl	17714 <z_thread_abort>
}
   13fba:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   13fbc:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
   13fc0:	2b00      	cmp	r3, #0
   13fc2:	d0f8      	beq.n	13fb6 <z_impl_k_thread_abort+0xa>
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   13fc4:	4b05      	ldr	r3, [pc, #20]	; (13fdc <z_impl_k_thread_abort+0x30>)
   13fc6:	685a      	ldr	r2, [r3, #4]
   13fc8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
   13fcc:	605a      	str	r2, [r3, #4]
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
   13fce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   13fd0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
   13fd4:	625a      	str	r2, [r3, #36]	; 0x24
   13fd6:	e7ee      	b.n	13fb6 <z_impl_k_thread_abort+0xa>
   13fd8:	2000865c 	.word	0x2000865c
   13fdc:	e000ed00 	.word	0xe000ed00

00013fe0 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
   13fe0:	b510      	push	{r4, lr}
   13fe2:	b084      	sub	sp, #16
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   13fe4:	4c0a      	ldr	r4, [pc, #40]	; (14010 <z_arm_configure_static_mpu_regions+0x30>)
   13fe6:	4623      	mov	r3, r4
   13fe8:	4a0a      	ldr	r2, [pc, #40]	; (14014 <z_arm_configure_static_mpu_regions+0x34>)
   13fea:	2101      	movs	r1, #1
   13fec:	480a      	ldr	r0, [pc, #40]	; (14018 <z_arm_configure_static_mpu_regions+0x38>)
   13fee:	f005 ffa0 	bl	19f32 <arm_core_mpu_configure_static_mpu_regions>
	/* Define a constant array of z_arm_mpu_partition objects that holds the
	 * boundaries of the areas, inside which dynamic region programming
	 * is allowed. The information is passed to the underlying driver at
	 * initialization.
	 */
	const struct z_arm_mpu_partition dyn_region_areas[] = {
   13ff2:	2300      	movs	r3, #0
   13ff4:	9301      	str	r3, [sp, #4]
   13ff6:	9302      	str	r3, [sp, #8]
   13ff8:	9303      	str	r3, [sp, #12]
		{
		.start = _MPU_DYNAMIC_REGIONS_AREA_START,
   13ffa:	4b08      	ldr	r3, [pc, #32]	; (1401c <z_arm_configure_static_mpu_regions+0x3c>)
	const struct z_arm_mpu_partition dyn_region_areas[] = {
   13ffc:	9301      	str	r3, [sp, #4]
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
   13ffe:	1ae4      	subs	r4, r4, r3
	const struct z_arm_mpu_partition dyn_region_areas[] = {
   14000:	9402      	str	r4, [sp, #8]
		}
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   14002:	2101      	movs	r1, #1
   14004:	a801      	add	r0, sp, #4
   14006:	f005 ff98 	bl	19f3a <arm_core_mpu_mark_areas_for_dynamic_regions>
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
   1400a:	b004      	add	sp, #16
   1400c:	bd10      	pop	{r4, pc}
   1400e:	bf00      	nop
   14010:	20080000 	.word	0x20080000
   14014:	20008000 	.word	0x20008000
   14018:	0001c188 	.word	0x0001c188
   1401c:	20008370 	.word	0x20008370

00014020 <mpu_init>:
static struct dynamic_region_info dyn_reg_info[MPU_DYNAMIC_REGION_AREAS_NUM];
#if defined(CONFIG_CPU_CORTEX_M23) || defined(CONFIG_CPU_CORTEX_M33) || \
	defined(CONFIG_CPU_CORTEX_M55)
static inline void mpu_set_mair0(uint32_t mair0)
{
	MPU->MAIR0 = mair0;
   14020:	4b02      	ldr	r3, [pc, #8]	; (1402c <mpu_init+0xc>)
   14022:	4a03      	ldr	r2, [pc, #12]	; (14030 <mpu_init+0x10>)
   14024:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
{
	/* Configure the cache-ability attributes for all the
	 * different types of memory regions.
	 */
	mpu_set_mair0(MPU_MAIR_ATTRS);
}
   14028:	4770      	bx	lr
   1402a:	bf00      	nop
   1402c:	e000ed00 	.word	0xe000ed00
   14030:	0044ffaa 	.word	0x0044ffaa

00014034 <mpu_set_region>:
	MPU->RNR = rnr;
   14034:	4b03      	ldr	r3, [pc, #12]	; (14044 <mpu_set_region+0x10>)
   14036:	f8c3 0098 	str.w	r0, [r3, #152]	; 0x98
	MPU->RBAR = rbar;
   1403a:	f8c3 109c 	str.w	r1, [r3, #156]	; 0x9c
	MPU->RLAR = rlar;
   1403e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
static void mpu_set_region(uint32_t rnr, uint32_t rbar, uint32_t rlar)
{
	mpu_set_rnr(rnr);
	mpu_set_rbar(rbar);
	mpu_set_rlar(rlar);
}
   14042:	4770      	bx	lr
   14044:	e000ed00 	.word	0xe000ed00

00014048 <mpu_region_get_conf>:
	MPU->RNR = rnr;
   14048:	4b0e      	ldr	r3, [pc, #56]	; (14084 <mpu_region_get_conf+0x3c>)
   1404a:	f8c3 0098 	str.w	r0, [r3, #152]	; 0x98
   1404e:	f8c3 0098 	str.w	r0, [r3, #152]	; 0x98
	return MPU->RBAR;
   14052:	f8d3 009c 	ldr.w	r0, [r3, #156]	; 0x9c
static inline void mpu_region_get_access_attr(const uint32_t index,
	arm_mpu_region_attr_t *attr)
{
	mpu_set_rnr(index);

	attr->rbar = mpu_get_rbar() &
   14056:	7a0a      	ldrb	r2, [r1, #8]
   14058:	f360 0204 	bfi	r2, r0, #0, #5
   1405c:	720a      	strb	r2, [r1, #8]
	return MPU->RLAR;
   1405e:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
		(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk);
	attr->mair_idx = (mpu_get_rlar() & MPU_RLAR_AttrIndx_Msk) >>
   14062:	f3c2 0242 	ubfx	r2, r2, #1, #3
   14066:	7a08      	ldrb	r0, [r1, #8]
   14068:	f362 1047 	bfi	r0, r2, #5, #3
   1406c:	7208      	strb	r0, [r1, #8]
	return MPU->RBAR;
   1406e:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
	 * - Access Permissions
	 */
	mpu_region_get_access_attr(index, &region_conf->attr);

	/* Region base address */
	region_conf->base = mpu_get_rbar() & MPU_RBAR_BASE_Msk;
   14072:	f022 021f 	bic.w	r2, r2, #31
   14076:	600a      	str	r2, [r1, #0]
	return MPU->RLAR;
   14078:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0

	/* Region limit address */
	region_conf->attr.r_limit = mpu_get_rlar() & MPU_RLAR_LIMIT_Msk;
   1407c:	f023 031f 	bic.w	r3, r3, #31
   14080:	60cb      	str	r3, [r1, #12]
}
   14082:	4770      	bx	lr
   14084:	e000ed00 	.word	0xe000ed00

00014088 <mpu_configure_regions_and_partition>:
 * area, effectively, leaving no space in this area uncovered by MPU.
 */
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
   14088:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1408c:	b087      	sub	sp, #28
   1408e:	4681      	mov	r9, r0
   14090:	9100      	str	r1, [sp, #0]
   14092:	9301      	str	r3, [sp, #4]
	int i;
	int reg_index = start_reg_index;
   14094:	4614      	mov	r4, r2

	for (i = 0; i < regions_num; i++) {
   14096:	2700      	movs	r7, #0
   14098:	e034      	b.n	14104 <mpu_configure_regions_and_partition+0x7c>
		 */
		uint32_t u_reg_base = mpu_region_get_base(u_reg_index);
		uint32_t u_reg_last = mpu_region_get_last_addr(u_reg_index);
		uint32_t reg_last = regions[i].start + regions[i].size - 1;

		if ((regions[i].start == u_reg_base) &&
   1409a:	45d8      	cmp	r8, fp
   1409c:	d165      	bne.n	1416a <mpu_configure_regions_and_partition+0xe2>
			 * underlying region. In this case we simply
			 * update the partition attributes of the
			 * underlying region with those of the new
			 * region.
			 */
			mpu_configure_region(u_reg_index, &regions[i]);
   1409e:	4629      	mov	r1, r5
   140a0:	b2c0      	uxtb	r0, r0
   140a2:	f005 ff16 	bl	19ed2 <mpu_configure_region>
   140a6:	e02c      	b.n	14102 <mpu_configure_regions_and_partition+0x7a>
	MPU->RNR = rnr;
   140a8:	4a58      	ldr	r2, [pc, #352]	; (1420c <mpu_configure_regions_and_partition+0x184>)
   140aa:	f8c2 6098 	str.w	r6, [r2, #152]	; 0x98
	return MPU->RBAR;
   140ae:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
	mpu_set_rbar((mpu_get_rbar() & (~MPU_RBAR_BASE_Msk))
   140b2:	f003 031f 	and.w	r3, r3, #31
		     | (base & MPU_RBAR_BASE_Msk));
   140b6:	f021 011f 	bic.w	r1, r1, #31
   140ba:	430b      	orrs	r3, r1
	MPU->RBAR = rbar;
   140bc:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
			 */
			mpu_region_set_base(u_reg_index,
				regions[i].start + regions[i].size);

			reg_index =
				mpu_configure_region(reg_index, &regions[i]);
   140c0:	4629      	mov	r1, r5
   140c2:	b2e0      	uxtb	r0, r4
   140c4:	f005 ff05 	bl	19ed2 <mpu_configure_region>
   140c8:	4604      	mov	r4, r0

			if (reg_index == -EINVAL) {
   140ca:	f110 0f16 	cmn.w	r0, #22
   140ce:	f000 8096 	beq.w	141fe <mpu_configure_regions_and_partition+0x176>
				return reg_index;
			}

			reg_index++;
   140d2:	3401      	adds	r4, #1
   140d4:	e015      	b.n	14102 <mpu_configure_regions_and_partition+0x7a>
			 * underlying region; the end of the underlying
			 * region needs to be set to the start of the
			 * new region.
			 */
			mpu_region_set_limit(u_reg_index,
				regions[i].start - 1);
   140d6:	3b01      	subs	r3, #1
	MPU->RNR = rnr;
   140d8:	494c      	ldr	r1, [pc, #304]	; (1420c <mpu_configure_regions_and_partition+0x184>)
   140da:	f8c1 6098 	str.w	r6, [r1, #152]	; 0x98
	return MPU->RLAR;
   140de:	f8d1 20a0 	ldr.w	r2, [r1, #160]	; 0xa0
	mpu_set_rlar((mpu_get_rlar() & (~MPU_RLAR_LIMIT_Msk))
   140e2:	f002 021f 	and.w	r2, r2, #31
		     | (limit & MPU_RLAR_LIMIT_Msk));
   140e6:	f023 031f 	bic.w	r3, r3, #31
   140ea:	4313      	orrs	r3, r2
	MPU->RLAR = rlar;
   140ec:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0

			reg_index =
				mpu_configure_region(reg_index, &regions[i]);
   140f0:	4629      	mov	r1, r5
   140f2:	b2e0      	uxtb	r0, r4
   140f4:	f005 feed 	bl	19ed2 <mpu_configure_region>
   140f8:	4604      	mov	r4, r0

			if (reg_index == -EINVAL) {
   140fa:	f110 0f16 	cmn.w	r0, #22
   140fe:	d07e      	beq.n	141fe <mpu_configure_regions_and_partition+0x176>
				return reg_index;
			}

			reg_index++;
   14100:	3401      	adds	r4, #1
	for (i = 0; i < regions_num; i++) {
   14102:	3701      	adds	r7, #1
   14104:	9b00      	ldr	r3, [sp, #0]
   14106:	429f      	cmp	r7, r3
   14108:	da79      	bge.n	141fe <mpu_configure_regions_and_partition+0x176>
		if (regions[i].size == 0U) {
   1410a:	eb07 0547 	add.w	r5, r7, r7, lsl #1
   1410e:	ea4f 0a85 	mov.w	sl, r5, lsl #2
   14112:	eb09 0585 	add.w	r5, r9, r5, lsl #2
   14116:	686e      	ldr	r6, [r5, #4]
   14118:	2e00      	cmp	r6, #0
   1411a:	d0f2      	beq.n	14102 <mpu_configure_regions_and_partition+0x7a>
		if (do_sanity_check &&
   1411c:	9b01      	ldr	r3, [sp, #4]
   1411e:	b123      	cbz	r3, 1412a <mpu_configure_regions_and_partition+0xa2>
			(!mpu_partition_is_valid(&regions[i]))) {
   14120:	4628      	mov	r0, r5
   14122:	f005 feb9 	bl	19e98 <mpu_partition_is_valid>
		if (do_sanity_check &&
   14126:	2800      	cmp	r0, #0
   14128:	d065      	beq.n	141f6 <mpu_configure_regions_and_partition+0x16e>
			get_region_index(regions[i].start, regions[i].size);
   1412a:	4631      	mov	r1, r6
   1412c:	f859 000a 	ldr.w	r0, [r9, sl]
   14130:	f005 feee 	bl	19f10 <get_region_index>
   14134:	4606      	mov	r6, r0
		if ((u_reg_index == -EINVAL) ||
   14136:	f110 0f16 	cmn.w	r0, #22
   1413a:	d05f      	beq.n	141fc <mpu_configure_regions_and_partition+0x174>
   1413c:	42a0      	cmp	r0, r4
   1413e:	da62      	bge.n	14206 <mpu_configure_regions_and_partition+0x17e>
	MPU->RNR = rnr;
   14140:	4b32      	ldr	r3, [pc, #200]	; (1420c <mpu_configure_regions_and_partition+0x184>)
   14142:	f8c3 0098 	str.w	r0, [r3, #152]	; 0x98
	return MPU->RBAR;
   14146:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
	return mpu_get_rbar() & MPU_RBAR_BASE_Msk;
   1414a:	f022 021f 	bic.w	r2, r2, #31
	MPU->RNR = rnr;
   1414e:	f8c3 0098 	str.w	r0, [r3, #152]	; 0x98
	return MPU->RLAR;
   14152:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
	return (mpu_get_rlar() & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
   14156:	f043 081f 	orr.w	r8, r3, #31
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
   1415a:	f859 300a 	ldr.w	r3, [r9, sl]
   1415e:	6869      	ldr	r1, [r5, #4]
   14160:	4419      	add	r1, r3
   14162:	f101 3bff 	add.w	fp, r1, #4294967295
		if ((regions[i].start == u_reg_base) &&
   14166:	429a      	cmp	r2, r3
   14168:	d097      	beq.n	1409a <mpu_configure_regions_and_partition+0x12>
		} else if (regions[i].start == u_reg_base) {
   1416a:	429a      	cmp	r2, r3
   1416c:	d09c      	beq.n	140a8 <mpu_configure_regions_and_partition+0x20>
		} else if (reg_last == u_reg_last) {
   1416e:	45d8      	cmp	r8, fp
   14170:	d0b1      	beq.n	140d6 <mpu_configure_regions_and_partition+0x4e>
			/* The new regions lies strictly inside the
			 * underlying region, which needs to split
			 * into two regions.
			 */
			mpu_region_set_limit(u_reg_index,
				regions[i].start - 1);
   14172:	3b01      	subs	r3, #1
	MPU->RNR = rnr;
   14174:	4925      	ldr	r1, [pc, #148]	; (1420c <mpu_configure_regions_and_partition+0x184>)
   14176:	f8c1 6098 	str.w	r6, [r1, #152]	; 0x98
	return MPU->RLAR;
   1417a:	f8d1 20a0 	ldr.w	r2, [r1, #160]	; 0xa0
	mpu_set_rlar((mpu_get_rlar() & (~MPU_RLAR_LIMIT_Msk))
   1417e:	f002 021f 	and.w	r2, r2, #31
		     | (limit & MPU_RLAR_LIMIT_Msk));
   14182:	f023 031f 	bic.w	r3, r3, #31
   14186:	4313      	orrs	r3, r2
	MPU->RLAR = rlar;
   14188:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0

			reg_index =
				mpu_configure_region(reg_index, &regions[i]);
   1418c:	4629      	mov	r1, r5
   1418e:	b2e0      	uxtb	r0, r4
   14190:	f005 fe9f 	bl	19ed2 <mpu_configure_region>
   14194:	4604      	mov	r4, r0

			if (reg_index == -EINVAL) {
   14196:	f110 0f16 	cmn.w	r0, #22
   1419a:	d030      	beq.n	141fe <mpu_configure_regions_and_partition+0x176>
				return reg_index;
			}
			reg_index++;
   1419c:	3001      	adds	r0, #1
	MPU->RNR = rnr;
   1419e:	4b1b      	ldr	r3, [pc, #108]	; (1420c <mpu_configure_regions_and_partition+0x184>)
   141a0:	f8c3 6098 	str.w	r6, [r3, #152]	; 0x98
	return MPU->RBAR;
   141a4:	f8d3 109c 	ldr.w	r1, [r3, #156]	; 0x9c
	attr->rbar = mpu_get_rbar() &
   141a8:	f89d 2010 	ldrb.w	r2, [sp, #16]
   141ac:	f361 0204 	bfi	r2, r1, #0, #5
   141b0:	f88d 2010 	strb.w	r2, [sp, #16]
	return MPU->RLAR;
   141b4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
	attr->mair_idx = (mpu_get_rlar() & MPU_RLAR_AttrIndx_Msk) >>
   141b8:	f3c3 0342 	ubfx	r3, r3, #1, #3
   141bc:	b2d2      	uxtb	r2, r2
   141be:	f363 1247 	bfi	r2, r3, #5, #3
   141c2:	f88d 2010 	strb.w	r2, [sp, #16]
			 */
			struct arm_mpu_region fill_region;

			mpu_region_get_access_attr(u_reg_index,
				&fill_region.attr);
			fill_region.base = regions[i].start +
   141c6:	f859 300a 	ldr.w	r3, [r9, sl]
				regions[i].size;
   141ca:	686a      	ldr	r2, [r5, #4]
			fill_region.base = regions[i].start +
   141cc:	4413      	add	r3, r2
   141ce:	9302      	str	r3, [sp, #8]
			fill_region.attr.r_limit =
			REGION_LIMIT_ADDR((regions[i].start +
   141d0:	f023 031f 	bic.w	r3, r3, #31
   141d4:	eba8 080b 	sub.w	r8, r8, fp
   141d8:	4443      	add	r3, r8
   141da:	3b01      	subs	r3, #1
   141dc:	f023 031f 	bic.w	r3, r3, #31
			fill_region.attr.r_limit =
   141e0:	9305      	str	r3, [sp, #20]
				regions[i].size), (u_reg_last - reg_last));

			reg_index =
				region_allocate_and_init(reg_index,
   141e2:	a902      	add	r1, sp, #8
   141e4:	b2c0      	uxtb	r0, r0
   141e6:	f005 fe69 	bl	19ebc <region_allocate_and_init>
   141ea:	4604      	mov	r4, r0
					(const struct arm_mpu_region *)
						&fill_region);

			if (reg_index == -EINVAL) {
   141ec:	f110 0f16 	cmn.w	r0, #22
   141f0:	d005      	beq.n	141fe <mpu_configure_regions_and_partition+0x176>
				return reg_index;
			}

			reg_index++;
   141f2:	3401      	adds	r4, #1
   141f4:	e785      	b.n	14102 <mpu_configure_regions_and_partition+0x7a>
			return -EINVAL;
   141f6:	f06f 0415 	mvn.w	r4, #21
   141fa:	e000      	b.n	141fe <mpu_configure_regions_and_partition+0x176>
			return -EINVAL;
   141fc:	4604      	mov	r4, r0
		}
	}

	return reg_index;
}
   141fe:	4620      	mov	r0, r4
   14200:	b007      	add	sp, #28
   14202:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			return -EINVAL;
   14206:	f06f 0415 	mvn.w	r4, #21
   1420a:	e7f8      	b.n	141fe <mpu_configure_regions_and_partition+0x176>
   1420c:	e000ed00 	.word	0xe000ed00

00014210 <mpu_configure_static_mpu_regions>:
 */
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
   14210:	b510      	push	{r4, lr}
	int mpu_reg_index = static_regions_num;
   14212:	4c03      	ldr	r4, [pc, #12]	; (14220 <mpu_configure_static_mpu_regions+0x10>)
	 * given boundaries.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions_and_partition(static_regions,
   14214:	2301      	movs	r3, #1
   14216:	7822      	ldrb	r2, [r4, #0]
   14218:	f7ff ff36 	bl	14088 <mpu_configure_regions_and_partition>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
   1421c:	7020      	strb	r0, [r4, #0]

	return mpu_reg_index;
}
   1421e:	bd10      	pop	{r4, pc}
   14220:	200086a2 	.word	0x200086a2

00014224 <mpu_mark_areas_for_dynamic_regions>:
 * -EINVAL on error.
 */
static int mpu_mark_areas_for_dynamic_regions(
		const struct z_arm_mpu_partition dyn_region_areas[],
		const uint8_t dyn_region_areas_num)
{
   14224:	b570      	push	{r4, r5, r6, lr}
   14226:	4605      	mov	r5, r0
   14228:	460e      	mov	r6, r1
	/* In ARMv8-M architecture we need to store the index values
	 * and the default configuration of the MPU regions, inside
	 * which dynamic memory regions may be programmed at run-time.
	 */
	for (int i = 0; i < dyn_region_areas_num; i++) {
   1422a:	2400      	movs	r4, #0
   1422c:	e000      	b.n	14230 <mpu_mark_areas_for_dynamic_regions+0xc>
   1422e:	3401      	adds	r4, #1
   14230:	42a6      	cmp	r6, r4
   14232:	dd1e      	ble.n	14272 <mpu_mark_areas_for_dynamic_regions+0x4e>
		if (dyn_region_areas[i].size == 0U) {
   14234:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   14238:	009a      	lsls	r2, r3, #2
   1423a:	eb05 0383 	add.w	r3, r5, r3, lsl #2
   1423e:	6859      	ldr	r1, [r3, #4]
   14240:	2900      	cmp	r1, #0
   14242:	d0f4      	beq.n	1422e <mpu_mark_areas_for_dynamic_regions+0xa>
		}
		/* Non-empty area */

		/* Retrieve HW MPU region index */
		dyn_reg_info[i].index =
			get_region_index(dyn_region_areas[i].start,
   14244:	58a8      	ldr	r0, [r5, r2]
   14246:	f005 fe63 	bl	19f10 <get_region_index>
		dyn_reg_info[i].index =
   1424a:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   1424e:	4a0b      	ldr	r2, [pc, #44]	; (1427c <mpu_mark_areas_for_dynamic_regions+0x58>)
   14250:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
					dyn_region_areas[i].size);

		if (dyn_reg_info[i].index == -EINVAL) {
   14254:	f110 0f16 	cmn.w	r0, #22
   14258:	d00c      	beq.n	14274 <mpu_mark_areas_for_dynamic_regions+0x50>

			return -EINVAL;
		}

		if (dyn_reg_info[i].index >= static_regions_num) {
   1425a:	4b09      	ldr	r3, [pc, #36]	; (14280 <mpu_mark_areas_for_dynamic_regions+0x5c>)
   1425c:	781b      	ldrb	r3, [r3, #0]
   1425e:	4298      	cmp	r0, r3
   14260:	da09      	bge.n	14276 <mpu_mark_areas_for_dynamic_regions+0x52>

			return -EINVAL;
		}

		/* Store default configuration */
		mpu_region_get_conf(dyn_reg_info[i].index,
   14262:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   14266:	eb02 0183 	add.w	r1, r2, r3, lsl #2
   1426a:	3104      	adds	r1, #4
   1426c:	f7ff feec 	bl	14048 <mpu_region_get_conf>
   14270:	e7dd      	b.n	1422e <mpu_mark_areas_for_dynamic_regions+0xa>
			&dyn_reg_info[i].region_conf);
	}

	return 0;
   14272:	2000      	movs	r0, #0
}
   14274:	bd70      	pop	{r4, r5, r6, pc}
			return -EINVAL;
   14276:	f06f 0015 	mvn.w	r0, #21
   1427a:	e7fb      	b.n	14274 <mpu_mark_areas_for_dynamic_regions+0x50>
   1427c:	2000851c 	.word	0x2000851c
   14280:	200086a2 	.word	0x200086a2

00014284 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
   14284:	4b04      	ldr	r3, [pc, #16]	; (14298 <arm_core_mpu_enable+0x14>)
   14286:	2205      	movs	r2, #5
   14288:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
   1428c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   14290:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
   14294:	4770      	bx	lr
   14296:	bf00      	nop
   14298:	e000ed00 	.word	0xe000ed00

0001429c <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
   1429c:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
   142a0:	4b02      	ldr	r3, [pc, #8]	; (142ac <arm_core_mpu_disable+0x10>)
   142a2:	2200      	movs	r2, #0
   142a4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
   142a8:	4770      	bx	lr
   142aa:	bf00      	nop
   142ac:	e000ed00 	.word	0xe000ed00

000142b0 <z_arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
int z_arm_mpu_init(void)
{
   142b0:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
   142b2:	4b0e      	ldr	r3, [pc, #56]	; (142ec <z_arm_mpu_init+0x3c>)
   142b4:	681d      	ldr	r5, [r3, #0]
   142b6:	2d08      	cmp	r5, #8
   142b8:	d815      	bhi.n	142e6 <z_arm_mpu_init+0x36>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
   142ba:	f7ff ffef 	bl	1429c <arm_core_mpu_disable>
	}
#endif
#endif /* CONFIG_NOCACHE_MEMORY */

	/* Architecture-specific configuration */
	mpu_init();
   142be:	f7ff feaf 	bl	14020 <mpu_init>

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   142c2:	2400      	movs	r4, #0
   142c4:	e007      	b.n	142d6 <z_arm_mpu_init+0x26>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
   142c6:	4b09      	ldr	r3, [pc, #36]	; (142ec <z_arm_mpu_init+0x3c>)
   142c8:	6859      	ldr	r1, [r3, #4]
   142ca:	eb01 1104 	add.w	r1, r1, r4, lsl #4
   142ce:	4620      	mov	r0, r4
   142d0:	f005 fdce 	bl	19e70 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   142d4:	3401      	adds	r4, #1
   142d6:	42a5      	cmp	r5, r4
   142d8:	d8f5      	bhi.n	142c6 <z_arm_mpu_init+0x16>
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
   142da:	4b05      	ldr	r3, [pc, #20]	; (142f0 <z_arm_mpu_init+0x40>)
   142dc:	701d      	strb	r5, [r3, #0]


	arm_core_mpu_enable();
   142de:	f7ff ffd1 	bl	14284 <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
   142e2:	2000      	movs	r0, #0
}
   142e4:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
   142e6:	f04f 30ff 	mov.w	r0, #4294967295
   142ea:	e7fb      	b.n	142e4 <z_arm_mpu_init+0x34>
   142ec:	0001c19c 	.word	0x0001c19c
   142f0:	200086a2 	.word	0x200086a2

000142f4 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
   142f4:	4b01      	ldr	r3, [pc, #4]	; (142fc <__stdout_hook_install+0x8>)
   142f6:	6018      	str	r0, [r3, #0]
}
   142f8:	4770      	bx	lr
   142fa:	bf00      	nop
   142fc:	2000806c 	.word	0x2000806c

00014300 <z_impl_zephyr_read_stdin>:
{
	_stdin_hook = hook;
}

int z_impl_zephyr_read_stdin(char *buf, int nbytes)
{
   14300:	b570      	push	{r4, r5, r6, lr}
   14302:	4606      	mov	r6, r0
   14304:	460d      	mov	r5, r1
	int i = 0;

	for (i = 0; i < nbytes; i++) {
   14306:	2400      	movs	r4, #0
   14308:	e000      	b.n	1430c <z_impl_zephyr_read_stdin+0xc>
   1430a:	3401      	adds	r4, #1
   1430c:	42ac      	cmp	r4, r5
   1430e:	da08      	bge.n	14322 <z_impl_zephyr_read_stdin+0x22>
		*(buf + i) = _stdin_hook();
   14310:	4b05      	ldr	r3, [pc, #20]	; (14328 <z_impl_zephyr_read_stdin+0x28>)
   14312:	681b      	ldr	r3, [r3, #0]
   14314:	4798      	blx	r3
   14316:	5530      	strb	r0, [r6, r4]
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
   14318:	280a      	cmp	r0, #10
   1431a:	d001      	beq.n	14320 <z_impl_zephyr_read_stdin+0x20>
   1431c:	280d      	cmp	r0, #13
   1431e:	d1f4      	bne.n	1430a <z_impl_zephyr_read_stdin+0xa>
			i++;
   14320:	3401      	adds	r4, #1
			break;
		}
	}
	return i;
}
   14322:	4620      	mov	r0, r4
   14324:	bd70      	pop	{r4, r5, r6, pc}
   14326:	bf00      	nop
   14328:	20008068 	.word	0x20008068

0001432c <z_impl_zephyr_write_stdout>:
}
#include <syscalls/zephyr_read_stdin_mrsh.c>
#endif

int z_impl_zephyr_write_stdout(const void *buffer, int nbytes)
{
   1432c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1432e:	4605      	mov	r5, r0
   14330:	460f      	mov	r7, r1
	const char *buf = buffer;
	int i;

	for (i = 0; i < nbytes; i++) {
   14332:	2400      	movs	r4, #0
   14334:	e004      	b.n	14340 <z_impl_zephyr_write_stdout+0x14>
		if (*(buf + i) == '\n') {
			_stdout_hook('\r');
		}
		_stdout_hook(*(buf + i));
   14336:	4b09      	ldr	r3, [pc, #36]	; (1435c <z_impl_zephyr_write_stdout+0x30>)
   14338:	681b      	ldr	r3, [r3, #0]
   1433a:	7830      	ldrb	r0, [r6, #0]
   1433c:	4798      	blx	r3
	for (i = 0; i < nbytes; i++) {
   1433e:	3401      	adds	r4, #1
   14340:	42bc      	cmp	r4, r7
   14342:	da08      	bge.n	14356 <z_impl_zephyr_write_stdout+0x2a>
		if (*(buf + i) == '\n') {
   14344:	192e      	adds	r6, r5, r4
   14346:	5d2b      	ldrb	r3, [r5, r4]
   14348:	2b0a      	cmp	r3, #10
   1434a:	d1f4      	bne.n	14336 <z_impl_zephyr_write_stdout+0xa>
			_stdout_hook('\r');
   1434c:	4b03      	ldr	r3, [pc, #12]	; (1435c <z_impl_zephyr_write_stdout+0x30>)
   1434e:	681b      	ldr	r3, [r3, #0]
   14350:	200d      	movs	r0, #13
   14352:	4798      	blx	r3
   14354:	e7ef      	b.n	14336 <z_impl_zephyr_write_stdout+0xa>
	}
	return nbytes;
}
   14356:	4638      	mov	r0, r7
   14358:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1435a:	bf00      	nop
   1435c:	2000806c 	.word	0x2000806c

00014360 <_exit>:
	return 0;
}
__weak FUNC_ALIAS(_fstat, fstat, int);

__weak void _exit(int status)
{
   14360:	b508      	push	{r3, lr}
	_write(1, "exit\n", 5);
   14362:	2205      	movs	r2, #5
   14364:	4902      	ldr	r1, [pc, #8]	; (14370 <_exit+0x10>)
   14366:	2001      	movs	r0, #1
   14368:	f005 fdf8 	bl	19f5c <_write>
	while (1) {
   1436c:	e7fe      	b.n	1436c <_exit+0xc>
   1436e:	bf00      	nop
   14370:	0001c194 	.word	0x0001c194

00014374 <_sbrk>:
		;
	}
}

void *_sbrk(intptr_t count)
{
   14374:	4602      	mov	r2, r0
	void *ret, *ptr;

	ptr = ((char *)HEAP_BASE) + heap_sz;
   14376:	4b08      	ldr	r3, [pc, #32]	; (14398 <_sbrk+0x24>)
   14378:	6819      	ldr	r1, [r3, #0]
   1437a:	4b08      	ldr	r3, [pc, #32]	; (1439c <_sbrk+0x28>)
   1437c:	18c8      	adds	r0, r1, r3

	if ((heap_sz + count) < MAX_HEAP_SIZE) {
   1437e:	440a      	add	r2, r1
   14380:	f1c3 5300 	rsb	r3, r3, #536870912	; 0x20000000
   14384:	f503 23e0 	add.w	r3, r3, #458752	; 0x70000
   14388:	429a      	cmp	r2, r3
   1438a:	d202      	bcs.n	14392 <_sbrk+0x1e>
		heap_sz += count;
   1438c:	4b02      	ldr	r3, [pc, #8]	; (14398 <_sbrk+0x24>)
   1438e:	601a      	str	r2, [r3, #0]
		ret = ptr;
   14390:	4770      	bx	lr

#ifdef CONFIG_NEWLIB_LIBC_HEAP_LISTENER
		heap_listener_notify_resize(HEAP_ID_LIBC, ptr, (char *)ptr + count);
#endif
	} else {
		ret = (void *)-1;
   14392:	f04f 30ff 	mov.w	r0, #4294967295
	}

	return ret;
}
   14396:	4770      	bx	lr
   14398:	20008530 	.word	0x20008530
   1439c:	200093e8 	.word	0x200093e8

000143a0 <get_hf_flags>:
static uint32_t *get_hf_flags(void)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;

	return &data->subsys[CLOCK_CONTROL_NRF_TYPE_HFCLK].flags;
}
   143a0:	4800      	ldr	r0, [pc, #0]	; (143a4 <get_hf_flags+0x4>)
   143a2:	4770      	bx	lr
   143a4:	200085c0 	.word	0x200085c0

000143a8 <get_subsys>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
   143a8:	4b03      	ldr	r3, [pc, #12]	; (143b8 <get_subsys+0x10>)
   143aa:	1ac0      	subs	r0, r0, r3
   143ac:	1080      	asrs	r0, r0, #2

	return (clock_control_subsys_t)offset;
}
   143ae:	4b03      	ldr	r3, [pc, #12]	; (143bc <get_subsys+0x14>)
   143b0:	fb03 f000 	mul.w	r0, r3, r0
   143b4:	4770      	bx	lr
   143b6:	bf00      	nop
   143b8:	20008548 	.word	0x20008548
   143bc:	b6db6db7 	.word	0xb6db6db7

000143c0 <onoff_stop>:

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   143c0:	b538      	push	{r3, r4, r5, lr}
   143c2:	4605      	mov	r5, r0
   143c4:	460c      	mov	r4, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   143c6:	f7ff ffef 	bl	143a8 <get_subsys>
   143ca:	4601      	mov	r1, r0
   143cc:	2240      	movs	r2, #64	; 0x40
   143ce:	4803      	ldr	r0, [pc, #12]	; (143dc <onoff_stop+0x1c>)
   143d0:	f005 fea5 	bl	1a11e <stop>
   143d4:	4601      	mov	r1, r0
	notify(mgr, res);
   143d6:	4628      	mov	r0, r5
   143d8:	47a0      	blx	r4
}
   143da:	bd38      	pop	{r3, r4, r5, pc}
   143dc:	0001b7d4 	.word	0x0001b7d4

000143e0 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   143e0:	b530      	push	{r4, r5, lr}
   143e2:	b083      	sub	sp, #12
   143e4:	4605      	mov	r5, r0
   143e6:	460c      	mov	r4, r1
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   143e8:	f7ff ffde 	bl	143a8 <get_subsys>
   143ec:	4601      	mov	r1, r0
   143ee:	2340      	movs	r3, #64	; 0x40
   143f0:	9300      	str	r3, [sp, #0]
   143f2:	4623      	mov	r3, r4
   143f4:	4a05      	ldr	r2, [pc, #20]	; (1440c <onoff_start+0x2c>)
   143f6:	4806      	ldr	r0, [pc, #24]	; (14410 <onoff_start+0x30>)
   143f8:	f005 feab 	bl	1a152 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
   143fc:	1e01      	subs	r1, r0, #0
   143fe:	db01      	blt.n	14404 <onoff_start+0x24>
		notify(mgr, err);
	}
}
   14400:	b003      	add	sp, #12
   14402:	bd30      	pop	{r4, r5, pc}
		notify(mgr, err);
   14404:	4628      	mov	r0, r5
   14406:	47a0      	blx	r4
}
   14408:	e7fa      	b.n	14400 <onoff_start+0x20>
   1440a:	bf00      	nop
   1440c:	0001a19b 	.word	0x0001a19b
   14410:	0001b7d4 	.word	0x0001b7d4

00014414 <clock_event_handler>:
		__ASSERT_NO_MSG(false);
	}
}

static void clock_event_handler(nrfx_clock_evt_type_t event)
{
   14414:	b508      	push	{r3, lr}
	const struct device *dev = CLOCK_DEVICE;

	switch (event) {
   14416:	2805      	cmp	r0, #5
   14418:	d815      	bhi.n	14446 <clock_event_handler+0x32>
   1441a:	e8df f000 	tbb	[pc, r0]
   1441e:	1a03      	.short	0x1a03
   14420:	10151414 	.word	0x10151414
	case NRFX_CLOCK_EVT_HFCLK_STARTED:
	{
		struct nrf_clock_control_sub_data *data =
				get_sub_data(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
   14424:	2100      	movs	r1, #0
   14426:	480d      	ldr	r0, [pc, #52]	; (1445c <clock_event_handler+0x48>)
   14428:	f005 fe04 	bl	1a034 <get_sub_data>

		/* Check needed due to anomaly 201:
		 * HFCLKSTARTED may be generated twice.
		 */
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
   1442c:	6883      	ldr	r3, [r0, #8]
   1442e:	f013 0f07 	tst.w	r3, #7
   14432:	d108      	bne.n	14446 <clock_event_handler+0x32>
			clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
   14434:	2100      	movs	r1, #0
   14436:	4809      	ldr	r0, [pc, #36]	; (1445c <clock_event_handler+0x48>)
   14438:	f005 fe5f 	bl	1a0fa <clkstarted_handle>
   1443c:	e003      	b.n	14446 <clock_event_handler+0x32>

		break;
	}
#if NRF_CLOCK_HAS_HFCLK192M
	case NRFX_CLOCK_EVT_HFCLK192M_STARTED:
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK192M);
   1443e:	2102      	movs	r1, #2
   14440:	4806      	ldr	r0, [pc, #24]	; (1445c <clock_event_handler+0x48>)
   14442:	f005 fe5a 	bl	1a0fa <clkstarted_handle>
		break;
	default:
		__ASSERT_NO_MSG(0);
		break;
	}
}
   14446:	bd08      	pop	{r3, pc}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLKAUDIO);
   14448:	2103      	movs	r1, #3
   1444a:	4804      	ldr	r0, [pc, #16]	; (1445c <clock_event_handler+0x48>)
   1444c:	f005 fe55 	bl	1a0fa <clkstarted_handle>
		break;
   14450:	e7f9      	b.n	14446 <clock_event_handler+0x32>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   14452:	2101      	movs	r1, #1
   14454:	4801      	ldr	r0, [pc, #4]	; (1445c <clock_event_handler+0x48>)
   14456:	f005 fe50 	bl	1a0fa <clkstarted_handle>
}
   1445a:	e7f4      	b.n	14446 <clock_event_handler+0x32>
   1445c:	0001b7d4 	.word	0x0001b7d4

00014460 <generic_hfclk_start>:
{
   14460:	b510      	push	{r4, lr}
   14462:	b082      	sub	sp, #8
	__asm__ volatile(
   14464:	f04f 0320 	mov.w	r3, #32
   14468:	f3ef 8411 	mrs	r4, BASEPRI
   1446c:	f383 8812 	msr	BASEPRI_MAX, r3
   14470:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
   14474:	4a14      	ldr	r2, [pc, #80]	; (144c8 <generic_hfclk_start+0x68>)
   14476:	6813      	ldr	r3, [r2, #0]
   14478:	f043 0102 	orr.w	r1, r3, #2
   1447c:	6011      	str	r1, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
   1447e:	f013 0f01 	tst.w	r3, #1
   14482:	d109      	bne.n	14498 <generic_hfclk_start+0x38>
	bool already_started = false;
   14484:	2300      	movs	r3, #0
	__asm__ volatile(
   14486:	f384 8811 	msr	BASEPRI, r4
   1448a:	f3bf 8f6f 	isb	sy
	if (already_started) {
   1448e:	b9ab      	cbnz	r3, 144bc <generic_hfclk_start+0x5c>
	hfclk_start();
   14490:	f005 fe8b 	bl	1a1aa <hfclk_start>
}
   14494:	b002      	add	sp, #8
   14496:	bd10      	pop	{r4, pc}
    return nrf_clock_event_address_get(NRF_CLOCK, event);
}

NRFX_STATIC_INLINE bool nrfx_clock_is_running(nrf_clock_domain_t domain, void * p_clk_src)
{
    return nrf_clock_is_running(NRF_CLOCK, domain, p_clk_src);
   14498:	f10d 0207 	add.w	r2, sp, #7
   1449c:	2101      	movs	r1, #1
   1449e:	480b      	ldr	r0, [pc, #44]	; (144cc <generic_hfclk_start+0x6c>)
   144a0:	f005 fd8e 	bl	19fc0 <nrf_clock_is_running>
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
   144a4:	f89d 3007 	ldrb.w	r3, [sp, #7]
   144a8:	2b01      	cmp	r3, #1
   144aa:	d001      	beq.n	144b0 <generic_hfclk_start+0x50>
	bool already_started = false;
   144ac:	2300      	movs	r3, #0
   144ae:	e7ea      	b.n	14486 <generic_hfclk_start+0x26>
			set_on_state(get_hf_flags());
   144b0:	f7ff ff76 	bl	143a0 <get_hf_flags>
   144b4:	f005 fe0e 	bl	1a0d4 <set_on_state>
			already_started = true;
   144b8:	2301      	movs	r3, #1
   144ba:	e7e4      	b.n	14486 <generic_hfclk_start+0x26>
		clkstarted_handle(CLOCK_DEVICE,
   144bc:	2100      	movs	r1, #0
   144be:	4804      	ldr	r0, [pc, #16]	; (144d0 <generic_hfclk_start+0x70>)
   144c0:	f005 fe1b 	bl	1a0fa <clkstarted_handle>
		return;
   144c4:	e7e6      	b.n	14494 <generic_hfclk_start+0x34>
   144c6:	bf00      	nop
   144c8:	200085e8 	.word	0x200085e8
   144cc:	40005000 	.word	0x40005000
   144d0:	0001b7d4 	.word	0x0001b7d4

000144d4 <generic_hfclk_stop>:
{
   144d4:	b508      	push	{r3, lr}
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   144d6:	4b08      	ldr	r3, [pc, #32]	; (144f8 <generic_hfclk_stop+0x24>)
   144d8:	e8d3 2fef 	ldaex	r2, [r3]
   144dc:	f022 0102 	bic.w	r1, r2, #2
   144e0:	e8c3 1fe0 	stlex	r0, r1, [r3]
   144e4:	2800      	cmp	r0, #0
   144e6:	d1f7      	bne.n	144d8 <generic_hfclk_stop+0x4>
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
   144e8:	f012 0f01 	tst.w	r2, #1
   144ec:	d000      	beq.n	144f0 <generic_hfclk_stop+0x1c>
}
   144ee:	bd08      	pop	{r3, pc}
	hfclk_stop();
   144f0:	f005 fe6f 	bl	1a1d2 <hfclk_stop>
   144f4:	e7fb      	b.n	144ee <generic_hfclk_stop+0x1a>
   144f6:	bf00      	nop
   144f8:	200085e8 	.word	0x200085e8

000144fc <lfclk_spinwait>:
{
   144fc:	b570      	push	{r4, r5, r6, lr}
   144fe:	b082      	sub	sp, #8
   14500:	4605      	mov	r5, r0
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
   14502:	2801      	cmp	r0, #1
   14504:	d106      	bne.n	14514 <lfclk_spinwait+0x18>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   14506:	4b2e      	ldr	r3, [pc, #184]	; (145c0 <lfclk_spinwait+0xc4>)
   14508:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
   1450c:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
   14510:	2b02      	cmp	r3, #2
   14512:	d034      	beq.n	1457e <lfclk_spinwait+0x82>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   14514:	f006 fb96 	bl	1ac44 <k_is_in_isr>
   14518:	4604      	mov	r4, r0
   1451a:	b910      	cbnz	r0, 14522 <lfclk_spinwait+0x26>
 */
static inline bool k_is_pre_kernel(void)
{
	extern bool z_sys_post_kernel; /* in init.c */

	return !z_sys_post_kernel;
   1451c:	4b29      	ldr	r3, [pc, #164]	; (145c4 <lfclk_spinwait+0xc8>)
   1451e:	781b      	ldrb	r3, [r3, #0]
   14520:	b973      	cbnz	r3, 14540 <lfclk_spinwait+0x44>
	__asm__ volatile(
   14522:	f04f 0320 	mov.w	r3, #32
   14526:	f3ef 8611 	mrs	r6, BASEPRI
   1452a:	f383 8812 	msr	BASEPRI_MAX, r3
   1452e:	f3bf 8f6f 	isb	sy
   14532:	2401      	movs	r4, #1
	if (!isr_mode) {
   14534:	b984      	cbnz	r4, 14558 <lfclk_spinwait+0x5c>
    p_reg->INTENCLR = mask;
   14536:	4b22      	ldr	r3, [pc, #136]	; (145c0 <lfclk_spinwait+0xc4>)
   14538:	2202      	movs	r2, #2
   1453a:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   1453e:	e00b      	b.n	14558 <lfclk_spinwait+0x5c>
	int key = isr_mode ? irq_lock() : 0;
   14540:	2600      	movs	r6, #0
   14542:	e7f7      	b.n	14534 <lfclk_spinwait+0x38>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
   14544:	b1ec      	cbz	r4, 14582 <lfclk_spinwait+0x86>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
   14546:	4630      	mov	r0, r6
   14548:	f7ff fa50 	bl	139ec <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
   1454c:	4b1c      	ldr	r3, [pc, #112]	; (145c0 <lfclk_spinwait+0xc4>)
   1454e:	f8d3 3518 	ldr.w	r3, [r3, #1304]	; 0x518
   14552:	b2db      	uxtb	r3, r3
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
   14554:	2b01      	cmp	r3, #1
   14556:	d018      	beq.n	1458a <lfclk_spinwait+0x8e>
   14558:	f10d 0207 	add.w	r2, sp, #7
   1455c:	2100      	movs	r1, #0
   1455e:	4818      	ldr	r0, [pc, #96]	; (145c0 <lfclk_spinwait+0xc4>)
   14560:	f005 fd2e 	bl	19fc0 <nrf_clock_is_running>
	while (!(nrfx_clock_is_running(d, (void *)&type)
   14564:	2800      	cmp	r0, #0
   14566:	d0ed      	beq.n	14544 <lfclk_spinwait+0x48>
		 && ((type == target_type)
   14568:	f89d 3007 	ldrb.w	r3, [sp, #7]
	while (!(nrfx_clock_is_running(d, (void *)&type)
   1456c:	2b02      	cmp	r3, #2
   1456e:	d001      	beq.n	14574 <lfclk_spinwait+0x78>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
   14570:	2d01      	cmp	r5, #1
   14572:	d1e7      	bne.n	14544 <lfclk_spinwait+0x48>
	if (isr_mode) {
   14574:	b1f4      	cbz	r4, 145b4 <lfclk_spinwait+0xb8>
	__asm__ volatile(
   14576:	f386 8811 	msr	BASEPRI, r6
   1457a:	f3bf 8f6f 	isb	sy
}
   1457e:	b002      	add	sp, #8
   14580:	bd70      	pop	{r4, r5, r6, pc}
				k_msleep(1);
   14582:	2001      	movs	r0, #1
   14584:	f005 fe39 	bl	1a1fa <k_msleep>
   14588:	e7e0      	b.n	1454c <lfclk_spinwait+0x50>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   1458a:	4b0d      	ldr	r3, [pc, #52]	; (145c0 <lfclk_spinwait+0xc4>)
   1458c:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
   14590:	2b00      	cmp	r3, #0
   14592:	d0e1      	beq.n	14558 <lfclk_spinwait+0x5c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   14594:	4b0a      	ldr	r3, [pc, #40]	; (145c0 <lfclk_spinwait+0xc4>)
   14596:	2200      	movs	r2, #0
   14598:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
   1459c:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
   145a0:	2202      	movs	r2, #2
   145a2:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   145a6:	4a08      	ldr	r2, [pc, #32]	; (145c8 <lfclk_spinwait+0xcc>)
   145a8:	2120      	movs	r1, #32
   145aa:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   145ae:	2201      	movs	r2, #1
   145b0:	609a      	str	r2, [r3, #8]
}
   145b2:	e7d1      	b.n	14558 <lfclk_spinwait+0x5c>
    p_reg->INTENSET = mask;
   145b4:	4b02      	ldr	r3, [pc, #8]	; (145c0 <lfclk_spinwait+0xc4>)
   145b6:	2202      	movs	r2, #2
   145b8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   145bc:	e7df      	b.n	1457e <lfclk_spinwait+0x82>
   145be:	bf00      	nop
   145c0:	40005000 	.word	0x40005000
   145c4:	200086a5 	.word	0x200086a5
   145c8:	e000e100 	.word	0xe000e100

000145cc <api_blocking_start>:
{
   145cc:	b500      	push	{lr}
   145ce:	b085      	sub	sp, #20
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   145d0:	f8cd d000 	str.w	sp, [sp]
   145d4:	f8cd d004 	str.w	sp, [sp, #4]
   145d8:	2300      	movs	r3, #0
   145da:	9302      	str	r3, [sp, #8]
   145dc:	2301      	movs	r3, #1
   145de:	9303      	str	r3, [sp, #12]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   145e0:	466b      	mov	r3, sp
   145e2:	4a07      	ldr	r2, [pc, #28]	; (14600 <api_blocking_start+0x34>)
   145e4:	f005 fdd1 	bl	1a18a <api_start>
	if (err < 0) {
   145e8:	2800      	cmp	r0, #0
   145ea:	db05      	blt.n	145f8 <api_blocking_start+0x2c>
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm1 = { .val = timeout };
		return (int) arch_syscall_invoke3(parm0.x, parm1.split.lo, parm1.split.hi, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
   145ec:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   145f0:	2300      	movs	r3, #0
   145f2:	4668      	mov	r0, sp
   145f4:	f002 fc7e 	bl	16ef4 <z_impl_k_sem_take>
}
   145f8:	b005      	add	sp, #20
   145fa:	f85d fb04 	ldr.w	pc, [sp], #4
   145fe:	bf00      	nop
   14600:	0001a227 	.word	0x0001a227

00014604 <clk_init>:
#endif /* NRF_CLOCK_HAS_HFCLKAUDIO */
#endif
}

static int clk_init(const struct device *dev)
{
   14604:	b570      	push	{r4, r5, r6, lr}
   14606:	4606      	mov	r6, r0
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   14608:	2200      	movs	r2, #0
   1460a:	2101      	movs	r1, #1
   1460c:	2005      	movs	r0, #5
   1460e:	f005 fbb9 	bl	19d84 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
   14612:	4811      	ldr	r0, [pc, #68]	; (14658 <clk_init+0x54>)
   14614:	f001 f8b0 	bl	15778 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
   14618:	4b10      	ldr	r3, [pc, #64]	; (1465c <clk_init+0x58>)
   1461a:	4298      	cmp	r0, r3
   1461c:	d119      	bne.n	14652 <clk_init+0x4e>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
   1461e:	f001 f8bd 	bl	1579c <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
   14622:	2400      	movs	r4, #0
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
   14624:	2c03      	cmp	r4, #3
   14626:	d812      	bhi.n	1464e <clk_init+0x4a>
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);
   14628:	4621      	mov	r1, r4
   1462a:	4630      	mov	r0, r6
   1462c:	f005 fd02 	bl	1a034 <get_sub_data>
   14630:	4605      	mov	r5, r0

		err = onoff_manager_init(get_onoff_manager(dev, i),
   14632:	4621      	mov	r1, r4
   14634:	4630      	mov	r0, r6
   14636:	f005 fd08 	bl	1a04a <get_onoff_manager>
   1463a:	4909      	ldr	r1, [pc, #36]	; (14660 <clk_init+0x5c>)
   1463c:	f005 f8cb 	bl	197d6 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
   14640:	2800      	cmp	r0, #0
   14642:	db05      	blt.n	14650 <clk_init+0x4c>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   14644:	2301      	movs	r3, #1
   14646:	60ab      	str	r3, [r5, #8]
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
   14648:	441c      	add	r4, r3
   1464a:	b2e4      	uxtb	r4, r4
   1464c:	e7ea      	b.n	14624 <clk_init+0x20>
	}

	return 0;
   1464e:	2000      	movs	r0, #0
}
   14650:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
   14652:	f06f 0004 	mvn.w	r0, #4
   14656:	e7fb      	b.n	14650 <clk_init+0x4c>
   14658:	00014415 	.word	0x00014415
   1465c:	0bad0000 	.word	0x0bad0000
   14660:	0001c1d4 	.word	0x0001c1d4

00014664 <z_nrf_clock_control_lf_on>:
{
   14664:	b510      	push	{r4, lr}
   14666:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   14668:	4b0e      	ldr	r3, [pc, #56]	; (146a4 <z_nrf_clock_control_lf_on+0x40>)
   1466a:	2101      	movs	r1, #1
   1466c:	e8d3 2fef 	ldaex	r2, [r3]
   14670:	e8c3 1fe0 	stlex	r0, r1, [r3]
   14674:	2800      	cmp	r0, #0
   14676:	d1f9      	bne.n	1466c <z_nrf_clock_control_lf_on+0x8>
	if (atomic_set(&on, 1) == 0) {
   14678:	b11a      	cbz	r2, 14682 <z_nrf_clock_control_lf_on+0x1e>
	switch (start_mode) {
   1467a:	1e63      	subs	r3, r4, #1
   1467c:	2b01      	cmp	r3, #1
   1467e:	d90d      	bls.n	1469c <z_nrf_clock_control_lf_on+0x38>
}
   14680:	bd10      	pop	{r4, pc}
				get_onoff_manager(CLOCK_DEVICE,
   14682:	4809      	ldr	r0, [pc, #36]	; (146a8 <z_nrf_clock_control_lf_on+0x44>)
   14684:	f005 fce1 	bl	1a04a <get_onoff_manager>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
   14688:	4908      	ldr	r1, [pc, #32]	; (146ac <z_nrf_clock_control_lf_on+0x48>)
   1468a:	2300      	movs	r3, #0
   1468c:	604b      	str	r3, [r1, #4]
   1468e:	608b      	str	r3, [r1, #8]
   14690:	60cb      	str	r3, [r1, #12]
   14692:	2301      	movs	r3, #1
   14694:	608b      	str	r3, [r1, #8]
		err = onoff_request(mgr, &cli);
   14696:	f005 f8bb 	bl	19810 <onoff_request>
   1469a:	e7ee      	b.n	1467a <z_nrf_clock_control_lf_on+0x16>
		lfclk_spinwait(start_mode);
   1469c:	4620      	mov	r0, r4
   1469e:	f7ff ff2d 	bl	144fc <lfclk_spinwait>
		break;
   146a2:	e7ed      	b.n	14680 <z_nrf_clock_control_lf_on+0x1c>
   146a4:	20008544 	.word	0x20008544
   146a8:	0001b7d4 	.word	0x0001b7d4
   146ac:	20008534 	.word	0x20008534

000146b0 <console_out>:
 *
 * @return The character passed as input.
 */

static int console_out(int c)
{
   146b0:	b510      	push	{r4, lr}
   146b2:	4604      	mov	r4, r0
		return c;
	}

#endif  /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
   146b4:	280a      	cmp	r0, #10
   146b6:	d006      	beq.n	146c6 <console_out+0x16>
		uart_poll_out(uart_console_dev, '\r');
	}
	uart_poll_out(uart_console_dev, c);
   146b8:	b2e1      	uxtb	r1, r4
			     unsigned char out_char);

static inline void z_impl_uart_poll_out(const struct device *dev,
					unsigned char out_char)
{
	const struct uart_driver_api *api =
   146ba:	4806      	ldr	r0, [pc, #24]	; (146d4 <console_out+0x24>)
   146bc:	6883      	ldr	r3, [r0, #8]
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
   146be:	685b      	ldr	r3, [r3, #4]
   146c0:	4798      	blx	r3

	return c;
}
   146c2:	4620      	mov	r0, r4
   146c4:	bd10      	pop	{r4, pc}
	const struct uart_driver_api *api =
   146c6:	4803      	ldr	r0, [pc, #12]	; (146d4 <console_out+0x24>)
   146c8:	6883      	ldr	r3, [r0, #8]
	api->poll_out(dev, out_char);
   146ca:	685b      	ldr	r3, [r3, #4]
   146cc:	210d      	movs	r1, #13
   146ce:	4798      	blx	r3
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_poll_out(dev, out_char);
}
   146d0:	e7f2      	b.n	146b8 <console_out+0x8>
   146d2:	bf00      	nop
   146d4:	0001b834 	.word	0x0001b834

000146d8 <uart_console_hook_install>:
/**
 * @brief Install printk/stdout hook for UART console output
 */

static void uart_console_hook_install(void)
{
   146d8:	b510      	push	{r4, lr}
#if defined(CONFIG_STDOUT_CONSOLE)
	__stdout_hook_install(console_out);
   146da:	4c04      	ldr	r4, [pc, #16]	; (146ec <uart_console_hook_install+0x14>)
   146dc:	4620      	mov	r0, r4
   146de:	f7ff fe09 	bl	142f4 <__stdout_hook_install>
#endif
#if defined(CONFIG_PRINTK)
	__printk_hook_install(console_out);
   146e2:	4620      	mov	r0, r4
   146e4:	f7fe fbba 	bl	12e5c <__printk_hook_install>
#endif
}
   146e8:	bd10      	pop	{r4, pc}
   146ea:	bf00      	nop
   146ec:	000146b1 	.word	0x000146b1

000146f0 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
   146f0:	b508      	push	{r3, lr}
   146f2:	4805      	ldr	r0, [pc, #20]	; (14708 <uart_console_init+0x18>)
   146f4:	f006 fa6b 	bl	1abce <z_device_is_ready>

	ARG_UNUSED(arg);

	if (!device_is_ready(uart_console_dev)) {
   146f8:	b118      	cbz	r0, 14702 <uart_console_init+0x12>
		return -ENODEV;
	}

	uart_console_hook_install();
   146fa:	f7ff ffed 	bl	146d8 <uart_console_hook_install>

	return 0;
   146fe:	2000      	movs	r0, #0
}
   14700:	bd08      	pop	{r3, pc}
		return -ENODEV;
   14702:	f06f 0012 	mvn.w	r0, #18
   14706:	e7fb      	b.n	14700 <uart_console_init+0x10>
   14708:	0001b834 	.word	0x0001b834

0001470c <get_dev>:
			dev = DEVICE_DT_INST_GET(i); \
		}

	if (0) {
	} /* Followed by else if from FOREACH macro. Done to avoid return statement in macro.  */
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   1470c:	b128      	cbz	r0, 1471a <get_dev+0xe>
   1470e:	2801      	cmp	r0, #1
   14710:	d101      	bne.n	14716 <get_dev+0xa>
   14712:	4803      	ldr	r0, [pc, #12]	; (14720 <get_dev+0x14>)
	#undef GPIO_NRF_GET_DEV

	return dev;
}
   14714:	4770      	bx	lr
	const struct device *dev = NULL;
   14716:	2000      	movs	r0, #0
   14718:	4770      	bx	lr
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   1471a:	4802      	ldr	r0, [pc, #8]	; (14724 <get_dev+0x18>)
   1471c:	4770      	bx	lr
   1471e:	bf00      	nop
   14720:	0001b7ec 	.word	0x0001b7ec
   14724:	0001b804 	.word	0x0001b804

00014728 <gpio_nrfx_pin_interrupt_configure>:
{
   14728:	b5f0      	push	{r4, r5, r6, r7, lr}
   1472a:	b085      	sub	sp, #20
   1472c:	460e      	mov	r6, r1
   1472e:	4619      	mov	r1, r3
	return port->config;
   14730:	6843      	ldr	r3, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   14732:	7b1b      	ldrb	r3, [r3, #12]
   14734:	f006 051f 	and.w	r5, r6, #31
   14738:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
   1473c:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
   14740:	d022      	beq.n	14788 <gpio_nrfx_pin_interrupt_configure+0x60>
   14742:	4607      	mov	r7, r0
   14744:	4614      	mov	r4, r2
	nrfx_gpiote_trigger_config_t trigger_config = {
   14746:	2300      	movs	r3, #0
   14748:	9301      	str	r3, [sp, #4]
   1474a:	9302      	str	r3, [sp, #8]
		.trigger = get_trigger(mode, trig),
   1474c:	4610      	mov	r0, r2
   1474e:	f005 fe44 	bl	1a3da <get_trigger>
	nrfx_gpiote_trigger_config_t trigger_config = {
   14752:	f88d 0004 	strb.w	r0, [sp, #4]
	return port->config;
   14756:	687b      	ldr	r3, [r7, #4]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
   14758:	6899      	ldr	r1, [r3, #8]
   1475a:	40f1      	lsrs	r1, r6
   1475c:	f011 0f01 	tst.w	r1, #1
   14760:	d102      	bne.n	14768 <gpio_nrfx_pin_interrupt_configure+0x40>
   14762:	f1b4 7fa0 	cmp.w	r4, #20971520	; 0x1400000
   14766:	d014      	beq.n	14792 <gpio_nrfx_pin_interrupt_configure+0x6a>
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   14768:	2300      	movs	r3, #0
   1476a:	aa01      	add	r2, sp, #4
   1476c:	4619      	mov	r1, r3
   1476e:	4628      	mov	r0, r5
   14770:	f001 fb66 	bl	15e40 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   14774:	4b1a      	ldr	r3, [pc, #104]	; (147e0 <gpio_nrfx_pin_interrupt_configure+0xb8>)
   14776:	4298      	cmp	r0, r3
   14778:	d12f      	bne.n	147da <gpio_nrfx_pin_interrupt_configure+0xb2>
	nrfx_gpiote_trigger_enable(abs_pin, true);
   1477a:	2101      	movs	r1, #1
   1477c:	4628      	mov	r0, r5
   1477e:	f001 fcc3 	bl	16108 <nrfx_gpiote_trigger_enable>
	return 0;
   14782:	2000      	movs	r0, #0
}
   14784:	b005      	add	sp, #20
   14786:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrfx_gpiote_trigger_disable(abs_pin);
   14788:	4628      	mov	r0, r5
   1478a:	f001 fcef 	bl	1616c <nrfx_gpiote_trigger_disable>
		return 0;
   1478e:	2000      	movs	r0, #0
   14790:	e7f8      	b.n	14784 <gpio_nrfx_pin_interrupt_configure+0x5c>
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
   14792:	f005 031f 	and.w	r3, r5, #31

    return pin_number >> 5;
   14796:	096a      	lsrs	r2, r5, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   14798:	2a01      	cmp	r2, #1
   1479a:	d012      	beq.n	147c2 <gpio_nrfx_pin_interrupt_configure+0x9a>
        case 0: return NRF_P0;
   1479c:	4a11      	ldr	r2, [pc, #68]	; (147e4 <gpio_nrfx_pin_interrupt_configure+0xbc>)
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   1479e:	3380      	adds	r3, #128	; 0x80
   147a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
   147a4:	f013 0f01 	tst.w	r3, #1
   147a8:	d1de      	bne.n	14768 <gpio_nrfx_pin_interrupt_configure+0x40>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
   147aa:	f10d 010f 	add.w	r1, sp, #15
   147ae:	4628      	mov	r0, r5
   147b0:	f001 fc4e 	bl	16050 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
   147b4:	4b0c      	ldr	r3, [pc, #48]	; (147e8 <gpio_nrfx_pin_interrupt_configure+0xc0>)
   147b6:	4298      	cmp	r0, r3
   147b8:	d005      	beq.n	147c6 <gpio_nrfx_pin_interrupt_configure+0x9e>
		trigger_config.p_in_channel = &ch;
   147ba:	f10d 030f 	add.w	r3, sp, #15
   147be:	9302      	str	r3, [sp, #8]
   147c0:	e7d2      	b.n	14768 <gpio_nrfx_pin_interrupt_configure+0x40>
        case 1: return NRF_P1;
   147c2:	4a0a      	ldr	r2, [pc, #40]	; (147ec <gpio_nrfx_pin_interrupt_configure+0xc4>)
   147c4:	e7eb      	b.n	1479e <gpio_nrfx_pin_interrupt_configure+0x76>
			err = nrfx_gpiote_channel_alloc(&ch);
   147c6:	f10d 000f 	add.w	r0, sp, #15
   147ca:	f001 fc95 	bl	160f8 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
   147ce:	4b04      	ldr	r3, [pc, #16]	; (147e0 <gpio_nrfx_pin_interrupt_configure+0xb8>)
   147d0:	4298      	cmp	r0, r3
   147d2:	d0f2      	beq.n	147ba <gpio_nrfx_pin_interrupt_configure+0x92>
				return -ENOMEM;
   147d4:	f06f 000b 	mvn.w	r0, #11
   147d8:	e7d4      	b.n	14784 <gpio_nrfx_pin_interrupt_configure+0x5c>
		return -EINVAL;
   147da:	f06f 0015 	mvn.w	r0, #21
   147de:	e7d1      	b.n	14784 <gpio_nrfx_pin_interrupt_configure+0x5c>
   147e0:	0bad0000 	.word	0x0bad0000
   147e4:	40842500 	.word	0x40842500
   147e8:	0bad0004 	.word	0x0bad0004
   147ec:	40842800 	.word	0x40842800

000147f0 <gpio_nrfx_pin_configure>:
{
   147f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   147f4:	b086      	sub	sp, #24
   147f6:	460e      	mov	r6, r1
   147f8:	4614      	mov	r4, r2
	return port->config;
   147fa:	f8d0 8004 	ldr.w	r8, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   147fe:	f898 300c 	ldrb.w	r3, [r8, #12]
   14802:	f001 051f 	and.w	r5, r1, #31
   14806:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
   1480a:	f10d 0117 	add.w	r1, sp, #23
   1480e:	4628      	mov	r0, r5
   14810:	f001 fc1e 	bl	16050 <nrfx_gpiote_channel_get>
   14814:	4607      	mov	r7, r0
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
   14816:	f414 3f40 	tst.w	r4, #196608	; 0x30000
   1481a:	d039      	beq.n	14890 <gpio_nrfx_pin_configure+0xa0>
	nrfx_gpiote_trigger_config_t trigger_config = {
   1481c:	2100      	movs	r1, #0
   1481e:	9103      	str	r1, [sp, #12]
   14820:	9104      	str	r1, [sp, #16]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   14822:	460b      	mov	r3, r1
   14824:	aa03      	add	r2, sp, #12
   14826:	4628      	mov	r0, r5
   14828:	f001 fb0a 	bl	15e40 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   1482c:	4b32      	ldr	r3, [pc, #200]	; (148f8 <gpio_nrfx_pin_configure+0x108>)
   1482e:	4298      	cmp	r0, r3
   14830:	d15f      	bne.n	148f2 <gpio_nrfx_pin_configure+0x102>
	if (free_ch) {
   14832:	429f      	cmp	r7, r3
   14834:	d03c      	beq.n	148b0 <gpio_nrfx_pin_configure+0xc0>
	if (flags & GPIO_OUTPUT) {
   14836:	f414 3f00 	tst.w	r4, #131072	; 0x20000
   1483a:	d047      	beq.n	148cc <gpio_nrfx_pin_configure+0xdc>
		int rv = get_drive(flags, &drive);
   1483c:	f10d 0103 	add.w	r1, sp, #3
   14840:	4620      	mov	r0, r4
   14842:	f005 fd57 	bl	1a2f4 <get_drive>
		if (rv != 0) {
   14846:	4607      	mov	r7, r0
   14848:	bb48      	cbnz	r0, 1489e <gpio_nrfx_pin_configure+0xae>
		nrfx_gpiote_output_config_t output_config = {
   1484a:	f89d 3003 	ldrb.w	r3, [sp, #3]
   1484e:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
   14852:	f414 3f80 	tst.w	r4, #65536	; 0x10000
   14856:	bf0c      	ite	eq
   14858:	2301      	moveq	r3, #1
   1485a:	2300      	movne	r3, #0
		nrfx_gpiote_output_config_t output_config = {
   1485c:	f88d 3005 	strb.w	r3, [sp, #5]
			.pull = get_pull(flags)
   14860:	4620      	mov	r0, r4
   14862:	f005 fd8a 	bl	1a37a <get_pull>
		nrfx_gpiote_output_config_t output_config = {
   14866:	f88d 0006 	strb.w	r0, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   1486a:	f414 2f00 	tst.w	r4, #524288	; 0x80000
   1486e:	d024      	beq.n	148ba <gpio_nrfx_pin_configure+0xca>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
   14870:	f8d8 2004 	ldr.w	r2, [r8, #4]
   14874:	2301      	movs	r3, #1
   14876:	40b3      	lsls	r3, r6
    p_reg->OUTSET = set_mask;
   14878:	6093      	str	r3, [r2, #8]
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
   1487a:	2200      	movs	r2, #0
   1487c:	a901      	add	r1, sp, #4
   1487e:	4628      	mov	r0, r5
   14880:	f001 fb74 	bl	15f6c <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   14884:	4b1c      	ldr	r3, [pc, #112]	; (148f8 <gpio_nrfx_pin_configure+0x108>)
   14886:	4298      	cmp	r0, r3
   14888:	d009      	beq.n	1489e <gpio_nrfx_pin_configure+0xae>
   1488a:	f06f 0715 	mvn.w	r7, #21
   1488e:	e006      	b.n	1489e <gpio_nrfx_pin_configure+0xae>
		(void)nrfx_gpiote_pin_uninit(abs_pin);
   14890:	4628      	mov	r0, r5
   14892:	f001 fc8d 	bl	161b0 <nrfx_gpiote_pin_uninit>
		if (free_ch) {
   14896:	4b18      	ldr	r3, [pc, #96]	; (148f8 <gpio_nrfx_pin_configure+0x108>)
   14898:	429f      	cmp	r7, r3
   1489a:	d004      	beq.n	148a6 <gpio_nrfx_pin_configure+0xb6>
		return 0;
   1489c:	2700      	movs	r7, #0
}
   1489e:	4638      	mov	r0, r7
   148a0:	b006      	add	sp, #24
   148a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			err = nrfx_gpiote_channel_free(ch);
   148a6:	f89d 0017 	ldrb.w	r0, [sp, #23]
   148aa:	f001 fc1d 	bl	160e8 <nrfx_gpiote_channel_free>
   148ae:	e7f5      	b.n	1489c <gpio_nrfx_pin_configure+0xac>
		err = nrfx_gpiote_channel_free(ch);
   148b0:	f89d 0017 	ldrb.w	r0, [sp, #23]
   148b4:	f001 fc18 	bl	160e8 <nrfx_gpiote_channel_free>
   148b8:	e7bd      	b.n	14836 <gpio_nrfx_pin_configure+0x46>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
   148ba:	f414 2f80 	tst.w	r4, #262144	; 0x40000
   148be:	d0dc      	beq.n	1487a <gpio_nrfx_pin_configure+0x8a>
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
   148c0:	f8d8 2004 	ldr.w	r2, [r8, #4]
   148c4:	2301      	movs	r3, #1
   148c6:	40b3      	lsls	r3, r6
    p_reg->OUTCLR = clr_mask;
   148c8:	60d3      	str	r3, [r2, #12]
}
   148ca:	e7d6      	b.n	1487a <gpio_nrfx_pin_configure+0x8a>
		.pull = get_pull(flags)
   148cc:	4620      	mov	r0, r4
   148ce:	f005 fd54 	bl	1a37a <get_pull>
	nrfx_gpiote_input_config_t input_config = {
   148d2:	f88d 0008 	strb.w	r0, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   148d6:	2300      	movs	r3, #0
   148d8:	461a      	mov	r2, r3
   148da:	a902      	add	r1, sp, #8
   148dc:	4628      	mov	r0, r5
   148de:	f001 faaf 	bl	15e40 <nrfx_gpiote_input_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   148e2:	4b05      	ldr	r3, [pc, #20]	; (148f8 <gpio_nrfx_pin_configure+0x108>)
   148e4:	4298      	cmp	r0, r3
   148e6:	d101      	bne.n	148ec <gpio_nrfx_pin_configure+0xfc>
   148e8:	2700      	movs	r7, #0
   148ea:	e7d8      	b.n	1489e <gpio_nrfx_pin_configure+0xae>
   148ec:	f06f 0715 	mvn.w	r7, #21
   148f0:	e7d5      	b.n	1489e <gpio_nrfx_pin_configure+0xae>
		return -EINVAL;
   148f2:	f06f 0715 	mvn.w	r7, #21
   148f6:	e7d2      	b.n	1489e <gpio_nrfx_pin_configure+0xae>
   148f8:	0bad0000 	.word	0x0bad0000

000148fc <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
   148fc:	b508      	push	{r3, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
   148fe:	f001 fbe9 	bl	160d4 <nrfx_gpiote_is_init>
   14902:	b108      	cbz	r0, 14908 <gpio_nrfx_init+0xc>
		return 0;
   14904:	2000      	movs	r0, #0

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
   14906:	bd08      	pop	{r3, pc}
	err = nrfx_gpiote_init(0/*not used*/);
   14908:	f001 fbba 	bl	16080 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
   1490c:	4b08      	ldr	r3, [pc, #32]	; (14930 <gpio_nrfx_init+0x34>)
   1490e:	4298      	cmp	r0, r3
   14910:	d10a      	bne.n	14928 <gpio_nrfx_init+0x2c>
	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
   14912:	2100      	movs	r1, #0
   14914:	4807      	ldr	r0, [pc, #28]	; (14934 <gpio_nrfx_init+0x38>)
   14916:	f001 fb95 	bl	16044 <nrfx_gpiote_global_callback_set>
	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   1491a:	2200      	movs	r2, #0
   1491c:	2105      	movs	r1, #5
   1491e:	202f      	movs	r0, #47	; 0x2f
   14920:	f005 fa30 	bl	19d84 <z_arm_irq_priority_set>
	return 0;
   14924:	2000      	movs	r0, #0
   14926:	e7ee      	b.n	14906 <gpio_nrfx_init+0xa>
		return -EIO;
   14928:	f06f 0004 	mvn.w	r0, #4
   1492c:	e7eb      	b.n	14906 <gpio_nrfx_init+0xa>
   1492e:	bf00      	nop
   14930:	0bad0000 	.word	0x0bad0000
   14934:	0001a413 	.word	0x0001a413

00014938 <i2c_nrfx_twim_recover_bus>:

	return 0;
}

static int i2c_nrfx_twim_recover_bus(const struct device *dev)
{
   14938:	b570      	push	{r4, r5, r6, lr}
	const struct i2c_nrfx_twim_config *dev_config = dev->config;
   1493a:	6844      	ldr	r4, [r0, #4]
	uint32_t scl_pin;
	uint32_t sda_pin;
	nrfx_err_t err;

#ifdef CONFIG_PINCTRL
	scl_pin = nrf_twim_scl_pin_get(dev_config->twim.p_twim);
   1493c:	6823      	ldr	r3, [r4, #0]
    p_reg->PSEL.SDA = sda_pin;
}

NRF_STATIC_INLINE uint32_t nrf_twim_scl_pin_get(NRF_TWIM_Type const * p_reg)
{
    return p_reg->PSEL.SCL;
   1493e:	f8d3 5508 	ldr.w	r5, [r3, #1288]	; 0x508
}

NRF_STATIC_INLINE uint32_t nrf_twim_sda_pin_get(NRF_TWIM_Type const * p_reg)
{
    return p_reg->PSEL.SDA;
   14942:	f8d3 650c 	ldr.w	r6, [r3, #1292]	; 0x50c
#endif

	/* disable peripheral if active (required to release SCL/SDA lines) */
	(void)pm_device_state_get(dev, &state);
	if (state == PM_DEVICE_STATE_ACTIVE) {
		nrfx_twim_disable(&dev_config->twim);
   14946:	4620      	mov	r0, r4
   14948:	f001 ff84 	bl	16854 <nrfx_twim_disable>
NRFX_STATIC_INLINE nrfx_err_t nrfx_twim_bus_recover(uint32_t scl_pin, uint32_t sda_pin);

#ifndef NRFX_DECLARE_ONLY
NRFX_STATIC_INLINE nrfx_err_t nrfx_twim_bus_recover(uint32_t scl_pin, uint32_t sda_pin)
{
    return nrfx_twi_twim_bus_recover(scl_pin, sda_pin);
   1494c:	4631      	mov	r1, r6
   1494e:	4628      	mov	r0, r5
   14950:	f001 ffb8 	bl	168c4 <nrfx_twi_twim_bus_recover>
   14954:	4605      	mov	r5, r0
	err = nrfx_twim_bus_recover(scl_pin, sda_pin);

	/* restore peripheral if it was active before */
	if (state == PM_DEVICE_STATE_ACTIVE) {
#ifdef CONFIG_PINCTRL
		(void)pinctrl_apply_state(dev_config->pcfg,
   14956:	2100      	movs	r1, #0
   14958:	6a20      	ldr	r0, [r4, #32]
   1495a:	f005 fd90 	bl	1a47e <pinctrl_apply_state>
					  PINCTRL_STATE_DEFAULT);
#endif
		nrfx_twim_enable(&dev_config->twim);
   1495e:	4620      	mov	r0, r4
   14960:	f001 ff68 	bl	16834 <nrfx_twim_enable>
	}

	return (err == NRFX_SUCCESS ? 0 : -EBUSY);
   14964:	4b03      	ldr	r3, [pc, #12]	; (14974 <i2c_nrfx_twim_recover_bus+0x3c>)
   14966:	429d      	cmp	r5, r3
   14968:	d101      	bne.n	1496e <i2c_nrfx_twim_recover_bus+0x36>
   1496a:	2000      	movs	r0, #0
}
   1496c:	bd70      	pop	{r4, r5, r6, pc}
	return (err == NRFX_SUCCESS ? 0 : -EBUSY);
   1496e:	f06f 000f 	mvn.w	r0, #15
   14972:	e7fb      	b.n	1496c <i2c_nrfx_twim_recover_bus+0x34>
   14974:	0bad0000 	.word	0x0bad0000

00014978 <i2c_nrfx_twim_transfer>:
{
   14978:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1497c:	b08f      	sub	sp, #60	; 0x3c
   1497e:	4682      	mov	sl, r0
   14980:	4688      	mov	r8, r1
   14982:	4691      	mov	r9, r2
	struct i2c_nrfx_twim_data *dev_data = dev->data;
   14984:	6901      	ldr	r1, [r0, #16]
   14986:	460c      	mov	r4, r1
   14988:	9104      	str	r1, [sp, #16]
	const struct i2c_nrfx_twim_config *dev_config = dev->config;
   1498a:	6842      	ldr	r2, [r0, #4]
   1498c:	9202      	str	r2, [sp, #8]
	uint8_t *msg_buf = dev_data->msg_buf;
   1498e:	6a48      	ldr	r0, [r1, #36]	; 0x24
   14990:	9001      	str	r0, [sp, #4]
	uint16_t concat_buf_size = dev_config->concat_buf_size;
   14992:	8b12      	ldrh	r2, [r2, #24]
   14994:	9206      	str	r2, [sp, #24]
	nrfx_twim_xfer_desc_t cur_xfer = {
   14996:	2500      	movs	r5, #0
   14998:	9509      	str	r5, [sp, #36]	; 0x24
   1499a:	950a      	str	r5, [sp, #40]	; 0x28
   1499c:	950b      	str	r5, [sp, #44]	; 0x2c
   1499e:	950c      	str	r5, [sp, #48]	; 0x30
   149a0:	950d      	str	r5, [sp, #52]	; 0x34
   149a2:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
   149a6:	f04f 32ff 	mov.w	r2, #4294967295
   149aa:	f04f 33ff 	mov.w	r3, #4294967295
   149ae:	4608      	mov	r0, r1
   149b0:	f002 faa0 	bl	16ef4 <z_impl_k_sem_take>
	k_sem_take(&dev_data->completion_sync, K_NO_WAIT);
   149b4:	f104 0310 	add.w	r3, r4, #16
   149b8:	4618      	mov	r0, r3
   149ba:	9305      	str	r3, [sp, #20]
   149bc:	2200      	movs	r2, #0
   149be:	2300      	movs	r3, #0
   149c0:	f002 fa98 	bl	16ef4 <z_impl_k_sem_take>
	for (size_t i = 0; i < num_msgs; i++) {
   149c4:	462e      	mov	r6, r5
	uint16_t msg_buf_used = 0;
   149c6:	462c      	mov	r4, r5
	int ret = 0;
   149c8:	9503      	str	r5, [sp, #12]
   149ca:	f8cd a01c 	str.w	sl, [sp, #28]
	for (size_t i = 0; i < num_msgs; i++) {
   149ce:	e04a      	b.n	14a66 <i2c_nrfx_twim_transfer+0xee>
		if (concat_next || (msg_buf_used != 0)) {
   149d0:	2c00      	cmp	r4, #0
   149d2:	d069      	beq.n	14aa8 <i2c_nrfx_twim_transfer+0x130>
		bool concat_next = ((i + 1) < num_msgs)
   149d4:	f04f 0a00 	mov.w	sl, #0
			if ((msg_buf_used + msgs[i].len) > concat_buf_size) {
   149d8:	4620      	mov	r0, r4
   149da:	686a      	ldr	r2, [r5, #4]
   149dc:	18a1      	adds	r1, r4, r2
   149de:	f8dd c018 	ldr.w	ip, [sp, #24]
   149e2:	4561      	cmp	r1, ip
   149e4:	f200 80b3 	bhi.w	14b4e <i2c_nrfx_twim_transfer+0x1d6>
			if (!(msgs[i].flags & I2C_MSG_READ)) {
   149e8:	f013 0f01 	tst.w	r3, #1
   149ec:	d105      	bne.n	149fa <i2c_nrfx_twim_transfer+0x82>
__ ## fun ## _ichk(type1 __restrict dst, type2 __restrict src) { \
	return __builtin___ ## fun ## _chk(dst, src, __ssp_bos0(dst)); \
}

__BEGIN_DECLS
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   149ee:	f858 100b 	ldr.w	r1, [r8, fp]
   149f2:	9b01      	ldr	r3, [sp, #4]
   149f4:	4418      	add	r0, r3
   149f6:	f006 fae3 	bl	1afc0 <memcpy>
			msg_buf_used += msgs[i].len;
   149fa:	686b      	ldr	r3, [r5, #4]
   149fc:	4423      	add	r3, r4
   149fe:	b29c      	uxth	r4, r3
		if (concat_next) {
   14a00:	f1ba 0f00 	cmp.w	sl, #0
   14a04:	d12e      	bne.n	14a64 <i2c_nrfx_twim_transfer+0xec>
		if (msg_buf_used == 0) {
   14a06:	2c00      	cmp	r4, #0
   14a08:	d16a      	bne.n	14ae0 <i2c_nrfx_twim_transfer+0x168>
			cur_xfer.p_primary_buf = msgs[i].buf;
   14a0a:	f858 300b 	ldr.w	r3, [r8, fp]
   14a0e:	930c      	str	r3, [sp, #48]	; 0x30
			cur_xfer.primary_length = msgs[i].len;
   14a10:	686b      	ldr	r3, [r5, #4]
   14a12:	930a      	str	r3, [sp, #40]	; 0x28
		cur_xfer.type = (msgs[i].flags & I2C_MSG_READ) ?
   14a14:	7a2b      	ldrb	r3, [r5, #8]
			NRFX_TWIM_XFER_RX : NRFX_TWIM_XFER_TX;
   14a16:	f003 0201 	and.w	r2, r3, #1
		cur_xfer.type = (msgs[i].flags & I2C_MSG_READ) ?
   14a1a:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
		nrfx_err_t res = nrfx_twim_xfer(&dev_config->twim,
   14a1e:	f013 0f02 	tst.w	r3, #2
   14a22:	d061      	beq.n	14ae8 <i2c_nrfx_twim_transfer+0x170>
   14a24:	2200      	movs	r2, #0
   14a26:	a909      	add	r1, sp, #36	; 0x24
   14a28:	9802      	ldr	r0, [sp, #8]
   14a2a:	f001 ff31 	bl	16890 <nrfx_twim_xfer>
		if (res != NRFX_SUCCESS) {
   14a2e:	4b4e      	ldr	r3, [pc, #312]	; (14b68 <i2c_nrfx_twim_transfer+0x1f0>)
   14a30:	4298      	cmp	r0, r3
   14a32:	d15b      	bne.n	14aec <i2c_nrfx_twim_transfer+0x174>
   14a34:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   14a38:	2300      	movs	r3, #0
   14a3a:	9805      	ldr	r0, [sp, #20]
   14a3c:	f002 fa5a 	bl	16ef4 <z_impl_k_sem_take>
		if (ret != 0) {
   14a40:	9003      	str	r0, [sp, #12]
   14a42:	2800      	cmp	r0, #0
   14a44:	d15d      	bne.n	14b02 <i2c_nrfx_twim_transfer+0x18a>
		res = dev_data->res;
   14a46:	9b04      	ldr	r3, [sp, #16]
   14a48:	6a1a      	ldr	r2, [r3, #32]
		if (res != NRFX_SUCCESS) {
   14a4a:	4b47      	ldr	r3, [pc, #284]	; (14b68 <i2c_nrfx_twim_transfer+0x1f0>)
   14a4c:	429a      	cmp	r2, r3
   14a4e:	f040 8086 	bne.w	14b5e <i2c_nrfx_twim_transfer+0x1e6>
		if ((msgs[i].flags & I2C_MSG_READ)
   14a52:	7a2b      	ldrb	r3, [r5, #8]
   14a54:	f013 0f01 	tst.w	r3, #1
   14a58:	d003      	beq.n	14a62 <i2c_nrfx_twim_transfer+0xea>
		    && cur_xfer.p_primary_buf == msg_buf) {
   14a5a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   14a5c:	9a01      	ldr	r2, [sp, #4]
   14a5e:	429a      	cmp	r2, r3
   14a60:	d058      	beq.n	14b14 <i2c_nrfx_twim_transfer+0x19c>
		msg_buf_used = 0;
   14a62:	2400      	movs	r4, #0
   14a64:	463e      	mov	r6, r7
	for (size_t i = 0; i < num_msgs; i++) {
   14a66:	454e      	cmp	r6, r9
   14a68:	d26a      	bcs.n	14b40 <i2c_nrfx_twim_transfer+0x1c8>
		if (I2C_MSG_ADDR_10_BITS & msgs[i].flags) {
   14a6a:	eb06 0546 	add.w	r5, r6, r6, lsl #1
   14a6e:	ea4f 0b85 	mov.w	fp, r5, lsl #2
   14a72:	eb08 0585 	add.w	r5, r8, r5, lsl #2
   14a76:	7a2b      	ldrb	r3, [r5, #8]
   14a78:	f013 0f08 	tst.w	r3, #8
   14a7c:	d15d      	bne.n	14b3a <i2c_nrfx_twim_transfer+0x1c2>
		bool concat_next = ((i + 1) < num_msgs)
   14a7e:	1c77      	adds	r7, r6, #1
				&& ((msgs[i].flags & I2C_MSG_READ)
   14a80:	454f      	cmp	r7, r9
   14a82:	d2a5      	bcs.n	149d0 <i2c_nrfx_twim_transfer+0x58>
				&& !(msgs[i].flags & I2C_MSG_STOP)
   14a84:	f013 0f02 	tst.w	r3, #2
   14a88:	d1a2      	bne.n	149d0 <i2c_nrfx_twim_transfer+0x58>
				&& !(msgs[i + 1].flags & I2C_MSG_RESTART)
   14a8a:	eb07 0247 	add.w	r2, r7, r7, lsl #1
   14a8e:	eb08 0282 	add.w	r2, r8, r2, lsl #2
   14a92:	7a12      	ldrb	r2, [r2, #8]
   14a94:	f012 0f04 	tst.w	r2, #4
   14a98:	d19a      	bne.n	149d0 <i2c_nrfx_twim_transfer+0x58>
				    == (msgs[i + 1].flags & I2C_MSG_READ));
   14a9a:	405a      	eors	r2, r3
				&& ((msgs[i].flags & I2C_MSG_READ)
   14a9c:	f012 0f01 	tst.w	r2, #1
   14aa0:	d196      	bne.n	149d0 <i2c_nrfx_twim_transfer+0x58>
		bool concat_next = ((i + 1) < num_msgs)
   14aa2:	f04f 0a01 	mov.w	sl, #1
   14aa6:	e797      	b.n	149d8 <i2c_nrfx_twim_transfer+0x60>
		} else if (!(msgs[i].flags & I2C_MSG_READ) &&
   14aa8:	f013 0f01 	tst.w	r3, #1
   14aac:	d112      	bne.n	14ad4 <i2c_nrfx_twim_transfer+0x15c>
			   !nrfx_is_in_ram(msgs[i].buf)) {
   14aae:	f858 100b 	ldr.w	r1, [r8, fp]

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
   14ab2:	f001 4360 	and.w	r3, r1, #3758096384	; 0xe0000000
		} else if (!(msgs[i].flags & I2C_MSG_READ) &&
   14ab6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   14aba:	d00e      	beq.n	14ada <i2c_nrfx_twim_transfer+0x162>
			if (msgs[i].len > dev_config->flash_buf_max_size) {
   14abc:	686a      	ldr	r2, [r5, #4]
   14abe:	9b02      	ldr	r3, [sp, #8]
   14ac0:	8b5b      	ldrh	r3, [r3, #26]
   14ac2:	429a      	cmp	r2, r3
   14ac4:	d847      	bhi.n	14b56 <i2c_nrfx_twim_transfer+0x1de>
   14ac6:	9801      	ldr	r0, [sp, #4]
   14ac8:	f006 fa7a 	bl	1afc0 <memcpy>
			msg_buf_used = msgs[i].len;
   14acc:	88ac      	ldrh	r4, [r5, #4]
		bool concat_next = ((i + 1) < num_msgs)
   14ace:	f04f 0a00 	mov.w	sl, #0
   14ad2:	e795      	b.n	14a00 <i2c_nrfx_twim_transfer+0x88>
   14ad4:	f04f 0a00 	mov.w	sl, #0
   14ad8:	e792      	b.n	14a00 <i2c_nrfx_twim_transfer+0x88>
   14ada:	f04f 0a00 	mov.w	sl, #0
   14ade:	e78f      	b.n	14a00 <i2c_nrfx_twim_transfer+0x88>
			cur_xfer.p_primary_buf = msg_buf;
   14ae0:	9b01      	ldr	r3, [sp, #4]
   14ae2:	930c      	str	r3, [sp, #48]	; 0x30
			cur_xfer.primary_length = msg_buf_used;
   14ae4:	940a      	str	r4, [sp, #40]	; 0x28
   14ae6:	e795      	b.n	14a14 <i2c_nrfx_twim_transfer+0x9c>
		nrfx_err_t res = nrfx_twim_xfer(&dev_config->twim,
   14ae8:	2220      	movs	r2, #32
   14aea:	e79c      	b.n	14a26 <i2c_nrfx_twim_transfer+0xae>
			if (res == NRFX_ERROR_BUSY) {
   14aec:	330b      	adds	r3, #11
   14aee:	4298      	cmp	r0, r3
   14af0:	d003      	beq.n	14afa <i2c_nrfx_twim_transfer+0x182>
				ret = -EIO;
   14af2:	f06f 0304 	mvn.w	r3, #4
   14af6:	9303      	str	r3, [sp, #12]
   14af8:	e022      	b.n	14b40 <i2c_nrfx_twim_transfer+0x1c8>
				ret = -EBUSY;
   14afa:	f06f 030f 	mvn.w	r3, #15
   14afe:	9303      	str	r3, [sp, #12]
   14b00:	e01e      	b.n	14b40 <i2c_nrfx_twim_transfer+0x1c8>
			(void)i2c_nrfx_twim_recover_bus(dev);
   14b02:	f8dd a01c 	ldr.w	sl, [sp, #28]
   14b06:	4650      	mov	r0, sl
   14b08:	f7ff ff16 	bl	14938 <i2c_nrfx_twim_recover_bus>
			ret = -EIO;
   14b0c:	f06f 0304 	mvn.w	r3, #4
   14b10:	9303      	str	r3, [sp, #12]
			break;
   14b12:	e015      	b.n	14b40 <i2c_nrfx_twim_transfer+0x1c8>
			while (msg_buf_used >= msgs[j].len) {
   14b14:	4615      	mov	r5, r2
   14b16:	e007      	b.n	14b28 <i2c_nrfx_twim_transfer+0x1b0>
				msg_buf_used -= msgs[j].len;
   14b18:	1aa4      	subs	r4, r4, r2
   14b1a:	b2a4      	uxth	r4, r4
   14b1c:	1929      	adds	r1, r5, r4
   14b1e:	f858 0000 	ldr.w	r0, [r8, r0]
   14b22:	f006 fa4d 	bl	1afc0 <memcpy>
				j--;
   14b26:	3e01      	subs	r6, #1
			while (msg_buf_used >= msgs[j].len) {
   14b28:	eb06 0346 	add.w	r3, r6, r6, lsl #1
   14b2c:	0098      	lsls	r0, r3, #2
   14b2e:	eb08 0383 	add.w	r3, r8, r3, lsl #2
   14b32:	685a      	ldr	r2, [r3, #4]
   14b34:	4294      	cmp	r4, r2
   14b36:	d2ef      	bcs.n	14b18 <i2c_nrfx_twim_transfer+0x1a0>
   14b38:	e793      	b.n	14a62 <i2c_nrfx_twim_transfer+0xea>
			ret = -ENOTSUP;
   14b3a:	f06f 0385 	mvn.w	r3, #133	; 0x85
   14b3e:	9303      	str	r3, [sp, #12]
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
   14b40:	9804      	ldr	r0, [sp, #16]
   14b42:	f002 f9b5 	bl	16eb0 <z_impl_k_sem_give>
}
   14b46:	9803      	ldr	r0, [sp, #12]
   14b48:	b00f      	add	sp, #60	; 0x3c
   14b4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				ret = -ENOSPC;
   14b4e:	f06f 031b 	mvn.w	r3, #27
   14b52:	9303      	str	r3, [sp, #12]
   14b54:	e7f4      	b.n	14b40 <i2c_nrfx_twim_transfer+0x1c8>
				ret = -EINVAL;
   14b56:	f06f 0315 	mvn.w	r3, #21
   14b5a:	9303      	str	r3, [sp, #12]
   14b5c:	e7f0      	b.n	14b40 <i2c_nrfx_twim_transfer+0x1c8>
			ret = -EIO;
   14b5e:	f06f 0304 	mvn.w	r3, #4
   14b62:	9303      	str	r3, [sp, #12]
   14b64:	e7ec      	b.n	14b40 <i2c_nrfx_twim_transfer+0x1c8>
   14b66:	bf00      	nop
   14b68:	0bad0000 	.word	0x0bad0000

00014b6c <event_handler>:
{
   14b6c:	b508      	push	{r3, lr}
	switch (p_event->type) {
   14b6e:	7803      	ldrb	r3, [r0, #0]
   14b70:	2b01      	cmp	r3, #1
   14b72:	d00c      	beq.n	14b8e <event_handler+0x22>
   14b74:	2b02      	cmp	r3, #2
   14b76:	d00d      	beq.n	14b94 <event_handler+0x28>
   14b78:	b113      	cbz	r3, 14b80 <event_handler+0x14>
		dev_data->res = NRFX_ERROR_INTERNAL;
   14b7a:	4b08      	ldr	r3, [pc, #32]	; (14b9c <event_handler+0x30>)
   14b7c:	620b      	str	r3, [r1, #32]
		break;
   14b7e:	e001      	b.n	14b84 <event_handler+0x18>
		dev_data->res = NRFX_SUCCESS;
   14b80:	4b07      	ldr	r3, [pc, #28]	; (14ba0 <event_handler+0x34>)
   14b82:	620b      	str	r3, [r1, #32]
	k_sem_give(&dev_data->completion_sync);
   14b84:	f101 0010 	add.w	r0, r1, #16
   14b88:	f002 f992 	bl	16eb0 <z_impl_k_sem_give>
}
   14b8c:	bd08      	pop	{r3, pc}
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_ANACK;
   14b8e:	4b05      	ldr	r3, [pc, #20]	; (14ba4 <event_handler+0x38>)
   14b90:	620b      	str	r3, [r1, #32]
		break;
   14b92:	e7f7      	b.n	14b84 <event_handler+0x18>
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_DNACK;
   14b94:	4b04      	ldr	r3, [pc, #16]	; (14ba8 <event_handler+0x3c>)
   14b96:	620b      	str	r3, [r1, #32]
		break;
   14b98:	e7f4      	b.n	14b84 <event_handler+0x18>
   14b9a:	bf00      	nop
   14b9c:	0bad0001 	.word	0x0bad0001
   14ba0:	0bad0000 	.word	0x0bad0000
   14ba4:	0bae0001 	.word	0x0bae0001
   14ba8:	0bae0002 	.word	0x0bae0002

00014bac <i2c_nrfx_twim_init>:
	return ret;
}
#endif /* CONFIG_PM_DEVICE */

static int i2c_nrfx_twim_init(const struct device *dev)
{
   14bac:	b538      	push	{r3, r4, r5, lr}
	const struct i2c_nrfx_twim_config *dev_config = dev->config;
   14bae:	6844      	ldr	r4, [r0, #4]
	struct i2c_nrfx_twim_data *dev_data = dev->data;
   14bb0:	6905      	ldr	r5, [r0, #16]

	dev_config->irq_connect();
   14bb2:	69e3      	ldr	r3, [r4, #28]
   14bb4:	4798      	blx	r3

#ifdef CONFIG_PINCTRL
	int err = pinctrl_apply_state(dev_config->pcfg,
   14bb6:	2100      	movs	r1, #0
   14bb8:	6a20      	ldr	r0, [r4, #32]
   14bba:	f005 fc60 	bl	1a47e <pinctrl_apply_state>
				      COND_CODE_1(CONFIG_PM_DEVICE_RUNTIME,
						  (PINCTRL_STATE_SLEEP),
						  (PINCTRL_STATE_DEFAULT)));
	if (err < 0) {
   14bbe:	2800      	cmp	r0, #0
   14bc0:	db0d      	blt.n	14bde <i2c_nrfx_twim_init+0x32>
		return err;
	}
#endif

	if (nrfx_twim_init(&dev_config->twim, &dev_config->twim_config,
   14bc2:	462b      	mov	r3, r5
   14bc4:	4a08      	ldr	r2, [pc, #32]	; (14be8 <i2c_nrfx_twim_init+0x3c>)
   14bc6:	f104 0108 	add.w	r1, r4, #8
   14bca:	4620      	mov	r0, r4
   14bcc:	f001 fde8 	bl	167a0 <nrfx_twim_init>
   14bd0:	4b06      	ldr	r3, [pc, #24]	; (14bec <i2c_nrfx_twim_init+0x40>)
   14bd2:	4298      	cmp	r0, r3
   14bd4:	d104      	bne.n	14be0 <i2c_nrfx_twim_init+0x34>

#ifdef CONFIG_PM_DEVICE_RUNTIME
	pm_device_init_suspended(dev);
	pm_device_runtime_enable(dev);
#else
	nrfx_twim_enable(&dev_config->twim);
   14bd6:	4620      	mov	r0, r4
   14bd8:	f001 fe2c 	bl	16834 <nrfx_twim_enable>
#endif

	return 0;
   14bdc:	2000      	movs	r0, #0
}
   14bde:	bd38      	pop	{r3, r4, r5, pc}
		return -EIO;
   14be0:	f06f 0004 	mvn.w	r0, #4
   14be4:	e7fb      	b.n	14bde <i2c_nrfx_twim_init+0x32>
   14be6:	bf00      	nop
   14be8:	00014b6d 	.word	0x00014b6d
   14bec:	0bad0000 	.word	0x0bad0000

00014bf0 <baudrate_set>:
#endif
};

static inline NRF_UARTE_Type *get_uarte_instance(const struct device *dev)
{
	const struct uarte_nrfx_config *config = dev->config;
   14bf0:	6843      	ldr	r3, [r0, #4]

	return config->uarte_regs;
   14bf2:	681a      	ldr	r2, [r3, #0]
static int baudrate_set(const struct device *dev, uint32_t baudrate)
{
	nrf_uarte_baudrate_t nrf_baudrate; /* calculated baudrate divisor */
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);

	switch (baudrate) {
   14bf4:	f5b1 4f16 	cmp.w	r1, #38400	; 0x9600
   14bf8:	d06f      	beq.n	14cda <baudrate_set+0xea>
   14bfa:	d83a      	bhi.n	14c72 <baudrate_set+0x82>
   14bfc:	f5b1 5f16 	cmp.w	r1, #9600	; 0x2580
   14c00:	d06e      	beq.n	14ce0 <baudrate_set+0xf0>
   14c02:	d90a      	bls.n	14c1a <baudrate_set+0x2a>
   14c04:	f5b1 4fe1 	cmp.w	r1, #28800	; 0x7080
   14c08:	d075      	beq.n	14cf6 <baudrate_set+0x106>
   14c0a:	d924      	bls.n	14c56 <baudrate_set+0x66>
   14c0c:	f647 2312 	movw	r3, #31250	; 0x7a12
   14c10:	4299      	cmp	r1, r3
   14c12:	d12b      	bne.n	14c6c <baudrate_set+0x7c>
		break;
	case 28800:
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
		break;
	case 31250:
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
   14c14:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   14c18:	e013      	b.n	14c42 <baudrate_set+0x52>
	switch (baudrate) {
   14c1a:	f5b1 6f96 	cmp.w	r1, #1200	; 0x4b0
   14c1e:	d061      	beq.n	14ce4 <baudrate_set+0xf4>
   14c20:	d907      	bls.n	14c32 <baudrate_set+0x42>
   14c22:	f5b1 6f16 	cmp.w	r1, #2400	; 0x960
   14c26:	d063      	beq.n	14cf0 <baudrate_set+0x100>
   14c28:	f5b1 5f96 	cmp.w	r1, #4800	; 0x12c0
   14c2c:	d110      	bne.n	14c50 <baudrate_set+0x60>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
   14c2e:	4b3c      	ldr	r3, [pc, #240]	; (14d20 <baudrate_set+0x130>)
   14c30:	e007      	b.n	14c42 <baudrate_set+0x52>
	switch (baudrate) {
   14c32:	f5b1 7f96 	cmp.w	r1, #300	; 0x12c
   14c36:	d058      	beq.n	14cea <baudrate_set+0xfa>
   14c38:	f5b1 7f16 	cmp.w	r1, #600	; 0x258
   14c3c:	d105      	bne.n	14c4a <baudrate_set+0x5a>
		nrf_baudrate = 0x00027000;
   14c3e:	f44f 331c 	mov.w	r3, #159744	; 0x27000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   14c42:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
		return -EINVAL;
	}

	nrf_uarte_baudrate_set(uarte, nrf_baudrate);

	return 0;
   14c46:	2000      	movs	r0, #0
   14c48:	4770      	bx	lr
	switch (baudrate) {
   14c4a:	f06f 0015 	mvn.w	r0, #21
   14c4e:	4770      	bx	lr
   14c50:	f06f 0015 	mvn.w	r0, #21
   14c54:	4770      	bx	lr
   14c56:	f5b1 5f61 	cmp.w	r1, #14400	; 0x3840
   14c5a:	d04e      	beq.n	14cfa <baudrate_set+0x10a>
   14c5c:	f5b1 4f96 	cmp.w	r1, #19200	; 0x4b00
   14c60:	d101      	bne.n	14c66 <baudrate_set+0x76>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
   14c62:	4b30      	ldr	r3, [pc, #192]	; (14d24 <baudrate_set+0x134>)
   14c64:	e7ed      	b.n	14c42 <baudrate_set+0x52>
	switch (baudrate) {
   14c66:	f06f 0015 	mvn.w	r0, #21
   14c6a:	4770      	bx	lr
   14c6c:	f06f 0015 	mvn.w	r0, #21
   14c70:	4770      	bx	lr
   14c72:	f5b1 3f61 	cmp.w	r1, #230400	; 0x38400
   14c76:	d042      	beq.n	14cfe <baudrate_set+0x10e>
   14c78:	d909      	bls.n	14c8e <baudrate_set+0x9e>
   14c7a:	f5b1 2f61 	cmp.w	r1, #921600	; 0xe1000
   14c7e:	d046      	beq.n	14d0e <baudrate_set+0x11e>
   14c80:	d91f      	bls.n	14cc2 <baudrate_set+0xd2>
   14c82:	4b29      	ldr	r3, [pc, #164]	; (14d28 <baudrate_set+0x138>)
   14c84:	4299      	cmp	r1, r3
   14c86:	d148      	bne.n	14d1a <baudrate_set+0x12a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
   14c88:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   14c8c:	e7d9      	b.n	14c42 <baudrate_set+0x52>
	switch (baudrate) {
   14c8e:	f5b1 3f96 	cmp.w	r1, #76800	; 0x12c00
   14c92:	d037      	beq.n	14d04 <baudrate_set+0x114>
   14c94:	d905      	bls.n	14ca2 <baudrate_set+0xb2>
   14c96:	f5b1 3fe1 	cmp.w	r1, #115200	; 0x1c200
   14c9a:	d10f      	bne.n	14cbc <baudrate_set+0xcc>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
   14c9c:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
   14ca0:	e7cf      	b.n	14c42 <baudrate_set+0x52>
	switch (baudrate) {
   14ca2:	f64d 23c0 	movw	r3, #56000	; 0xdac0
   14ca6:	4299      	cmp	r1, r3
   14ca8:	d02e      	beq.n	14d08 <baudrate_set+0x118>
   14caa:	f5b1 4f61 	cmp.w	r1, #57600	; 0xe100
   14cae:	d102      	bne.n	14cb6 <baudrate_set+0xc6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
   14cb0:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
   14cb4:	e7c5      	b.n	14c42 <baudrate_set+0x52>
	switch (baudrate) {
   14cb6:	f06f 0015 	mvn.w	r0, #21
   14cba:	4770      	bx	lr
   14cbc:	f06f 0015 	mvn.w	r0, #21
   14cc0:	4770      	bx	lr
   14cc2:	4b1a      	ldr	r3, [pc, #104]	; (14d2c <baudrate_set+0x13c>)
   14cc4:	4299      	cmp	r1, r3
   14cc6:	d025      	beq.n	14d14 <baudrate_set+0x124>
   14cc8:	f5b1 2fe1 	cmp.w	r1, #460800	; 0x70800
   14ccc:	d102      	bne.n	14cd4 <baudrate_set+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
   14cce:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
   14cd2:	e7b6      	b.n	14c42 <baudrate_set+0x52>
	switch (baudrate) {
   14cd4:	f06f 0015 	mvn.w	r0, #21
   14cd8:	4770      	bx	lr
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
   14cda:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
   14cde:	e7b0      	b.n	14c42 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
   14ce0:	4b13      	ldr	r3, [pc, #76]	; (14d30 <baudrate_set+0x140>)
   14ce2:	e7ae      	b.n	14c42 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
   14ce4:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   14ce8:	e7ab      	b.n	14c42 <baudrate_set+0x52>
	switch (baudrate) {
   14cea:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   14cee:	e7a8      	b.n	14c42 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
   14cf0:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   14cf4:	e7a5      	b.n	14c42 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
   14cf6:	4b0f      	ldr	r3, [pc, #60]	; (14d34 <baudrate_set+0x144>)
   14cf8:	e7a3      	b.n	14c42 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
   14cfa:	4b0f      	ldr	r3, [pc, #60]	; (14d38 <baudrate_set+0x148>)
   14cfc:	e7a1      	b.n	14c42 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
   14cfe:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
   14d02:	e79e      	b.n	14c42 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
   14d04:	4b0d      	ldr	r3, [pc, #52]	; (14d3c <baudrate_set+0x14c>)
   14d06:	e79c      	b.n	14c42 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
   14d08:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   14d0c:	e799      	b.n	14c42 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
   14d0e:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   14d12:	e796      	b.n	14c42 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
   14d14:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   14d18:	e793      	b.n	14c42 <baudrate_set+0x52>
	switch (baudrate) {
   14d1a:	f06f 0015 	mvn.w	r0, #21
}
   14d1e:	4770      	bx	lr
   14d20:	0013b000 	.word	0x0013b000
   14d24:	004ea000 	.word	0x004ea000
   14d28:	000f4240 	.word	0x000f4240
   14d2c:	0003d090 	.word	0x0003d090
   14d30:	00275000 	.word	0x00275000
   14d34:	0075c000 	.word	0x0075c000
   14d38:	003af000 	.word	0x003af000
   14d3c:	013a9000 	.word	0x013a9000

00014d40 <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
   14d40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14d42:	4605      	mov	r5, r0
   14d44:	460e      	mov	r6, r1
	struct uarte_nrfx_data *data = dev->data;
   14d46:	6907      	ldr	r7, [r0, #16]
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   14d48:	f005 ff7c 	bl	1ac44 <k_is_in_isr>
   14d4c:	b910      	cbnz	r0, 14d54 <uarte_nrfx_poll_out+0x14>
	return !z_sys_post_kernel;
   14d4e:	4b12      	ldr	r3, [pc, #72]	; (14d98 <uarte_nrfx_poll_out+0x58>)
   14d50:	781b      	ldrb	r3, [r3, #0]
   14d52:	b983      	cbnz	r3, 14d76 <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
   14d54:	f04f 0320 	mov.w	r3, #32
   14d58:	f3ef 8411 	mrs	r4, BASEPRI
   14d5c:	f383 8812 	msr	BASEPRI_MAX, r3
   14d60:	f3bf 8f6f 	isb	sy
#endif

	if (isr_mode) {
		while (1) {
			key = irq_lock();
			if (is_tx_ready(dev)) {
   14d64:	4628      	mov	r0, r5
   14d66:	f005 fc55 	bl	1a614 <is_tx_ready>
   14d6a:	b940      	cbnz	r0, 14d7e <uarte_nrfx_poll_out+0x3e>
	__asm__ volatile(
   14d6c:	f384 8811 	msr	BASEPRI, r4
   14d70:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
   14d74:	e7ee      	b.n	14d54 <uarte_nrfx_poll_out+0x14>
			}

			irq_unlock(key);
		}
	} else {
		key = wait_tx_ready(dev);
   14d76:	4628      	mov	r0, r5
   14d78:	f005 fcb1 	bl	1a6de <wait_tx_ready>
   14d7c:	4604      	mov	r4, r0
	}

	*data->char_out = c;
   14d7e:	693b      	ldr	r3, [r7, #16]
   14d80:	701e      	strb	r6, [r3, #0]
	tx_start(dev, data->char_out, 1);
   14d82:	2201      	movs	r2, #1
   14d84:	6939      	ldr	r1, [r7, #16]
   14d86:	4628      	mov	r0, r5
   14d88:	f005 fc5e 	bl	1a648 <tx_start>
	__asm__ volatile(
   14d8c:	f384 8811 	msr	BASEPRI, r4
   14d90:	f3bf 8f6f 	isb	sy

	irq_unlock(key);
}
   14d94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   14d96:	bf00      	nop
   14d98:	200086a5 	.word	0x200086a5

00014d9c <endtx_stoptx_ppi_init>:
#endif /* UARTE_INTERRUPT_DRIVEN */
};

static int endtx_stoptx_ppi_init(NRF_UARTE_Type *uarte,
				 struct uarte_nrfx_data *data)
{
   14d9c:	b538      	push	{r3, r4, r5, lr}
   14d9e:	4605      	mov	r5, r0
   14da0:	460c      	mov	r4, r1
	nrfx_err_t ret;

	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
   14da2:	f101 0018 	add.w	r0, r1, #24
   14da6:	f000 fdd5 	bl	15954 <nrfx_dppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
   14daa:	4b0a      	ldr	r3, [pc, #40]	; (14dd4 <endtx_stoptx_ppi_init+0x38>)
   14dac:	4298      	cmp	r0, r3
   14dae:	d10e      	bne.n	14dce <endtx_stoptx_ppi_init+0x32>
		LOG_ERR("Failed to allocate PPI Channel");
		return -EIO;
	}

	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
   14db0:	7e23      	ldrb	r3, [r4, #24]
}

__STATIC_INLINE void nrfx_gppi_event_endpoint_setup(uint8_t channel, uint32_t eep)
{
    NRFX_ASSERT(eep);
    *((volatile uint32_t *)(eep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
   14db2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   14db6:	f8c5 31a0 	str.w	r3, [r5, #416]	; 0x1a0
}

__STATIC_INLINE void nrfx_gppi_task_endpoint_setup(uint8_t channel, uint32_t tep)
{
    NRFX_ASSERT(tep);
    *((volatile uint32_t *)(tep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
   14dba:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
		nrf_uarte_event_address_get(uarte, NRF_UARTE_EVENT_ENDTX),
		nrf_uarte_task_address_get(uarte, NRF_UARTE_TASK_STOPTX));
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
   14dbe:	7e22      	ldrb	r2, [r4, #24]
   14dc0:	2301      	movs	r3, #1
   14dc2:	4093      	lsls	r3, r2
    p_reg->CHENCLR = 0xFFFFFFFFuL;
}

NRF_STATIC_INLINE void nrf_dppi_channels_enable(NRF_DPPIC_Type * p_reg, uint32_t mask)
{
    p_reg->CHENSET = mask;
   14dc4:	4a04      	ldr	r2, [pc, #16]	; (14dd8 <endtx_stoptx_ppi_init+0x3c>)
   14dc6:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504

	return 0;
   14dca:	2000      	movs	r0, #0
}
   14dcc:	bd38      	pop	{r3, r4, r5, pc}
		return -EIO;
   14dce:	f06f 0004 	mvn.w	r0, #4
   14dd2:	e7fb      	b.n	14dcc <endtx_stoptx_ppi_init+0x30>
   14dd4:	0bad0000 	.word	0x0bad0000
   14dd8:	40017000 	.word	0x40017000

00014ddc <set_comparator>:
	return (a - b) & COUNTER_MAX;
}

static void set_comparator(int32_t chan, uint32_t cyc)
{
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   14ddc:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE  void nrf_rtc_cc_set(NRF_RTC_Type * p_reg, uint32_t ch, uint32_t cc_val)
{
    p_reg->CC[ch] = cc_val;
   14de0:	f500 70a8 	add.w	r0, r0, #336	; 0x150
   14de4:	4b01      	ldr	r3, [pc, #4]	; (14dec <set_comparator+0x10>)
   14de6:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
}
   14dea:	4770      	bx	lr
   14dec:	40015000 	.word	0x40015000

00014df0 <get_comparator>:
}

NRF_STATIC_INLINE  uint32_t nrf_rtc_cc_get(NRF_RTC_Type const * p_reg, uint32_t ch)
{
    return p_reg->CC[ch];
   14df0:	f500 70a8 	add.w	r0, r0, #336	; 0x150
   14df4:	4b01      	ldr	r3, [pc, #4]	; (14dfc <get_comparator+0xc>)
   14df6:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

static uint32_t get_comparator(int32_t chan)
{
	return nrf_rtc_cc_get(RTC, chan);
}
   14dfa:	4770      	bx	lr
   14dfc:	40015000 	.word	0x40015000

00014e00 <event_enable>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
}

static void event_enable(int32_t chan)
{
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   14e00:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   14e04:	4083      	lsls	r3, r0
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
   14e06:	4a02      	ldr	r2, [pc, #8]	; (14e10 <event_enable+0x10>)
   14e08:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
}
   14e0c:	4770      	bx	lr
   14e0e:	bf00      	nop
   14e10:	40015000 	.word	0x40015000

00014e14 <event_disable>:

static void event_disable(int32_t chan)
{
	nrf_rtc_event_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
   14e14:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   14e18:	4083      	lsls	r3, r0
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
   14e1a:	4a02      	ldr	r2, [pc, #8]	; (14e24 <event_disable+0x10>)
   14e1c:	f8c2 3348 	str.w	r3, [r2, #840]	; 0x348
}
   14e20:	4770      	bx	lr
   14e22:	bf00      	nop
   14e24:	40015000 	.word	0x40015000

00014e28 <counter>:
     return p_reg->COUNTER;
   14e28:	4b01      	ldr	r3, [pc, #4]	; (14e30 <counter+0x8>)
   14e2a:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504

static uint32_t counter(void)
{
	return nrf_rtc_counter_get(RTC);
}
   14e2e:	4770      	bx	lr
   14e30:	40015000 	.word	0x40015000

00014e34 <compare_int_lock>:
	return 0;
#endif
}

static bool compare_int_lock(int32_t chan)
{
   14e34:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
   14e36:	2301      	movs	r3, #1
   14e38:	4083      	lsls	r3, r0
   14e3a:	ea6f 0c03 	mvn.w	ip, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   14e3e:	4a0c      	ldr	r2, [pc, #48]	; (14e70 <compare_int_lock+0x3c>)
   14e40:	e8d2 1fef 	ldaex	r1, [r2]
   14e44:	ea01 0e0c 	and.w	lr, r1, ip
   14e48:	e8c2 efe4 	stlex	r4, lr, [r2]
   14e4c:	2c00      	cmp	r4, #0
   14e4e:	d1f7      	bne.n	14e40 <compare_int_lock+0xc>

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
   14e50:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   14e54:	4082      	lsls	r2, r0
    p_reg->INTENCLR = mask;
   14e56:	4807      	ldr	r0, [pc, #28]	; (14e74 <compare_int_lock+0x40>)
   14e58:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
   14e5c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
   14e60:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
   14e64:	420b      	tst	r3, r1
}
   14e66:	bf14      	ite	ne
   14e68:	2001      	movne	r0, #1
   14e6a:	2000      	moveq	r0, #0
   14e6c:	bd10      	pop	{r4, pc}
   14e6e:	bf00      	nop
   14e70:	20008618 	.word	0x20008618
   14e74:	40015000 	.word	0x40015000

00014e78 <channel_processing_check_and_clear>:
		event_enable(chan);
	}
}

static bool channel_processing_check_and_clear(int32_t chan)
{
   14e78:	b538      	push	{r3, r4, r5, lr}
   14e7a:	4604      	mov	r4, r0
	bool result = false;

	uint32_t mcu_critical_state = full_int_lock();
   14e7c:	f005 fceb 	bl	1a856 <full_int_lock>
   14e80:	4605      	mov	r5, r0

	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
   14e82:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   14e86:	40a3      	lsls	r3, r4
    return p_reg->INTENSET & mask;
   14e88:	4a14      	ldr	r2, [pc, #80]	; (14edc <channel_processing_check_and_clear+0x64>)
   14e8a:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
   14e8e:	4213      	tst	r3, r2
   14e90:	d105      	bne.n	14e9e <channel_processing_check_and_clear+0x26>
	bool result = false;
   14e92:	2400      	movs	r4, #0
		if (result) {
			event_clear(chan);
		}
	}

	full_int_unlock(mcu_critical_state);
   14e94:	4628      	mov	r0, r5
   14e96:	f005 fce7 	bl	1a868 <full_int_unlock>

	return result;
}
   14e9a:	4620      	mov	r0, r4
   14e9c:	bd38      	pop	{r3, r4, r5, pc}
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
   14e9e:	2301      	movs	r3, #1
   14ea0:	40a3      	lsls	r3, r4
   14ea2:	43db      	mvns	r3, r3
   14ea4:	4a0e      	ldr	r2, [pc, #56]	; (14ee0 <channel_processing_check_and_clear+0x68>)
   14ea6:	e8d2 1fef 	ldaex	r1, [r2]
   14eaa:	ea01 0003 	and.w	r0, r1, r3
   14eae:	e8c2 0fec 	stlex	ip, r0, [r2]
   14eb2:	f1bc 0f00 	cmp.w	ip, #0
   14eb6:	d1f6      	bne.n	14ea6 <channel_processing_check_and_clear+0x2e>
   14eb8:	b949      	cbnz	r1, 14ece <channel_processing_check_and_clear+0x56>
			 nrf_rtc_event_check(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   14eba:	f104 0350 	add.w	r3, r4, #80	; 0x50
   14ebe:	009b      	lsls	r3, r3, #2
   14ec0:	b29b      	uxth	r3, r3
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   14ec2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   14ec6:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
   14eca:	681b      	ldr	r3, [r3, #0]
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
   14ecc:	b123      	cbz	r3, 14ed8 <channel_processing_check_and_clear+0x60>
			event_clear(chan);
   14ece:	4620      	mov	r0, r4
   14ed0:	f005 fcb2 	bl	1a838 <event_clear>
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
   14ed4:	2401      	movs	r4, #1
   14ed6:	e7dd      	b.n	14e94 <channel_processing_check_and_clear+0x1c>
   14ed8:	2400      	movs	r4, #0
   14eda:	e7db      	b.n	14e94 <channel_processing_check_and_clear+0x1c>
   14edc:	40015000 	.word	0x40015000
   14ee0:	20008614 	.word	0x20008614

00014ee4 <compare_int_unlock>:
	if (key) {
   14ee4:	b901      	cbnz	r1, 14ee8 <compare_int_unlock+0x4>
}
   14ee6:	4770      	bx	lr
		atomic_or(&int_mask, BIT(chan));
   14ee8:	2301      	movs	r3, #1
   14eea:	4083      	lsls	r3, r0
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   14eec:	4a0d      	ldr	r2, [pc, #52]	; (14f24 <compare_int_unlock+0x40>)
   14eee:	e8d2 cfef 	ldaex	ip, [r2]
   14ef2:	ea4c 0c03 	orr.w	ip, ip, r3
   14ef6:	e8c2 cfe1 	stlex	r1, ip, [r2]
   14efa:	2900      	cmp	r1, #0
   14efc:	d1f7      	bne.n	14eee <compare_int_unlock+0xa>
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   14efe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   14f02:	4083      	lsls	r3, r0
    p_reg->INTENSET = mask;
   14f04:	4a08      	ldr	r2, [pc, #32]	; (14f28 <compare_int_unlock+0x44>)
   14f06:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   14f0a:	4b08      	ldr	r3, [pc, #32]	; (14f2c <compare_int_unlock+0x48>)
   14f0c:	e8d3 3faf 	lda	r3, [r3]
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
   14f10:	40c3      	lsrs	r3, r0
   14f12:	f013 0f01 	tst.w	r3, #1
   14f16:	d0e6      	beq.n	14ee6 <compare_int_unlock+0x2>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   14f18:	4b05      	ldr	r3, [pc, #20]	; (14f30 <compare_int_unlock+0x4c>)
   14f1a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   14f1e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
   14f22:	e7e0      	b.n	14ee6 <compare_int_unlock+0x2>
   14f24:	20008618 	.word	0x20008618
   14f28:	40015000 	.word	0x40015000
   14f2c:	20008614 	.word	0x20008614
   14f30:	e000e100 	.word	0xe000e100

00014f34 <sys_clock_timeout_handler>:
{
   14f34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   14f38:	4607      	mov	r7, r0
   14f3a:	4614      	mov	r4, r2
   14f3c:	461e      	mov	r6, r3
	uint32_t cc_value = absolute_time_to_cc(expire_time);
   14f3e:	4610      	mov	r0, r2
   14f40:	4619      	mov	r1, r3
   14f42:	f005 fc85 	bl	1a850 <absolute_time_to_cc>
   14f46:	4605      	mov	r5, r0
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   14f48:	4b15      	ldr	r3, [pc, #84]	; (14fa0 <sys_clock_timeout_handler+0x6c>)
   14f4a:	681a      	ldr	r2, [r3, #0]
   14f4c:	1aa0      	subs	r0, r4, r2
	last_count += dticks * CYC_PER_TICK;
   14f4e:	601c      	str	r4, [r3, #0]
   14f50:	605e      	str	r6, [r3, #4]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
   14f52:	f5a5 1300 	sub.w	r3, r5, #2097152	; 0x200000
	if (in_anchor_range(cc_value)) {
   14f56:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
   14f5a:	d309      	bcc.n	14f70 <sys_clock_timeout_handler+0x3c>
	return false;
   14f5c:	2400      	movs	r4, #0
	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
   14f5e:	f002 fcfd 	bl	1795c <sys_clock_announce>
	if (cc_value == get_comparator(chan)) {
   14f62:	4638      	mov	r0, r7
   14f64:	f7ff ff44 	bl	14df0 <get_comparator>
   14f68:	42a8      	cmp	r0, r5
   14f6a:	d00e      	beq.n	14f8a <sys_clock_timeout_handler+0x56>
}
   14f6c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
   14f70:	4b0c      	ldr	r3, [pc, #48]	; (14fa4 <sys_clock_timeout_handler+0x70>)
   14f72:	681b      	ldr	r3, [r3, #0]
   14f74:	0a1a      	lsrs	r2, r3, #8
   14f76:	061b      	lsls	r3, r3, #24
   14f78:	eb15 0803 	adds.w	r8, r5, r3
   14f7c:	f142 0900 	adc.w	r9, r2, #0
   14f80:	4b09      	ldr	r3, [pc, #36]	; (14fa8 <sys_clock_timeout_handler+0x74>)
   14f82:	e9c3 8900 	strd	r8, r9, [r3]
		return true;
   14f86:	2401      	movs	r4, #1
   14f88:	e7e9      	b.n	14f5e <sys_clock_timeout_handler+0x2a>
		if (!anchor_updated) {
   14f8a:	b11c      	cbz	r4, 14f94 <sys_clock_timeout_handler+0x60>
		event_enable(chan);
   14f8c:	4638      	mov	r0, r7
   14f8e:	f7ff ff37 	bl	14e00 <event_enable>
}
   14f92:	e7eb      	b.n	14f6c <sys_clock_timeout_handler+0x38>
			set_comparator(chan, COUNTER_HALF_SPAN);
   14f94:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
   14f98:	4638      	mov	r0, r7
   14f9a:	f7ff ff1f 	bl	14ddc <set_comparator>
   14f9e:	e7f5      	b.n	14f8c <sys_clock_timeout_handler+0x58>
   14fa0:	20008398 	.word	0x20008398
   14fa4:	2000861c 	.word	0x2000861c
   14fa8:	200083a0 	.word	0x200083a0

00014fac <z_nrf_rtc_timer_read>:
{
   14fac:	b538      	push	{r3, r4, r5, lr}
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
   14fae:	4b0d      	ldr	r3, [pc, #52]	; (14fe4 <z_nrf_rtc_timer_read+0x38>)
   14fb0:	681c      	ldr	r4, [r3, #0]
   14fb2:	0a25      	lsrs	r5, r4, #8
   14fb4:	0624      	lsls	r4, r4, #24
  __ASM volatile ("dmb 0xF":::"memory");
   14fb6:	f3bf 8f5f 	dmb	sy
	uint32_t cntr = counter();
   14fba:	f7ff ff35 	bl	14e28 <counter>
   14fbe:	4603      	mov	r3, r0
	val += cntr;
   14fc0:	1900      	adds	r0, r0, r4
   14fc2:	f145 0100 	adc.w	r1, r5, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
   14fc6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   14fca:	d20a      	bcs.n	14fe2 <z_nrf_rtc_timer_read+0x36>
		if (val < anchor) {
   14fcc:	4b06      	ldr	r3, [pc, #24]	; (14fe8 <z_nrf_rtc_timer_read+0x3c>)
   14fce:	e9d3 2300 	ldrd	r2, r3, [r3]
   14fd2:	4290      	cmp	r0, r2
   14fd4:	eb71 0303 	sbcs.w	r3, r1, r3
   14fd8:	d203      	bcs.n	14fe2 <z_nrf_rtc_timer_read+0x36>
			val += COUNTER_SPAN;
   14fda:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
   14fde:	f141 0100 	adc.w	r1, r1, #0
}
   14fe2:	bd38      	pop	{r3, r4, r5, pc}
   14fe4:	2000861c 	.word	0x2000861c
   14fe8:	200083a0 	.word	0x200083a0

00014fec <compare_set_nolocks>:
{
   14fec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14fee:	4606      	mov	r6, r0
   14ff0:	4614      	mov	r4, r2
   14ff2:	461d      	mov	r5, r3
	uint32_t cc_value = absolute_time_to_cc(target_time);
   14ff4:	4610      	mov	r0, r2
   14ff6:	4619      	mov	r1, r3
   14ff8:	f005 fc2a 	bl	1a850 <absolute_time_to_cc>
   14ffc:	4607      	mov	r7, r0
	uint64_t curr_time = z_nrf_rtc_timer_read();
   14ffe:	f7ff ffd5 	bl	14fac <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
   15002:	42a0      	cmp	r0, r4
   15004:	eb71 0305 	sbcs.w	r3, r1, r5
   15008:	d21d      	bcs.n	15046 <compare_set_nolocks+0x5a>
		if (target_time - curr_time > COUNTER_SPAN) {
   1500a:	1a20      	subs	r0, r4, r0
   1500c:	eb65 0101 	sbc.w	r1, r5, r1
   15010:	4b19      	ldr	r3, [pc, #100]	; (15078 <compare_set_nolocks+0x8c>)
   15012:	4298      	cmp	r0, r3
   15014:	f171 0100 	sbcs.w	r1, r1, #0
   15018:	d22b      	bcs.n	15072 <compare_set_nolocks+0x86>
		if (target_time != cc_data[chan].target_time) {
   1501a:	4b18      	ldr	r3, [pc, #96]	; (1507c <compare_set_nolocks+0x90>)
   1501c:	eb03 1306 	add.w	r3, r3, r6, lsl #4
   15020:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
   15024:	42ab      	cmp	r3, r5
   15026:	bf08      	it	eq
   15028:	42a2      	cmpeq	r2, r4
   1502a:	d016      	beq.n	1505a <compare_set_nolocks+0x6e>
			uint32_t cc_set = set_absolute_alarm(chan, cc_value);
   1502c:	4639      	mov	r1, r7
   1502e:	4630      	mov	r0, r6
   15030:	f005 fc1f 	bl	1a872 <set_absolute_alarm>
			target_time += counter_sub(cc_set, cc_value);
   15034:	4639      	mov	r1, r7
   15036:	f005 fbfb 	bl	1a830 <counter_sub>
   1503a:	1900      	adds	r0, r0, r4
   1503c:	f145 0300 	adc.w	r3, r5, #0
   15040:	4604      	mov	r4, r0
   15042:	461d      	mov	r5, r3
   15044:	e009      	b.n	1505a <compare_set_nolocks+0x6e>
		atomic_or(&force_isr_mask, BIT(chan));
   15046:	2301      	movs	r3, #1
   15048:	40b3      	lsls	r3, r6
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1504a:	4a0d      	ldr	r2, [pc, #52]	; (15080 <compare_set_nolocks+0x94>)
   1504c:	e8d2 0fef 	ldaex	r0, [r2]
   15050:	4318      	orrs	r0, r3
   15052:	e8c2 0fe1 	stlex	r1, r0, [r2]
   15056:	2900      	cmp	r1, #0
   15058:	d1f8      	bne.n	1504c <compare_set_nolocks+0x60>
	cc_data[chan].target_time = target_time;
   1505a:	4b08      	ldr	r3, [pc, #32]	; (1507c <compare_set_nolocks+0x90>)
   1505c:	0132      	lsls	r2, r6, #4
   1505e:	eb03 1606 	add.w	r6, r3, r6, lsl #4
   15062:	e9c6 4502 	strd	r4, r5, [r6, #8]
	cc_data[chan].callback = handler;
   15066:	9906      	ldr	r1, [sp, #24]
   15068:	5099      	str	r1, [r3, r2]
	cc_data[chan].user_context = user_data;
   1506a:	9b07      	ldr	r3, [sp, #28]
   1506c:	6073      	str	r3, [r6, #4]
	return ret;
   1506e:	2000      	movs	r0, #0
}
   15070:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return -EINVAL;
   15072:	f06f 0015 	mvn.w	r0, #21
   15076:	e7fb      	b.n	15070 <compare_set_nolocks+0x84>
   15078:	01000001 	.word	0x01000001
   1507c:	20008388 	.word	0x20008388
   15080:	20008614 	.word	0x20008614

00015084 <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
   15084:	b530      	push	{r4, r5, lr}
   15086:	b083      	sub	sp, #12
    p_reg->PRESCALER = val;
   15088:	2300      	movs	r3, #0
   1508a:	4a1d      	ldr	r2, [pc, #116]	; (15100 <sys_clock_driver_init+0x7c>)
   1508c:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			CLOCK_CONTROL_NRF_LF_START_AVAILABLE :
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   15090:	2b00      	cmp	r3, #0
   15092:	dd24      	ble.n	150de <sys_clock_driver_init+0x5a>
    p_reg->INTENSET = mask;
   15094:	4c1a      	ldr	r4, [pc, #104]	; (15100 <sys_clock_driver_init+0x7c>)
   15096:	2502      	movs	r5, #2
   15098:	f8c4 5304 	str.w	r5, [r4, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1509c:	4b19      	ldr	r3, [pc, #100]	; (15104 <sys_clock_driver_init+0x80>)
   1509e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   150a2:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
   150a6:	2200      	movs	r2, #0
   150a8:	2101      	movs	r1, #1
   150aa:	2015      	movs	r0, #21
   150ac:	f004 fe6a 	bl	19d84 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
   150b0:	2015      	movs	r0, #21
   150b2:	f004 fe62 	bl	19d7a <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   150b6:	2301      	movs	r3, #1
   150b8:	60a3      	str	r3, [r4, #8]
   150ba:	6023      	str	r3, [r4, #0]

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
   150bc:	4a12      	ldr	r2, [pc, #72]	; (15108 <sys_clock_driver_init+0x84>)
   150be:	6013      	str	r3, [r2, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		(COUNTER_HALF_SPAN - 1) :
		(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
   150c0:	2400      	movs	r4, #0
   150c2:	9401      	str	r4, [sp, #4]
   150c4:	4b11      	ldr	r3, [pc, #68]	; (1510c <sys_clock_driver_init+0x88>)
   150c6:	9300      	str	r3, [sp, #0]
   150c8:	4a11      	ldr	r2, [pc, #68]	; (15110 <sys_clock_driver_init+0x8c>)
   150ca:	2300      	movs	r3, #0
   150cc:	4620      	mov	r0, r4
   150ce:	f005 fc0b 	bl	1a8e8 <compare_set>

	z_nrf_clock_control_lf_on(mode);
   150d2:	4628      	mov	r0, r5
   150d4:	f7ff fac6 	bl	14664 <z_nrf_clock_control_lf_on>

	return 0;
}
   150d8:	4620      	mov	r0, r4
   150da:	b003      	add	sp, #12
   150dc:	bd30      	pop	{r4, r5, pc}
		cc_data[chan].target_time = TARGET_TIME_INVALID;
   150de:	4a0d      	ldr	r2, [pc, #52]	; (15114 <sys_clock_driver_init+0x90>)
   150e0:	eb02 1203 	add.w	r2, r2, r3, lsl #4
   150e4:	f04f 30ff 	mov.w	r0, #4294967295
   150e8:	f04f 31ff 	mov.w	r1, #4294967295
   150ec:	e9c2 0102 	strd	r0, r1, [r2, #8]
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   150f0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   150f4:	409a      	lsls	r2, r3
    p_reg->INTENSET = mask;
   150f6:	4902      	ldr	r1, [pc, #8]	; (15100 <sys_clock_driver_init+0x7c>)
   150f8:	f8c1 2304 	str.w	r2, [r1, #772]	; 0x304
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   150fc:	3301      	adds	r3, #1
   150fe:	e7c7      	b.n	15090 <sys_clock_driver_init+0xc>
   15100:	40015000 	.word	0x40015000
   15104:	e000e100 	.word	0xe000e100
   15108:	20008618 	.word	0x20008618
   1510c:	00014f35 	.word	0x00014f35
   15110:	007fffff 	.word	0x007fffff
   15114:	20008388 	.word	0x20008388

00015118 <process_channel>:
{
   15118:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1511c:	b082      	sub	sp, #8
   1511e:	4604      	mov	r4, r0
	if (channel_processing_check_and_clear(chan)) {
   15120:	f7ff feaa 	bl	14e78 <channel_processing_check_and_clear>
   15124:	b910      	cbnz	r0, 1512c <process_channel+0x14>
}
   15126:	b002      	add	sp, #8
   15128:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		curr_time = z_nrf_rtc_timer_read();
   1512c:	f7ff ff3e 	bl	14fac <z_nrf_rtc_timer_read>
   15130:	4682      	mov	sl, r0
   15132:	460d      	mov	r5, r1
		mcu_critical_state = full_int_lock();
   15134:	f005 fb8f 	bl	1a856 <full_int_lock>
   15138:	4606      	mov	r6, r0
		expire_time = cc_data[chan].target_time;
   1513a:	4b13      	ldr	r3, [pc, #76]	; (15188 <process_channel+0x70>)
   1513c:	eb03 1304 	add.w	r3, r3, r4, lsl #4
   15140:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
		if (curr_time >= expire_time) {
   15144:	45c2      	cmp	sl, r8
   15146:	eb75 0509 	sbcs.w	r5, r5, r9
   1514a:	d20b      	bcs.n	15164 <process_channel+0x4c>
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
   1514c:	2500      	movs	r5, #0
		full_int_unlock(mcu_critical_state);
   1514e:	4630      	mov	r0, r6
   15150:	f005 fb8a 	bl	1a868 <full_int_unlock>
		if (handler) {
   15154:	2d00      	cmp	r5, #0
   15156:	d0e6      	beq.n	15126 <process_channel+0xe>
			handler(chan, expire_time, user_context);
   15158:	9700      	str	r7, [sp, #0]
   1515a:	4642      	mov	r2, r8
   1515c:	464b      	mov	r3, r9
   1515e:	4620      	mov	r0, r4
   15160:	47a8      	blx	r5
}
   15162:	e7e0      	b.n	15126 <process_channel+0xe>
			handler = cc_data[chan].callback;
   15164:	4a08      	ldr	r2, [pc, #32]	; (15188 <process_channel+0x70>)
   15166:	0123      	lsls	r3, r4, #4
   15168:	eb02 1104 	add.w	r1, r2, r4, lsl #4
   1516c:	58d5      	ldr	r5, [r2, r3]
			user_context = cc_data[chan].user_context;
   1516e:	684f      	ldr	r7, [r1, #4]
			cc_data[chan].callback = NULL;
   15170:	2000      	movs	r0, #0
   15172:	50d0      	str	r0, [r2, r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   15174:	f04f 32ff 	mov.w	r2, #4294967295
   15178:	f04f 33ff 	mov.w	r3, #4294967295
   1517c:	e9c1 2302 	strd	r2, r3, [r1, #8]
			event_disable(chan);
   15180:	4620      	mov	r0, r4
   15182:	f7ff fe47 	bl	14e14 <event_disable>
   15186:	e7e2      	b.n	1514e <process_channel+0x36>
   15188:	20008388 	.word	0x20008388

0001518c <rtc_nrf_isr>:
{
   1518c:	b510      	push	{r4, lr}
    return p_reg->INTENSET & mask;
   1518e:	4b0e      	ldr	r3, [pc, #56]	; (151c8 <rtc_nrf_isr+0x3c>)
   15190:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
   15194:	f013 0f02 	tst.w	r3, #2
   15198:	d00d      	beq.n	151b6 <rtc_nrf_isr+0x2a>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1519a:	4b0b      	ldr	r3, [pc, #44]	; (151c8 <rtc_nrf_isr+0x3c>)
   1519c:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   151a0:	b14b      	cbz	r3, 151b6 <rtc_nrf_isr+0x2a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   151a2:	4b09      	ldr	r3, [pc, #36]	; (151c8 <rtc_nrf_isr+0x3c>)
   151a4:	2200      	movs	r2, #0
   151a6:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   151aa:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
		overflow_cnt++;
   151ae:	4a07      	ldr	r2, [pc, #28]	; (151cc <rtc_nrf_isr+0x40>)
   151b0:	6813      	ldr	r3, [r2, #0]
   151b2:	3301      	adds	r3, #1
   151b4:	6013      	str	r3, [r2, #0]
{
   151b6:	2400      	movs	r4, #0
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   151b8:	2c00      	cmp	r4, #0
   151ba:	dd00      	ble.n	151be <rtc_nrf_isr+0x32>
}
   151bc:	bd10      	pop	{r4, pc}
		process_channel(chan);
   151be:	4620      	mov	r0, r4
   151c0:	f7ff ffaa 	bl	15118 <process_channel>
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   151c4:	3401      	adds	r4, #1
   151c6:	e7f7      	b.n	151b8 <rtc_nrf_isr+0x2c>
   151c8:	40015000 	.word	0x40015000
   151cc:	2000861c 	.word	0x2000861c

000151d0 <sys_clock_set_timeout>:
{
   151d0:	b510      	push	{r4, lr}
   151d2:	b082      	sub	sp, #8
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   151d4:	f1b0 3fff 	cmp.w	r0, #4294967295
   151d8:	d006      	beq.n	151e8 <sys_clock_set_timeout+0x18>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   151da:	2801      	cmp	r0, #1
   151dc:	dd06      	ble.n	151ec <sys_clock_set_timeout+0x1c>
   151de:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   151e2:	da05      	bge.n	151f0 <sys_clock_set_timeout+0x20>
   151e4:	1e44      	subs	r4, r0, #1
   151e6:	e004      	b.n	151f2 <sys_clock_set_timeout+0x22>
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   151e8:	480f      	ldr	r0, [pc, #60]	; (15228 <sys_clock_set_timeout+0x58>)
   151ea:	e7f8      	b.n	151de <sys_clock_set_timeout+0xe>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   151ec:	2400      	movs	r4, #0
   151ee:	e000      	b.n	151f2 <sys_clock_set_timeout+0x22>
   151f0:	4c0d      	ldr	r4, [pc, #52]	; (15228 <sys_clock_set_timeout+0x58>)
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
   151f2:	f7ff fedb 	bl	14fac <z_nrf_rtc_timer_read>
   151f6:	4b0d      	ldr	r3, [pc, #52]	; (1522c <sys_clock_set_timeout+0x5c>)
   151f8:	681a      	ldr	r2, [r3, #0]
   151fa:	685b      	ldr	r3, [r3, #4]
   151fc:	1a80      	subs	r0, r0, r2
	if (unannounced >= COUNTER_HALF_SPAN) {
   151fe:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   15202:	d300      	bcc.n	15206 <sys_clock_set_timeout+0x36>
		ticks = 0;
   15204:	2400      	movs	r4, #0
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
   15206:	4420      	add	r0, r4
   15208:	1c41      	adds	r1, r0, #1
	if (cyc > MAX_CYCLES) {
   1520a:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
   1520e:	d300      	bcc.n	15212 <sys_clock_set_timeout+0x42>
		cyc = MAX_CYCLES;
   15210:	4905      	ldr	r1, [pc, #20]	; (15228 <sys_clock_set_timeout+0x58>)
	uint64_t target_time = cyc + last_count;
   15212:	2000      	movs	r0, #0
   15214:	1852      	adds	r2, r2, r1
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
   15216:	9001      	str	r0, [sp, #4]
   15218:	4905      	ldr	r1, [pc, #20]	; (15230 <sys_clock_set_timeout+0x60>)
   1521a:	9100      	str	r1, [sp, #0]
   1521c:	f143 0300 	adc.w	r3, r3, #0
   15220:	f005 fb62 	bl	1a8e8 <compare_set>
}
   15224:	b002      	add	sp, #8
   15226:	bd10      	pop	{r4, pc}
   15228:	007fffff 	.word	0x007fffff
   1522c:	20008398 	.word	0x20008398
   15230:	00014f35 	.word	0x00014f35

00015234 <sys_clock_elapsed>:
{
   15234:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
   15236:	f7ff feb9 	bl	14fac <z_nrf_rtc_timer_read>
   1523a:	4b02      	ldr	r3, [pc, #8]	; (15244 <sys_clock_elapsed+0x10>)
   1523c:	681b      	ldr	r3, [r3, #0]
}
   1523e:	1ac0      	subs	r0, r0, r3
   15240:	bd08      	pop	{r3, pc}
   15242:	bf00      	nop
   15244:	20008398 	.word	0x20008398

00015248 <nrf_gpio_cfg>:
{
   15248:	b430      	push	{r4, r5}
    *p_pin = pin_number & 0x1F;
   1524a:	f000 0c1f 	and.w	ip, r0, #31
    return pin_number >> 5;
   1524e:	0940      	lsrs	r0, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   15250:	2801      	cmp	r0, #1
   15252:	d018      	beq.n	15286 <nrf_gpio_cfg+0x3e>
        case 0: return NRF_P0;
   15254:	4d0d      	ldr	r5, [pc, #52]	; (1528c <nrf_gpio_cfg+0x44>)
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
   15256:	f10c 0080 	add.w	r0, ip, #128	; 0x80
   1525a:	f855 4020 	ldr.w	r4, [r5, r0, lsl #2]
   1525e:	f004 4ce0 	and.w	ip, r4, #1879048192	; 0x70000000
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
   15262:	ea41 0142 	orr.w	r1, r1, r2, lsl #1
           ((uint32_t)input << GPIO_PIN_CNF_INPUT_Pos) |
   15266:	ea41 0383 	orr.w	r3, r1, r3, lsl #2
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   1526a:	f89d 2008 	ldrb.w	r2, [sp, #8]
   1526e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
   15272:	f89d 200c 	ldrb.w	r2, [sp, #12]
   15276:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
   1527a:	ea43 030c 	orr.w	r3, r3, ip
    reg->PIN_CNF[pin_number] = cnf;
   1527e:	f845 3020 	str.w	r3, [r5, r0, lsl #2]
}
   15282:	bc30      	pop	{r4, r5}
   15284:	4770      	bx	lr
        case 1: return NRF_P1;
   15286:	4d02      	ldr	r5, [pc, #8]	; (15290 <nrf_gpio_cfg+0x48>)
   15288:	e7e5      	b.n	15256 <nrf_gpio_cfg+0xe>
   1528a:	bf00      	nop
   1528c:	40842500 	.word	0x40842500
   15290:	40842800 	.word	0x40842800

00015294 <nrf_gpio_pin_write>:
    if (value == 0)
   15294:	b959      	cbnz	r1, 152ae <nrf_gpio_pin_write+0x1a>
    *p_pin = pin_number & 0x1F;
   15296:	f000 011f 	and.w	r1, r0, #31
    return pin_number >> 5;
   1529a:	0940      	lsrs	r0, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1529c:	2801      	cmp	r0, #1
   1529e:	d004      	beq.n	152aa <nrf_gpio_pin_write+0x16>
        case 0: return NRF_P0;
   152a0:	4a09      	ldr	r2, [pc, #36]	; (152c8 <nrf_gpio_pin_write+0x34>)
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   152a2:	2301      	movs	r3, #1
   152a4:	408b      	lsls	r3, r1
    p_reg->OUTCLR = clr_mask;
   152a6:	60d3      	str	r3, [r2, #12]
}
   152a8:	4770      	bx	lr
        case 1: return NRF_P1;
   152aa:	4a08      	ldr	r2, [pc, #32]	; (152cc <nrf_gpio_pin_write+0x38>)
   152ac:	e7f9      	b.n	152a2 <nrf_gpio_pin_write+0xe>
    *p_pin = pin_number & 0x1F;
   152ae:	f000 011f 	and.w	r1, r0, #31
    return pin_number >> 5;
   152b2:	0940      	lsrs	r0, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   152b4:	2801      	cmp	r0, #1
   152b6:	d004      	beq.n	152c2 <nrf_gpio_pin_write+0x2e>
        case 0: return NRF_P0;
   152b8:	4a03      	ldr	r2, [pc, #12]	; (152c8 <nrf_gpio_pin_write+0x34>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   152ba:	2301      	movs	r3, #1
   152bc:	408b      	lsls	r3, r1
    p_reg->OUTSET = set_mask;
   152be:	6093      	str	r3, [r2, #8]
}
   152c0:	4770      	bx	lr
        case 1: return NRF_P1;
   152c2:	4a02      	ldr	r2, [pc, #8]	; (152cc <nrf_gpio_pin_write+0x38>)
   152c4:	e7f9      	b.n	152ba <nrf_gpio_pin_write+0x26>
   152c6:	bf00      	nop
   152c8:	40842500 	.word	0x40842500
   152cc:	40842800 	.word	0x40842800

000152d0 <pinctrl_configure_pins>:
#define NRF_PSEL_QSPI(reg, line) ((NRF_QSPI_Type *)reg)->PSEL.line
#endif

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
   152d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   152d4:	b085      	sub	sp, #20
   152d6:	4607      	mov	r7, r0
   152d8:	468b      	mov	fp, r1
   152da:	4690      	mov	r8, r2
	for (uint8_t i = 0U; i < pin_cnt; i++) {
   152dc:	2400      	movs	r4, #0
   152de:	e022      	b.n	15326 <pinctrl_configure_pins+0x56>
		uint32_t write = NO_WRITE;
		nrf_gpio_pin_dir_t dir;
		nrf_gpio_pin_input_t input;

		if (pin == NRF_PIN_DISCONNECTED) {
			pin = 0xFFFFFFFFU;
   152e0:	f04f 35ff 	mov.w	r5, #4294967295
   152e4:	e02c      	b.n	15340 <pinctrl_configure_pins+0x70>
		}

		switch (NRF_GET_FUN(pins[i])) {
#if defined(NRF_PSEL_UART)
		case NRF_FUN_UART_TX:
			NRF_PSEL_UART(reg, TXD) = pin;
   152e6:	f8c8 550c 	str.w	r5, [r8, #1292]	; 0x50c
			write = 1U;
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   152ea:	2601      	movs	r6, #1
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
   152ec:	9603      	str	r6, [sp, #12]
			write = 1U;
   152ee:	4631      	mov	r1, r6
		default:
			return -ENOTSUP;
		}

		/* configure GPIO properties */
		if (pin != NRF_PIN_DISCONNECTED) {
   152f0:	2d7f      	cmp	r5, #127	; 0x7f
   152f2:	d016      	beq.n	15322 <pinctrl_configure_pins+0x52>
			if (write != NO_WRITE) {
   152f4:	f1b1 3fff 	cmp.w	r1, #4294967295
   152f8:	f040 810e 	bne.w	15518 <pinctrl_configure_pins+0x248>
				nrf_gpio_pin_write(pin, write);
			}

			/* force input and disconnected buffer for low power */
			if (NRF_GET_LP(pins[i]) == NRF_LP_ENABLE) {
   152fc:	f857 300a 	ldr.w	r3, [r7, sl]
   15300:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   15304:	d002      	beq.n	1530c <pinctrl_configure_pins+0x3c>
				dir = NRF_GPIO_PIN_DIR_INPUT;
				input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   15306:	2601      	movs	r6, #1
				dir = NRF_GPIO_PIN_DIR_INPUT;
   15308:	2200      	movs	r2, #0
   1530a:	9203      	str	r2, [sp, #12]
			}

			nrf_gpio_cfg(pin, dir, input, NRF_GET_PULL(pins[i]),
   1530c:	2200      	movs	r2, #0
   1530e:	9201      	str	r2, [sp, #4]
   15310:	f8cd 9000 	str.w	r9, [sp]
   15314:	f3c3 13c1 	ubfx	r3, r3, #7, #2
   15318:	4632      	mov	r2, r6
   1531a:	9903      	ldr	r1, [sp, #12]
   1531c:	4628      	mov	r0, r5
   1531e:	f7ff ff93 	bl	15248 <nrf_gpio_cfg>
	for (uint8_t i = 0U; i < pin_cnt; i++) {
   15322:	3401      	adds	r4, #1
   15324:	b2e4      	uxtb	r4, r4
   15326:	455c      	cmp	r4, fp
   15328:	f080 80fa 	bcs.w	15520 <pinctrl_configure_pins+0x250>
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
   1532c:	ea4f 0a84 	mov.w	sl, r4, lsl #2
   15330:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
   15334:	f3c3 2943 	ubfx	r9, r3, #9, #4
		uint32_t pin = NRF_GET_PIN(pins[i]);
   15338:	f003 057f 	and.w	r5, r3, #127	; 0x7f
		if (pin == NRF_PIN_DISCONNECTED) {
   1533c:	2d7f      	cmp	r5, #127	; 0x7f
   1533e:	d0cf      	beq.n	152e0 <pinctrl_configure_pins+0x10>
		switch (NRF_GET_FUN(pins[i])) {
   15340:	0c1b      	lsrs	r3, r3, #16
   15342:	2b22      	cmp	r3, #34	; 0x22
   15344:	f200 80ee 	bhi.w	15524 <pinctrl_configure_pins+0x254>
   15348:	a201      	add	r2, pc, #4	; (adr r2, 15350 <pinctrl_configure_pins+0x80>)
   1534a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1534e:	bf00      	nop
   15350:	000152e7 	.word	0x000152e7
   15354:	000153dd 	.word	0x000153dd
   15358:	000153eb 	.word	0x000153eb
   1535c:	000153f7 	.word	0x000153f7
   15360:	00015405 	.word	0x00015405
   15364:	00015413 	.word	0x00015413
   15368:	0001541f 	.word	0x0001541f
   1536c:	00015525 	.word	0x00015525
   15370:	00015525 	.word	0x00015525
   15374:	00015525 	.word	0x00015525
   15378:	00015525 	.word	0x00015525
   1537c:	0001542d 	.word	0x0001542d
   15380:	00015441 	.word	0x00015441
   15384:	00015525 	.word	0x00015525
   15388:	00015525 	.word	0x00015525
   1538c:	00015525 	.word	0x00015525
   15390:	00015525 	.word	0x00015525
   15394:	00015525 	.word	0x00015525
   15398:	00015525 	.word	0x00015525
   1539c:	00015525 	.word	0x00015525
   153a0:	00015525 	.word	0x00015525
   153a4:	00015525 	.word	0x00015525
   153a8:	00015455 	.word	0x00015455
   153ac:	00015467 	.word	0x00015467
   153b0:	00015479 	.word	0x00015479
   153b4:	0001548b 	.word	0x0001548b
   153b8:	00015525 	.word	0x00015525
   153bc:	00015525 	.word	0x00015525
   153c0:	00015525 	.word	0x00015525
   153c4:	0001549d 	.word	0x0001549d
   153c8:	000154ad 	.word	0x000154ad
   153cc:	000154b9 	.word	0x000154b9
   153d0:	000154c9 	.word	0x000154c9
   153d4:	000154d9 	.word	0x000154d9
   153d8:	000154e9 	.word	0x000154e9
			NRF_PSEL_UART(reg, RXD) = pin;
   153dc:	f8c8 5514 	str.w	r5, [r8, #1300]	; 0x514
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   153e0:	2600      	movs	r6, #0
			dir = NRF_GPIO_PIN_DIR_INPUT;
   153e2:	9603      	str	r6, [sp, #12]
		uint32_t write = NO_WRITE;
   153e4:	f04f 31ff 	mov.w	r1, #4294967295
			break;
   153e8:	e782      	b.n	152f0 <pinctrl_configure_pins+0x20>
			NRF_PSEL_UART(reg, RTS) = pin;
   153ea:	f8c8 5508 	str.w	r5, [r8, #1288]	; 0x508
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   153ee:	2601      	movs	r6, #1
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
   153f0:	9603      	str	r6, [sp, #12]
			write = 1U;
   153f2:	4631      	mov	r1, r6
			break;
   153f4:	e77c      	b.n	152f0 <pinctrl_configure_pins+0x20>
			NRF_PSEL_UART(reg, CTS) = pin;
   153f6:	f8c8 5510 	str.w	r5, [r8, #1296]	; 0x510
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   153fa:	2600      	movs	r6, #0
			dir = NRF_GPIO_PIN_DIR_INPUT;
   153fc:	9603      	str	r6, [sp, #12]
		uint32_t write = NO_WRITE;
   153fe:	f04f 31ff 	mov.w	r1, #4294967295
			break;
   15402:	e775      	b.n	152f0 <pinctrl_configure_pins+0x20>
			NRF_PSEL_SPIM(reg, SCK) = pin;
   15404:	f8c8 5508 	str.w	r5, [r8, #1288]	; 0x508
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   15408:	2600      	movs	r6, #0
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
   1540a:	2301      	movs	r3, #1
   1540c:	9303      	str	r3, [sp, #12]
			write = 0U;
   1540e:	4631      	mov	r1, r6
			break;
   15410:	e76e      	b.n	152f0 <pinctrl_configure_pins+0x20>
			NRF_PSEL_SPIM(reg, MOSI) = pin;
   15412:	f8c8 550c 	str.w	r5, [r8, #1292]	; 0x50c
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   15416:	2601      	movs	r6, #1
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
   15418:	9603      	str	r6, [sp, #12]
			write = 0U;
   1541a:	2100      	movs	r1, #0
			break;
   1541c:	e768      	b.n	152f0 <pinctrl_configure_pins+0x20>
			NRF_PSEL_SPIM(reg, MISO) = pin;
   1541e:	f8c8 5510 	str.w	r5, [r8, #1296]	; 0x510
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   15422:	2600      	movs	r6, #0
			dir = NRF_GPIO_PIN_DIR_INPUT;
   15424:	9603      	str	r6, [sp, #12]
		uint32_t write = NO_WRITE;
   15426:	f04f 31ff 	mov.w	r1, #4294967295
			break;
   1542a:	e761      	b.n	152f0 <pinctrl_configure_pins+0x20>
			NRF_PSEL_TWIM(reg, SCL) = pin;
   1542c:	f8c8 5508 	str.w	r5, [r8, #1288]	; 0x508
			if (drive == NRF_DRIVE_S0S1) {
   15430:	f1b9 0f00 	cmp.w	r9, #0
   15434:	d060      	beq.n	154f8 <pinctrl_configure_pins+0x228>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   15436:	2600      	movs	r6, #0
			dir = NRF_GPIO_PIN_DIR_INPUT;
   15438:	9603      	str	r6, [sp, #12]
		uint32_t write = NO_WRITE;
   1543a:	f04f 31ff 	mov.w	r1, #4294967295
   1543e:	e757      	b.n	152f0 <pinctrl_configure_pins+0x20>
			NRF_PSEL_TWIM(reg, SDA) = pin;
   15440:	f8c8 550c 	str.w	r5, [r8, #1292]	; 0x50c
			if (drive == NRF_DRIVE_S0S1) {
   15444:	f1b9 0f00 	cmp.w	r9, #0
   15448:	d05e      	beq.n	15508 <pinctrl_configure_pins+0x238>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   1544a:	2600      	movs	r6, #0
			dir = NRF_GPIO_PIN_DIR_INPUT;
   1544c:	9603      	str	r6, [sp, #12]
		uint32_t write = NO_WRITE;
   1544e:	f04f 31ff 	mov.w	r1, #4294967295
   15452:	e74d      	b.n	152f0 <pinctrl_configure_pins+0x20>
			NRF_PSEL_PWM(reg, OUT[0]) = pin;
   15454:	f8c8 5560 	str.w	r5, [r8, #1376]	; 0x560
			write = NRF_GET_INVERT(pins[i]);
   15458:	f857 100a 	ldr.w	r1, [r7, sl]
   1545c:	f3c1 3180 	ubfx	r1, r1, #14, #1
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   15460:	2601      	movs	r6, #1
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
   15462:	9603      	str	r6, [sp, #12]
			break;
   15464:	e744      	b.n	152f0 <pinctrl_configure_pins+0x20>
			NRF_PSEL_PWM(reg, OUT[1]) = pin;
   15466:	f8c8 5564 	str.w	r5, [r8, #1380]	; 0x564
			write = NRF_GET_INVERT(pins[i]);
   1546a:	f857 100a 	ldr.w	r1, [r7, sl]
   1546e:	f3c1 3180 	ubfx	r1, r1, #14, #1
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   15472:	2601      	movs	r6, #1
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
   15474:	9603      	str	r6, [sp, #12]
			break;
   15476:	e73b      	b.n	152f0 <pinctrl_configure_pins+0x20>
			NRF_PSEL_PWM(reg, OUT[2]) = pin;
   15478:	f8c8 5568 	str.w	r5, [r8, #1384]	; 0x568
			write = NRF_GET_INVERT(pins[i]);
   1547c:	f857 100a 	ldr.w	r1, [r7, sl]
   15480:	f3c1 3180 	ubfx	r1, r1, #14, #1
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   15484:	2601      	movs	r6, #1
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
   15486:	9603      	str	r6, [sp, #12]
			break;
   15488:	e732      	b.n	152f0 <pinctrl_configure_pins+0x20>
			NRF_PSEL_PWM(reg, OUT[3]) = pin;
   1548a:	f8c8 556c 	str.w	r5, [r8, #1388]	; 0x56c
			write = NRF_GET_INVERT(pins[i]);
   1548e:	f857 100a 	ldr.w	r1, [r7, sl]
   15492:	f3c1 3180 	ubfx	r1, r1, #14, #1
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   15496:	2601      	movs	r6, #1
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
   15498:	9603      	str	r6, [sp, #12]
			break;
   1549a:	e729      	b.n	152f0 <pinctrl_configure_pins+0x20>
			NRF_PSEL_QSPI(reg, SCK) = pin;
   1549c:	f8c8 5524 	str.w	r5, [r8, #1316]	; 0x524
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   154a0:	2601      	movs	r6, #1
			dir = NRF_GPIO_PIN_DIR_INPUT;
   154a2:	2300      	movs	r3, #0
   154a4:	9303      	str	r3, [sp, #12]
		uint32_t write = NO_WRITE;
   154a6:	f04f 31ff 	mov.w	r1, #4294967295
			break;
   154aa:	e721      	b.n	152f0 <pinctrl_configure_pins+0x20>
			NRF_PSEL_QSPI(reg, CSN) = pin;
   154ac:	f8c8 5528 	str.w	r5, [r8, #1320]	; 0x528
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   154b0:	2601      	movs	r6, #1
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
   154b2:	9603      	str	r6, [sp, #12]
			write = 1U;
   154b4:	4631      	mov	r1, r6
			break;
   154b6:	e71b      	b.n	152f0 <pinctrl_configure_pins+0x20>
			NRF_PSEL_QSPI(reg, IO0) = pin;
   154b8:	f8c8 5530 	str.w	r5, [r8, #1328]	; 0x530
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   154bc:	2601      	movs	r6, #1
			dir = NRF_GPIO_PIN_DIR_INPUT;
   154be:	2300      	movs	r3, #0
   154c0:	9303      	str	r3, [sp, #12]
		uint32_t write = NO_WRITE;
   154c2:	f04f 31ff 	mov.w	r1, #4294967295
			break;
   154c6:	e713      	b.n	152f0 <pinctrl_configure_pins+0x20>
			NRF_PSEL_QSPI(reg, IO1) = pin;
   154c8:	f8c8 5534 	str.w	r5, [r8, #1332]	; 0x534
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   154cc:	2601      	movs	r6, #1
			dir = NRF_GPIO_PIN_DIR_INPUT;
   154ce:	2300      	movs	r3, #0
   154d0:	9303      	str	r3, [sp, #12]
		uint32_t write = NO_WRITE;
   154d2:	f04f 31ff 	mov.w	r1, #4294967295
			break;
   154d6:	e70b      	b.n	152f0 <pinctrl_configure_pins+0x20>
			NRF_PSEL_QSPI(reg, IO2) = pin;
   154d8:	f8c8 5538 	str.w	r5, [r8, #1336]	; 0x538
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   154dc:	2601      	movs	r6, #1
			dir = NRF_GPIO_PIN_DIR_INPUT;
   154de:	2300      	movs	r3, #0
   154e0:	9303      	str	r3, [sp, #12]
		uint32_t write = NO_WRITE;
   154e2:	f04f 31ff 	mov.w	r1, #4294967295
			break;
   154e6:	e703      	b.n	152f0 <pinctrl_configure_pins+0x20>
			NRF_PSEL_QSPI(reg, IO3) = pin;
   154e8:	f8c8 553c 	str.w	r5, [r8, #1340]	; 0x53c
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   154ec:	2601      	movs	r6, #1
			dir = NRF_GPIO_PIN_DIR_INPUT;
   154ee:	2300      	movs	r3, #0
   154f0:	9303      	str	r3, [sp, #12]
		uint32_t write = NO_WRITE;
   154f2:	f04f 31ff 	mov.w	r1, #4294967295
			break;
   154f6:	e6fb      	b.n	152f0 <pinctrl_configure_pins+0x20>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   154f8:	464e      	mov	r6, r9
			dir = NRF_GPIO_PIN_DIR_INPUT;
   154fa:	f8cd 900c 	str.w	r9, [sp, #12]
		uint32_t write = NO_WRITE;
   154fe:	f04f 31ff 	mov.w	r1, #4294967295
				drive = NRF_DRIVE_S0D1;
   15502:	f04f 0906 	mov.w	r9, #6
   15506:	e6f3      	b.n	152f0 <pinctrl_configure_pins+0x20>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   15508:	464e      	mov	r6, r9
			dir = NRF_GPIO_PIN_DIR_INPUT;
   1550a:	f8cd 900c 	str.w	r9, [sp, #12]
		uint32_t write = NO_WRITE;
   1550e:	f04f 31ff 	mov.w	r1, #4294967295
				drive = NRF_DRIVE_S0D1;
   15512:	f04f 0906 	mov.w	r9, #6
   15516:	e6eb      	b.n	152f0 <pinctrl_configure_pins+0x20>
				nrf_gpio_pin_write(pin, write);
   15518:	4628      	mov	r0, r5
   1551a:	f7ff febb 	bl	15294 <nrf_gpio_pin_write>
   1551e:	e6ed      	b.n	152fc <pinctrl_configure_pins+0x2c>
				     drive, NRF_GPIO_PIN_NOSENSE);
		}
	}

	return 0;
   15520:	2000      	movs	r0, #0
   15522:	e001      	b.n	15528 <pinctrl_configure_pins+0x258>
		switch (NRF_GET_FUN(pins[i])) {
   15524:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
   15528:	b005      	add	sp, #20
   1552a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1552e:	bf00      	nop

00015530 <tfm_ns_interface_dispatch>:
K_MUTEX_DEFINE(tfm_mutex);

int32_t tfm_ns_interface_dispatch(veneer_fn fn,
				  uint32_t arg0, uint32_t arg1,
				  uint32_t arg2, uint32_t arg3)
{
   15530:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15534:	b0a2      	sub	sp, #136	; 0x88
   15536:	4604      	mov	r4, r0
   15538:	4688      	mov	r8, r1
   1553a:	4615      	mov	r5, r2
   1553c:	461e      	mov	r6, r3
   1553e:	4b11      	ldr	r3, [pc, #68]	; (15584 <tfm_ns_interface_dispatch+0x54>)
   15540:	781f      	ldrb	r7, [r3, #0]
	int32_t result;
	bool is_pre_kernel = k_is_pre_kernel();

	if (!is_pre_kernel) {
   15542:	b13f      	cbz	r7, 15554 <tfm_ns_interface_dispatch+0x24>
	return z_impl_k_mutex_lock(mutex, timeout);
   15544:	f04f 32ff 	mov.w	r2, #4294967295
   15548:	f04f 33ff 	mov.w	r3, #4294967295
   1554c:	480e      	ldr	r0, [pc, #56]	; (15588 <tfm_ns_interface_dispatch+0x58>)
   1554e:	f001 fbed 	bl	16d2c <z_impl_k_mutex_lock>
		/* TF-M request protected by NS lock */
		if (k_mutex_lock(&tfm_mutex, K_FOREVER) != 0) {
   15552:	b980      	cbnz	r0, 15576 <tfm_ns_interface_dispatch+0x46>
#endif
	}

	struct fpu_ctx_full context_buffer;

	z_arm_save_fp_context(&context_buffer);
   15554:	4668      	mov	r0, sp
   15556:	f004 fc7c 	bl	19e52 <z_arm_save_fp_context>

	result = fn(arg0, arg1, arg2, arg3);
   1555a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   1555c:	4632      	mov	r2, r6
   1555e:	4629      	mov	r1, r5
   15560:	4640      	mov	r0, r8
   15562:	47a0      	blx	r4
   15564:	4604      	mov	r4, r0

	z_arm_restore_fp_context(&context_buffer);
   15566:	4668      	mov	r0, sp
   15568:	f004 fc74 	bl	19e54 <z_arm_restore_fp_context>

	if (!is_pre_kernel) {
   1556c:	b92f      	cbnz	r7, 1557a <tfm_ns_interface_dispatch+0x4a>

		k_mutex_unlock(&tfm_mutex);
	}

	return result;
}
   1556e:	4620      	mov	r0, r4
   15570:	b022      	add	sp, #136	; 0x88
   15572:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return (int32_t)TFM_ERROR_GENERIC;
   15576:	241f      	movs	r4, #31
   15578:	e7f9      	b.n	1556e <tfm_ns_interface_dispatch+0x3e>
	return z_impl_k_mutex_unlock(mutex);
   1557a:	4803      	ldr	r0, [pc, #12]	; (15588 <tfm_ns_interface_dispatch+0x58>)
   1557c:	f001 fc5a 	bl	16e34 <z_impl_k_mutex_unlock>
   15580:	e7f5      	b.n	1556e <tfm_ns_interface_dispatch+0x3e>
   15582:	bf00      	nop
   15584:	200086a5 	.word	0x200086a5
   15588:	2000835c 	.word	0x2000835c

0001558c <psa_generate_random>:
    return status;
}

psa_status_t psa_generate_random(uint8_t *output,
                                 size_t output_size)
{
   1558c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1558e:	b095      	sub	sp, #84	; 0x54
   15590:	4605      	mov	r5, r0
   15592:	460c      	mov	r4, r1
    psa_status_t status;
    struct tfm_crypto_pack_iovec iov = {
   15594:	af07      	add	r7, sp, #28
   15596:	2634      	movs	r6, #52	; 0x34
   15598:	4632      	mov	r2, r6
   1559a:	2100      	movs	r1, #0
   1559c:	4638      	mov	r0, r7
   1559e:	f005 fd1c 	bl	1afda <memset>
   155a2:	233f      	movs	r3, #63	; 0x3f
   155a4:	9307      	str	r3, [sp, #28]
        .srv_id = TFM_CRYPTO_GENERATE_RANDOM_SID,
    };

    psa_invec in_vec[] = {
   155a6:	9705      	str	r7, [sp, #20]
   155a8:	9606      	str	r6, [sp, #24]
        {.base = &iov, .len = sizeof(struct tfm_crypto_pack_iovec)},
    };

    psa_outvec out_vec[] = {
   155aa:	9503      	str	r5, [sp, #12]
   155ac:	9404      	str	r4, [sp, #16]
        {.base = output, .len = output_size},
    };

    if (output_size == 0) {
   155ae:	b914      	cbnz	r4, 155b6 <psa_generate_random+0x2a>
        return PSA_SUCCESS;
   155b0:	2000      	movs	r0, #0

    status = API_DISPATCH(tfm_crypto_generate_random,
                          TFM_CRYPTO_GENERATE_RANDOM);

    return status;
}
   155b2:	b015      	add	sp, #84	; 0x54
   155b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    status = API_DISPATCH(tfm_crypto_generate_random,
   155b6:	2301      	movs	r3, #1
   155b8:	9301      	str	r3, [sp, #4]
   155ba:	aa03      	add	r2, sp, #12
   155bc:	9200      	str	r2, [sp, #0]
   155be:	aa05      	add	r2, sp, #20
   155c0:	2100      	movs	r1, #0
   155c2:	4802      	ldr	r0, [pc, #8]	; (155cc <psa_generate_random+0x40>)
   155c4:	f000 f804 	bl	155d0 <psa_call>
    return status;
   155c8:	e7f3      	b.n	155b2 <psa_generate_random+0x26>
   155ca:	bf00      	nop
   155cc:	40000100 	.word	0x40000100

000155d0 <psa_call>:
psa_status_t psa_call(psa_handle_t handle, int32_t type,
                      const psa_invec *in_vec,
                      size_t in_len,
                      psa_outvec *out_vec,
                      size_t out_len)
{
   155d0:	b510      	push	{r4, lr}
   155d2:	b082      	sub	sp, #8
   155d4:	9c05      	ldr	r4, [sp, #20]
    if ((type > INT16_MAX) ||
   155d6:	f501 4c00 	add.w	ip, r1, #32768	; 0x8000
   155da:	f5bc 3f80 	cmp.w	ip, #65536	; 0x10000
   155de:	d214      	bcs.n	1560a <psa_call+0x3a>
        (type < INT16_MIN) ||
   155e0:	2bff      	cmp	r3, #255	; 0xff
   155e2:	d815      	bhi.n	15610 <psa_call+0x40>
        (in_len > UINT8_MAX) ||
   155e4:	2cff      	cmp	r4, #255	; 0xff
   155e6:	d816      	bhi.n	15616 <psa_call+0x46>
    }

    return tfm_ns_interface_dispatch(
                                (veneer_fn)tfm_psa_call_veneer,
                                (uint32_t)handle,
                                PARAM_PACK(type, in_len, out_len),
   155e8:	021b      	lsls	r3, r3, #8
   155ea:	fa1f fc83 	uxth.w	ip, r3
   155ee:	ea4c 4101 	orr.w	r1, ip, r1, lsl #16
   155f2:	b2e4      	uxtb	r4, r4
    return tfm_ns_interface_dispatch(
   155f4:	9b04      	ldr	r3, [sp, #16]
   155f6:	9300      	str	r3, [sp, #0]
   155f8:	4613      	mov	r3, r2
   155fa:	ea41 0204 	orr.w	r2, r1, r4
   155fe:	4601      	mov	r1, r0
   15600:	4806      	ldr	r0, [pc, #24]	; (1561c <psa_call+0x4c>)
   15602:	f7ff ff95 	bl	15530 <tfm_ns_interface_dispatch>
                                (uint32_t)in_vec,
                                (uint32_t)out_vec);
}
   15606:	b002      	add	sp, #8
   15608:	bd10      	pop	{r4, pc}
        return PSA_ERROR_PROGRAMMER_ERROR;
   1560a:	f06f 0080 	mvn.w	r0, #128	; 0x80
   1560e:	e7fa      	b.n	15606 <psa_call+0x36>
   15610:	f06f 0080 	mvn.w	r0, #128	; 0x80
   15614:	e7f7      	b.n	15606 <psa_call+0x36>
   15616:	f06f 0080 	mvn.w	r0, #128	; 0x80
   1561a:	e7f4      	b.n	15606 <psa_call+0x36>
   1561c:	0000bc21 	.word	0x0000bc21

00015620 <SystemCoreClockUpdate>:
#endif

void SystemCoreClockUpdate(void)
{
#if defined(NRF_TRUSTZONE_NONSECURE)
    SystemCoreClock = __SYSTEM_CLOCK_MAX >> (NRF_CLOCK_NS->HFCLKCTRL & (CLOCK_HFCLKCTRL_HCLK_Msk));
   15620:	4b04      	ldr	r3, [pc, #16]	; (15634 <SystemCoreClockUpdate+0x14>)
   15622:	f8d3 2558 	ldr.w	r2, [r3, #1368]	; 0x558
   15626:	f002 0203 	and.w	r2, r2, #3
   1562a:	4b03      	ldr	r3, [pc, #12]	; (15638 <SystemCoreClockUpdate+0x18>)
   1562c:	40d3      	lsrs	r3, r2
   1562e:	4a03      	ldr	r2, [pc, #12]	; (1563c <SystemCoreClockUpdate+0x1c>)
   15630:	6013      	str	r3, [r2, #0]
#else
    SystemCoreClock = __SYSTEM_CLOCK_MAX >> (NRF_CLOCK_S->HFCLKCTRL & (CLOCK_HFCLKCTRL_HCLK_Msk));
#endif
}
   15632:	4770      	bx	lr
   15634:	40005000 	.word	0x40005000
   15638:	07a12000 	.word	0x07a12000
   1563c:	200080b4 	.word	0x200080b4

00015640 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
   15640:	b510      	push	{r4, lr}
    int8_t idx;
    uint32_t new_mask, prev_mask;

    do {
        prev_mask = *p_mask;
   15642:	6804      	ldr	r4, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
   15644:	fab4 f384 	clz	r3, r4
   15648:	f1c3 031f 	rsb	r3, r3, #31
   1564c:	fa5f fc83 	uxtb.w	ip, r3
        if (idx < 0) {
   15650:	2b00      	cmp	r3, #0
   15652:	db12      	blt.n	1567a <nrfx_flag32_alloc+0x3a>
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
   15654:	2201      	movs	r2, #1
   15656:	fa02 f303 	lsl.w	r3, r2, r3
   1565a:	ea24 0303 	bic.w	r3, r4, r3
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1565e:	e8d0 2fef 	ldaex	r2, [r0]
   15662:	42a2      	cmp	r2, r4
   15664:	d104      	bne.n	15670 <nrfx_flag32_alloc+0x30>
   15666:	e8c0 3fee 	stlex	lr, r3, [r0]
   1566a:	f1be 0f00 	cmp.w	lr, #0
   1566e:	d1f6      	bne.n	1565e <nrfx_flag32_alloc+0x1e>
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   15670:	d1e7      	bne.n	15642 <nrfx_flag32_alloc+0x2>

    *p_flag = idx;
   15672:	f881 c000 	strb.w	ip, [r1]

    return NRFX_SUCCESS;
   15676:	4802      	ldr	r0, [pc, #8]	; (15680 <nrfx_flag32_alloc+0x40>)
}
   15678:	bd10      	pop	{r4, pc}
            return NRFX_ERROR_NO_MEM;
   1567a:	4802      	ldr	r0, [pc, #8]	; (15684 <nrfx_flag32_alloc+0x44>)
   1567c:	e7fc      	b.n	15678 <nrfx_flag32_alloc+0x38>
   1567e:	bf00      	nop
   15680:	0bad0000 	.word	0x0bad0000
   15684:	0bad0002 	.word	0x0bad0002

00015688 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
   15688:	6803      	ldr	r3, [r0, #0]
   1568a:	40cb      	lsrs	r3, r1
   1568c:	f013 0f01 	tst.w	r3, #1
   15690:	d111      	bne.n	156b6 <nrfx_flag32_free+0x2e>
{
   15692:	b500      	push	{lr}
    {
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
   15694:	6802      	ldr	r2, [r0, #0]
        new_mask = prev_mask | NRFX_BIT(flag);
   15696:	2301      	movs	r3, #1
   15698:	408b      	lsls	r3, r1
   1569a:	4313      	orrs	r3, r2
   1569c:	e8d0 cfef 	ldaex	ip, [r0]
   156a0:	4594      	cmp	ip, r2
   156a2:	d104      	bne.n	156ae <nrfx_flag32_free+0x26>
   156a4:	e8c0 3fee 	stlex	lr, r3, [r0]
   156a8:	f1be 0f00 	cmp.w	lr, #0
   156ac:	d1f6      	bne.n	1569c <nrfx_flag32_free+0x14>
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   156ae:	d1f1      	bne.n	15694 <nrfx_flag32_free+0xc>

    return NRFX_SUCCESS;
   156b0:	4802      	ldr	r0, [pc, #8]	; (156bc <nrfx_flag32_free+0x34>)
}
   156b2:	f85d fb04 	ldr.w	pc, [sp], #4
        return NRFX_ERROR_INVALID_PARAM;
   156b6:	4802      	ldr	r0, [pc, #8]	; (156c0 <nrfx_flag32_free+0x38>)
}
   156b8:	4770      	bx	lr
   156ba:	bf00      	nop
   156bc:	0bad0000 	.word	0x0bad0000
   156c0:	0bad0004 	.word	0x0bad0004

000156c4 <clock_stop>:
    CoreDebug->DEMCR = core_debug;
}
#endif // NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_132)

static void clock_stop(nrf_clock_domain_t domain)
{
   156c4:	b570      	push	{r4, r5, r6, lr}
   156c6:	b082      	sub	sp, #8
   156c8:	4606      	mov	r6, r0
    switch (domain)
   156ca:	2803      	cmp	r0, #3
   156cc:	d850      	bhi.n	15770 <clock_stop+0xac>
   156ce:	e8df f000 	tbb	[pc, r0]
   156d2:	1602      	.short	0x1602
   156d4:	2e21      	.short	0x2e21
    p_reg->INTENCLR = mask;
   156d6:	4b27      	ldr	r3, [pc, #156]	; (15774 <clock_stop+0xb0>)
   156d8:	2202      	movs	r2, #2
   156da:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   156de:	2200      	movs	r2, #0
   156e0:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   156e4:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   156e8:	2201      	movs	r2, #1
   156ea:	60da      	str	r2, [r3, #12]
            NRFX_ASSERT(0);
            return;
    }

    bool stopped;
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
   156ec:	2301      	movs	r3, #1
   156ee:	f88d 3007 	strb.w	r3, [sp, #7]
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
   156f2:	429e      	cmp	r6, r3
   156f4:	d028      	beq.n	15748 <clock_stop+0x84>
   156f6:	2500      	movs	r5, #0
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
   156f8:	f242 7410 	movw	r4, #10000	; 0x2710
   156fc:	e02c      	b.n	15758 <clock_stop+0x94>
    p_reg->INTENCLR = mask;
   156fe:	4b1d      	ldr	r3, [pc, #116]	; (15774 <clock_stop+0xb0>)
   15700:	2201      	movs	r2, #1
   15702:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   15706:	2100      	movs	r1, #0
   15708:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
   1570c:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   15710:	605a      	str	r2, [r3, #4]
}
   15712:	e7eb      	b.n	156ec <clock_stop+0x28>
    p_reg->INTENCLR = mask;
   15714:	4b17      	ldr	r3, [pc, #92]	; (15774 <clock_stop+0xb0>)
   15716:	f44f 7200 	mov.w	r2, #512	; 0x200
   1571a:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1571e:	2200      	movs	r2, #0
   15720:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
   15724:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   15728:	2201      	movs	r2, #1
   1572a:	625a      	str	r2, [r3, #36]	; 0x24
}
   1572c:	e7de      	b.n	156ec <clock_stop+0x28>
    p_reg->INTENCLR = mask;
   1572e:	4b11      	ldr	r3, [pc, #68]	; (15774 <clock_stop+0xb0>)
   15730:	f44f 7280 	mov.w	r2, #256	; 0x100
   15734:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   15738:	2200      	movs	r2, #0
   1573a:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
   1573e:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   15742:	2201      	movs	r2, #1
   15744:	61da      	str	r2, [r3, #28]
}
   15746:	e7d1      	b.n	156ec <clock_stop+0x28>
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
   15748:	f10d 0507 	add.w	r5, sp, #7
   1574c:	e7d4      	b.n	156f8 <clock_stop+0x34>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
   1574e:	2001      	movs	r0, #1
   15750:	f005 f90c 	bl	1a96c <nrfx_busy_wait>
   15754:	3c01      	subs	r4, #1
   15756:	d00b      	beq.n	15770 <clock_stop+0xac>
   15758:	462a      	mov	r2, r5
   1575a:	4631      	mov	r1, r6
   1575c:	4805      	ldr	r0, [pc, #20]	; (15774 <clock_stop+0xb0>)
   1575e:	f005 f909 	bl	1a974 <nrf_clock_is_running>
   15762:	b128      	cbz	r0, 15770 <clock_stop+0xac>
   15764:	2d00      	cmp	r5, #0
   15766:	d0f2      	beq.n	1574e <clock_stop+0x8a>
   15768:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1576c:	2b01      	cmp	r3, #1
   1576e:	d0ee      	beq.n	1574e <clock_stop+0x8a>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
   15770:	b002      	add	sp, #8
   15772:	bd70      	pop	{r4, r5, r6, pc}
   15774:	40005000 	.word	0x40005000

00015778 <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
   15778:	4b05      	ldr	r3, [pc, #20]	; (15790 <nrfx_clock_init+0x18>)
   1577a:	791b      	ldrb	r3, [r3, #4]
   1577c:	b92b      	cbnz	r3, 1578a <nrfx_clock_init+0x12>
    else
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
   1577e:	4b04      	ldr	r3, [pc, #16]	; (15790 <nrfx_clock_init+0x18>)
   15780:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
   15782:	2201      	movs	r2, #1
   15784:	711a      	strb	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
   15786:	4803      	ldr	r0, [pc, #12]	; (15794 <nrfx_clock_init+0x1c>)
   15788:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
   1578a:	4803      	ldr	r0, [pc, #12]	; (15798 <nrfx_clock_init+0x20>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   1578c:	4770      	bx	lr
   1578e:	bf00      	nop
   15790:	20008620 	.word	0x20008620
   15794:	0bad0000 	.word	0x0bad0000
   15798:	0bad000c 	.word	0x0bad000c

0001579c <nrfx_clock_enable>:

void nrfx_clock_enable(void)
{
   1579c:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    nrfx_power_clock_irq_init();
   1579e:	f005 f925 	bl	1a9ec <nrfx_power_clock_irq_init>
    nrf_clock_lf_src_set(NRF_CLOCK, clock_initial_lfclksrc_get());
   157a2:	f005 f921 	bl	1a9e8 <clock_initial_lfclksrc_get>
    p_reg->LFCLKSRC = (uint32_t)(source);
   157a6:	4b04      	ldr	r3, [pc, #16]	; (157b8 <nrfx_clock_enable+0x1c>)
   157a8:	f8c3 0518 	str.w	r0, [r3, #1304]	; 0x518
}

#if NRF_CLOCK_HAS_HFCLKSRC
NRF_STATIC_INLINE void nrf_clock_hf_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_hfclk_t source)
{
    p_reg->HFCLKSRC = (uint32_t)(source);
   157ac:	2201      	movs	r2, #1
   157ae:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
                                   >> CLOCK_HFCLK192MCTRL_HCLK192M_Pos);
}

NRF_STATIC_INLINE void nrf_clock_hfclk192m_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_hfclk_t source)
{
    p_reg->HFCLK192MSRC = (uint32_t)(source);
   157b2:	f8c3 2580 	str.w	r2, [r3, #1408]	; 0x580
#if NRFX_CHECK(NRFX_POWER_ENABLED)
    nrfx_clock_irq_enabled = true;
#endif

    NRFX_LOG_INFO("Module enabled.");
}
   157b6:	bd08      	pop	{r3, pc}
   157b8:	40005000 	.word	0x40005000

000157bc <nrfx_clock_start>:
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
   157bc:	2803      	cmp	r0, #3
   157be:	d869      	bhi.n	15894 <nrfx_clock_start+0xd8>
   157c0:	e8df f000 	tbb	[pc, r0]
   157c4:	5b4e4302 	.word	0x5b4e4302
{
   157c8:	b500      	push	{lr}
   157ca:	b083      	sub	sp, #12
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   157cc:	4a32      	ldr	r2, [pc, #200]	; (15898 <nrfx_clock_start+0xdc>)
   157ce:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
   157d2:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
   157d6:	f88d 3007 	strb.w	r3, [sp, #7]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   157da:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
   157de:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   157e2:	d11b      	bne.n	1581c <nrfx_clock_start+0x60>
            return ((p_reg->LFCLKRUN & CLOCK_LFCLKRUN_STATUS_Msk)
   157e4:	4b2c      	ldr	r3, [pc, #176]	; (15898 <nrfx_clock_start+0xdc>)
   157e6:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
                    // LF clock is already running. Inspect its source.
                    // If LF clock source is inappropriate then it will be stopped and modified.
                    // Ignore return value as LF clock will be started again regardless of the result.
                    (void)clock_lfclksrc_tweak(&lfclksrc);
                }
                else if (nrf_clock_start_task_check(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK))
   157ea:	f013 0f01 	tst.w	r3, #1
   157ee:	d11a      	bne.n	15826 <nrfx_clock_start+0x6a>
                    // LF clock was stopped and modified. Now it will be restarted.
                }
                else
                {
                    // LF clock not active and not started.
                    lfclksrc = clock_initial_lfclksrc_get();
   157f0:	f005 f8fa 	bl	1a9e8 <clock_initial_lfclksrc_get>
   157f4:	f88d 0007 	strb.w	r0, [sp, #7]
                }
                nrf_clock_lf_src_set(NRF_CLOCK, lfclksrc);
   157f8:	f89d 2007 	ldrb.w	r2, [sp, #7]
    p_reg->LFCLKSRC = (uint32_t)(source);
   157fc:	4b26      	ldr	r3, [pc, #152]	; (15898 <nrfx_clock_start+0xdc>)
   157fe:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   15802:	2200      	movs	r2, #0
   15804:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   15808:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    p_reg->INTENSET = mask;
   1580c:	2202      	movs	r2, #2
   1580e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   15812:	2201      	movs	r2, #1
   15814:	609a      	str	r2, [r3, #8]
#endif
        default:
            NRFX_ASSERT(0);
            break;
    }
}
   15816:	b003      	add	sp, #12
   15818:	f85d fb04 	ldr.w	pc, [sp], #4
                    (void)clock_lfclksrc_tweak(&lfclksrc);
   1581c:	f10d 0007 	add.w	r0, sp, #7
   15820:	f005 f8ee 	bl	1aa00 <clock_lfclksrc_tweak>
   15824:	e7e8      	b.n	157f8 <nrfx_clock_start+0x3c>
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   15826:	4b1c      	ldr	r3, [pc, #112]	; (15898 <nrfx_clock_start+0xdc>)
   15828:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
   1582c:	f003 0303 	and.w	r3, r3, #3
                    lfclksrc = nrf_clock_lf_srccopy_get(NRF_CLOCK);
   15830:	f88d 3007 	strb.w	r3, [sp, #7]
                    if (clock_lfclksrc_tweak(&lfclksrc))
   15834:	f10d 0007 	add.w	r0, sp, #7
   15838:	f005 f8e2 	bl	1aa00 <clock_lfclksrc_tweak>
   1583c:	2800      	cmp	r0, #0
   1583e:	d0db      	beq.n	157f8 <nrfx_clock_start+0x3c>
    p_reg->INTENSET = mask;
   15840:	4b15      	ldr	r3, [pc, #84]	; (15898 <nrfx_clock_start+0xdc>)
   15842:	2202      	movs	r2, #2
   15844:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
                        break;
   15848:	e7e5      	b.n	15816 <nrfx_clock_start+0x5a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1584a:	4b13      	ldr	r3, [pc, #76]	; (15898 <nrfx_clock_start+0xdc>)
   1584c:	2200      	movs	r2, #0
   1584e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   15852:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
   15856:	2201      	movs	r2, #1
   15858:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1585c:	601a      	str	r2, [r3, #0]
}
   1585e:	4770      	bx	lr
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   15860:	4b0d      	ldr	r3, [pc, #52]	; (15898 <nrfx_clock_start+0xdc>)
   15862:	2200      	movs	r2, #0
   15864:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
   15868:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    p_reg->INTENSET = mask;
   1586c:	f44f 7200 	mov.w	r2, #512	; 0x200
   15870:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   15874:	2201      	movs	r2, #1
   15876:	621a      	str	r2, [r3, #32]
}
   15878:	4770      	bx	lr
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1587a:	4b07      	ldr	r3, [pc, #28]	; (15898 <nrfx_clock_start+0xdc>)
   1587c:	2200      	movs	r2, #0
   1587e:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
   15882:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    p_reg->INTENSET = mask;
   15886:	f44f 7280 	mov.w	r2, #256	; 0x100
   1588a:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1588e:	2201      	movs	r2, #1
   15890:	619a      	str	r2, [r3, #24]
}
   15892:	4770      	bx	lr
   15894:	4770      	bx	lr
   15896:	bf00      	nop
   15898:	40005000 	.word	0x40005000

0001589c <nrfx_power_clock_irq_handler>:
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
   1589c:	b508      	push	{r3, lr}
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   1589e:	4b2b      	ldr	r3, [pc, #172]	; (1594c <nrfx_power_clock_irq_handler+0xb0>)
   158a0:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
   158a4:	b15b      	cbz	r3, 158be <nrfx_power_clock_irq_handler+0x22>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   158a6:	4b29      	ldr	r3, [pc, #164]	; (1594c <nrfx_power_clock_irq_handler+0xb0>)
   158a8:	2000      	movs	r0, #0
   158aa:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
   158ae:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
   158b2:	2201      	movs	r2, #1
   158b4:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        {
            m_clock_cb.hfclk_started = true;
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   158b8:	4b25      	ldr	r3, [pc, #148]	; (15950 <nrfx_power_clock_irq_handler+0xb4>)
   158ba:	681b      	ldr	r3, [r3, #0]
   158bc:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   158be:	4b23      	ldr	r3, [pc, #140]	; (1594c <nrfx_power_clock_irq_handler+0xb0>)
   158c0:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
   158c4:	b1ab      	cbz	r3, 158f2 <nrfx_power_clock_irq_handler+0x56>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   158c6:	4b21      	ldr	r3, [pc, #132]	; (1594c <nrfx_power_clock_irq_handler+0xb0>)
   158c8:	2200      	movs	r2, #0
   158ca:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   158ce:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   158d2:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
   158d6:	f002 0203 	and.w	r2, r2, #3
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   158da:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
   158de:	2a01      	cmp	r2, #1
   158e0:	d02c      	beq.n	1593c <nrfx_power_clock_irq_handler+0xa0>
    p_reg->INTENCLR = mask;
   158e2:	4b1a      	ldr	r3, [pc, #104]	; (1594c <nrfx_power_clock_irq_handler+0xb0>)
   158e4:	2202      	movs	r2, #2
   158e6:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        else
#endif
        {
            // After the LF clock external source start invoke user callback.
            nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_LF_STARTED_MASK);
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   158ea:	4b19      	ldr	r3, [pc, #100]	; (15950 <nrfx_power_clock_irq_handler+0xb4>)
   158ec:	681b      	ldr	r3, [r3, #0]
   158ee:	2001      	movs	r0, #1
   158f0:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   158f2:	4b16      	ldr	r3, [pc, #88]	; (1594c <nrfx_power_clock_irq_handler+0xb0>)
   158f4:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_CAL_DONE);
    }
#endif // NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)

#if NRF_CLOCK_HAS_HFCLKAUDIO
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED))
   158f8:	b16b      	cbz	r3, 15916 <nrfx_power_clock_irq_handler+0x7a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   158fa:	4b14      	ldr	r3, [pc, #80]	; (1594c <nrfx_power_clock_irq_handler+0xb0>)
   158fc:	2200      	movs	r2, #0
   158fe:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
   15902:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    p_reg->INTENCLR = mask;
   15906:	f44f 7280 	mov.w	r2, #256	; 0x100
   1590a:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    {
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HFAUDIO_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLKAUDIO_STARTED);
   1590e:	4b10      	ldr	r3, [pc, #64]	; (15950 <nrfx_power_clock_irq_handler+0xb4>)
   15910:	681b      	ldr	r3, [r3, #0]
   15912:	2004      	movs	r0, #4
   15914:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   15916:	4b0d      	ldr	r3, [pc, #52]	; (1594c <nrfx_power_clock_irq_handler+0xb0>)
   15918:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
    }
#endif

#if NRF_CLOCK_HAS_HFCLK192M
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLK192MSTARTED))
   1591c:	b16b      	cbz	r3, 1593a <nrfx_power_clock_irq_handler+0x9e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1591e:	4b0b      	ldr	r3, [pc, #44]	; (1594c <nrfx_power_clock_irq_handler+0xb0>)
   15920:	2200      	movs	r2, #0
   15922:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
   15926:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    p_reg->INTENCLR = mask;
   1592a:	f44f 7200 	mov.w	r2, #512	; 0x200
   1592e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    {
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLK192MSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLK192MSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
   15932:	4b07      	ldr	r3, [pc, #28]	; (15950 <nrfx_power_clock_irq_handler+0xb4>)
   15934:	681b      	ldr	r3, [r3, #0]
   15936:	2005      	movs	r0, #5
   15938:	4798      	blx	r3
    }
#endif
}
   1593a:	bd08      	pop	{r3, pc}
    p_reg->LFCLKSRC = (uint32_t)(source);
   1593c:	4b03      	ldr	r3, [pc, #12]	; (1594c <nrfx_power_clock_irq_handler+0xb0>)
   1593e:	2202      	movs	r2, #2
   15940:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   15944:	2201      	movs	r2, #1
   15946:	609a      	str	r2, [r3, #8]
}
   15948:	e7d3      	b.n	158f2 <nrfx_power_clock_irq_handler+0x56>
   1594a:	bf00      	nop
   1594c:	40005000 	.word	0x40005000
   15950:	20008620 	.word	0x20008620

00015954 <nrfx_dppi_channel_alloc>:
    // Clear all allocated groups.
    m_allocated_groups = DPPI_AVAILABLE_GROUPS_MASK;
}

nrfx_err_t nrfx_dppi_channel_alloc(uint8_t * p_channel)
{
   15954:	b508      	push	{r3, lr}
   15956:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_allocated_channels, p_channel);
   15958:	4801      	ldr	r0, [pc, #4]	; (15960 <nrfx_dppi_channel_alloc+0xc>)
   1595a:	f7ff fe71 	bl	15640 <nrfx_flag32_alloc>
}
   1595e:	bd08      	pop	{r3, pc}
   15960:	200080b8 	.word	0x200080b8

00015964 <nrf_gpio_reconfigure>:
{
   15964:	b5f0      	push	{r4, r5, r6, r7, lr}
   15966:	461c      	mov	r4, r3
   15968:	9f05      	ldr	r7, [sp, #20]
   1596a:	9e06      	ldr	r6, [sp, #24]
    *p_pin = pin_number & 0x1F;
   1596c:	f000 0c1f 	and.w	ip, r0, #31
    return pin_number >> 5;
   15970:	0940      	lsrs	r0, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   15972:	2801      	cmp	r0, #1
   15974:	d034      	beq.n	159e0 <nrf_gpio_reconfigure+0x7c>
        case 0: return NRF_P0;
   15976:	4d27      	ldr	r5, [pc, #156]	; (15a14 <nrf_gpio_reconfigure+0xb0>)
    uint32_t cnf = reg->PIN_CNF[pin_number];
   15978:	f10c 0380 	add.w	r3, ip, #128	; 0x80
   1597c:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   15980:	b381      	cbz	r1, 159e4 <nrf_gpio_reconfigure+0x80>
   15982:	2001      	movs	r0, #1
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   15984:	b382      	cbz	r2, 159e8 <nrf_gpio_reconfigure+0x84>
   15986:	f04f 0e02 	mov.w	lr, #2
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   1598a:	ea40 000e 	orr.w	r0, r0, lr
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   1598e:	b374      	cbz	r4, 159ee <nrf_gpio_reconfigure+0x8a>
   15990:	f04f 0e0c 	mov.w	lr, #12
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   15994:	ea40 000e 	orr.w	r0, r0, lr
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   15998:	b367      	cbz	r7, 159f4 <nrf_gpio_reconfigure+0x90>
   1599a:	f44f 6e70 	mov.w	lr, #3840	; 0xf00
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   1599e:	ea40 000e 	orr.w	r0, r0, lr
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   159a2:	b356      	cbz	r6, 159fa <nrf_gpio_reconfigure+0x96>
   159a4:	f44f 3e40 	mov.w	lr, #196608	; 0x30000
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   159a8:	ea40 000e 	orr.w	r0, r0, lr
    cnf &= ~to_update;
   159ac:	ea23 0000 	bic.w	r0, r3, r0
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   159b0:	b331      	cbz	r1, 15a00 <nrf_gpio_reconfigure+0x9c>
   159b2:	780b      	ldrb	r3, [r1, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
   159b4:	b332      	cbz	r2, 15a04 <nrf_gpio_reconfigure+0xa0>
   159b6:	7812      	ldrb	r2, [r2, #0]
   159b8:	0052      	lsls	r2, r2, #1
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   159ba:	4313      	orrs	r3, r2
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   159bc:	b324      	cbz	r4, 15a08 <nrf_gpio_reconfigure+0xa4>
   159be:	7822      	ldrb	r2, [r4, #0]
   159c0:	0092      	lsls	r2, r2, #2
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
   159c2:	4313      	orrs	r3, r2
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   159c4:	b317      	cbz	r7, 15a0c <nrf_gpio_reconfigure+0xa8>
   159c6:	783a      	ldrb	r2, [r7, #0]
   159c8:	0212      	lsls	r2, r2, #8
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   159ca:	4313      	orrs	r3, r2
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
   159cc:	b306      	cbz	r6, 15a10 <nrf_gpio_reconfigure+0xac>
   159ce:	7832      	ldrb	r2, [r6, #0]
   159d0:	0412      	lsls	r2, r2, #16
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   159d2:	4313      	orrs	r3, r2
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   159d4:	4303      	orrs	r3, r0
    reg->PIN_CNF[pin_number] = cnf;
   159d6:	f10c 0c80 	add.w	ip, ip, #128	; 0x80
   159da:	f845 302c 	str.w	r3, [r5, ip, lsl #2]
}
   159de:	bdf0      	pop	{r4, r5, r6, r7, pc}
        case 1: return NRF_P1;
   159e0:	4d0d      	ldr	r5, [pc, #52]	; (15a18 <nrf_gpio_reconfigure+0xb4>)
   159e2:	e7c9      	b.n	15978 <nrf_gpio_reconfigure+0x14>
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   159e4:	2000      	movs	r0, #0
   159e6:	e7cd      	b.n	15984 <nrf_gpio_reconfigure+0x20>
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   159e8:	f04f 0e00 	mov.w	lr, #0
   159ec:	e7cd      	b.n	1598a <nrf_gpio_reconfigure+0x26>
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   159ee:	f04f 0e00 	mov.w	lr, #0
   159f2:	e7cf      	b.n	15994 <nrf_gpio_reconfigure+0x30>
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   159f4:	f04f 0e00 	mov.w	lr, #0
   159f8:	e7d1      	b.n	1599e <nrf_gpio_reconfigure+0x3a>
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   159fa:	f04f 0e00 	mov.w	lr, #0
   159fe:	e7d3      	b.n	159a8 <nrf_gpio_reconfigure+0x44>
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   15a00:	2300      	movs	r3, #0
   15a02:	e7d7      	b.n	159b4 <nrf_gpio_reconfigure+0x50>
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
   15a04:	2200      	movs	r2, #0
   15a06:	e7d8      	b.n	159ba <nrf_gpio_reconfigure+0x56>
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   15a08:	2200      	movs	r2, #0
   15a0a:	e7da      	b.n	159c2 <nrf_gpio_reconfigure+0x5e>
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   15a0c:	2200      	movs	r2, #0
   15a0e:	e7dc      	b.n	159ca <nrf_gpio_reconfigure+0x66>
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
   15a10:	2200      	movs	r2, #0
   15a12:	e7de      	b.n	159d2 <nrf_gpio_reconfigure+0x6e>
   15a14:	40842500 	.word	0x40842500
   15a18:	40842800 	.word	0x40842800

00015a1c <nrf_gpio_cfg_default>:
    *p_pin = pin_number & 0x1F;
   15a1c:	f000 021f 	and.w	r2, r0, #31
    return pin_number >> 5;
   15a20:	0940      	lsrs	r0, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   15a22:	2801      	cmp	r0, #1
   15a24:	d00a      	beq.n	15a3c <nrf_gpio_cfg_default+0x20>
        case 0: return NRF_P0;
   15a26:	4906      	ldr	r1, [pc, #24]	; (15a40 <nrf_gpio_cfg_default+0x24>)
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
   15a28:	3280      	adds	r2, #128	; 0x80
   15a2a:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
   15a2e:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
   15a32:	f043 0302 	orr.w	r3, r3, #2
    reg->PIN_CNF[pin_number] = cnf;
   15a36:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
}
   15a3a:	4770      	bx	lr
        case 1: return NRF_P1;
   15a3c:	4901      	ldr	r1, [pc, #4]	; (15a44 <nrf_gpio_cfg_default+0x28>)
   15a3e:	e7f3      	b.n	15a28 <nrf_gpio_cfg_default+0xc>
   15a40:	40842500 	.word	0x40842500
   15a44:	40842800 	.word	0x40842800

00015a48 <nrf_gpio_latches_read_and_clear>:
{
   15a48:	b500      	push	{lr}
   15a4a:	b083      	sub	sp, #12
   15a4c:	4684      	mov	ip, r0
   15a4e:	468e      	mov	lr, r1
    NRF_GPIO_Type * gpio_regs[GPIO_COUNT] = GPIO_REG_LIST;
   15a50:	4b0c      	ldr	r3, [pc, #48]	; (15a84 <nrf_gpio_latches_read_and_clear+0x3c>)
   15a52:	e893 0003 	ldmia.w	r3, {r0, r1}
   15a56:	ab02      	add	r3, sp, #8
   15a58:	e903 0003 	stmdb	r3, {r0, r1}
    for (i = start_port; i < (start_port + length); i++)
   15a5c:	4663      	mov	r3, ip
   15a5e:	e009      	b.n	15a74 <nrf_gpio_latches_read_and_clear+0x2c>
        *p_masks = gpio_regs[i]->LATCH;
   15a60:	a902      	add	r1, sp, #8
   15a62:	eb01 0183 	add.w	r1, r1, r3, lsl #2
   15a66:	f851 1c08 	ldr.w	r1, [r1, #-8]
   15a6a:	6a08      	ldr	r0, [r1, #32]
   15a6c:	f842 0b04 	str.w	r0, [r2], #4
        gpio_regs[i]->LATCH = *p_masks;
   15a70:	6208      	str	r0, [r1, #32]
    for (i = start_port; i < (start_port + length); i++)
   15a72:	3301      	adds	r3, #1
   15a74:	eb0c 000e 	add.w	r0, ip, lr
   15a78:	4298      	cmp	r0, r3
   15a7a:	d8f1      	bhi.n	15a60 <nrf_gpio_latches_read_and_clear+0x18>
}
   15a7c:	b003      	add	sp, #12
   15a7e:	f85d fb04 	ldr.w	pc, [sp], #4
   15a82:	bf00      	nop
   15a84:	0001bab0 	.word	0x0001bab0

00015a88 <pin_in_use>:
 *
 * @return True if pin is in use.
 */
static bool pin_in_use(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
   15a88:	3008      	adds	r0, #8
   15a8a:	4b03      	ldr	r3, [pc, #12]	; (15a98 <pin_in_use+0x10>)
   15a8c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   15a90:	f000 0001 	and.w	r0, r0, #1
   15a94:	4770      	bx	lr
   15a96:	bf00      	nop
   15a98:	200080bc 	.word	0x200080bc

00015a9c <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
   15a9c:	3008      	adds	r0, #8
   15a9e:	4b03      	ldr	r3, [pc, #12]	; (15aac <pin_in_use_by_te+0x10>)
   15aa0:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   15aa4:	f3c0 1040 	ubfx	r0, r0, #5, #1
   15aa8:	4770      	bx	lr
   15aaa:	bf00      	nop
   15aac:	200080bc 	.word	0x200080bc

00015ab0 <pin_has_trigger>:
 *
 * @return True if pin has trigger.
 */
static bool pin_has_trigger(uint32_t pin)
{
    return PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]) != NRFX_GPIOTE_TRIGGER_NONE;
   15ab0:	3008      	adds	r0, #8
   15ab2:	4b04      	ldr	r3, [pc, #16]	; (15ac4 <pin_has_trigger+0x14>)
   15ab4:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   15ab8:	f010 001c 	ands.w	r0, r0, #28
   15abc:	bf18      	it	ne
   15abe:	2001      	movne	r0, #1
   15ac0:	4770      	bx	lr
   15ac2:	bf00      	nop
   15ac4:	200080bc 	.word	0x200080bc

00015ac8 <pin_is_output>:
 *
 * @return True if pin is output.
 */
static bool pin_is_output(uint32_t pin)
{
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   15ac8:	3008      	adds	r0, #8
   15aca:	4b03      	ldr	r3, [pc, #12]	; (15ad8 <pin_is_output+0x10>)
   15acc:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   15ad0:	f3c0 0040 	ubfx	r0, r0, #1, #1
   15ad4:	4770      	bx	lr
   15ad6:	bf00      	nop
   15ad8:	200080bc 	.word	0x200080bc

00015adc <pin_te_get>:
}

/* Returns gpiote TE channel associated with the pin */
static uint8_t pin_te_get(nrfx_gpiote_pin_t pin)
{
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   15adc:	3008      	adds	r0, #8
   15ade:	4b02      	ldr	r3, [pc, #8]	; (15ae8 <pin_te_get+0xc>)
   15ae0:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   15ae4:	0b40      	lsrs	r0, r0, #13
   15ae6:	4770      	bx	lr
   15ae8:	200080bc 	.word	0x200080bc

00015aec <handler_in_use>:
}

static bool handler_in_use(int32_t handler_id)
{

    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   15aec:	2200      	movs	r2, #0
   15aee:	e004      	b.n	15afa <handler_in_use+0xe>
    {
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
   15af0:	f04f 33ff 	mov.w	r3, #4294967295
   15af4:	4283      	cmp	r3, r0
   15af6:	d00f      	beq.n	15b18 <handler_in_use+0x2c>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   15af8:	3201      	adds	r2, #1
   15afa:	2a2f      	cmp	r2, #47	; 0x2f
   15afc:	d80a      	bhi.n	15b14 <handler_in_use+0x28>
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
   15afe:	f102 0308 	add.w	r3, r2, #8
   15b02:	4906      	ldr	r1, [pc, #24]	; (15b1c <handler_in_use+0x30>)
   15b04:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
   15b08:	f413 7f80 	tst.w	r3, #256	; 0x100
   15b0c:	d0f0      	beq.n	15af0 <handler_in_use+0x4>
   15b0e:	f3c3 2343 	ubfx	r3, r3, #9, #4
   15b12:	e7ef      	b.n	15af4 <handler_in_use+0x8>
        {
            return true;
        }
    }

    return false;
   15b14:	2000      	movs	r0, #0
   15b16:	4770      	bx	lr
            return true;
   15b18:	2001      	movs	r0, #1
}
   15b1a:	4770      	bx	lr
   15b1c:	200080bc 	.word	0x200080bc

00015b20 <find_handler>:
    return NRFX_SUCCESS;
}

static int32_t find_handler(nrfx_gpiote_interrupt_handler_t handler, void * p_context)
{
    for (uint32_t i = 0; i < NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS; i++)
   15b20:	2300      	movs	r3, #0
   15b22:	b113      	cbz	r3, 15b2a <find_handler+0xa>
        {
            return i;
        }
    }

    return -1;
   15b24:	f04f 30ff 	mov.w	r0, #4294967295
}
   15b28:	4770      	bx	lr
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   15b2a:	4a07      	ldr	r2, [pc, #28]	; (15b48 <find_handler+0x28>)
   15b2c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
   15b30:	4282      	cmp	r2, r0
   15b32:	d001      	beq.n	15b38 <find_handler+0x18>
    for (uint32_t i = 0; i < NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS; i++)
   15b34:	3301      	adds	r3, #1
   15b36:	e7f4      	b.n	15b22 <find_handler+0x2>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   15b38:	4a03      	ldr	r2, [pc, #12]	; (15b48 <find_handler+0x28>)
   15b3a:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
   15b3e:	6852      	ldr	r2, [r2, #4]
   15b40:	428a      	cmp	r2, r1
   15b42:	d1f7      	bne.n	15b34 <find_handler+0x14>
            return i;
   15b44:	4618      	mov	r0, r3
   15b46:	4770      	bx	lr
   15b48:	200080bc 	.word	0x200080bc

00015b4c <get_initial_sense>:
    return NRFX_SUCCESS;
}

static inline nrf_gpio_pin_sense_t get_initial_sense(nrfx_gpiote_pin_t pin)
{
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   15b4c:	f100 0208 	add.w	r2, r0, #8
   15b50:	4b0e      	ldr	r3, [pc, #56]	; (15b8c <get_initial_sense+0x40>)
   15b52:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
   15b56:	f3c3 0382 	ubfx	r3, r3, #2, #3
    nrf_gpio_pin_sense_t sense;

    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
   15b5a:	2b04      	cmp	r3, #4
   15b5c:	d010      	beq.n	15b80 <get_initial_sense+0x34>
    {
        sense = NRF_GPIO_PIN_SENSE_LOW;
    }
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
   15b5e:	2b05      	cmp	r3, #5
   15b60:	d010      	beq.n	15b84 <get_initial_sense+0x38>
    *p_pin = pin_number & 0x1F;
   15b62:	f000 021f 	and.w	r2, r0, #31
    return pin_number >> 5;
   15b66:	0940      	lsrs	r0, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   15b68:	2801      	cmp	r0, #1
   15b6a:	d007      	beq.n	15b7c <get_initial_sense+0x30>
        case 0: return NRF_P0;
   15b6c:	4b08      	ldr	r3, [pc, #32]	; (15b90 <get_initial_sense+0x44>)
    return p_reg->IN;
   15b6e:	691b      	ldr	r3, [r3, #16]
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   15b70:	40d3      	lsrs	r3, r2
        sense = NRF_GPIO_PIN_SENSE_HIGH;
    }
    else
    {
        /* If edge detection start with sensing opposite state. */
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   15b72:	f013 0f01 	tst.w	r3, #1
   15b76:	d007      	beq.n	15b88 <get_initial_sense+0x3c>
   15b78:	2003      	movs	r0, #3
   15b7a:	4770      	bx	lr
        case 1: return NRF_P1;
   15b7c:	4b05      	ldr	r3, [pc, #20]	; (15b94 <get_initial_sense+0x48>)
   15b7e:	e7f6      	b.n	15b6e <get_initial_sense+0x22>
        sense = NRF_GPIO_PIN_SENSE_LOW;
   15b80:	2003      	movs	r0, #3
   15b82:	4770      	bx	lr
        sense = NRF_GPIO_PIN_SENSE_HIGH;
   15b84:	2002      	movs	r0, #2
   15b86:	4770      	bx	lr
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   15b88:	2002      	movs	r0, #2
    }

    return sense;
}
   15b8a:	4770      	bx	lr
   15b8c:	200080bc 	.word	0x200080bc
   15b90:	40842500 	.word	0x40842500
   15b94:	40842800 	.word	0x40842800

00015b98 <channel_handler_get>:
}

/* Return handler associated with given pin or null. */
static nrfx_gpiote_handler_config_t const * channel_handler_get(nrfx_gpiote_pin_t pin)
{
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   15b98:	3008      	adds	r0, #8
   15b9a:	4b06      	ldr	r3, [pc, #24]	; (15bb4 <channel_handler_get+0x1c>)
   15b9c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
   15ba0:	f410 7f80 	tst.w	r0, #256	; 0x100
   15ba4:	d004      	beq.n	15bb0 <channel_handler_get+0x18>
   15ba6:	f3c0 2043 	ubfx	r0, r0, #9, #4
    if (handler_id == PIN_FLAG_NO_HANDLER)
    {
        return NULL;
    }

    return &m_cb.handlers[handler_id];
   15baa:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   15bae:	4770      	bx	lr
        return NULL;
   15bb0:	2000      	movs	r0, #0
}
   15bb2:	4770      	bx	lr
   15bb4:	200080bc 	.word	0x200080bc

00015bb8 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
   15bb8:	b570      	push	{r4, r5, r6, lr}
   15bba:	4604      	mov	r4, r0
   15bbc:	460d      	mov	r5, r1
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);
   15bbe:	f7ff ffeb 	bl	15b98 <channel_handler_get>

    if (handler)
   15bc2:	b120      	cbz	r0, 15bce <call_handler+0x16>
    {
        handler->handler(pin, trigger, handler->p_context);
   15bc4:	6806      	ldr	r6, [r0, #0]
   15bc6:	6842      	ldr	r2, [r0, #4]
   15bc8:	4629      	mov	r1, r5
   15bca:	4620      	mov	r0, r4
   15bcc:	47b0      	blx	r6
    }
    if (m_cb.global_handler.handler)
   15bce:	4b04      	ldr	r3, [pc, #16]	; (15be0 <call_handler+0x28>)
   15bd0:	689b      	ldr	r3, [r3, #8]
   15bd2:	b123      	cbz	r3, 15bde <call_handler+0x26>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   15bd4:	4a02      	ldr	r2, [pc, #8]	; (15be0 <call_handler+0x28>)
   15bd6:	68d2      	ldr	r2, [r2, #12]
   15bd8:	4629      	mov	r1, r5
   15bda:	4620      	mov	r0, r4
   15bdc:	4798      	blx	r3
    }
}
   15bde:	bd70      	pop	{r4, r5, r6, pc}
   15be0:	200080bc 	.word	0x200080bc

00015be4 <next_sense_cond_call_handler>:

static void next_sense_cond_call_handler(nrfx_gpiote_pin_t     pin,
                                         nrfx_gpiote_trigger_t trigger,
                                         nrf_gpio_pin_sense_t  sense)
{
   15be4:	b570      	push	{r4, r5, r6, lr}
   15be6:	4606      	mov	r6, r0
   15be8:	460c      	mov	r4, r1
   15bea:	4615      	mov	r5, r2
    if (is_level(trigger))
   15bec:	4608      	mov	r0, r1
   15bee:	f004 ff80 	bl	1aaf2 <is_level>
   15bf2:	b960      	cbnz	r0, 15c0e <next_sense_cond_call_handler+0x2a>
    {
        /* Reconfigure sense to the opposite level, so the internal PINx.DETECT signal
         * can be deasserted. Therefore PORT event can be generated again,
         * unless some other PINx.DETECT signal is still active. */
        nrf_gpio_pin_sense_t next_sense = (sense == NRF_GPIO_PIN_SENSE_HIGH) ?
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   15bf4:	2d02      	cmp	r5, #2
   15bf6:	d026      	beq.n	15c46 <next_sense_cond_call_handler+0x62>
   15bf8:	2102      	movs	r1, #2

        nrf_gpio_cfg_sense_set(pin, next_sense);
   15bfa:	4630      	mov	r0, r6
   15bfc:	f004 ff51 	bl	1aaa2 <nrf_gpio_cfg_sense_set>

        /* Invoke user handler only if the sensed pin level matches its polarity
         * configuration. Call handler unconditionally in case of toggle trigger or
         * level trigger. */
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
   15c00:	2c03      	cmp	r4, #3
   15c02:	d024      	beq.n	15c4e <next_sense_cond_call_handler+0x6a>
   15c04:	2d02      	cmp	r5, #2
   15c06:	d020      	beq.n	15c4a <next_sense_cond_call_handler+0x66>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   15c08:	2d03      	cmp	r5, #3
   15c0a:	d025      	beq.n	15c58 <next_sense_cond_call_handler+0x74>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
        {
            call_handler(pin, trigger);
        }
    }
}
   15c0c:	bd70      	pop	{r4, r5, r6, pc}
        call_handler(pin, trigger);
   15c0e:	4621      	mov	r1, r4
   15c10:	4630      	mov	r0, r6
   15c12:	f7ff ffd1 	bl	15bb8 <call_handler>
    *p_pin = pin_number & 0x1F;
   15c16:	f006 031f 	and.w	r3, r6, #31
    return pin_number >> 5;
   15c1a:	0972      	lsrs	r2, r6, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   15c1c:	2a01      	cmp	r2, #1
   15c1e:	d010      	beq.n	15c42 <next_sense_cond_call_handler+0x5e>
        case 0: return NRF_P0;
   15c20:	4a0f      	ldr	r2, [pc, #60]	; (15c60 <next_sense_cond_call_handler+0x7c>)
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   15c22:	3380      	adds	r3, #128	; 0x80
   15c24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15c28:	f3c3 4301 	ubfx	r3, r3, #16, #2
        if (nrf_gpio_pin_sense_get(pin) == sense)
   15c2c:	429d      	cmp	r5, r3
   15c2e:	d1ed      	bne.n	15c0c <next_sense_cond_call_handler+0x28>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   15c30:	2100      	movs	r1, #0
   15c32:	4630      	mov	r0, r6
   15c34:	f004 ff35 	bl	1aaa2 <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
   15c38:	4629      	mov	r1, r5
   15c3a:	4630      	mov	r0, r6
   15c3c:	f004 ff31 	bl	1aaa2 <nrf_gpio_cfg_sense_set>
   15c40:	e7e4      	b.n	15c0c <next_sense_cond_call_handler+0x28>
        case 1: return NRF_P1;
   15c42:	4a08      	ldr	r2, [pc, #32]	; (15c64 <next_sense_cond_call_handler+0x80>)
   15c44:	e7ed      	b.n	15c22 <next_sense_cond_call_handler+0x3e>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   15c46:	2103      	movs	r1, #3
   15c48:	e7d7      	b.n	15bfa <next_sense_cond_call_handler+0x16>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   15c4a:	2c01      	cmp	r4, #1
   15c4c:	d1dc      	bne.n	15c08 <next_sense_cond_call_handler+0x24>
            call_handler(pin, trigger);
   15c4e:	4621      	mov	r1, r4
   15c50:	4630      	mov	r0, r6
   15c52:	f7ff ffb1 	bl	15bb8 <call_handler>
}
   15c56:	e7d9      	b.n	15c0c <next_sense_cond_call_handler+0x28>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
   15c58:	2c02      	cmp	r4, #2
   15c5a:	d1d7      	bne.n	15c0c <next_sense_cond_call_handler+0x28>
   15c5c:	e7f7      	b.n	15c4e <next_sense_cond_call_handler+0x6a>
   15c5e:	bf00      	nop
   15c60:	40842500 	.word	0x40842500
   15c64:	40842800 	.word	0x40842800

00015c68 <release_handler>:
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   15c68:	f100 0208 	add.w	r2, r0, #8
   15c6c:	4b0e      	ldr	r3, [pc, #56]	; (15ca8 <release_handler+0x40>)
   15c6e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
   15c72:	f413 7f80 	tst.w	r3, #256	; 0x100
   15c76:	d016      	beq.n	15ca6 <release_handler+0x3e>
{
   15c78:	b510      	push	{r4, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   15c7a:	f3c3 2443 	ubfx	r4, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
   15c7e:	4610      	mov	r0, r2
   15c80:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   15c84:	4a08      	ldr	r2, [pc, #32]	; (15ca8 <release_handler+0x40>)
   15c86:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    if (!handler_in_use(handler_id))
   15c8a:	4620      	mov	r0, r4
   15c8c:	f7ff ff2e 	bl	15aec <handler_in_use>
   15c90:	b100      	cbz	r0, 15c94 <release_handler+0x2c>
}
   15c92:	bd10      	pop	{r4, pc}
        m_cb.handlers[handler_id].handler = NULL;
   15c94:	4804      	ldr	r0, [pc, #16]	; (15ca8 <release_handler+0x40>)
   15c96:	2300      	movs	r3, #0
   15c98:	f840 3034 	str.w	r3, [r0, r4, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   15c9c:	4621      	mov	r1, r4
   15c9e:	3074      	adds	r0, #116	; 0x74
   15ca0:	f7ff fcf2 	bl	15688 <nrfx_flag32_free>
        NRFX_ASSERT(err == NRFX_SUCCESS);
   15ca4:	e7f5      	b.n	15c92 <release_handler+0x2a>
   15ca6:	4770      	bx	lr
   15ca8:	200080bc 	.word	0x200080bc

00015cac <pin_handler_trigger_uninit>:
{
   15cac:	b510      	push	{r4, lr}
   15cae:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin))
   15cb0:	f7ff fef4 	bl	15a9c <pin_in_use_by_te>
   15cb4:	b150      	cbz	r0, 15ccc <pin_handler_trigger_uninit+0x20>
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
   15cb6:	4620      	mov	r0, r4
   15cb8:	f7ff ff10 	bl	15adc <pin_te_get>
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
   15cbc:	4b08      	ldr	r3, [pc, #32]	; (15ce0 <pin_handler_trigger_uninit+0x34>)
   15cbe:	f500 70a2 	add.w	r0, r0, #324	; 0x144
   15cc2:	2200      	movs	r2, #0
   15cc4:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
   15cc8:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
    release_handler(pin);
   15ccc:	4620      	mov	r0, r4
   15cce:	f7ff ffcb 	bl	15c68 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
   15cd2:	3408      	adds	r4, #8
   15cd4:	4b03      	ldr	r3, [pc, #12]	; (15ce4 <pin_handler_trigger_uninit+0x38>)
   15cd6:	2200      	movs	r2, #0
   15cd8:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
}
   15cdc:	bd10      	pop	{r4, pc}
   15cde:	bf00      	nop
   15ce0:	4002f000 	.word	0x4002f000
   15ce4:	200080bc 	.word	0x200080bc

00015ce8 <pin_handler_set>:
{
   15ce8:	b570      	push	{r4, r5, r6, lr}
   15cea:	b082      	sub	sp, #8
   15cec:	4605      	mov	r5, r0
   15cee:	460e      	mov	r6, r1
   15cf0:	4614      	mov	r4, r2
    release_handler(pin);
   15cf2:	f7ff ffb9 	bl	15c68 <release_handler>
    if (!handler)
   15cf6:	b326      	cbz	r6, 15d42 <pin_handler_set+0x5a>
    handler_id = find_handler(handler, p_context);
   15cf8:	4621      	mov	r1, r4
   15cfa:	4630      	mov	r0, r6
   15cfc:	f7ff ff10 	bl	15b20 <find_handler>
    if (handler_id < 0)
   15d00:	1e03      	subs	r3, r0, #0
   15d02:	db13      	blt.n	15d2c <pin_handler_set+0x44>
    m_cb.handlers[handler_id].handler = handler;
   15d04:	4910      	ldr	r1, [pc, #64]	; (15d48 <pin_handler_set+0x60>)
   15d06:	f841 6033 	str.w	r6, [r1, r3, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
   15d0a:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
   15d0e:	6054      	str	r4, [r2, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   15d10:	f105 0008 	add.w	r0, r5, #8
   15d14:	f831 2010 	ldrh.w	r2, [r1, r0, lsl #1]
   15d18:	025b      	lsls	r3, r3, #9
   15d1a:	b29b      	uxth	r3, r3
   15d1c:	4313      	orrs	r3, r2
   15d1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   15d22:	f821 3010 	strh.w	r3, [r1, r0, lsl #1]
    return NRFX_SUCCESS;
   15d26:	4809      	ldr	r0, [pc, #36]	; (15d4c <pin_handler_set+0x64>)
}
   15d28:	b002      	add	sp, #8
   15d2a:	bd70      	pop	{r4, r5, r6, pc}
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
   15d2c:	f10d 0107 	add.w	r1, sp, #7
   15d30:	4807      	ldr	r0, [pc, #28]	; (15d50 <pin_handler_set+0x68>)
   15d32:	f7ff fc85 	bl	15640 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
   15d36:	4b05      	ldr	r3, [pc, #20]	; (15d4c <pin_handler_set+0x64>)
   15d38:	4298      	cmp	r0, r3
   15d3a:	d1f5      	bne.n	15d28 <pin_handler_set+0x40>
        handler_id = (int32_t)id;
   15d3c:	f89d 3007 	ldrb.w	r3, [sp, #7]
   15d40:	e7e0      	b.n	15d04 <pin_handler_set+0x1c>
        return NRFX_SUCCESS;
   15d42:	4802      	ldr	r0, [pc, #8]	; (15d4c <pin_handler_set+0x64>)
   15d44:	e7f0      	b.n	15d28 <pin_handler_set+0x40>
   15d46:	bf00      	nop
   15d48:	200080bc 	.word	0x200080bc
   15d4c:	0bad0000 	.word	0x0bad0000
   15d50:	20008130 	.word	0x20008130

00015d54 <port_event_handle>:
    }
    return false;
}

static void port_event_handle(void)
{
   15d54:	b570      	push	{r4, r5, r6, lr}
   15d56:	b082      	sub	sp, #8
    uint32_t latch[GPIO_COUNT];

    nrf_gpio_latches_read_and_clear(0, GPIO_COUNT, latch);
   15d58:	466a      	mov	r2, sp
   15d5a:	2102      	movs	r1, #2
   15d5c:	2000      	movs	r0, #0
   15d5e:	f7ff fe73 	bl	15a48 <nrf_gpio_latches_read_and_clear>
   15d62:	e03e      	b.n	15de2 <port_event_handle+0x8e>
   15d64:	4e21      	ldr	r6, [pc, #132]	; (15dec <port_event_handle+0x98>)
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   15d66:	f105 0380 	add.w	r3, r5, #128	; 0x80
   15d6a:	f856 2023 	ldr.w	r2, [r6, r3, lsl #2]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);

                nrf_bitmask_bit_clear(pin, latch);
                sense = nrf_gpio_pin_sense_get(pin);

                next_sense_cond_call_handler(pin, trigger, sense);
   15d6e:	f3c2 4201 	ubfx	r2, r2, #16, #2
   15d72:	f7ff ff37 	bl	15be4 <next_sense_cond_call_handler>
    reg->LATCH = (1 << pin_number);
   15d76:	2301      	movs	r3, #1
   15d78:	40ab      	lsls	r3, r5
   15d7a:	6233      	str	r3, [r6, #32]
            while (latch[i])
   15d7c:	ab02      	add	r3, sp, #8
   15d7e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
   15d82:	f853 0c08 	ldr.w	r0, [r3, #-8]
   15d86:	b1f8      	cbz	r0, 15dc8 <port_event_handle+0x74>
                uint32_t pin = NRF_CTZ(latch[i]);
   15d88:	fa90 f0a0 	rbit	r0, r0
   15d8c:	fab0 f080 	clz	r0, r0
                pin += 32 * i;
   15d90:	eb00 1044 	add.w	r0, r0, r4, lsl #5
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   15d94:	f100 0208 	add.w	r2, r0, #8
   15d98:	4b15      	ldr	r3, [pc, #84]	; (15df0 <port_event_handle+0x9c>)
   15d9a:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
   15d9e:	f3c1 0182 	ubfx	r1, r1, #2, #3
 * @param[in,out] p_mask Pointer to mask with bit fields.
 */
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
   15da2:	08c5      	lsrs	r5, r0, #3
    bit = BITMASK_RELBIT_GET(bit);
   15da4:	f000 0607 	and.w	r6, r0, #7
    p_mask8[byte_idx] &= ~(1 << bit);
   15da8:	f81d 2005 	ldrb.w	r2, [sp, r5]
   15dac:	2301      	movs	r3, #1
   15dae:	40b3      	lsls	r3, r6
   15db0:	43db      	mvns	r3, r3
   15db2:	b25b      	sxtb	r3, r3
   15db4:	4013      	ands	r3, r2
   15db6:	f80d 3005 	strb.w	r3, [sp, r5]
    *p_pin = pin_number & 0x1F;
   15dba:	f000 051f 	and.w	r5, r0, #31
    return pin_number >> 5;
   15dbe:	0943      	lsrs	r3, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   15dc0:	2b01      	cmp	r3, #1
   15dc2:	d0cf      	beq.n	15d64 <port_event_handle+0x10>
        case 0: return NRF_P0;
   15dc4:	4e0b      	ldr	r6, [pc, #44]	; (15df4 <port_event_handle+0xa0>)
   15dc6:	e7ce      	b.n	15d66 <port_event_handle+0x12>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   15dc8:	3401      	adds	r4, #1
   15dca:	2c01      	cmp	r4, #1
   15dcc:	d9d6      	bls.n	15d7c <port_event_handle+0x28>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   15dce:	4b0a      	ldr	r3, [pc, #40]	; (15df8 <port_event_handle+0xa4>)
   15dd0:	2200      	movs	r2, #0
   15dd2:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
   15dd6:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
        }

        /* All pins have been handled, clear PORT, check latch again in case
         * something came between deciding to exit and clearing PORT event. */
        nrf_gpiote_event_clear(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT);
    } while (latch_pending_read_and_check(latch));
   15dda:	4668      	mov	r0, sp
   15ddc:	f004 fe8e 	bl	1aafc <latch_pending_read_and_check>
   15de0:	b108      	cbz	r0, 15de6 <port_event_handle+0x92>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   15de2:	2400      	movs	r4, #0
   15de4:	e7f1      	b.n	15dca <port_event_handle+0x76>
}
   15de6:	b002      	add	sp, #8
   15de8:	bd70      	pop	{r4, r5, r6, pc}
   15dea:	bf00      	nop
   15dec:	40842800 	.word	0x40842800
   15df0:	200080bc 	.word	0x200080bc
   15df4:	40842500 	.word	0x40842500
   15df8:	4002f000 	.word	0x4002f000

00015dfc <gpiote_evt_handle>:
    } while (input_read_and_check(input, pins_to_check));
}
#endif // defined(NRF_GPIO_LATCH_PRESENT)

static void gpiote_evt_handle(uint32_t mask)
{
   15dfc:	b538      	push	{r3, r4, r5, lr}
   15dfe:	4604      	mov	r4, r0
    while (mask)
   15e00:	e018      	b.n	15e34 <gpiote_evt_handle+0x38>
    {
        uint32_t ch = NRF_CTZ(mask);
   15e02:	fa94 f3a4 	rbit	r3, r4
   15e06:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
   15e0a:	2201      	movs	r2, #1
   15e0c:	409a      	lsls	r2, r3
   15e0e:	ea24 0402 	bic.w	r4, r4, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   15e12:	4a0a      	ldr	r2, [pc, #40]	; (15e3c <gpiote_evt_handle+0x40>)
   15e14:	f503 73a2 	add.w	r3, r3, #324	; 0x144
   15e18:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
   15e1c:	f3c5 2505 	ubfx	r5, r5, #8, #6
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
   15e20:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
        nrfx_gpiote_pin_t pin = nrf_gpiote_event_pin_get(NRF_GPIOTE, ch);
        nrf_gpiote_polarity_t polarity = nrf_gpiote_event_polarity_get(NRF_GPIOTE, ch);

        call_handler(pin, gpiote_polarity_to_trigger(polarity));
   15e24:	f3c0 4001 	ubfx	r0, r0, #16, #2
   15e28:	f004 fe61 	bl	1aaee <gpiote_polarity_to_trigger>
   15e2c:	4601      	mov	r1, r0
   15e2e:	4628      	mov	r0, r5
   15e30:	f7ff fec2 	bl	15bb8 <call_handler>
    while (mask)
   15e34:	2c00      	cmp	r4, #0
   15e36:	d1e4      	bne.n	15e02 <gpiote_evt_handle+0x6>
    }
}
   15e38:	bd38      	pop	{r3, r4, r5, pc}
   15e3a:	bf00      	nop
   15e3c:	4002f000 	.word	0x4002f000

00015e40 <nrfx_gpiote_input_configure>:
{
   15e40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15e44:	b084      	sub	sp, #16
   15e46:	4604      	mov	r4, r0
   15e48:	4615      	mov	r5, r2
   15e4a:	461e      	mov	r6, r3
    if (p_input_config)
   15e4c:	b309      	cbz	r1, 15e92 <nrfx_gpiote_input_configure+0x52>
   15e4e:	460f      	mov	r7, r1
        if (pin_is_task_output(pin))
   15e50:	f004 fe37 	bl	1aac2 <pin_is_task_output>
   15e54:	2800      	cmp	r0, #0
   15e56:	d13f      	bne.n	15ed8 <nrfx_gpiote_input_configure+0x98>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
   15e58:	2300      	movs	r3, #0
   15e5a:	f88d 300e 	strb.w	r3, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
   15e5e:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
   15e62:	9301      	str	r3, [sp, #4]
   15e64:	9300      	str	r3, [sp, #0]
   15e66:	463b      	mov	r3, r7
   15e68:	f10d 020f 	add.w	r2, sp, #15
   15e6c:	f10d 010e 	add.w	r1, sp, #14
   15e70:	4620      	mov	r0, r4
   15e72:	f7ff fd77 	bl	15964 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
   15e76:	4a39      	ldr	r2, [pc, #228]	; (15f5c <nrfx_gpiote_input_configure+0x11c>)
   15e78:	f104 0108 	add.w	r1, r4, #8
   15e7c:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   15e80:	f023 0302 	bic.w	r3, r3, #2
   15e84:	b29b      	uxth	r3, r3
   15e86:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
   15e8a:	f043 0301 	orr.w	r3, r3, #1
   15e8e:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_trigger_config)
   15e92:	b1bd      	cbz	r5, 15ec4 <nrfx_gpiote_input_configure+0x84>
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
   15e94:	782f      	ldrb	r7, [r5, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
   15e96:	f8d5 8004 	ldr.w	r8, [r5, #4]
        if (pin_is_output(pin))
   15e9a:	4620      	mov	r0, r4
   15e9c:	f7ff fe14 	bl	15ac8 <pin_is_output>
   15ea0:	b1e0      	cbz	r0, 15edc <nrfx_gpiote_input_configure+0x9c>
            if (use_evt)
   15ea2:	f1b8 0f00 	cmp.w	r8, #0
   15ea6:	d153      	bne.n	15f50 <nrfx_gpiote_input_configure+0x110>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
   15ea8:	4a2c      	ldr	r2, [pc, #176]	; (15f5c <nrfx_gpiote_input_configure+0x11c>)
   15eaa:	f104 0108 	add.w	r1, r4, #8
   15eae:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   15eb2:	f023 031c 	bic.w	r3, r3, #28
   15eb6:	b29b      	uxth	r3, r3
   15eb8:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
   15ebc:	ea43 0387 	orr.w	r3, r3, r7, lsl #2
   15ec0:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_handler_config)
   15ec4:	2e00      	cmp	r6, #0
   15ec6:	d047      	beq.n	15f58 <nrfx_gpiote_input_configure+0x118>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
   15ec8:	6872      	ldr	r2, [r6, #4]
   15eca:	6831      	ldr	r1, [r6, #0]
   15ecc:	4620      	mov	r0, r4
   15ece:	f7ff ff0b 	bl	15ce8 <pin_handler_set>
}
   15ed2:	b004      	add	sp, #16
   15ed4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            return NRFX_ERROR_INVALID_PARAM;
   15ed8:	4821      	ldr	r0, [pc, #132]	; (15f60 <nrfx_gpiote_input_configure+0x120>)
   15eda:	e7fa      	b.n	15ed2 <nrfx_gpiote_input_configure+0x92>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
   15edc:	4a1f      	ldr	r2, [pc, #124]	; (15f5c <nrfx_gpiote_input_configure+0x11c>)
   15ede:	f104 0108 	add.w	r1, r4, #8
   15ee2:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   15ee6:	f023 0320 	bic.w	r3, r3, #32
   15eea:	04db      	lsls	r3, r3, #19
   15eec:	0cdb      	lsrs	r3, r3, #19
   15eee:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
            if (use_evt)
   15ef2:	f1b8 0f00 	cmp.w	r8, #0
   15ef6:	d0d7      	beq.n	15ea8 <nrfx_gpiote_input_configure+0x68>
                if (!edge)
   15ef8:	2f03      	cmp	r7, #3
   15efa:	d82b      	bhi.n	15f54 <nrfx_gpiote_input_configure+0x114>
                uint8_t ch = *p_trigger_config->p_in_channel;
   15efc:	686b      	ldr	r3, [r5, #4]
   15efe:	781d      	ldrb	r5, [r3, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
   15f00:	b947      	cbnz	r7, 15f14 <nrfx_gpiote_input_configure+0xd4>
    p_reg->CONFIG[idx] = 0;
   15f02:	4b18      	ldr	r3, [pc, #96]	; (15f64 <nrfx_gpiote_input_configure+0x124>)
   15f04:	f505 75a2 	add.w	r5, r5, #324	; 0x144
   15f08:	2200      	movs	r2, #0
   15f0a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
    p_reg->CONFIG[idx] = 0;
   15f0e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
#endif
}
   15f12:	e7c9      	b.n	15ea8 <nrfx_gpiote_input_configure+0x68>
                    nrf_gpiote_polarity_t polarity = gpiote_trigger_to_polarity(trigger);
   15f14:	4638      	mov	r0, r7
   15f16:	f004 fdeb 	bl	1aaf0 <gpiote_trigger_to_polarity>
   15f1a:	4603      	mov	r3, r0
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   15f1c:	4811      	ldr	r0, [pc, #68]	; (15f64 <nrfx_gpiote_input_configure+0x124>)
   15f1e:	f505 71a2 	add.w	r1, r5, #324	; 0x144
   15f22:	f850 2021 	ldr.w	r2, [r0, r1, lsl #2]
   15f26:	f022 0203 	bic.w	r2, r2, #3
   15f2a:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
                    nrf_gpiote_event_configure(NRF_GPIOTE, ch, pin, polarity);
   15f2e:	4622      	mov	r2, r4
   15f30:	4629      	mov	r1, r5
   15f32:	f004 fd7e 	bl	1aa32 <nrf_gpiote_event_configure>
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   15f36:	4a09      	ldr	r2, [pc, #36]	; (15f5c <nrfx_gpiote_input_configure+0x11c>)
   15f38:	f104 0108 	add.w	r1, r4, #8
   15f3c:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   15f40:	036d      	lsls	r5, r5, #13
   15f42:	b2ad      	uxth	r5, r5
   15f44:	432b      	orrs	r3, r5
   15f46:	f043 0320 	orr.w	r3, r3, #32
   15f4a:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
   15f4e:	e7ab      	b.n	15ea8 <nrfx_gpiote_input_configure+0x68>
                return NRFX_ERROR_INVALID_PARAM;
   15f50:	4803      	ldr	r0, [pc, #12]	; (15f60 <nrfx_gpiote_input_configure+0x120>)
   15f52:	e7be      	b.n	15ed2 <nrfx_gpiote_input_configure+0x92>
                    return NRFX_ERROR_INVALID_PARAM;
   15f54:	4802      	ldr	r0, [pc, #8]	; (15f60 <nrfx_gpiote_input_configure+0x120>)
   15f56:	e7bc      	b.n	15ed2 <nrfx_gpiote_input_configure+0x92>
        err = NRFX_SUCCESS;
   15f58:	4803      	ldr	r0, [pc, #12]	; (15f68 <nrfx_gpiote_input_configure+0x128>)
   15f5a:	e7ba      	b.n	15ed2 <nrfx_gpiote_input_configure+0x92>
   15f5c:	200080bc 	.word	0x200080bc
   15f60:	0bad0004 	.word	0x0bad0004
   15f64:	4002f000 	.word	0x4002f000
   15f68:	0bad0000 	.word	0x0bad0000

00015f6c <nrfx_gpiote_output_configure>:
{
   15f6c:	b570      	push	{r4, r5, r6, lr}
   15f6e:	b084      	sub	sp, #16
   15f70:	4604      	mov	r4, r0
   15f72:	4615      	mov	r5, r2
    if (p_config)
   15f74:	b329      	cbz	r1, 15fc2 <nrfx_gpiote_output_configure+0x56>
   15f76:	460e      	mov	r6, r1
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
   15f78:	f004 fdb2 	bl	1aae0 <pin_is_input>
   15f7c:	b120      	cbz	r0, 15f88 <nrfx_gpiote_output_configure+0x1c>
   15f7e:	4620      	mov	r0, r4
   15f80:	f7ff fd8c 	bl	15a9c <pin_in_use_by_te>
   15f84:	2800      	cmp	r0, #0
   15f86:	d13a      	bne.n	15ffe <nrfx_gpiote_output_configure+0x92>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
   15f88:	4620      	mov	r0, r4
   15f8a:	f7ff fd91 	bl	15ab0 <pin_has_trigger>
   15f8e:	b110      	cbz	r0, 15f96 <nrfx_gpiote_output_configure+0x2a>
   15f90:	7873      	ldrb	r3, [r6, #1]
   15f92:	2b01      	cmp	r3, #1
   15f94:	d033      	beq.n	15ffe <nrfx_gpiote_output_configure+0x92>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
   15f96:	2301      	movs	r3, #1
   15f98:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
   15f9c:	2300      	movs	r3, #0
   15f9e:	9301      	str	r3, [sp, #4]
   15fa0:	9600      	str	r6, [sp, #0]
   15fa2:	1cb3      	adds	r3, r6, #2
   15fa4:	1c72      	adds	r2, r6, #1
   15fa6:	f10d 010f 	add.w	r1, sp, #15
   15faa:	4620      	mov	r0, r4
   15fac:	f7ff fcda 	bl	15964 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
   15fb0:	4a20      	ldr	r2, [pc, #128]	; (16034 <nrfx_gpiote_output_configure+0xc8>)
   15fb2:	f104 0108 	add.w	r1, r4, #8
   15fb6:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   15fba:	f043 0303 	orr.w	r3, r3, #3
   15fbe:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_task_config)
   15fc2:	b395      	cbz	r5, 1602a <nrfx_gpiote_output_configure+0xbe>
        if (pin_is_input(pin))
   15fc4:	4620      	mov	r0, r4
   15fc6:	f004 fd8b 	bl	1aae0 <pin_is_input>
   15fca:	bb80      	cbnz	r0, 1602e <nrfx_gpiote_output_configure+0xc2>
        uint32_t ch = p_task_config->task_ch;
   15fcc:	782e      	ldrb	r6, [r5, #0]
    p_reg->CONFIG[idx] = 0;
   15fce:	4b1a      	ldr	r3, [pc, #104]	; (16038 <nrfx_gpiote_output_configure+0xcc>)
   15fd0:	f506 72a2 	add.w	r2, r6, #324	; 0x144
   15fd4:	2100      	movs	r1, #0
   15fd6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    p_reg->CONFIG[idx] = 0;
   15fda:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
   15fde:	4a15      	ldr	r2, [pc, #84]	; (16034 <nrfx_gpiote_output_configure+0xc8>)
   15fe0:	f104 0108 	add.w	r1, r4, #8
   15fe4:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   15fe8:	f023 0320 	bic.w	r3, r3, #32
   15fec:	04db      	lsls	r3, r3, #19
   15fee:	0cdb      	lsrs	r3, r3, #19
   15ff0:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
   15ff4:	786b      	ldrb	r3, [r5, #1]
   15ff6:	b923      	cbnz	r3, 16002 <nrfx_gpiote_output_configure+0x96>
    return NRFX_SUCCESS;
   15ff8:	4810      	ldr	r0, [pc, #64]	; (1603c <nrfx_gpiote_output_configure+0xd0>)
}
   15ffa:	b004      	add	sp, #16
   15ffc:	bd70      	pop	{r4, r5, r6, pc}
            return NRFX_ERROR_INVALID_PARAM;
   15ffe:	4810      	ldr	r0, [pc, #64]	; (16040 <nrfx_gpiote_output_configure+0xd4>)
   16000:	e7fb      	b.n	15ffa <nrfx_gpiote_output_configure+0x8e>
                                      p_task_config->init_val);
   16002:	78aa      	ldrb	r2, [r5, #2]
            nrf_gpiote_task_configure(NRF_GPIOTE, ch, pin,
   16004:	9200      	str	r2, [sp, #0]
   16006:	4622      	mov	r2, r4
   16008:	4631      	mov	r1, r6
   1600a:	480b      	ldr	r0, [pc, #44]	; (16038 <nrfx_gpiote_output_configure+0xcc>)
   1600c:	f004 fd2a 	bl	1aa64 <nrf_gpiote_task_configure>
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   16010:	4a08      	ldr	r2, [pc, #32]	; (16034 <nrfx_gpiote_output_configure+0xc8>)
   16012:	3408      	adds	r4, #8
   16014:	f832 3014 	ldrh.w	r3, [r2, r4, lsl #1]
   16018:	0376      	lsls	r6, r6, #13
   1601a:	b2b6      	uxth	r6, r6
   1601c:	4333      	orrs	r3, r6
   1601e:	f043 0320 	orr.w	r3, r3, #32
   16022:	f822 3014 	strh.w	r3, [r2, r4, lsl #1]
    return NRFX_SUCCESS;
   16026:	4805      	ldr	r0, [pc, #20]	; (1603c <nrfx_gpiote_output_configure+0xd0>)
   16028:	e7e7      	b.n	15ffa <nrfx_gpiote_output_configure+0x8e>
   1602a:	4804      	ldr	r0, [pc, #16]	; (1603c <nrfx_gpiote_output_configure+0xd0>)
   1602c:	e7e5      	b.n	15ffa <nrfx_gpiote_output_configure+0x8e>
            return NRFX_ERROR_INVALID_PARAM;
   1602e:	4804      	ldr	r0, [pc, #16]	; (16040 <nrfx_gpiote_output_configure+0xd4>)
   16030:	e7e3      	b.n	15ffa <nrfx_gpiote_output_configure+0x8e>
   16032:	bf00      	nop
   16034:	200080bc 	.word	0x200080bc
   16038:	4002f000 	.word	0x4002f000
   1603c:	0bad0000 	.word	0x0bad0000
   16040:	0bad0004 	.word	0x0bad0004

00016044 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
   16044:	4b01      	ldr	r3, [pc, #4]	; (1604c <nrfx_gpiote_global_callback_set+0x8>)
   16046:	6098      	str	r0, [r3, #8]
    m_cb.global_handler.p_context = p_context;
   16048:	60d9      	str	r1, [r3, #12]
}
   1604a:	4770      	bx	lr
   1604c:	200080bc 	.word	0x200080bc

00016050 <nrfx_gpiote_channel_get>:
{
   16050:	b538      	push	{r3, r4, r5, lr}
   16052:	4604      	mov	r4, r0
   16054:	460d      	mov	r5, r1
    if (pin_in_use_by_te(pin))
   16056:	f7ff fd21 	bl	15a9c <pin_in_use_by_te>
   1605a:	b140      	cbz	r0, 1606e <nrfx_gpiote_channel_get+0x1e>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   1605c:	f104 0008 	add.w	r0, r4, #8
   16060:	4b04      	ldr	r3, [pc, #16]	; (16074 <nrfx_gpiote_channel_get+0x24>)
   16062:	f833 3010 	ldrh.w	r3, [r3, r0, lsl #1]
   16066:	0b5b      	lsrs	r3, r3, #13
   16068:	702b      	strb	r3, [r5, #0]
        return NRFX_SUCCESS;
   1606a:	4803      	ldr	r0, [pc, #12]	; (16078 <nrfx_gpiote_channel_get+0x28>)
}
   1606c:	bd38      	pop	{r3, r4, r5, pc}
        return NRFX_ERROR_INVALID_PARAM;
   1606e:	4803      	ldr	r0, [pc, #12]	; (1607c <nrfx_gpiote_channel_get+0x2c>)
   16070:	e7fc      	b.n	1606c <nrfx_gpiote_channel_get+0x1c>
   16072:	bf00      	nop
   16074:	200080bc 	.word	0x200080bc
   16078:	0bad0000 	.word	0x0bad0000
   1607c:	0bad0004 	.word	0x0bad0004

00016080 <nrfx_gpiote_init>:
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   16080:	4b0f      	ldr	r3, [pc, #60]	; (160c0 <nrfx_gpiote_init+0x40>)
   16082:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
   16086:	b10b      	cbz	r3, 1608c <nrfx_gpiote_init+0xc>
        return err_code;
   16088:	480e      	ldr	r0, [pc, #56]	; (160c4 <nrfx_gpiote_init+0x44>)
}
   1608a:	4770      	bx	lr
{
   1608c:	b510      	push	{r4, lr}
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
   1608e:	4c0e      	ldr	r4, [pc, #56]	; (160c8 <nrfx_gpiote_init+0x48>)
   16090:	2260      	movs	r2, #96	; 0x60
   16092:	2100      	movs	r1, #0
   16094:	4620      	mov	r0, r4
   16096:	f004 ffa0 	bl	1afda <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
   1609a:	202f      	movs	r0, #47	; 0x2f
   1609c:	f003 fe6d 	bl	19d7a <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   160a0:	4b0a      	ldr	r3, [pc, #40]	; (160cc <nrfx_gpiote_init+0x4c>)
   160a2:	2200      	movs	r2, #0
   160a4:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
   160a8:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
   160ac:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   160b0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
   160b4:	2301      	movs	r3, #1
   160b6:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
   160ba:	6663      	str	r3, [r4, #100]	; 0x64
    return err_code;
   160bc:	4804      	ldr	r0, [pc, #16]	; (160d0 <nrfx_gpiote_init+0x50>)
}
   160be:	bd10      	pop	{r4, pc}
   160c0:	200080bc 	.word	0x200080bc
   160c4:	0bad0005 	.word	0x0bad0005
   160c8:	200080cc 	.word	0x200080cc
   160cc:	4002f000 	.word	0x4002f000
   160d0:	0bad0000 	.word	0x0bad0000

000160d4 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
   160d4:	4b03      	ldr	r3, [pc, #12]	; (160e4 <nrfx_gpiote_is_init+0x10>)
   160d6:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
   160da:	3800      	subs	r0, #0
   160dc:	bf18      	it	ne
   160de:	2001      	movne	r0, #1
   160e0:	4770      	bx	lr
   160e2:	bf00      	nop
   160e4:	200080bc 	.word	0x200080bc

000160e8 <nrfx_gpiote_channel_free>:
{
   160e8:	b508      	push	{r3, lr}
   160ea:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
   160ec:	4801      	ldr	r0, [pc, #4]	; (160f4 <nrfx_gpiote_channel_free+0xc>)
   160ee:	f7ff facb 	bl	15688 <nrfx_flag32_free>
}
   160f2:	bd08      	pop	{r3, pc}
   160f4:	2000812c 	.word	0x2000812c

000160f8 <nrfx_gpiote_channel_alloc>:
{
   160f8:	b508      	push	{r3, lr}
   160fa:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
   160fc:	4801      	ldr	r0, [pc, #4]	; (16104 <nrfx_gpiote_channel_alloc+0xc>)
   160fe:	f7ff fa9f 	bl	15640 <nrfx_flag32_alloc>
}
   16102:	bd08      	pop	{r3, pc}
   16104:	2000812c 	.word	0x2000812c

00016108 <nrfx_gpiote_trigger_enable>:
{
   16108:	b538      	push	{r3, r4, r5, lr}
   1610a:	4604      	mov	r4, r0
   1610c:	460d      	mov	r5, r1
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   1610e:	f7ff fcc5 	bl	15a9c <pin_in_use_by_te>
   16112:	b300      	cbz	r0, 16156 <nrfx_gpiote_trigger_enable+0x4e>
   16114:	4620      	mov	r0, r4
   16116:	f004 fce3 	bl	1aae0 <pin_is_input>
   1611a:	b1e0      	cbz	r0, 16156 <nrfx_gpiote_trigger_enable+0x4e>
        uint8_t ch = pin_te_get(pin);
   1611c:	4620      	mov	r0, r4
   1611e:	f7ff fcdd 	bl	15adc <pin_te_get>
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
   16122:	0083      	lsls	r3, r0, #2
   16124:	f503 7380 	add.w	r3, r3, #256	; 0x100
    return ((uint32_t)p_reg + event);
   16128:	b29b      	uxth	r3, r3
   1612a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1612e:	f503 333c 	add.w	r3, r3, #192512	; 0x2f000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   16132:	2200      	movs	r2, #0
   16134:	601a      	str	r2, [r3, #0]
   16136:	681b      	ldr	r3, [r3, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   16138:	4a0b      	ldr	r2, [pc, #44]	; (16168 <nrfx_gpiote_trigger_enable+0x60>)
   1613a:	f500 71a2 	add.w	r1, r0, #324	; 0x144
   1613e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
   16142:	f043 0301 	orr.w	r3, r3, #1
   16146:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
        if (int_enable)
   1614a:	b15d      	cbz	r5, 16164 <nrfx_gpiote_trigger_enable+0x5c>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
   1614c:	2301      	movs	r3, #1
   1614e:	4083      	lsls	r3, r0
    p_reg->INTENSET = mask;
   16150:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   16154:	e006      	b.n	16164 <nrfx_gpiote_trigger_enable+0x5c>
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
   16156:	4620      	mov	r0, r4
   16158:	f7ff fcf8 	bl	15b4c <get_initial_sense>
   1615c:	4601      	mov	r1, r0
   1615e:	4620      	mov	r0, r4
   16160:	f004 fc9f 	bl	1aaa2 <nrf_gpio_cfg_sense_set>
}
   16164:	bd38      	pop	{r3, r4, r5, pc}
   16166:	bf00      	nop
   16168:	4002f000 	.word	0x4002f000

0001616c <nrfx_gpiote_trigger_disable>:
{
   1616c:	b510      	push	{r4, lr}
   1616e:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   16170:	f7ff fc94 	bl	15a9c <pin_in_use_by_te>
   16174:	b1a0      	cbz	r0, 161a0 <nrfx_gpiote_trigger_disable+0x34>
   16176:	4620      	mov	r0, r4
   16178:	f004 fcb2 	bl	1aae0 <pin_is_input>
   1617c:	b180      	cbz	r0, 161a0 <nrfx_gpiote_trigger_disable+0x34>
        uint8_t ch = pin_te_get(pin);
   1617e:	4620      	mov	r0, r4
   16180:	f7ff fcac 	bl	15adc <pin_te_get>
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
   16184:	2201      	movs	r2, #1
   16186:	4082      	lsls	r2, r0
    p_reg->INTENCLR = mask;
   16188:	4b08      	ldr	r3, [pc, #32]	; (161ac <nrfx_gpiote_trigger_disable+0x40>)
   1618a:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   1618e:	f500 70a2 	add.w	r0, r0, #324	; 0x144
   16192:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
   16196:	f022 0203 	bic.w	r2, r2, #3
   1619a:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
}
   1619e:	e003      	b.n	161a8 <nrfx_gpiote_trigger_disable+0x3c>
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   161a0:	2100      	movs	r1, #0
   161a2:	4620      	mov	r0, r4
   161a4:	f004 fc7d 	bl	1aaa2 <nrf_gpio_cfg_sense_set>
}
   161a8:	bd10      	pop	{r4, pc}
   161aa:	bf00      	nop
   161ac:	4002f000 	.word	0x4002f000

000161b0 <nrfx_gpiote_pin_uninit>:
{
   161b0:	b510      	push	{r4, lr}
   161b2:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
   161b4:	f7ff fc68 	bl	15a88 <pin_in_use>
   161b8:	b908      	cbnz	r0, 161be <nrfx_gpiote_pin_uninit+0xe>
        return NRFX_ERROR_INVALID_PARAM;
   161ba:	4806      	ldr	r0, [pc, #24]	; (161d4 <nrfx_gpiote_pin_uninit+0x24>)
}
   161bc:	bd10      	pop	{r4, pc}
    nrfx_gpiote_trigger_disable(pin);
   161be:	4620      	mov	r0, r4
   161c0:	f7ff ffd4 	bl	1616c <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
   161c4:	4620      	mov	r0, r4
   161c6:	f7ff fd71 	bl	15cac <pin_handler_trigger_uninit>
    nrf_gpio_cfg_default(pin);
   161ca:	4620      	mov	r0, r4
   161cc:	f7ff fc26 	bl	15a1c <nrf_gpio_cfg_default>
    return NRFX_SUCCESS;
   161d0:	4801      	ldr	r0, [pc, #4]	; (161d8 <nrfx_gpiote_pin_uninit+0x28>)
   161d2:	e7f3      	b.n	161bc <nrfx_gpiote_pin_uninit+0xc>
   161d4:	0bad0004 	.word	0x0bad0004
   161d8:	0bad0000 	.word	0x0bad0000

000161dc <nrfx_gpiote_irq_handler>:

void nrfx_gpiote_irq_handler(void)
{
   161dc:	b538      	push	{r3, r4, r5, lr}
    uint32_t status = 0;
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
   161de:	2001      	movs	r0, #1
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
   161e0:	f44f 7380 	mov.w	r3, #256	; 0x100

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   161e4:	2100      	movs	r1, #0
    uint32_t status = 0;
   161e6:	460c      	mov	r4, r1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   161e8:	e003      	b.n	161f2 <nrfx_gpiote_irq_handler+0x16>
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
        }
        mask <<= 1;
   161ea:	0040      	lsls	r0, r0, #1
        /* Incrementing to next event, utilizing the fact that events are grouped together
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
   161ec:	3304      	adds	r3, #4
   161ee:	b29b      	uxth	r3, r3
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   161f0:	3101      	adds	r1, #1
   161f2:	2907      	cmp	r1, #7
   161f4:	d814      	bhi.n	16220 <nrfx_gpiote_irq_handler+0x44>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   161f6:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
   161fa:	f502 323c 	add.w	r2, r2, #192512	; 0x2f000
   161fe:	6812      	ldr	r2, [r2, #0]
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
   16200:	2a00      	cmp	r2, #0
   16202:	d0f2      	beq.n	161ea <nrfx_gpiote_irq_handler+0xe>
    return p_reg->INTENSET & mask;
   16204:	4a0c      	ldr	r2, [pc, #48]	; (16238 <nrfx_gpiote_irq_handler+0x5c>)
   16206:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
   1620a:	4210      	tst	r0, r2
   1620c:	d0ed      	beq.n	161ea <nrfx_gpiote_irq_handler+0xe>
    return ((uint32_t)p_reg + event);
   1620e:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
   16212:	f502 323c 	add.w	r2, r2, #192512	; 0x2f000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   16216:	2500      	movs	r5, #0
   16218:	6015      	str	r5, [r2, #0]
   1621a:	6812      	ldr	r2, [r2, #0]
            status |= mask;
   1621c:	4304      	orrs	r4, r0
   1621e:	e7e4      	b.n	161ea <nrfx_gpiote_irq_handler+0xe>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   16220:	4b05      	ldr	r3, [pc, #20]	; (16238 <nrfx_gpiote_irq_handler+0x5c>)
   16222:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
   16226:	b91b      	cbnz	r3, 16230 <nrfx_gpiote_irq_handler+0x54>
    {
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
   16228:	4620      	mov	r0, r4
   1622a:	f7ff fde7 	bl	15dfc <gpiote_evt_handle>
}
   1622e:	bd38      	pop	{r3, r4, r5, pc}
        port_event_handle();
   16230:	f7ff fd90 	bl	15d54 <port_event_handle>
   16234:	e7f8      	b.n	16228 <nrfx_gpiote_irq_handler+0x4c>
   16236:	bf00      	nop
   16238:	4002f000 	.word	0x4002f000

0001623c <twi_process_error>:
} twim_control_block_t;

static twim_control_block_t m_cb[NRFX_TWIM_ENABLED_COUNT];

static nrfx_err_t twi_process_error(uint32_t errorsrc)
{
   1623c:	4603      	mov	r3, r0
    nrfx_err_t ret = NRFX_ERROR_INTERNAL;

    if (errorsrc & NRF_TWIM_ERROR_OVERRUN)
   1623e:	f010 0f01 	tst.w	r0, #1
   16242:	d108      	bne.n	16256 <twi_process_error+0x1a>
    nrfx_err_t ret = NRFX_ERROR_INTERNAL;
   16244:	4806      	ldr	r0, [pc, #24]	; (16260 <twi_process_error+0x24>)
    {
        ret = NRFX_ERROR_DRV_TWI_ERR_OVERRUN;
    }

    if (errorsrc & NRF_TWIM_ERROR_ADDRESS_NACK)
   16246:	f013 0f02 	tst.w	r3, #2
   1624a:	d000      	beq.n	1624e <twi_process_error+0x12>
    {
        ret = NRFX_ERROR_DRV_TWI_ERR_ANACK;
   1624c:	4805      	ldr	r0, [pc, #20]	; (16264 <twi_process_error+0x28>)
    }

    if (errorsrc & NRF_TWIM_ERROR_DATA_NACK)
   1624e:	f013 0f04 	tst.w	r3, #4
   16252:	d102      	bne.n	1625a <twi_process_error+0x1e>
    {
        ret = NRFX_ERROR_DRV_TWI_ERR_DNACK;
    }

    return ret;
}
   16254:	4770      	bx	lr
        ret = NRFX_ERROR_DRV_TWI_ERR_OVERRUN;
   16256:	4804      	ldr	r0, [pc, #16]	; (16268 <twi_process_error+0x2c>)
   16258:	e7f5      	b.n	16246 <twi_process_error+0xa>
        ret = NRFX_ERROR_DRV_TWI_ERR_DNACK;
   1625a:	4804      	ldr	r0, [pc, #16]	; (1626c <twi_process_error+0x30>)
    return ret;
   1625c:	e7fa      	b.n	16254 <twi_process_error+0x18>
   1625e:	bf00      	nop
   16260:	0bad0001 	.word	0x0bad0001
   16264:	0bae0001 	.word	0x0bae0001
   16268:	0bae0000 	.word	0x0bae0000
   1626c:	0bae0002 	.word	0x0bae0002

00016270 <twim_pins_configure>:

    return transfer_complete;
}

static bool twim_pins_configure(NRF_TWIM_Type * p_twim, nrfx_twim_config_t const * p_config)
{
   16270:	4684      	mov	ip, r0
    // If both GPIO configuration and pin selection are to be skipped,
    // the pin numbers may be not specified at all, so even validation
    // of those numbers cannot be performed.
    if (p_config->skip_gpio_cfg && p_config->skip_psel_cfg)
   16272:	7b8b      	ldrb	r3, [r1, #14]
   16274:	b113      	cbz	r3, 1627c <twim_pins_configure+0xc>
   16276:	7bc8      	ldrb	r0, [r1, #15]
   16278:	2800      	cmp	r0, #0
   1627a:	d149      	bne.n	16310 <twim_pins_configure+0xa0>
    }

    nrf_gpio_pin_drive_t drive;

#if NRF_TWIM_HAS_1000_KHZ_FREQ && defined(NRF5340_XXAA)
    if (p_config->frequency >= NRF_TWIM_FREQ_1000K)
   1627c:	688a      	ldr	r2, [r1, #8]
   1627e:	f1b2 6f7f 	cmp.w	r2, #267386880	; 0xff00000
   16282:	d30e      	bcc.n	162a2 <twim_pins_configure+0x32>

        uint32_t e0e1_pin_1 = NRF_GPIO_PIN_MAP(1, 2);
        uint32_t e0e1_pin_2 = NRF_GPIO_PIN_MAP(1, 3);

        /* Check whether provided pins have the extra high drive capabilities. */
        if (((p_config->scl != e0e1_pin_1) || (p_config->sda != e0e1_pin_2)) &&
   16284:	680a      	ldr	r2, [r1, #0]
   16286:	2a22      	cmp	r2, #34	; 0x22
   16288:	d006      	beq.n	16298 <twim_pins_configure+0x28>
   1628a:	2a23      	cmp	r2, #35	; 0x23
   1628c:	d13c      	bne.n	16308 <twim_pins_configure+0x98>
            ((p_config->scl != e0e1_pin_2) || (p_config->sda != e0e1_pin_1)))
   1628e:	684a      	ldr	r2, [r1, #4]
   16290:	2a22      	cmp	r2, #34	; 0x22
   16292:	d13b      	bne.n	1630c <twim_pins_configure+0x9c>
        drive = NRF_GPIO_PIN_E0E1;
   16294:	220b      	movs	r2, #11
   16296:	e005      	b.n	162a4 <twim_pins_configure+0x34>
        if (((p_config->scl != e0e1_pin_1) || (p_config->sda != e0e1_pin_2)) &&
   16298:	6848      	ldr	r0, [r1, #4]
   1629a:	2823      	cmp	r0, #35	; 0x23
   1629c:	d1f5      	bne.n	1628a <twim_pins_configure+0x1a>
        drive = NRF_GPIO_PIN_E0E1;
   1629e:	220b      	movs	r2, #11
   162a0:	e000      	b.n	162a4 <twim_pins_configure+0x34>
        }
    }
    else
#endif
    {
        drive = NRF_GPIO_PIN_S0D1;
   162a2:	2206      	movs	r2, #6
{
   162a4:	b510      	push	{r4, lr}

    /* To secure correct signal levels on the pins used by the TWI
       master when the system is in OFF mode, and when the TWI master is
       disabled, these pins must be configured in the GPIO peripheral.
    */
    if (!p_config->skip_gpio_cfg)
   162a6:	bb0b      	cbnz	r3, 162ec <twim_pins_configure+0x7c>
    {
        TWIM_PIN_INIT(p_config->scl, drive);
   162a8:	680b      	ldr	r3, [r1, #0]
    *p_pin = pin_number & 0x1F;
   162aa:	f003 0e1f 	and.w	lr, r3, #31
    return pin_number >> 5;
   162ae:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   162b0:	2b01      	cmp	r3, #1
   162b2:	d025      	beq.n	16300 <twim_pins_configure+0x90>
        case 0: return NRF_P0;
   162b4:	4c17      	ldr	r4, [pc, #92]	; (16314 <twim_pins_configure+0xa4>)
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
   162b6:	f10e 0e80 	add.w	lr, lr, #128	; 0x80
   162ba:	f854 002e 	ldr.w	r0, [r4, lr, lsl #2]
   162be:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
   162c2:	0213      	lsls	r3, r2, #8
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   162c4:	f043 030c 	orr.w	r3, r3, #12
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
   162c8:	4318      	orrs	r0, r3
    reg->PIN_CNF[pin_number] = cnf;
   162ca:	f844 002e 	str.w	r0, [r4, lr, lsl #2]
        TWIM_PIN_INIT(p_config->sda, drive);
   162ce:	684a      	ldr	r2, [r1, #4]
    *p_pin = pin_number & 0x1F;
   162d0:	f002 001f 	and.w	r0, r2, #31
    return pin_number >> 5;
   162d4:	0952      	lsrs	r2, r2, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   162d6:	2a01      	cmp	r2, #1
   162d8:	d014      	beq.n	16304 <twim_pins_configure+0x94>
        case 0: return NRF_P0;
   162da:	4c0e      	ldr	r4, [pc, #56]	; (16314 <twim_pins_configure+0xa4>)
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
   162dc:	3080      	adds	r0, #128	; 0x80
   162de:	f854 2020 	ldr.w	r2, [r4, r0, lsl #2]
   162e2:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
   162e6:	4313      	orrs	r3, r2
    reg->PIN_CNF[pin_number] = cnf;
   162e8:	f844 3020 	str.w	r3, [r4, r0, lsl #2]
    }

    if (!p_config->skip_psel_cfg)
   162ec:	7bc8      	ldrb	r0, [r1, #15]
   162ee:	b930      	cbnz	r0, 162fe <twim_pins_configure+0x8e>
    {
        nrf_twim_pins_set(p_twim, p_config->scl, p_config->sda);
   162f0:	680a      	ldr	r2, [r1, #0]
   162f2:	684b      	ldr	r3, [r1, #4]
    p_reg->PSEL.SCL = scl_pin;
   162f4:	f8cc 2508 	str.w	r2, [ip, #1288]	; 0x508
    p_reg->PSEL.SDA = sda_pin;
   162f8:	f8cc 350c 	str.w	r3, [ip, #1292]	; 0x50c
    }

    return true;
   162fc:	2001      	movs	r0, #1
}
   162fe:	bd10      	pop	{r4, pc}
        case 1: return NRF_P1;
   16300:	4c05      	ldr	r4, [pc, #20]	; (16318 <twim_pins_configure+0xa8>)
   16302:	e7d8      	b.n	162b6 <twim_pins_configure+0x46>
   16304:	4c04      	ldr	r4, [pc, #16]	; (16318 <twim_pins_configure+0xa8>)
   16306:	e7e9      	b.n	162dc <twim_pins_configure+0x6c>
            return false;
   16308:	2000      	movs	r0, #0
   1630a:	4770      	bx	lr
   1630c:	2000      	movs	r0, #0
   1630e:	4770      	bx	lr
}
   16310:	4770      	bx	lr
   16312:	bf00      	nop
   16314:	40842500 	.word	0x40842500
   16318:	40842800 	.word	0x40842800

0001631c <twim_xfer>:
}
static nrfx_err_t twim_xfer(twim_control_block_t        * p_cb,
                            NRF_TWIM_Type               * p_twim,
                            nrfx_twim_xfer_desc_t const * p_xfer_desc,
                            uint32_t                      flags)
{
   1631c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   16320:	4605      	mov	r5, r0
   16322:	460c      	mov	r4, r1
   16324:	4616      	mov	r6, r2
   16326:	461f      	mov	r7, r3
    nrfx_err_t err_code = NRFX_SUCCESS;
    nrf_twim_task_t  start_task = NRF_TWIM_TASK_STARTTX;
    p_cb->error = false;
   16328:	2300      	movs	r3, #0
   1632a:	f880 302e 	strb.w	r3, [r0, #46]	; 0x2e

    if (p_xfer_desc->primary_length != 0 && !nrfx_is_in_ram(p_xfer_desc->p_primary_buf))
   1632e:	6853      	ldr	r3, [r2, #4]
   16330:	b133      	cbz	r3, 16340 <twim_xfer+0x24>
   16332:	68d3      	ldr	r3, [r2, #12]
   16334:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
   16338:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   1633c:	f040 8131 	bne.w	165a2 <twim_xfer+0x286>
    p_reg->INTENCLR = mask;
   16340:	4b9c      	ldr	r3, [pc, #624]	; (165b4 <twim_xfer+0x298>)
   16342:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }
    /* Block TWI interrupts to ensure that function is not interrupted by TWI interrupt. */
    nrf_twim_int_disable(p_twim, NRF_TWIM_ALL_INTS_MASK);
    if (p_cb->busy)
   16346:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
   1634a:	f003 08ff 	and.w	r8, r3, #255	; 0xff
   1634e:	2b00      	cmp	r3, #0
   16350:	d136      	bne.n	163c0 <twim_xfer+0xa4>
        return err_code;
    }
    else
    {
        p_cb->busy = ((NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER & flags) ||
                      (NRFX_TWIM_FLAG_REPEATED_XFER & flags)) ? false: true;
   16352:	f017 0f14 	tst.w	r7, #20
   16356:	bf0c      	ite	eq
   16358:	2301      	moveq	r3, #1
   1635a:	2300      	movne	r3, #0
        p_cb->busy = ((NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER & flags) ||
   1635c:	f885 302f 	strb.w	r3, [r5, #47]	; 0x2f
    }

    p_cb->xfer_desc = *p_xfer_desc;
   16360:	f105 0c0c 	add.w	ip, r5, #12
   16364:	46b6      	mov	lr, r6
   16366:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   1636a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   1636e:	f8de 3000 	ldr.w	r3, [lr]
   16372:	f8cc 3000 	str.w	r3, [ip]
    p_cb->repeated = (flags & NRFX_TWIM_FLAG_REPEATED_XFER) ? true : false;
   16376:	f3c7 1300 	ubfx	r3, r7, #4, #1
   1637a:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
    p_cb->flags = flags;
   1637e:	622f      	str	r7, [r5, #32]
    nrf_twim_address_set(p_twim, p_xfer_desc->address);
   16380:	7873      	ldrb	r3, [r6, #1]
}

NRF_STATIC_INLINE void nrf_twim_address_set(NRF_TWIM_Type * p_reg,
                                            uint8_t address)
{
    p_reg->ADDRESS = address;
   16382:	f8c4 3588 	str.w	r3, [r4, #1416]	; 0x588
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   16386:	2300      	movs	r3, #0
   16388:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
   1638c:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
   16390:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   16394:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
   16398:	f8c4 3160 	str.w	r3, [r4, #352]	; 0x160
   1639c:	f8d4 2160 	ldr.w	r2, [r4, #352]	; 0x160
   163a0:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   163a4:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    nrf_twim_event_clear(p_twim, NRF_TWIM_EVENT_STOPPED);
    nrf_twim_event_clear(p_twim, NRF_TWIM_EVENT_ERROR);
    nrf_twim_event_clear(p_twim, NRF_TWIM_EVENT_LASTTX);
    nrf_twim_event_clear(p_twim, NRF_TWIM_EVENT_SUSPENDED);

    twim_list_enable_handle(p_twim, flags);
   163a8:	4639      	mov	r1, r7
   163aa:	4620      	mov	r0, r4
   163ac:	f004 fbfa 	bl	1aba4 <twim_list_enable_handle>
    switch (p_xfer_desc->type)
   163b0:	7833      	ldrb	r3, [r6, #0]
   163b2:	2b03      	cmp	r3, #3
   163b4:	f200 80a8 	bhi.w	16508 <twim_xfer+0x1ec>
   163b8:	e8df f003 	tbb	[pc, r3]
   163bc:	08379455 	.word	0x08379455
        nrf_twim_int_enable(p_twim, p_cb->int_mask);
   163c0:	68ab      	ldr	r3, [r5, #8]
    p_reg->INTENSET = mask;
   163c2:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
        return err_code;
   163c6:	f8df 91f0 	ldr.w	r9, [pc, #496]	; 165b8 <twim_xfer+0x29c>
   163ca:	e081      	b.n	164d0 <twim_xfer+0x1b4>
    {
    case NRFX_TWIM_XFER_TXTX:
        NRFX_ASSERT(!(flags & NRFX_TWIM_FLAG_REPEATED_XFER));
        NRFX_ASSERT(!(flags & NRFX_TWIM_FLAG_HOLD_XFER));
        NRFX_ASSERT(!(flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER));
        if (!nrfx_is_in_ram(p_xfer_desc->p_secondary_buf))
   163cc:	6933      	ldr	r3, [r6, #16]
   163ce:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
   163d2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   163d6:	f040 80e7 	bne.w	165a8 <twim_xfer+0x28c>
}

NRF_STATIC_INLINE void nrf_twim_shorts_set(NRF_TWIM_Type * p_reg,
                                           uint32_t mask)
{
    p_reg->SHORTS = mask;
   163da:	f44f 7380 	mov.w	r3, #256	; 0x100
   163de:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
                             __func__,
                             NRFX_LOG_ERROR_STRING_GET(err_code));
            return err_code;
        }
        nrf_twim_shorts_set(p_twim, NRF_TWIM_SHORT_LASTTX_SUSPEND_MASK);
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
   163e2:	68f2      	ldr	r2, [r6, #12]
   163e4:	6873      	ldr	r3, [r6, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   163e6:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   163ea:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   163ee:	2300      	movs	r3, #0
   163f0:	f8c4 3150 	str.w	r3, [r4, #336]	; 0x150
   163f4:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   163f8:	2301      	movs	r3, #1
   163fa:	6223      	str	r3, [r4, #32]
   163fc:	60a3      	str	r3, [r4, #8]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   163fe:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
        nrf_twim_event_clear(p_twim, NRF_TWIM_EVENT_TXSTARTED);
        nrf_twim_task_trigger(p_twim, NRF_TWIM_TASK_RESUME);
        nrf_twim_task_trigger(p_twim, NRF_TWIM_TASK_STARTTX);
        while (!nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_TXSTARTED))
   16402:	2b00      	cmp	r3, #0
   16404:	d0fb      	beq.n	163fe <twim_xfer+0xe2>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   16406:	2300      	movs	r3, #0
   16408:	f8c4 3150 	str.w	r3, [r4, #336]	; 0x150
   1640c:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
        {}
        NRFX_LOG_DEBUG("TWIM: Event: %s.", EVT_TO_STR_TWIM(NRF_TWIM_EVENT_TXSTARTED));
        nrf_twim_event_clear(p_twim, NRF_TWIM_EVENT_TXSTARTED);
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_secondary_buf, p_xfer_desc->secondary_length);
   16410:	6932      	ldr	r2, [r6, #16]
   16412:	68b3      	ldr	r3, [r6, #8]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   16414:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   16418:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
        p_cb->int_mask = NRF_TWIM_INT_SUSPENDED_MASK;
   1641c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
   16420:	60ab      	str	r3, [r5, #8]
    nrf_twim_task_t  start_task = NRF_TWIM_TASK_STARTTX;
   16422:	2308      	movs	r3, #8
    nrfx_err_t err_code = NRFX_SUCCESS;
   16424:	f8df 9194 	ldr.w	r9, [pc, #404]	; 165bc <twim_xfer+0x2a0>
        break;
   16428:	e032      	b.n	16490 <twim_xfer+0x174>
    case NRFX_TWIM_XFER_TXRX:
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
   1642a:	68f2      	ldr	r2, [r6, #12]
   1642c:	6873      	ldr	r3, [r6, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   1642e:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   16432:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
        if (!nrfx_is_in_ram(p_xfer_desc->p_secondary_buf))
   16436:	6933      	ldr	r3, [r6, #16]
   16438:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
   1643c:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
   16440:	f040 80b5 	bne.w	165ae <twim_xfer+0x292>
            NRFX_LOG_WARNING("Function: %s, error code: %s.",
                             __func__,
                             NRFX_LOG_ERROR_STRING_GET(err_code));
            return err_code;
        }
        nrf_twim_rx_buffer_set(p_twim, p_xfer_desc->p_secondary_buf, p_xfer_desc->secondary_length);
   16444:	68b2      	ldr	r2, [r6, #8]
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   16446:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   1644a:	f8c4 2538 	str.w	r2, [r4, #1336]	; 0x538
    p_reg->SHORTS = mask;
   1644e:	f44f 5384 	mov.w	r3, #4224	; 0x1080
   16452:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
        nrf_twim_shorts_set(p_twim, NRF_TWIM_SHORT_LASTTX_STARTRX_MASK |
                                    NRF_TWIM_SHORT_LASTRX_STOP_MASK);
        p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
   16456:	2302      	movs	r3, #2
   16458:	60ab      	str	r3, [r5, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1645a:	2301      	movs	r3, #1
   1645c:	6223      	str	r3, [r4, #32]
    nrf_twim_task_t  start_task = NRF_TWIM_TASK_STARTTX;
   1645e:	2308      	movs	r3, #8
    nrfx_err_t err_code = NRFX_SUCCESS;
   16460:	f8df 9158 	ldr.w	r9, [pc, #344]	; 165bc <twim_xfer+0x2a0>
}
   16464:	e014      	b.n	16490 <twim_xfer+0x174>
        nrf_twim_task_trigger(p_twim, NRF_TWIM_TASK_RESUME);
        break;
    case NRFX_TWIM_XFER_TX:
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
   16466:	68f2      	ldr	r2, [r6, #12]
   16468:	6873      	ldr	r3, [r6, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   1646a:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   1646e:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
        if (NRFX_TWIM_FLAG_TX_NO_STOP & flags)
   16472:	f017 0f20 	tst.w	r7, #32
   16476:	d02e      	beq.n	164d6 <twim_xfer+0x1ba>
    p_reg->SHORTS = mask;
   16478:	f44f 7380 	mov.w	r3, #256	; 0x100
   1647c:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
        {
            nrf_twim_shorts_set(p_twim, NRF_TWIM_SHORT_LASTTX_SUSPEND_MASK);
            p_cb->int_mask = NRF_TWIM_INT_SUSPENDED_MASK;
   16480:	f44f 2380 	mov.w	r3, #262144	; 0x40000
   16484:	60ab      	str	r3, [r5, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   16486:	2301      	movs	r3, #1
   16488:	6223      	str	r3, [r4, #32]
    nrf_twim_task_t  start_task = NRF_TWIM_TASK_STARTTX;
   1648a:	2308      	movs	r3, #8
    nrfx_err_t err_code = NRFX_SUCCESS;
   1648c:	f8df 912c 	ldr.w	r9, [pc, #300]	; 165bc <twim_xfer+0x2a0>
    default:
        err_code = NRFX_ERROR_INVALID_PARAM;
        break;
    }

    if (!(flags & NRFX_TWIM_FLAG_HOLD_XFER) && (p_xfer_desc->type != NRFX_TWIM_XFER_TXTX))
   16490:	f017 0f08 	tst.w	r7, #8
   16494:	d107      	bne.n	164a6 <twim_xfer+0x18a>
   16496:	7832      	ldrb	r2, [r6, #0]
   16498:	2a03      	cmp	r2, #3
   1649a:	d004      	beq.n	164a6 <twim_xfer+0x18a>
   1649c:	2201      	movs	r2, #1
   1649e:	50e2      	str	r2, [r4, r3]
    {
        nrf_twim_task_trigger(p_twim, start_task);
        if (p_xfer_desc->primary_length == 0)
   164a0:	6873      	ldr	r3, [r6, #4]
   164a2:	b903      	cbnz	r3, 164a6 <twim_xfer+0x18a>
   164a4:	6162      	str	r2, [r4, #20]
        {
            nrf_twim_task_trigger(p_twim, NRF_TWIM_TASK_STOP);
        }
    }

    if (p_cb->handler)
   164a6:	682b      	ldr	r3, [r5, #0]
   164a8:	b393      	cbz	r3, 16510 <twim_xfer+0x1f4>
    {
        if (flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER)
   164aa:	f017 0f04 	tst.w	r7, #4
   164ae:	d001      	beq.n	164b4 <twim_xfer+0x198>
        {
            p_cb->int_mask = 0;
   164b0:	2300      	movs	r3, #0
   164b2:	60ab      	str	r3, [r5, #8]
        }

        if (!(flags & NRFX_TWIM_FLAG_NO_SPURIOUS_STOP_CHECK))
   164b4:	f017 0f40 	tst.w	r7, #64	; 0x40
   164b8:	d103      	bne.n	164c2 <twim_xfer+0x1a6>
        {
            p_cb->int_mask |= NRF_TWIM_INT_STOPPED_MASK;
   164ba:	68ab      	ldr	r3, [r5, #8]
   164bc:	f043 0302 	orr.w	r3, r3, #2
   164c0:	60ab      	str	r3, [r5, #8]
        }

        // Interrupts for ERROR are implicitly enabled, regardless of driver configuration.
        p_cb->int_mask |= NRF_TWIM_INT_ERROR_MASK;
   164c2:	68ab      	ldr	r3, [r5, #8]
   164c4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   164c8:	60ab      	str	r3, [r5, #8]
        nrf_twim_int_enable(p_twim, p_cb->int_mask);
   164ca:	68ab      	ldr	r3, [r5, #8]
    p_reg->INTENSET = mask;
   164cc:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
                err_code = NRFX_ERROR_INTERNAL;
            }
        }
    }
    return err_code;
}
   164d0:	4648      	mov	r0, r9
   164d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    p_reg->SHORTS = mask;
   164d6:	f44f 7300 	mov.w	r3, #512	; 0x200
   164da:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
   164de:	2302      	movs	r3, #2
   164e0:	60ab      	str	r3, [r5, #8]
   164e2:	e7d0      	b.n	16486 <twim_xfer+0x16a>
        nrf_twim_rx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
   164e4:	68f2      	ldr	r2, [r6, #12]
   164e6:	6873      	ldr	r3, [r6, #4]
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   164e8:	f8c4 2534 	str.w	r2, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   164ec:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    p_reg->SHORTS = mask;
   164f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   164f4:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
        p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
   164f8:	2302      	movs	r3, #2
   164fa:	60ab      	str	r3, [r5, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   164fc:	2301      	movs	r3, #1
   164fe:	6223      	str	r3, [r4, #32]
        start_task = NRF_TWIM_TASK_STARTRX;
   16500:	2300      	movs	r3, #0
    nrfx_err_t err_code = NRFX_SUCCESS;
   16502:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 165bc <twim_xfer+0x2a0>
}
   16506:	e7c3      	b.n	16490 <twim_xfer+0x174>
    switch (p_xfer_desc->type)
   16508:	2308      	movs	r3, #8
   1650a:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 165c0 <twim_xfer+0x2a4>
   1650e:	e7bf      	b.n	16490 <twim_xfer+0x174>
        bool transmission_finished = false;
   16510:	4643      	mov	r3, r8
   16512:	e000      	b.n	16516 <twim_xfer+0x1fa>
        } while (!transmission_finished);
   16514:	bb6b      	cbnz	r3, 16572 <twim_xfer+0x256>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   16516:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_SUSPENDED))
   1651a:	b102      	cbz	r2, 1651e <twim_xfer+0x202>
                transmission_finished = true;
   1651c:	2301      	movs	r3, #1
   1651e:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_STOPPED))
   16522:	b12a      	cbz	r2, 16530 <twim_xfer+0x214>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   16524:	2300      	movs	r3, #0
   16526:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
   1652a:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
                transmission_finished = true;
   1652e:	2301      	movs	r3, #1
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   16530:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_ERROR))
   16534:	2a00      	cmp	r2, #0
   16536:	d0ed      	beq.n	16514 <twim_xfer+0x1f8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   16538:	2200      	movs	r2, #0
   1653a:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   1653e:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   16542:	f8d4 2160 	ldr.w	r2, [r4, #352]	; 0x160
}

NRF_STATIC_INLINE uint32_t nrf_twim_shorts_get(NRF_TWIM_Type const * p_reg)
{
    return p_reg->SHORTS;
   16546:	f8d4 1200 	ldr.w	r1, [r4, #512]	; 0x200
                if (!(lasttx_triggered && (shorts_mask & NRF_TWIM_SHORT_LASTTX_STOP_MASK)))
   1654a:	b112      	cbz	r2, 16552 <twim_xfer+0x236>
   1654c:	f411 7f00 	tst.w	r1, #512	; 0x200
   16550:	d103      	bne.n	1655a <twim_xfer+0x23e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   16552:	2301      	movs	r3, #1
   16554:	6223      	str	r3, [r4, #32]
   16556:	6163      	str	r3, [r4, #20]
                    transmission_finished = false;
   16558:	4643      	mov	r3, r8
                if (lasttx_triggered && (shorts_mask & NRF_TWIM_SHORT_LASTTX_SUSPEND_MASK))
   1655a:	2a00      	cmp	r2, #0
   1655c:	d0da      	beq.n	16514 <twim_xfer+0x1f8>
   1655e:	f411 7f80 	tst.w	r1, #256	; 0x100
   16562:	d0d7      	beq.n	16514 <twim_xfer+0x1f8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   16564:	2300      	movs	r3, #0
   16566:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   1656a:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
                    transmission_finished = false;
   1656e:	4643      	mov	r3, r8
   16570:	e7d0      	b.n	16514 <twim_xfer+0x1f8>
    uint32_t error_source = p_reg->ERRORSRC;
   16572:	f8d4 04c4 	ldr.w	r0, [r4, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
   16576:	f8c4 04c4 	str.w	r0, [r4, #1220]	; 0x4c4
        p_cb->busy = false;
   1657a:	2300      	movs	r3, #0
   1657c:	f885 302f 	strb.w	r3, [r5, #47]	; 0x2f
        if (errorsrc)
   16580:	b118      	cbz	r0, 1658a <twim_xfer+0x26e>
            err_code = twi_process_error(errorsrc);
   16582:	f7ff fe5b 	bl	1623c <twi_process_error>
   16586:	4681      	mov	r9, r0
   16588:	e7a2      	b.n	164d0 <twim_xfer+0x1b4>
            if (!(flags & NRFX_TWIM_FLAG_NO_SPURIOUS_STOP_CHECK) &&
   1658a:	f017 0f40 	tst.w	r7, #64	; 0x40
   1658e:	d19f      	bne.n	164d0 <twim_xfer+0x1b4>
                !xfer_completeness_check(p_twim, p_cb))
   16590:	4629      	mov	r1, r5
   16592:	4620      	mov	r0, r4
   16594:	f004 fac5 	bl	1ab22 <xfer_completeness_check>
            if (!(flags & NRFX_TWIM_FLAG_NO_SPURIOUS_STOP_CHECK) &&
   16598:	2800      	cmp	r0, #0
   1659a:	d199      	bne.n	164d0 <twim_xfer+0x1b4>
                err_code = NRFX_ERROR_INTERNAL;
   1659c:	f8df 9024 	ldr.w	r9, [pc, #36]	; 165c4 <twim_xfer+0x2a8>
   165a0:	e796      	b.n	164d0 <twim_xfer+0x1b4>
        return err_code;
   165a2:	f8df 9024 	ldr.w	r9, [pc, #36]	; 165c8 <twim_xfer+0x2ac>
   165a6:	e793      	b.n	164d0 <twim_xfer+0x1b4>
            return err_code;
   165a8:	f8df 901c 	ldr.w	r9, [pc, #28]	; 165c8 <twim_xfer+0x2ac>
   165ac:	e790      	b.n	164d0 <twim_xfer+0x1b4>
            return err_code;
   165ae:	f8df 9018 	ldr.w	r9, [pc, #24]	; 165c8 <twim_xfer+0x2ac>
   165b2:	e78d      	b.n	164d0 <twim_xfer+0x1b4>
   165b4:	019c0202 	.word	0x019c0202
   165b8:	0bad000b 	.word	0x0bad000b
   165bc:	0bad0000 	.word	0x0bad0000
   165c0:	0bad0004 	.word	0x0bad0004
   165c4:	0bad0001 	.word	0x0bad0001
   165c8:	0bad000a 	.word	0x0bad000a

000165cc <twim_irq_handler>:
{
    return nrf_twim_event_address_get(p_instance->p_twim, NRF_TWIM_EVENT_STOPPED);
}

static void twim_irq_handler(NRF_TWIM_Type * p_twim, twim_control_block_t * p_cb)
{
   165cc:	b530      	push	{r4, r5, lr}
   165ce:	b087      	sub	sp, #28
   165d0:	4604      	mov	r4, r0
   165d2:	460d      	mov	r5, r1
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   165d4:	f8d0 3124 	ldr.w	r3, [r0, #292]	; 0x124
    }
#endif

    NRFX_ASSERT(p_cb->handler);

    if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_ERROR))
   165d8:	b143      	cbz	r3, 165ec <twim_irq_handler+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   165da:	2300      	movs	r3, #0
   165dc:	f8c0 3124 	str.w	r3, [r0, #292]	; 0x124
   165e0:	f8d0 3124 	ldr.w	r3, [r0, #292]	; 0x124
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   165e4:	f8d0 3104 	ldr.w	r3, [r0, #260]	; 0x104
    {
        nrf_twim_event_clear(p_twim, NRF_TWIM_EVENT_ERROR);
        NRFX_LOG_DEBUG("TWIM: Event: %s.", EVT_TO_STR_TWIM(NRF_TWIM_EVENT_ERROR));
        if (!nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_STOPPED))
   165e8:	2b00      	cmp	r3, #0
   165ea:	d05f      	beq.n	166ac <twim_irq_handler+0xe0>
   165ec:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
        }
    }

    nrfx_twim_evt_t event;

    if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_STOPPED))
   165f0:	2b00      	cmp	r3, #0
   165f2:	d07b      	beq.n	166ec <twim_irq_handler+0x120>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   165f4:	2300      	movs	r3, #0
   165f6:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
   165fa:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    {
        NRFX_LOG_DEBUG("TWIM: Event: %s.", EVT_TO_STR_TWIM(NRF_TWIM_EVENT_STOPPED));
        nrf_twim_event_clear(p_twim, NRF_TWIM_EVENT_STOPPED);

        if (!(p_cb->flags & NRFX_TWIM_FLAG_NO_SPURIOUS_STOP_CHECK) && !p_cb->error)
   165fe:	6a2b      	ldr	r3, [r5, #32]
   16600:	f013 0f40 	tst.w	r3, #64	; 0x40
   16604:	d103      	bne.n	1660e <twim_irq_handler+0x42>
   16606:	f895 302e 	ldrb.w	r3, [r5, #46]	; 0x2e
   1660a:	2b00      	cmp	r3, #0
   1660c:	d065      	beq.n	166da <twim_irq_handler+0x10e>
            p_cb->error = !xfer_completeness_check(p_twim, p_cb);
        }

        // Further processing of STOPPED event is valid only if NO_XFER_EVT_HANDLER
        // setting is not used.
        if (!(p_cb->flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER))
   1660e:	6a2b      	ldr	r3, [r5, #32]
   16610:	f013 0f04 	tst.w	r3, #4
   16614:	d12e      	bne.n	16674 <twim_irq_handler+0xa8>
        {
            event.xfer_desc = p_cb->xfer_desc;
   16616:	f10d 0c04 	add.w	ip, sp, #4
   1661a:	f105 0e0c 	add.w	lr, r5, #12
   1661e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   16622:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   16626:	f8de 3000 	ldr.w	r3, [lr]
   1662a:	f8cc 3000 	str.w	r3, [ip]
   1662e:	2300      	movs	r3, #0
   16630:	f8c4 3160 	str.w	r3, [r4, #352]	; 0x160
   16634:	f8d4 2160 	ldr.w	r2, [r4, #352]	; 0x160
   16638:	f8c4 315c 	str.w	r3, [r4, #348]	; 0x15c
   1663c:	f8d4 315c 	ldr.w	r3, [r4, #348]	; 0x15c
            nrf_twim_event_clear(p_twim, NRF_TWIM_EVENT_LASTTX);
            nrf_twim_event_clear(p_twim, NRF_TWIM_EVENT_LASTRX);
            if (!p_cb->repeated || p_cb->error)
   16640:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
   16644:	b113      	cbz	r3, 1664c <twim_irq_handler+0x80>
   16646:	f895 302e 	ldrb.w	r3, [r5, #46]	; 0x2e
   1664a:	b19b      	cbz	r3, 16674 <twim_irq_handler+0xa8>
    p_reg->SHORTS = mask;
   1664c:	2300      	movs	r3, #0
   1664e:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
            {
                nrf_twim_shorts_set(p_twim, 0);
                p_cb->int_mask = 0;
   16652:	60ab      	str	r3, [r5, #8]
    p_reg->INTENCLR = mask;
   16654:	4b50      	ldr	r3, [pc, #320]	; (16798 <twim_irq_handler+0x1cc>)
   16656:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    return ((((uint32_t)p_object) & 0x3u) == 0u);
}

NRF_STATIC_INLINE IRQn_Type nrfx_get_irq_number(void const * p_reg)
{
    return (IRQn_Type)NRFX_IRQ_NUMBER_GET(p_reg);
   1665a:	f344 3307 	sbfx	r3, r4, #12, #8
  if ((int32_t)(IRQn) >= 0)
   1665e:	2b00      	cmp	r3, #0
   16660:	db08      	blt.n	16674 <twim_irq_handler+0xa8>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   16662:	f003 011f 	and.w	r1, r3, #31
   16666:	095b      	lsrs	r3, r3, #5
   16668:	2201      	movs	r2, #1
   1666a:	408a      	lsls	r2, r1
   1666c:	3360      	adds	r3, #96	; 0x60
   1666e:	494b      	ldr	r1, [pc, #300]	; (1679c <twim_irq_handler+0x1d0>)
   16670:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    uint32_t error_source = p_reg->ERRORSRC;
   16674:	f8d4 34c4 	ldr.w	r3, [r4, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
   16678:	f8c4 34c4 	str.w	r3, [r4, #1220]	; 0x4c4
            return;
        }
    }

    uint32_t errorsrc = nrf_twim_errorsrc_get_and_clear(p_twim);
    if (errorsrc & NRF_TWIM_ERROR_ADDRESS_NACK)
   1667c:	f013 0f02 	tst.w	r3, #2
   16680:	d071      	beq.n	16766 <twim_irq_handler+0x19a>
    {
        event.type = NRFX_TWIM_EVT_ADDRESS_NACK;
   16682:	2301      	movs	r3, #1
   16684:	f88d 3000 	strb.w	r3, [sp]
    {
        event.type = NRFX_TWIM_EVT_DONE;
        NRFX_LOG_DEBUG("Event: %s.", EVT_TO_STR(NRFX_TWIM_EVT_DONE));
    }

    if (!p_cb->repeated)
   16688:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
   1668c:	b90b      	cbnz	r3, 16692 <twim_irq_handler+0xc6>
    {
        p_cb->busy = false;
   1668e:	f885 302f 	strb.w	r3, [r5, #47]	; 0x2f
    }

    if (!(p_cb->flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER) || p_cb->error)
   16692:	6a2b      	ldr	r3, [r5, #32]
   16694:	f013 0f04 	tst.w	r3, #4
   16698:	d002      	beq.n	166a0 <twim_irq_handler+0xd4>
   1669a:	f895 302e 	ldrb.w	r3, [r5, #46]	; 0x2e
   1669e:	b11b      	cbz	r3, 166a8 <twim_irq_handler+0xdc>
    {
        p_cb->handler(&event, p_cb->p_context);
   166a0:	682b      	ldr	r3, [r5, #0]
   166a2:	6869      	ldr	r1, [r5, #4]
   166a4:	4668      	mov	r0, sp
   166a6:	4798      	blx	r3
    }
}
   166a8:	b007      	add	sp, #28
   166aa:	bd30      	pop	{r4, r5, pc}
            nrf_twim_int_disable(p_twim, p_cb->int_mask);
   166ac:	688b      	ldr	r3, [r1, #8]
    p_reg->INTENCLR = mask;
   166ae:	f8c0 3308 	str.w	r3, [r0, #776]	; 0x308
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
   166b2:	2302      	movs	r3, #2
   166b4:	608b      	str	r3, [r1, #8]
            nrf_twim_int_enable(p_twim, p_cb->int_mask);
   166b6:	688b      	ldr	r3, [r1, #8]
    p_reg->INTENSET = mask;
   166b8:	f8c0 3304 	str.w	r3, [r0, #772]	; 0x304
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   166bc:	f8d0 3160 	ldr.w	r3, [r0, #352]	; 0x160
            if (!(nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_LASTTX) &&
   166c0:	b123      	cbz	r3, 166cc <twim_irq_handler+0x100>
    return p_reg->SHORTS;
   166c2:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
   166c6:	f413 7f00 	tst.w	r3, #512	; 0x200
   166ca:	d102      	bne.n	166d2 <twim_irq_handler+0x106>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   166cc:	2301      	movs	r3, #1
   166ce:	6223      	str	r3, [r4, #32]
   166d0:	6163      	str	r3, [r4, #20]
            p_cb->error = true;
   166d2:	2301      	movs	r3, #1
   166d4:	f885 302e 	strb.w	r3, [r5, #46]	; 0x2e
            return;
   166d8:	e7e6      	b.n	166a8 <twim_irq_handler+0xdc>
            p_cb->error = !xfer_completeness_check(p_twim, p_cb);
   166da:	4629      	mov	r1, r5
   166dc:	4620      	mov	r0, r4
   166de:	f004 fa20 	bl	1ab22 <xfer_completeness_check>
   166e2:	f080 0001 	eor.w	r0, r0, #1
   166e6:	f885 002e 	strb.w	r0, [r5, #46]	; 0x2e
   166ea:	e790      	b.n	1660e <twim_irq_handler+0x42>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   166ec:	2300      	movs	r3, #0
   166ee:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   166f2:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
        if (p_cb->xfer_desc.type == NRFX_TWIM_XFER_TX)
   166f6:	7b2b      	ldrb	r3, [r5, #12]
   166f8:	bb1b      	cbnz	r3, 16742 <twim_irq_handler+0x176>
            event.xfer_desc = p_cb->xfer_desc;
   166fa:	f10d 0c04 	add.w	ip, sp, #4
   166fe:	f105 0e0c 	add.w	lr, r5, #12
   16702:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   16706:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   1670a:	f8de 3000 	ldr.w	r3, [lr]
   1670e:	f8cc 3000 	str.w	r3, [ip]
            if (!p_cb->repeated)
   16712:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
   16716:	2b00      	cmp	r3, #0
   16718:	d1ac      	bne.n	16674 <twim_irq_handler+0xa8>
    p_reg->SHORTS = mask;
   1671a:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
                p_cb->int_mask = 0;
   1671e:	60ab      	str	r3, [r5, #8]
    p_reg->INTENCLR = mask;
   16720:	4b1d      	ldr	r3, [pc, #116]	; (16798 <twim_irq_handler+0x1cc>)
   16722:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
   16726:	f344 3307 	sbfx	r3, r4, #12, #8
  if ((int32_t)(IRQn) >= 0)
   1672a:	2b00      	cmp	r3, #0
   1672c:	dba2      	blt.n	16674 <twim_irq_handler+0xa8>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1672e:	f003 011f 	and.w	r1, r3, #31
   16732:	095b      	lsrs	r3, r3, #5
   16734:	2201      	movs	r2, #1
   16736:	408a      	lsls	r2, r1
   16738:	3360      	adds	r3, #96	; 0x60
   1673a:	4918      	ldr	r1, [pc, #96]	; (1679c <twim_irq_handler+0x1d0>)
   1673c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
   16740:	e798      	b.n	16674 <twim_irq_handler+0xa8>
    p_reg->SHORTS = mask;
   16742:	f44f 7300 	mov.w	r3, #512	; 0x200
   16746:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK | NRF_TWIM_INT_ERROR_MASK;
   1674a:	f240 2302 	movw	r3, #514	; 0x202
   1674e:	60ab      	str	r3, [r5, #8]
    p_reg->INTENCLR = mask;
   16750:	f103 73ce 	add.w	r3, r3, #27000832	; 0x19c0000
   16754:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
            nrf_twim_int_enable(p_twim, p_cb->int_mask);
   16758:	68ab      	ldr	r3, [r5, #8]
    p_reg->INTENSET = mask;
   1675a:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1675e:	2301      	movs	r3, #1
   16760:	60a3      	str	r3, [r4, #8]
   16762:	6223      	str	r3, [r4, #32]
            return;
   16764:	e7a0      	b.n	166a8 <twim_irq_handler+0xdc>
    else if (errorsrc & NRF_TWIM_ERROR_DATA_NACK)
   16766:	f013 0f04 	tst.w	r3, #4
   1676a:	d003      	beq.n	16774 <twim_irq_handler+0x1a8>
        event.type = NRFX_TWIM_EVT_DATA_NACK;
   1676c:	2302      	movs	r3, #2
   1676e:	f88d 3000 	strb.w	r3, [sp]
        NRFX_LOG_DEBUG("Event: %s.", EVT_TO_STR(NRFX_TWIM_EVT_DATA_NACK));
   16772:	e789      	b.n	16688 <twim_irq_handler+0xbc>
    else if (errorsrc & NRF_TWIM_ERROR_OVERRUN)
   16774:	f013 0f01 	tst.w	r3, #1
   16778:	d003      	beq.n	16782 <twim_irq_handler+0x1b6>
        event.type = NRFX_TWIM_EVT_OVERRUN;
   1677a:	2303      	movs	r3, #3
   1677c:	f88d 3000 	strb.w	r3, [sp]
        NRFX_LOG_DEBUG("Event: %s.", EVT_TO_STR(NRFX_TWIM_EVT_OVERRUN));
   16780:	e782      	b.n	16688 <twim_irq_handler+0xbc>
    else if (p_cb->error)
   16782:	f895 302e 	ldrb.w	r3, [r5, #46]	; 0x2e
   16786:	b11b      	cbz	r3, 16790 <twim_irq_handler+0x1c4>
        event.type = NRFX_TWIM_EVT_BUS_ERROR;
   16788:	2304      	movs	r3, #4
   1678a:	f88d 3000 	strb.w	r3, [sp]
        NRFX_LOG_DEBUG("Event: %s.", EVT_TO_STR(NRFX_TWIM_EVT_BUS_ERROR));
   1678e:	e77b      	b.n	16688 <twim_irq_handler+0xbc>
        event.type = NRFX_TWIM_EVT_DONE;
   16790:	2300      	movs	r3, #0
   16792:	f88d 3000 	strb.w	r3, [sp]
        NRFX_LOG_DEBUG("Event: %s.", EVT_TO_STR(NRFX_TWIM_EVT_DONE));
   16796:	e777      	b.n	16688 <twim_irq_handler+0xbc>
   16798:	019c0202 	.word	0x019c0202
   1679c:	e000e100 	.word	0xe000e100

000167a0 <nrfx_twim_init>:
{
   167a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   167a2:	4604      	mov	r4, r0
   167a4:	460d      	mov	r5, r1
    twim_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
   167a6:	7906      	ldrb	r6, [r0, #4]
    NRF_TWIM_Type * p_twim = p_instance->p_twim;
   167a8:	6807      	ldr	r7, [r0, #0]
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   167aa:	491e      	ldr	r1, [pc, #120]	; (16824 <nrfx_twim_init+0x84>)
   167ac:	2034      	movs	r0, #52	; 0x34
   167ae:	fb00 1106 	mla	r1, r0, r6, r1
   167b2:	f891 102d 	ldrb.w	r1, [r1, #45]	; 0x2d
   167b6:	b109      	cbz	r1, 167bc <nrfx_twim_init+0x1c>
        return err_code;
   167b8:	481b      	ldr	r0, [pc, #108]	; (16828 <nrfx_twim_init+0x88>)
}
   167ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    p_cb->handler         = event_handler;
   167bc:	f8df c064 	ldr.w	ip, [pc, #100]	; 16824 <nrfx_twim_init+0x84>
   167c0:	fb06 f000 	mul.w	r0, r6, r0
   167c4:	eb0c 0100 	add.w	r1, ip, r0
   167c8:	f84c 2000 	str.w	r2, [ip, r0]
    p_cb->p_context       = p_context;
   167cc:	604b      	str	r3, [r1, #4]
    p_cb->int_mask        = 0;
   167ce:	2300      	movs	r3, #0
   167d0:	608b      	str	r3, [r1, #8]
    p_cb->repeated        = false;
   167d2:	f881 3030 	strb.w	r3, [r1, #48]	; 0x30
    p_cb->busy            = false;
   167d6:	f881 302f 	strb.w	r3, [r1, #47]	; 0x2f
    p_cb->hold_bus_uninit = p_config->hold_bus_uninit;
   167da:	7b6b      	ldrb	r3, [r5, #13]
   167dc:	f881 3032 	strb.w	r3, [r1, #50]	; 0x32
    p_cb->skip_gpio_cfg   = p_config->skip_gpio_cfg;
   167e0:	7bab      	ldrb	r3, [r5, #14]
   167e2:	f881 3033 	strb.w	r3, [r1, #51]	; 0x33
    if (!twim_pins_configure(p_twim, p_config))
   167e6:	4629      	mov	r1, r5
   167e8:	4638      	mov	r0, r7
   167ea:	f7ff fd41 	bl	16270 <twim_pins_configure>
   167ee:	b1b0      	cbz	r0, 1681e <nrfx_twim_init+0x7e>
    nrf_twim_frequency_set(p_twim, (nrf_twim_frequency_t)p_config->frequency);
   167f0:	68ab      	ldr	r3, [r5, #8]
    p_reg->FREQUENCY = frequency;
   167f2:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524
    if (p_cb->handler)
   167f6:	2334      	movs	r3, #52	; 0x34
   167f8:	fb06 f303 	mul.w	r3, r6, r3
   167fc:	4a09      	ldr	r2, [pc, #36]	; (16824 <nrfx_twim_init+0x84>)
   167fe:	58d3      	ldr	r3, [r2, r3]
   16800:	b123      	cbz	r3, 1680c <nrfx_twim_init+0x6c>
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_twim));
   16802:	6820      	ldr	r0, [r4, #0]
   16804:	f340 3007 	sbfx	r0, r0, #12, #8
   16808:	f003 fab7 	bl	19d7a <arch_irq_enable>
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   1680c:	4b05      	ldr	r3, [pc, #20]	; (16824 <nrfx_twim_init+0x84>)
   1680e:	2234      	movs	r2, #52	; 0x34
   16810:	fb02 3306 	mla	r3, r2, r6, r3
   16814:	2201      	movs	r2, #1
   16816:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    return err_code;
   1681a:	4804      	ldr	r0, [pc, #16]	; (1682c <nrfx_twim_init+0x8c>)
   1681c:	e7cd      	b.n	167ba <nrfx_twim_init+0x1a>
        return NRFX_ERROR_INVALID_PARAM;
   1681e:	4804      	ldr	r0, [pc, #16]	; (16830 <nrfx_twim_init+0x90>)
   16820:	e7cb      	b.n	167ba <nrfx_twim_init+0x1a>
   16822:	bf00      	nop
   16824:	20008628 	.word	0x20008628
   16828:	0bad0005 	.word	0x0bad0005
   1682c:	0bad0000 	.word	0x0bad0000
   16830:	0bad0004 	.word	0x0bad0004

00016834 <nrfx_twim_enable>:
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   16834:	7902      	ldrb	r2, [r0, #4]
    nrf_twim_enable(p_instance->p_twim);
   16836:	6803      	ldr	r3, [r0, #0]
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Enabled << TWIM_ENABLE_ENABLE_Pos);
   16838:	2106      	movs	r1, #6
   1683a:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    p_cb->state = NRFX_DRV_STATE_POWERED_ON;
   1683e:	4b04      	ldr	r3, [pc, #16]	; (16850 <nrfx_twim_enable+0x1c>)
   16840:	2134      	movs	r1, #52	; 0x34
   16842:	fb01 3302 	mla	r3, r1, r2, r3
   16846:	2202      	movs	r2, #2
   16848:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
   1684c:	4770      	bx	lr
   1684e:	bf00      	nop
   16850:	20008628 	.word	0x20008628

00016854 <nrfx_twim_disable>:
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   16854:	7901      	ldrb	r1, [r0, #4]
    NRF_TWIM_Type * p_twim = p_instance->p_twim;
   16856:	6802      	ldr	r2, [r0, #0]
    p_cb->int_mask = 0;
   16858:	4b0b      	ldr	r3, [pc, #44]	; (16888 <nrfx_twim_disable+0x34>)
   1685a:	2034      	movs	r0, #52	; 0x34
   1685c:	fb00 3301 	mla	r3, r0, r1, r3
   16860:	2100      	movs	r1, #0
   16862:	6099      	str	r1, [r3, #8]
    p_reg->INTENCLR = mask;
   16864:	4809      	ldr	r0, [pc, #36]	; (1688c <nrfx_twim_disable+0x38>)
   16866:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
    p_reg->SHORTS &= ~(mask);
   1686a:	f8d2 0200 	ldr.w	r0, [r2, #512]	; 0x200
   1686e:	f420 50bc 	bic.w	r0, r0, #6016	; 0x1780
   16872:	f8c2 0200 	str.w	r0, [r2, #512]	; 0x200
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Disabled << TWIM_ENABLE_ENABLE_Pos);
   16876:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   1687a:	2201      	movs	r2, #1
   1687c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    p_cb->busy = false;
   16880:	f883 102f 	strb.w	r1, [r3, #47]	; 0x2f
}
   16884:	4770      	bx	lr
   16886:	bf00      	nop
   16888:	20008628 	.word	0x20008628
   1688c:	019c0202 	.word	0x019c0202

00016890 <nrfx_twim_xfer>:
{
   16890:	b510      	push	{r4, lr}
   16892:	4613      	mov	r3, r2
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   16894:	f890 c004 	ldrb.w	ip, [r0, #4]
    err_code = twim_xfer(p_cb, (NRF_TWIM_Type *)p_instance->p_twim, p_xfer_desc, flags);
   16898:	460a      	mov	r2, r1
   1689a:	6801      	ldr	r1, [r0, #0]
   1689c:	2034      	movs	r0, #52	; 0x34
   1689e:	4c03      	ldr	r4, [pc, #12]	; (168ac <nrfx_twim_xfer+0x1c>)
   168a0:	fb00 400c 	mla	r0, r0, ip, r4
   168a4:	f7ff fd3a 	bl	1631c <twim_xfer>
}
   168a8:	bd10      	pop	{r4, pc}
   168aa:	bf00      	nop
   168ac:	20008628 	.word	0x20008628

000168b0 <nrfx_twim_1_irq_handler>:
}
#endif

#if NRFX_CHECK(NRFX_TWIM1_ENABLED)
void nrfx_twim_1_irq_handler(void)
{
   168b0:	b508      	push	{r3, lr}
    twim_irq_handler(NRF_TWIM1, &m_cb[NRFX_TWIM1_INST_IDX]);
   168b2:	4902      	ldr	r1, [pc, #8]	; (168bc <nrfx_twim_1_irq_handler+0xc>)
   168b4:	4802      	ldr	r0, [pc, #8]	; (168c0 <nrfx_twim_1_irq_handler+0x10>)
   168b6:	f7ff fe89 	bl	165cc <twim_irq_handler>
}
   168ba:	bd08      	pop	{r3, pc}
   168bc:	20008628 	.word	0x20008628
   168c0:	40009000 	.word	0x40009000

000168c4 <nrfx_twi_twim_bus_recover>:
                                                  NRF_GPIO_PIN_PULLUP,        \
                                                  NRF_GPIO_PIN_S0D1,          \
                                                  NRF_GPIO_PIN_NOSENSE)

nrfx_err_t nrfx_twi_twim_bus_recover(uint32_t scl_pin, uint32_t sda_pin)
{
   168c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    *p_pin = pin_number & 0x1F;
   168c8:	f000 031f 	and.w	r3, r0, #31
    return pin_number >> 5;
   168cc:	0940      	lsrs	r0, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   168ce:	2801      	cmp	r0, #1
   168d0:	d039      	beq.n	16946 <nrfx_twi_twim_bus_recover+0x82>
        case 0: return NRF_P0;
   168d2:	4e29      	ldr	r6, [pc, #164]	; (16978 <nrfx_twi_twim_bus_recover+0xb4>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   168d4:	2501      	movs	r5, #1
   168d6:	409d      	lsls	r5, r3
    p_reg->OUTSET = set_mask;
   168d8:	60b5      	str	r5, [r6, #8]
    *p_pin = pin_number & 0x1F;
   168da:	f001 081f 	and.w	r8, r1, #31
    return pin_number >> 5;
   168de:	0949      	lsrs	r1, r1, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   168e0:	2901      	cmp	r1, #1
   168e2:	d032      	beq.n	1694a <nrfx_twi_twim_bus_recover+0x86>
        case 0: return NRF_P0;
   168e4:	4f24      	ldr	r7, [pc, #144]	; (16978 <nrfx_twi_twim_bus_recover+0xb4>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   168e6:	f04f 0901 	mov.w	r9, #1
   168ea:	fa09 f908 	lsl.w	r9, r9, r8
    p_reg->OUTSET = set_mask;
   168ee:	f8c7 9008 	str.w	r9, [r7, #8]
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
   168f2:	3380      	adds	r3, #128	; 0x80
   168f4:	f856 2023 	ldr.w	r2, [r6, r3, lsl #2]
   168f8:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
   168fc:	f240 610d 	movw	r1, #1549	; 0x60d
   16900:	430a      	orrs	r2, r1
    reg->PIN_CNF[pin_number] = cnf;
   16902:	f846 2023 	str.w	r2, [r6, r3, lsl #2]
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
   16906:	f108 0280 	add.w	r2, r8, #128	; 0x80
   1690a:	f857 3022 	ldr.w	r3, [r7, r2, lsl #2]
   1690e:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
   16912:	430b      	orrs	r3, r1
    reg->PIN_CNF[pin_number] = cnf;
   16914:	f847 3022 	str.w	r3, [r7, r2, lsl #2]
    nrf_gpio_pin_set(scl_pin);
    nrf_gpio_pin_set(sda_pin);

    TWI_TWIM_PIN_CONFIGURE(scl_pin);
    TWI_TWIM_PIN_CONFIGURE(sda_pin);
    NRFX_DELAY_US(4);
   16918:	2004      	movs	r0, #4
   1691a:	f004 f827 	bl	1a96c <nrfx_busy_wait>

    for (uint8_t i = 0; i < 9; i++)
   1691e:	2400      	movs	r4, #0
   16920:	2c08      	cmp	r4, #8
   16922:	d814      	bhi.n	1694e <nrfx_twi_twim_bus_recover+0x8a>
    return p_reg->IN;
   16924:	693b      	ldr	r3, [r7, #16]
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   16926:	fa23 f308 	lsr.w	r3, r3, r8
    {
        if (nrf_gpio_pin_read(sda_pin))
   1692a:	f013 0f01 	tst.w	r3, #1
   1692e:	d10e      	bne.n	1694e <nrfx_twi_twim_bus_recover+0x8a>
    p_reg->OUTCLR = clr_mask;
   16930:	60f5      	str	r5, [r6, #12]
        }
        else
        {
            // Pulse CLOCK signal
            nrf_gpio_pin_clear(scl_pin);
            NRFX_DELAY_US(4);
   16932:	2004      	movs	r0, #4
   16934:	f004 f81a 	bl	1a96c <nrfx_busy_wait>
    p_reg->OUTSET = set_mask;
   16938:	60b5      	str	r5, [r6, #8]
            nrf_gpio_pin_set(scl_pin);
            NRFX_DELAY_US(4);
   1693a:	2004      	movs	r0, #4
   1693c:	f004 f816 	bl	1a96c <nrfx_busy_wait>
    for (uint8_t i = 0; i < 9; i++)
   16940:	3401      	adds	r4, #1
   16942:	b2e4      	uxtb	r4, r4
   16944:	e7ec      	b.n	16920 <nrfx_twi_twim_bus_recover+0x5c>
        case 1: return NRF_P1;
   16946:	4e0d      	ldr	r6, [pc, #52]	; (1697c <nrfx_twi_twim_bus_recover+0xb8>)
   16948:	e7c4      	b.n	168d4 <nrfx_twi_twim_bus_recover+0x10>
   1694a:	4f0c      	ldr	r7, [pc, #48]	; (1697c <nrfx_twi_twim_bus_recover+0xb8>)
   1694c:	e7cb      	b.n	168e6 <nrfx_twi_twim_bus_recover+0x22>
    p_reg->OUTCLR = clr_mask;
   1694e:	f8c7 900c 	str.w	r9, [r7, #12]
        }
    }

    // Generate a STOP condition on the bus
    nrf_gpio_pin_clear(sda_pin);
    NRFX_DELAY_US(4);
   16952:	2004      	movs	r0, #4
   16954:	f004 f80a 	bl	1a96c <nrfx_busy_wait>
    p_reg->OUTSET = set_mask;
   16958:	f8c7 9008 	str.w	r9, [r7, #8]
    nrf_gpio_pin_set(sda_pin);
    NRFX_DELAY_US(4);
   1695c:	2004      	movs	r0, #4
   1695e:	f004 f805 	bl	1a96c <nrfx_busy_wait>
    return p_reg->IN;
   16962:	693b      	ldr	r3, [r7, #16]
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   16964:	fa23 f308 	lsr.w	r3, r3, r8

    if (nrf_gpio_pin_read(sda_pin))
   16968:	f013 0f01 	tst.w	r3, #1
   1696c:	d002      	beq.n	16974 <nrfx_twi_twim_bus_recover+0xb0>
    {
        return NRFX_SUCCESS;
   1696e:	4804      	ldr	r0, [pc, #16]	; (16980 <nrfx_twi_twim_bus_recover+0xbc>)
    }
    else
    {
        return NRFX_ERROR_INTERNAL;
    }
}
   16970:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        return NRFX_ERROR_INTERNAL;
   16974:	4803      	ldr	r0, [pc, #12]	; (16984 <nrfx_twi_twim_bus_recover+0xc0>)
   16976:	e7fb      	b.n	16970 <nrfx_twi_twim_bus_recover+0xac>
   16978:	40842500 	.word	0x40842500
   1697c:	40842800 	.word	0x40842800
   16980:	0bad0000 	.word	0x0bad0000
   16984:	0bad0001 	.word	0x0bad0001

00016988 <z_device_state_init>:
 * The state object is always zero-initialized, but this may not be
 * sufficient.
 */
void z_device_state_init(void)
{
	const struct device *dev = __device_start;
   16988:	4b03      	ldr	r3, [pc, #12]	; (16998 <z_device_state_init+0x10>)

	while (dev < __device_end) {
   1698a:	e000      	b.n	1698e <z_device_state_init+0x6>
		z_object_init(dev);
		++dev;
   1698c:	3318      	adds	r3, #24
	while (dev < __device_end) {
   1698e:	4a03      	ldr	r2, [pc, #12]	; (1699c <z_device_state_init+0x14>)
   16990:	4293      	cmp	r3, r2
   16992:	d3fb      	bcc.n	1698c <z_device_state_init+0x4>
	}
}
   16994:	4770      	bx	lr
   16996:	bf00      	nop
   16998:	0001b7d4 	.word	0x0001b7d4
   1699c:	0001b864 	.word	0x0001b864

000169a0 <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   169a0:	4b01      	ldr	r3, [pc, #4]	; (169a8 <z_impl_z_errno+0x8>)
   169a2:	6898      	ldr	r0, [r3, #8]
}
   169a4:	3060      	adds	r0, #96	; 0x60
   169a6:	4770      	bx	lr
   169a8:	2000865c 	.word	0x2000865c

000169ac <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
static void z_sys_init_run_level(enum init_level level)
{
   169ac:	b570      	push	{r4, r5, r6, lr}
   169ae:	4606      	mov	r6, r0
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   169b0:	4b11      	ldr	r3, [pc, #68]	; (169f8 <z_sys_init_run_level+0x4c>)
   169b2:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   169b6:	e009      	b.n	169cc <z_sys_init_run_level+0x20>
			/* Mark device initialized.  If initialization
			 * failed, record the error condition.
			 */
			if (rc != 0) {
				if (rc < 0) {
					rc = -rc;
   169b8:	4240      	negs	r0, r0
   169ba:	e017      	b.n	169ec <z_sys_init_run_level+0x40>
				}
				if (rc > UINT8_MAX) {
					rc = UINT8_MAX;
				}
				dev->state->init_res = rc;
   169bc:	68eb      	ldr	r3, [r5, #12]
   169be:	7018      	strb	r0, [r3, #0]
			}
			dev->state->initialized = true;
   169c0:	68ea      	ldr	r2, [r5, #12]
   169c2:	7853      	ldrb	r3, [r2, #1]
   169c4:	f043 0301 	orr.w	r3, r3, #1
   169c8:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   169ca:	3408      	adds	r4, #8
   169cc:	1c73      	adds	r3, r6, #1
   169ce:	4a0a      	ldr	r2, [pc, #40]	; (169f8 <z_sys_init_run_level+0x4c>)
   169d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   169d4:	42a3      	cmp	r3, r4
   169d6:	d90d      	bls.n	169f4 <z_sys_init_run_level+0x48>
		const struct device *dev = entry->dev;
   169d8:	6865      	ldr	r5, [r4, #4]
		int rc = entry->init(dev);
   169da:	6823      	ldr	r3, [r4, #0]
   169dc:	4628      	mov	r0, r5
   169de:	4798      	blx	r3
		if (dev != NULL) {
   169e0:	2d00      	cmp	r5, #0
   169e2:	d0f2      	beq.n	169ca <z_sys_init_run_level+0x1e>
			if (rc != 0) {
   169e4:	2800      	cmp	r0, #0
   169e6:	d0eb      	beq.n	169c0 <z_sys_init_run_level+0x14>
				if (rc < 0) {
   169e8:	2800      	cmp	r0, #0
   169ea:	dbe5      	blt.n	169b8 <z_sys_init_run_level+0xc>
				if (rc > UINT8_MAX) {
   169ec:	28ff      	cmp	r0, #255	; 0xff
   169ee:	dde5      	ble.n	169bc <z_sys_init_run_level+0x10>
					rc = UINT8_MAX;
   169f0:	20ff      	movs	r0, #255	; 0xff
   169f2:	e7e3      	b.n	169bc <z_sys_init_run_level+0x10>
		}
	}
}
   169f4:	bd70      	pop	{r4, r5, r6, pc}
   169f6:	bf00      	nop
   169f8:	0001c360 	.word	0x0001c360

000169fc <init_idle_thread>:
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
   169fc:	b510      	push	{r4, lr}
   169fe:	b086      	sub	sp, #24
	struct k_thread *thread = &z_idle_threads[i];
   16a00:	4c10      	ldr	r4, [pc, #64]	; (16a44 <init_idle_thread+0x48>)
   16a02:	eb04 14c0 	add.w	r4, r4, r0, lsl #7
	k_thread_stack_t *stack = z_idle_stacks[i];
   16a06:	eb00 0c80 	add.w	ip, r0, r0, lsl #2
#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   16a0a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   16a0e:	4b0e      	ldr	r3, [pc, #56]	; (16a48 <init_idle_thread+0x4c>)
   16a10:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
	z_setup_new_thread(thread, stack,
   16a14:	2200      	movs	r2, #0
   16a16:	9205      	str	r2, [sp, #20]
   16a18:	2101      	movs	r1, #1
   16a1a:	9104      	str	r1, [sp, #16]
   16a1c:	210f      	movs	r1, #15
   16a1e:	9103      	str	r1, [sp, #12]
   16a20:	9202      	str	r2, [sp, #8]
   16a22:	9201      	str	r2, [sp, #4]
   16a24:	9300      	str	r3, [sp, #0]
   16a26:	4b09      	ldr	r3, [pc, #36]	; (16a4c <init_idle_thread+0x50>)
   16a28:	f44f 72a0 	mov.w	r2, #320	; 0x140
   16a2c:	4908      	ldr	r1, [pc, #32]	; (16a50 <init_idle_thread+0x54>)
   16a2e:	eb01 118c 	add.w	r1, r1, ip, lsl #6
   16a32:	4620      	mov	r0, r4
   16a34:	f000 f8e2 	bl	16bfc <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   16a38:	7b63      	ldrb	r3, [r4, #13]
   16a3a:	f023 0304 	bic.w	r3, r3, #4
   16a3e:	7363      	strb	r3, [r4, #13]
	z_mark_thread_as_started(thread);

#ifdef CONFIG_SMP
	thread->base.is_idle = 1U;
#endif
}
   16a40:	b006      	add	sp, #24
   16a42:	bd10      	pop	{r4, pc}
   16a44:	200083a8 	.word	0x200083a8
   16a48:	2000865c 	.word	0x2000865c
   16a4c:	00016cf1 	.word	0x00016cf1
   16a50:	20008ea8 	.word	0x20008ea8

00016a54 <bg_thread_main>:
{
   16a54:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
   16a56:	4b0a      	ldr	r3, [pc, #40]	; (16a80 <bg_thread_main+0x2c>)
   16a58:	2201      	movs	r2, #1
   16a5a:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
   16a5c:	2003      	movs	r0, #3
   16a5e:	f7ff ffa5 	bl	169ac <z_sys_init_run_level>
	boot_banner();
   16a62:	f000 fffd 	bl	17a60 <boot_banner>
	z_sys_init_run_level(INIT_LEVEL_APPLICATION);
   16a66:	2004      	movs	r0, #4
   16a68:	f7ff ffa0 	bl	169ac <z_sys_init_run_level>
	z_init_static_threads();
   16a6c:	f000 f8f6 	bl	16c5c <z_init_static_threads>
	main();
   16a70:	f7fb fad6 	bl	12020 <main>
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   16a74:	4a03      	ldr	r2, [pc, #12]	; (16a84 <bg_thread_main+0x30>)
   16a76:	7b13      	ldrb	r3, [r2, #12]
   16a78:	f023 0301 	bic.w	r3, r3, #1
   16a7c:	7313      	strb	r3, [r2, #12]
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   16a7e:	bd08      	pop	{r3, pc}
   16a80:	200086a5 	.word	0x200086a5
   16a84:	20008428 	.word	0x20008428

00016a88 <switch_to_main_thread>:
	return stack_ptr;
}

__boot_func
static FUNC_NORETURN void switch_to_main_thread(char *stack_ptr)
{
   16a88:	b508      	push	{r3, lr}
   16a8a:	4601      	mov	r1, r0
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   16a8c:	4a01      	ldr	r2, [pc, #4]	; (16a94 <switch_to_main_thread+0xc>)
   16a8e:	4802      	ldr	r0, [pc, #8]	; (16a98 <switch_to_main_thread+0x10>)
   16a90:	f7fd f884 	bl	13b9c <arch_switch_to_main_thread>
	 * current fake thread is not on a wait queue or ready queue, so it
	 * will never be rescheduled in.
	 */
	z_swap_unlocked();
#endif
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   16a94:	00016a55 	.word	0x00016a55
   16a98:	20008428 	.word	0x20008428

00016a9c <z_bss_zero>:
{
   16a9c:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
   16a9e:	4803      	ldr	r0, [pc, #12]	; (16aac <z_bss_zero+0x10>)
   16aa0:	4a03      	ldr	r2, [pc, #12]	; (16ab0 <z_bss_zero+0x14>)
   16aa2:	1a12      	subs	r2, r2, r0
   16aa4:	2100      	movs	r1, #0
   16aa6:	f004 f8bc 	bl	1ac22 <z_early_memset>
}
   16aaa:	bd08      	pop	{r3, pc}
   16aac:	20008370 	.word	0x20008370
   16ab0:	200086a8 	.word	0x200086a8

00016ab4 <z_init_cpu>:
{
   16ab4:	b510      	push	{r4, lr}
   16ab6:	4604      	mov	r4, r0
	init_idle_thread(id);
   16ab8:	f7ff ffa0 	bl	169fc <init_idle_thread>
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
   16abc:	490a      	ldr	r1, [pc, #40]	; (16ae8 <z_init_cpu+0x34>)
   16abe:	eb01 11c4 	add.w	r1, r1, r4, lsl #7
   16ac2:	4a0a      	ldr	r2, [pc, #40]	; (16aec <z_init_cpu+0x38>)
   16ac4:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   16ac8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   16acc:	60d9      	str	r1, [r3, #12]
	_kernel.cpus[id].id = id;
   16ace:	751c      	strb	r4, [r3, #20]
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
   16ad0:	4b07      	ldr	r3, [pc, #28]	; (16af0 <z_init_cpu+0x3c>)
   16ad2:	eb03 23c4 	add.w	r3, r3, r4, lsl #11
   16ad6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
	_kernel.cpus[id].irq_stack =
   16ada:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   16ade:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
   16ae2:	6053      	str	r3, [r2, #4]
}
   16ae4:	bd10      	pop	{r4, pc}
   16ae6:	bf00      	nop
   16ae8:	200083a8 	.word	0x200083a8
   16aec:	2000865c 	.word	0x2000865c
   16af0:	200086a8 	.word	0x200086a8

00016af4 <prepare_multithreading>:
{
   16af4:	b570      	push	{r4, r5, r6, lr}
   16af6:	b086      	sub	sp, #24
	z_sched_init();
   16af8:	f000 fd08 	bl	1750c <z_sched_init>
	_kernel.ready_q.cache = &z_main_thread;
   16afc:	4d10      	ldr	r5, [pc, #64]	; (16b40 <prepare_multithreading+0x4c>)
   16afe:	4b11      	ldr	r3, [pc, #68]	; (16b44 <prepare_multithreading+0x50>)
   16b00:	61dd      	str	r5, [r3, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   16b02:	4b11      	ldr	r3, [pc, #68]	; (16b48 <prepare_multithreading+0x54>)
   16b04:	9305      	str	r3, [sp, #20]
   16b06:	2301      	movs	r3, #1
   16b08:	9304      	str	r3, [sp, #16]
   16b0a:	2400      	movs	r4, #0
   16b0c:	9403      	str	r4, [sp, #12]
   16b0e:	9402      	str	r4, [sp, #8]
   16b10:	9401      	str	r4, [sp, #4]
   16b12:	9400      	str	r4, [sp, #0]
   16b14:	4b0d      	ldr	r3, [pc, #52]	; (16b4c <prepare_multithreading+0x58>)
   16b16:	f44f 6280 	mov.w	r2, #1024	; 0x400
   16b1a:	490d      	ldr	r1, [pc, #52]	; (16b50 <prepare_multithreading+0x5c>)
   16b1c:	4628      	mov	r0, r5
   16b1e:	f000 f86d 	bl	16bfc <z_setup_new_thread>
   16b22:	4606      	mov	r6, r0
   16b24:	7b6b      	ldrb	r3, [r5, #13]
   16b26:	f023 0304 	bic.w	r3, r3, #4
   16b2a:	736b      	strb	r3, [r5, #13]
	z_ready_thread(&z_main_thread);
   16b2c:	4628      	mov	r0, r5
   16b2e:	f004 f906 	bl	1ad3e <z_ready_thread>
	z_init_cpu(0);
   16b32:	4620      	mov	r0, r4
   16b34:	f7ff ffbe 	bl	16ab4 <z_init_cpu>
}
   16b38:	4630      	mov	r0, r6
   16b3a:	b006      	add	sp, #24
   16b3c:	bd70      	pop	{r4, r5, r6, pc}
   16b3e:	bf00      	nop
   16b40:	20008428 	.word	0x20008428
   16b44:	2000865c 	.word	0x2000865c
   16b48:	0001c358 	.word	0x0001c358
   16b4c:	00016a55 	.word	0x00016a55
   16b50:	20008fe8 	.word	0x20008fe8

00016b54 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
   16b54:	b500      	push	{lr}
   16b56:	b0a1      	sub	sp, #132	; 0x84
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	/* initialize early init calls */
	z_sys_init_run_level(INIT_LEVEL_EARLY);
   16b58:	2000      	movs	r0, #0
   16b5a:	f7ff ff27 	bl	169ac <z_sys_init_run_level>
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
		(uint32_t)(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[0])) +
   16b5e:	4b1d      	ldr	r3, [pc, #116]	; (16bd4 <z_cstart+0x80>)
	uint32_t msp =
   16b60:	f503 6200 	add.w	r2, r3, #2048	; 0x800
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   16b64:	f382 8808 	msr	MSP, r2
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure MSPLIM is RAZ/WI
  (void)MainStackPtrLimit;
#else
  __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
   16b68:	f383 880a 	msr	MSPLIM, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   16b6c:	4c1a      	ldr	r4, [pc, #104]	; (16bd8 <z_cstart+0x84>)
   16b6e:	23e0      	movs	r3, #224	; 0xe0
   16b70:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
   16b74:	2500      	movs	r5, #0
   16b76:	77e5      	strb	r5, [r4, #31]
   16b78:	7625      	strb	r5, [r4, #24]
   16b7a:	7665      	strb	r5, [r4, #25]
   16b7c:	76a5      	strb	r5, [r4, #26]
   16b7e:	f884 5020 	strb.w	r5, [r4, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   16b82:	6a63      	ldr	r3, [r4, #36]	; 0x24
   16b84:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   16b88:	6263      	str	r3, [r4, #36]	; 0x24
   16b8a:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   16b8e:	f7fd f95d 	bl	13e4c <z_arm_fault_init>
	z_arm_cpu_idle_init();
   16b92:	f7fc ff17 	bl	139c4 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   16b96:	f04f 33ff 	mov.w	r3, #4294967295
   16b9a:	62a3      	str	r3, [r4, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   16b9c:	62e3      	str	r3, [r4, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
   16b9e:	f7fd fb87 	bl	142b0 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
   16ba2:	f7fd fa1d 	bl	13fe0 <z_arm_configure_static_mpu_regions>
 *
 * The memory of the dummy thread can be completely uninitialized.
 */
static inline void z_dummy_thread_init(struct k_thread *dummy_thread)
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
   16ba6:	2401      	movs	r4, #1
   16ba8:	f88d 400d 	strb.w	r4, [sp, #13]
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
   16bac:	f88d 400c 	strb.w	r4, [sp, #12]
#ifdef CONFIG_THREAD_STACK_INFO
	dummy_thread->stack_info.start = 0U;
   16bb0:	9519      	str	r5, [sp, #100]	; 0x64
	dummy_thread->stack_info.size = 0U;
   16bb2:	951a      	str	r5, [sp, #104]	; 0x68
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif
#if (CONFIG_HEAP_MEM_POOL_SIZE > 0)
	k_thread_system_pool_assign(dummy_thread);
#else
	dummy_thread->resource_pool = NULL;
   16bb4:	951c      	str	r5, [sp, #112]	; 0x70

#ifdef CONFIG_TIMESLICE_PER_THREAD
	dummy_thread->base.slice_ticks = 0;
#endif

	_current_cpu->current = dummy_thread;
   16bb6:	4b09      	ldr	r3, [pc, #36]	; (16bdc <z_cstart+0x88>)
   16bb8:	f8c3 d008 	str.w	sp, [r3, #8]
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
   16bbc:	f7ff fee4 	bl	16988 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_1);
   16bc0:	4620      	mov	r0, r4
   16bc2:	f7ff fef3 	bl	169ac <z_sys_init_run_level>
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
   16bc6:	2002      	movs	r0, #2
   16bc8:	f7ff fef0 	bl	169ac <z_sys_init_run_level>
	timing_init();
	timing_start();
#endif

#ifdef CONFIG_MULTITHREADING
	switch_to_main_thread(prepare_multithreading());
   16bcc:	f7ff ff92 	bl	16af4 <prepare_multithreading>
   16bd0:	f7ff ff5a 	bl	16a88 <switch_to_main_thread>
   16bd4:	200086a8 	.word	0x200086a8
   16bd8:	e000ed00 	.word	0xe000ed00
   16bdc:	2000865c 	.word	0x2000865c

00016be0 <schedule_new_thread>:
#endif
#endif

#ifdef CONFIG_MULTITHREADING
static void schedule_new_thread(struct k_thread *thread, k_timeout_t delay)
{
   16be0:	b508      	push	{r3, lr}
#ifdef CONFIG_SYS_CLOCK_EXISTS
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   16be2:	ea53 0102 	orrs.w	r1, r3, r2
   16be6:	d102      	bne.n	16bee <schedule_new_thread+0xe>
	z_impl_k_thread_start(thread);
   16be8:	f004 f832 	bl	1ac50 <z_impl_k_thread_start>
	}
#else
	ARG_UNUSED(delay);
	k_thread_start(thread);
#endif
}
   16bec:	bd08      	pop	{r3, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   16bee:	4902      	ldr	r1, [pc, #8]	; (16bf8 <schedule_new_thread+0x18>)
   16bf0:	3018      	adds	r0, #24
   16bf2:	f000 fe29 	bl	17848 <z_add_timeout>
   16bf6:	e7f9      	b.n	16bec <schedule_new_thread+0xc>
   16bf8:	0001ad77 	.word	0x0001ad77

00016bfc <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   16bfc:	b5f0      	push	{r4, r5, r6, r7, lr}
   16bfe:	b085      	sub	sp, #20
   16c00:	4604      	mov	r4, r0
   16c02:	460e      	mov	r6, r1
   16c04:	4615      	mov	r5, r2
   16c06:	461f      	mov	r7, r3
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   16c08:	f100 0358 	add.w	r3, r0, #88	; 0x58
 * @param list the doubly-linked list
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
   16c0c:	6583      	str	r3, [r0, #88]	; 0x58
	list->tail = (sys_dnode_t *)list;
   16c0e:	65c3      	str	r3, [r0, #92]	; 0x5c
	k_object_access_grant(new_thread, new_thread);
#endif
	z_waitq_init(&new_thread->join_queue);

	/* Initialize various struct k_thread members */
	z_init_thread_base(&new_thread->base, prio, _THREAD_PRESTART, options);
   16c10:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   16c12:	2204      	movs	r2, #4
   16c14:	990d      	ldr	r1, [sp, #52]	; 0x34
   16c16:	f004 f81f 	bl	1ac58 <z_init_thread_base>
	stack_ptr = setup_thread_stack(new_thread, stack, stack_size);
   16c1a:	462a      	mov	r2, r5
   16c1c:	4631      	mov	r1, r6
   16c1e:	4620      	mov	r0, r4
   16c20:	f004 f807 	bl	1ac32 <setup_thread_stack>
   16c24:	4605      	mov	r5, r0
	 */
	__ASSERT_NO_MSG(arch_mem_coherent(new_thread));
	__ASSERT_NO_MSG(!arch_mem_coherent(stack));
#endif

	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   16c26:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   16c28:	9302      	str	r3, [sp, #8]
   16c2a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   16c2c:	9301      	str	r3, [sp, #4]
   16c2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   16c30:	9300      	str	r3, [sp, #0]
   16c32:	463b      	mov	r3, r7
   16c34:	4602      	mov	r2, r0
   16c36:	4631      	mov	r1, r6
   16c38:	4620      	mov	r0, r4
   16c3a:	f7fc ff8b 	bl	13b54 <arch_new_thread>

	/* static threads overwrite it afterwards with real value */
	new_thread->init_data = NULL;
   16c3e:	2300      	movs	r3, #0
   16c40:	6563      	str	r3, [r4, #84]	; 0x54
		new_thread->base.cpu_mask = -1; /* allow all cpus */
	}
#endif
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	/* _current may be null if the dummy thread is not used */
	if (!_current) {
   16c42:	4b05      	ldr	r3, [pc, #20]	; (16c58 <z_setup_new_thread+0x5c>)
   16c44:	689b      	ldr	r3, [r3, #8]
   16c46:	b123      	cbz	r3, 16c52 <z_setup_new_thread+0x56>
	}
#endif
#ifdef CONFIG_SCHED_DEADLINE
	new_thread->base.prio_deadline = 0;
#endif
	new_thread->resource_pool = _current->resource_pool;
   16c48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   16c4a:	6723      	str	r3, [r4, #112]	; 0x70
#endif

	SYS_PORT_TRACING_OBJ_FUNC(k_thread, create, new_thread);

	return stack_ptr;
}
   16c4c:	4628      	mov	r0, r5
   16c4e:	b005      	add	sp, #20
   16c50:	bdf0      	pop	{r4, r5, r6, r7, pc}
		new_thread->resource_pool = NULL;
   16c52:	6723      	str	r3, [r4, #112]	; 0x70
		return stack_ptr;
   16c54:	e7fa      	b.n	16c4c <z_setup_new_thread+0x50>
   16c56:	bf00      	nop
   16c58:	2000865c 	.word	0x2000865c

00016c5c <z_init_static_threads>:
	}
}
#endif /* CONFIG_USERSPACE */

void z_init_static_threads(void)
{
   16c5c:	b530      	push	{r4, r5, lr}
   16c5e:	b087      	sub	sp, #28
	_FOREACH_STATIC_THREAD(thread_data) {
   16c60:	4c21      	ldr	r4, [pc, #132]	; (16ce8 <z_init_static_threads+0x8c>)
   16c62:	e014      	b.n	16c8e <z_init_static_threads+0x32>
		z_setup_new_thread(
   16c64:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   16c66:	9305      	str	r3, [sp, #20]
   16c68:	6a23      	ldr	r3, [r4, #32]
   16c6a:	9304      	str	r3, [sp, #16]
   16c6c:	69e3      	ldr	r3, [r4, #28]
   16c6e:	9303      	str	r3, [sp, #12]
   16c70:	69a3      	ldr	r3, [r4, #24]
   16c72:	9302      	str	r3, [sp, #8]
   16c74:	6963      	ldr	r3, [r4, #20]
   16c76:	9301      	str	r3, [sp, #4]
   16c78:	6923      	ldr	r3, [r4, #16]
   16c7a:	9300      	str	r3, [sp, #0]
   16c7c:	68e3      	ldr	r3, [r4, #12]
   16c7e:	68a2      	ldr	r2, [r4, #8]
   16c80:	6861      	ldr	r1, [r4, #4]
   16c82:	6820      	ldr	r0, [r4, #0]
   16c84:	f7ff ffba 	bl	16bfc <z_setup_new_thread>
			thread_data->init_p3,
			thread_data->init_prio,
			thread_data->init_options,
			thread_data->init_name);

		thread_data->init_thread->init_data = thread_data;
   16c88:	6823      	ldr	r3, [r4, #0]
   16c8a:	655c      	str	r4, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
   16c8c:	3430      	adds	r4, #48	; 0x30
   16c8e:	4b17      	ldr	r3, [pc, #92]	; (16cec <z_init_static_threads+0x90>)
   16c90:	429c      	cmp	r4, r3
   16c92:	d3e7      	bcc.n	16c64 <z_init_static_threads+0x8>
	 * until they are all started.
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	k_sched_lock();
   16c94:	f000 f9e8 	bl	17068 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   16c98:	4c13      	ldr	r4, [pc, #76]	; (16ce8 <z_init_static_threads+0x8c>)
   16c9a:	e000      	b.n	16c9e <z_init_static_threads+0x42>
   16c9c:	3430      	adds	r4, #48	; 0x30
   16c9e:	4b13      	ldr	r3, [pc, #76]	; (16cec <z_init_static_threads+0x90>)
   16ca0:	429c      	cmp	r4, r3
   16ca2:	d21c      	bcs.n	16cde <z_init_static_threads+0x82>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   16ca4:	6a60      	ldr	r0, [r4, #36]	; 0x24
   16ca6:	f1b0 3fff 	cmp.w	r0, #4294967295
   16caa:	d0f7      	beq.n	16c9c <z_init_static_threads+0x40>
			schedule_new_thread(thread_data->init_thread,
   16cac:	6825      	ldr	r5, [r4, #0]
					    K_MSEC(thread_data->init_delay));
   16cae:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   16cb2:	17c1      	asrs	r1, r0, #31
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
   16cb4:	03c9      	lsls	r1, r1, #15
   16cb6:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
   16cba:	03c0      	lsls	r0, r0, #15
   16cbc:	f240 33e7 	movw	r3, #999	; 0x3e7
   16cc0:	18c0      	adds	r0, r0, r3
   16cc2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   16cc6:	f04f 0300 	mov.w	r3, #0
   16cca:	f141 0100 	adc.w	r1, r1, #0
   16cce:	f7fa f8ab 	bl	10e28 <__aeabi_uldivmod>
   16cd2:	4602      	mov	r2, r0
   16cd4:	460b      	mov	r3, r1
			schedule_new_thread(thread_data->init_thread,
   16cd6:	4628      	mov	r0, r5
   16cd8:	f7ff ff82 	bl	16be0 <schedule_new_thread>
   16cdc:	e7de      	b.n	16c9c <z_init_static_threads+0x40>
		}
	}
	k_sched_unlock();
   16cde:	f000 fbc5 	bl	1746c <k_sched_unlock>
}
   16ce2:	b007      	add	sp, #28
   16ce4:	bd30      	pop	{r4, r5, pc}
   16ce6:	bf00      	nop
   16ce8:	0001ba8c 	.word	0x0001ba8c
   16cec:	0001ba8c 	.word	0x0001ba8c

00016cf0 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
   16cf0:	b508      	push	{r3, lr}
   16cf2:	e001      	b.n	16cf8 <idle+0x8>
	arch_cpu_idle();
   16cf4:	f7fc fe6c 	bl	139d0 <arch_cpu_idle>
	__asm__ volatile(
   16cf8:	f04f 0220 	mov.w	r2, #32
   16cfc:	f3ef 8311 	mrs	r3, BASEPRI
   16d00:	f382 8812 	msr	BASEPRI_MAX, r2
   16d04:	f3bf 8f6f 	isb	sy
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
   16d08:	f004 f90a 	bl	1af20 <z_get_next_timeout_expiry>
   16d0c:	4b05      	ldr	r3, [pc, #20]	; (16d24 <idle+0x34>)
   16d0e:	6198      	str	r0, [r3, #24]
	return !z_sys_post_kernel;
   16d10:	4b05      	ldr	r3, [pc, #20]	; (16d28 <idle+0x38>)
   16d12:	781b      	ldrb	r3, [r3, #0]
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   16d14:	2b00      	cmp	r3, #0
   16d16:	d0ed      	beq.n	16cf4 <idle+0x4>
   16d18:	f7fc fd7e 	bl	13818 <pm_system_suspend>
   16d1c:	2800      	cmp	r0, #0
   16d1e:	d1eb      	bne.n	16cf8 <idle+0x8>
   16d20:	e7e8      	b.n	16cf4 <idle+0x4>
   16d22:	bf00      	nop
   16d24:	2000865c 	.word	0x2000865c
   16d28:	200086a5 	.word	0x200086a5

00016d2c <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   16d2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16d30:	b082      	sub	sp, #8
   16d32:	4604      	mov	r4, r0
   16d34:	461e      	mov	r6, r3
   16d36:	f04f 0320 	mov.w	r3, #32
   16d3a:	f3ef 8511 	mrs	r5, BASEPRI
   16d3e:	f383 8812 	msr	BASEPRI_MAX, r3
   16d42:	f3bf 8f6f 	isb	sy
   16d46:	462b      	mov	r3, r5

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   16d48:	68c1      	ldr	r1, [r0, #12]
   16d4a:	b999      	cbnz	r1, 16d74 <z_impl_k_mutex_lock+0x48>

		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
					_current->base.prio :
   16d4c:	2900      	cmp	r1, #0
   16d4e:	d151      	bne.n	16df4 <z_impl_k_mutex_lock+0xc8>
   16d50:	4a36      	ldr	r2, [pc, #216]	; (16e2c <z_impl_k_mutex_lock+0x100>)
   16d52:	6892      	ldr	r2, [r2, #8]
   16d54:	f992 200e 	ldrsb.w	r2, [r2, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   16d58:	6122      	str	r2, [r4, #16]
					mutex->owner_orig_prio;

		mutex->lock_count++;
   16d5a:	3101      	adds	r1, #1
   16d5c:	60e1      	str	r1, [r4, #12]
		mutex->owner = _current;
   16d5e:	4a33      	ldr	r2, [pc, #204]	; (16e2c <z_impl_k_mutex_lock+0x100>)
   16d60:	6892      	ldr	r2, [r2, #8]
   16d62:	60a2      	str	r2, [r4, #8]
	__asm__ volatile(
   16d64:	f383 8811 	msr	BASEPRI, r3
   16d68:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
   16d6c:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
   16d6e:	b002      	add	sp, #8
   16d70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   16d74:	4617      	mov	r7, r2
	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   16d76:	6880      	ldr	r0, [r0, #8]
   16d78:	4a2c      	ldr	r2, [pc, #176]	; (16e2c <z_impl_k_mutex_lock+0x100>)
   16d7a:	6892      	ldr	r2, [r2, #8]
   16d7c:	4290      	cmp	r0, r2
   16d7e:	d0e5      	beq.n	16d4c <z_impl_k_mutex_lock+0x20>
	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   16d80:	ea56 0107 	orrs.w	r1, r6, r7
   16d84:	d038      	beq.n	16df8 <z_impl_k_mutex_lock+0xcc>
					    mutex->owner->base.prio);
   16d86:	f990 800e 	ldrsb.w	r8, [r0, #14]
	new_prio = new_prio_for_inheritance(_current->base.prio,
   16d8a:	4641      	mov	r1, r8
   16d8c:	f992 000e 	ldrsb.w	r0, [r2, #14]
   16d90:	f003 ff73 	bl	1ac7a <new_prio_for_inheritance>
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   16d94:	4580      	cmp	r8, r0
   16d96:	dc36      	bgt.n	16e06 <z_impl_k_mutex_lock+0xda>
	bool resched = false;
   16d98:	f04f 0800 	mov.w	r8, #0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   16d9c:	9700      	str	r7, [sp, #0]
   16d9e:	9601      	str	r6, [sp, #4]
   16da0:	4622      	mov	r2, r4
   16da2:	4629      	mov	r1, r5
   16da4:	4822      	ldr	r0, [pc, #136]	; (16e30 <z_impl_k_mutex_lock+0x104>)
   16da6:	f000 faad 	bl	17304 <z_pend_curr>
	if (got_mutex == 0) {
   16daa:	2800      	cmp	r0, #0
   16dac:	d0df      	beq.n	16d6e <z_impl_k_mutex_lock+0x42>
	__asm__ volatile(
   16dae:	f04f 0320 	mov.w	r3, #32
   16db2:	f3ef 8511 	mrs	r5, BASEPRI
   16db6:	f383 8812 	msr	BASEPRI_MAX, r3
   16dba:	f3bf 8f6f 	isb	sy
   16dbe:	462e      	mov	r6, r5
	if (likely(mutex->owner != NULL)) {
   16dc0:	68a3      	ldr	r3, [r4, #8]
   16dc2:	b343      	cbz	r3, 16e16 <z_impl_k_mutex_lock+0xea>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   16dc4:	6823      	ldr	r3, [r4, #0]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   16dc6:	429c      	cmp	r4, r3
   16dc8:	d023      	beq.n	16e12 <z_impl_k_mutex_lock+0xe6>
			new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   16dca:	b313      	cbz	r3, 16e12 <z_impl_k_mutex_lock+0xe6>
   16dcc:	6921      	ldr	r1, [r4, #16]
   16dce:	f993 000e 	ldrsb.w	r0, [r3, #14]
   16dd2:	f003 ff52 	bl	1ac7a <new_prio_for_inheritance>
   16dd6:	4601      	mov	r1, r0
		resched = adjust_owner_prio(mutex, new_prio) || resched;
   16dd8:	4620      	mov	r0, r4
   16dda:	f003 ff59 	bl	1ac90 <adjust_owner_prio>
   16dde:	b9e8      	cbnz	r0, 16e1c <z_impl_k_mutex_lock+0xf0>
   16de0:	f1b8 0f00 	cmp.w	r8, #0
   16de4:	d11a      	bne.n	16e1c <z_impl_k_mutex_lock+0xf0>
	__asm__ volatile(
   16de6:	f386 8811 	msr	BASEPRI, r6
   16dea:	f3bf 8f6f 	isb	sy
	return -EAGAIN;
   16dee:	f06f 000a 	mvn.w	r0, #10
   16df2:	e7bc      	b.n	16d6e <z_impl_k_mutex_lock+0x42>
					_current->base.prio :
   16df4:	6922      	ldr	r2, [r4, #16]
   16df6:	e7af      	b.n	16d58 <z_impl_k_mutex_lock+0x2c>
   16df8:	f385 8811 	msr	BASEPRI, r5
   16dfc:	f3bf 8f6f 	isb	sy
		return -EBUSY;
   16e00:	f06f 000f 	mvn.w	r0, #15
   16e04:	e7b3      	b.n	16d6e <z_impl_k_mutex_lock+0x42>
		resched = adjust_owner_prio(mutex, new_prio);
   16e06:	4601      	mov	r1, r0
   16e08:	4620      	mov	r0, r4
   16e0a:	f003 ff41 	bl	1ac90 <adjust_owner_prio>
   16e0e:	4680      	mov	r8, r0
   16e10:	e7c4      	b.n	16d9c <z_impl_k_mutex_lock+0x70>
			new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   16e12:	6921      	ldr	r1, [r4, #16]
   16e14:	e7e0      	b.n	16dd8 <z_impl_k_mutex_lock+0xac>
	if (resched) {
   16e16:	f1b8 0f00 	cmp.w	r8, #0
   16e1a:	d0e4      	beq.n	16de6 <z_impl_k_mutex_lock+0xba>
		z_reschedule(&lock, key);
   16e1c:	4629      	mov	r1, r5
   16e1e:	4804      	ldr	r0, [pc, #16]	; (16e30 <z_impl_k_mutex_lock+0x104>)
   16e20:	f000 f90c 	bl	1703c <z_reschedule>
	return -EAGAIN;
   16e24:	f06f 000a 	mvn.w	r0, #10
   16e28:	e7a1      	b.n	16d6e <z_impl_k_mutex_lock+0x42>
   16e2a:	bf00      	nop
   16e2c:	2000865c 	.word	0x2000865c
   16e30:	20008684 	.word	0x20008684

00016e34 <z_impl_k_mutex_unlock>:

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
   16e34:	6883      	ldr	r3, [r0, #8]
   16e36:	b383      	cbz	r3, 16e9a <z_impl_k_mutex_unlock+0x66>
{
   16e38:	b570      	push	{r4, r5, r6, lr}
   16e3a:	4604      	mov	r4, r0
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   16e3c:	4a1a      	ldr	r2, [pc, #104]	; (16ea8 <z_impl_k_mutex_unlock+0x74>)
   16e3e:	6892      	ldr	r2, [r2, #8]
   16e40:	4293      	cmp	r3, r2
   16e42:	d12d      	bne.n	16ea0 <z_impl_k_mutex_unlock+0x6c>

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
   16e44:	68c3      	ldr	r3, [r0, #12]
   16e46:	2b01      	cmp	r3, #1
   16e48:	d903      	bls.n	16e52 <z_impl_k_mutex_unlock+0x1e>
		mutex->lock_count--;
   16e4a:	3b01      	subs	r3, #1
   16e4c:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	return 0;
   16e4e:	2000      	movs	r0, #0
}
   16e50:	bd70      	pop	{r4, r5, r6, pc}
	__asm__ volatile(
   16e52:	f04f 0320 	mov.w	r3, #32
   16e56:	f3ef 8511 	mrs	r5, BASEPRI
   16e5a:	f383 8812 	msr	BASEPRI_MAX, r3
   16e5e:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   16e62:	6901      	ldr	r1, [r0, #16]
   16e64:	f003 ff14 	bl	1ac90 <adjust_owner_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   16e68:	4620      	mov	r0, r4
   16e6a:	f003 fffe 	bl	1ae6a <z_unpend_first_thread>
	mutex->owner = new_owner;
   16e6e:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   16e70:	b160      	cbz	r0, 16e8c <z_impl_k_mutex_unlock+0x58>
		mutex->owner_orig_prio = new_owner->base.prio;
   16e72:	f990 300e 	ldrsb.w	r3, [r0, #14]
   16e76:	6123      	str	r3, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   16e78:	2400      	movs	r4, #0
   16e7a:	6784      	str	r4, [r0, #120]	; 0x78
		z_ready_thread(new_owner);
   16e7c:	f003 ff5f 	bl	1ad3e <z_ready_thread>
		z_reschedule(&lock, key);
   16e80:	4629      	mov	r1, r5
   16e82:	480a      	ldr	r0, [pc, #40]	; (16eac <z_impl_k_mutex_unlock+0x78>)
   16e84:	f000 f8da 	bl	1703c <z_reschedule>
	return 0;
   16e88:	4620      	mov	r0, r4
   16e8a:	e7e1      	b.n	16e50 <z_impl_k_mutex_unlock+0x1c>
		mutex->lock_count = 0U;
   16e8c:	2000      	movs	r0, #0
   16e8e:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   16e90:	f385 8811 	msr	BASEPRI, r5
   16e94:	f3bf 8f6f 	isb	sy
   16e98:	e7da      	b.n	16e50 <z_impl_k_mutex_unlock+0x1c>
		return -EINVAL;
   16e9a:	f06f 0015 	mvn.w	r0, #21
}
   16e9e:	4770      	bx	lr
		return -EPERM;
   16ea0:	f04f 30ff 	mov.w	r0, #4294967295
   16ea4:	e7d4      	b.n	16e50 <z_impl_k_mutex_unlock+0x1c>
   16ea6:	bf00      	nop
   16ea8:	2000865c 	.word	0x2000865c
   16eac:	20008684 	.word	0x20008684

00016eb0 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   16eb0:	b538      	push	{r3, r4, r5, lr}
   16eb2:	4604      	mov	r4, r0
	__asm__ volatile(
   16eb4:	f04f 0320 	mov.w	r3, #32
   16eb8:	f3ef 8511 	mrs	r5, BASEPRI
   16ebc:	f383 8812 	msr	BASEPRI_MAX, r3
   16ec0:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
   16ec4:	f003 ffd1 	bl	1ae6a <z_unpend_first_thread>

	if (thread != NULL) {
   16ec8:	b140      	cbz	r0, 16edc <z_impl_k_sem_give+0x2c>
   16eca:	2200      	movs	r2, #0
   16ecc:	6782      	str	r2, [r0, #120]	; 0x78
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   16ece:	f003 ff36 	bl	1ad3e <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   16ed2:	4629      	mov	r1, r5
   16ed4:	4806      	ldr	r0, [pc, #24]	; (16ef0 <z_impl_k_sem_give+0x40>)
   16ed6:	f000 f8b1 	bl	1703c <z_reschedule>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
   16eda:	bd38      	pop	{r3, r4, r5, pc}
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   16edc:	68a3      	ldr	r3, [r4, #8]
   16ede:	68e2      	ldr	r2, [r4, #12]
   16ee0:	4293      	cmp	r3, r2
   16ee2:	d003      	beq.n	16eec <z_impl_k_sem_give+0x3c>
   16ee4:	2201      	movs	r2, #1
   16ee6:	4413      	add	r3, r2
   16ee8:	60a3      	str	r3, [r4, #8]
}
   16eea:	e7f2      	b.n	16ed2 <z_impl_k_sem_give+0x22>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   16eec:	2200      	movs	r2, #0
   16eee:	e7fa      	b.n	16ee6 <z_impl_k_sem_give+0x36>
   16ef0:	20008684 	.word	0x20008684

00016ef4 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   16ef4:	b510      	push	{r4, lr}
   16ef6:	b082      	sub	sp, #8
   16ef8:	f04f 0420 	mov.w	r4, #32
   16efc:	f3ef 8111 	mrs	r1, BASEPRI
   16f00:	f384 8812 	msr	BASEPRI_MAX, r4
   16f04:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
   16f08:	6884      	ldr	r4, [r0, #8]
   16f0a:	b144      	cbz	r4, 16f1e <z_impl_k_sem_take+0x2a>
		sem->count--;
   16f0c:	3c01      	subs	r4, #1
   16f0e:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
   16f10:	f381 8811 	msr	BASEPRI, r1
   16f14:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   16f18:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
   16f1a:	b002      	add	sp, #8
   16f1c:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   16f1e:	ea53 0402 	orrs.w	r4, r3, r2
   16f22:	d006      	beq.n	16f32 <z_impl_k_sem_take+0x3e>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   16f24:	9200      	str	r2, [sp, #0]
   16f26:	9301      	str	r3, [sp, #4]
   16f28:	4602      	mov	r2, r0
   16f2a:	4805      	ldr	r0, [pc, #20]	; (16f40 <z_impl_k_sem_take+0x4c>)
   16f2c:	f000 f9ea 	bl	17304 <z_pend_curr>
	return ret;
   16f30:	e7f3      	b.n	16f1a <z_impl_k_sem_take+0x26>
   16f32:	f381 8811 	msr	BASEPRI, r1
   16f36:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   16f3a:	f06f 000f 	mvn.w	r0, #15
   16f3e:	e7ec      	b.n	16f1a <z_impl_k_sem_take+0x26>
   16f40:	20008684 	.word	0x20008684

00016f44 <sliceable>:


static inline int is_preempt(struct k_thread *thread)
{
	/* explanation in kernel_struct.h */
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
   16f44:	89c3      	ldrh	r3, [r0, #14]
static inline bool sliceable(struct k_thread *thread)
{
	bool ret = is_preempt(thread)
		&& !z_is_thread_prevented_from_running(thread)
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
		&& !z_is_idle_thread_object(thread);
   16f46:	2b7f      	cmp	r3, #127	; 0x7f
   16f48:	d80e      	bhi.n	16f68 <sliceable+0x24>
	uint8_t state = thread->base.thread_state;
   16f4a:	7b43      	ldrb	r3, [r0, #13]
		&& !z_is_thread_prevented_from_running(thread)
   16f4c:	f013 0f1f 	tst.w	r3, #31
   16f50:	d10c      	bne.n	16f6c <sliceable+0x28>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   16f52:	f990 200e 	ldrsb.w	r2, [r0, #14]
   16f56:	4b08      	ldr	r3, [pc, #32]	; (16f78 <sliceable+0x34>)
   16f58:	681b      	ldr	r3, [r3, #0]
   16f5a:	429a      	cmp	r2, r3
   16f5c:	db08      	blt.n	16f70 <sliceable+0x2c>
		&& !z_is_idle_thread_object(thread);
   16f5e:	4b07      	ldr	r3, [pc, #28]	; (16f7c <sliceable+0x38>)
   16f60:	4298      	cmp	r0, r3
   16f62:	d007      	beq.n	16f74 <sliceable+0x30>
   16f64:	2001      	movs	r0, #1
   16f66:	4770      	bx	lr
   16f68:	2000      	movs	r0, #0
   16f6a:	4770      	bx	lr
   16f6c:	2000      	movs	r0, #0
   16f6e:	4770      	bx	lr
   16f70:	2000      	movs	r0, #0
   16f72:	4770      	bx	lr
   16f74:	2000      	movs	r0, #0
#ifdef CONFIG_TIMESLICE_PER_THREAD
	ret |= thread->base.slice_ticks != 0;
#endif

	return ret;
}
   16f76:	4770      	bx	lr
   16f78:	20008688 	.word	0x20008688
   16f7c:	200083a8 	.word	0x200083a8

00016f80 <add_thread_timeout>:
	}
}

static void add_thread_timeout(struct k_thread *thread, k_timeout_t timeout)
{
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   16f80:	f1b3 3fff 	cmp.w	r3, #4294967295
   16f84:	bf08      	it	eq
   16f86:	f1b2 3fff 	cmpeq.w	r2, #4294967295
   16f8a:	d100      	bne.n	16f8e <add_thread_timeout+0xe>
   16f8c:	4770      	bx	lr
{
   16f8e:	b508      	push	{r3, lr}
   16f90:	4902      	ldr	r1, [pc, #8]	; (16f9c <add_thread_timeout+0x1c>)
   16f92:	3018      	adds	r0, #24
   16f94:	f000 fc58 	bl	17848 <z_add_timeout>
		z_add_thread_timeout(thread, timeout);
	}
}
   16f98:	bd08      	pop	{r3, pc}
   16f9a:	bf00      	nop
   16f9c:	0001ad77 	.word	0x0001ad77

00016fa0 <z_reset_time_slice>:
{
   16fa0:	b510      	push	{r4, lr}
	int ret = slice_ticks;
   16fa2:	4b07      	ldr	r3, [pc, #28]	; (16fc0 <z_reset_time_slice+0x20>)
   16fa4:	681c      	ldr	r4, [r3, #0]
	if (slice_time(curr) != 0) {
   16fa6:	b904      	cbnz	r4, 16faa <z_reset_time_slice+0xa>
}
   16fa8:	bd10      	pop	{r4, pc}
		_current_cpu->slice_ticks = slice_time(curr) + sys_clock_elapsed();
   16faa:	f7fe f943 	bl	15234 <sys_clock_elapsed>
   16fae:	4404      	add	r4, r0
   16fb0:	4b04      	ldr	r3, [pc, #16]	; (16fc4 <z_reset_time_slice+0x24>)
   16fb2:	611c      	str	r4, [r3, #16]
		z_set_timeout_expiry(slice_time(curr), false);
   16fb4:	2100      	movs	r1, #0
   16fb6:	4b02      	ldr	r3, [pc, #8]	; (16fc0 <z_reset_time_slice+0x20>)
   16fb8:	6818      	ldr	r0, [r3, #0]
   16fba:	f003 ffc8 	bl	1af4e <z_set_timeout_expiry>
}
   16fbe:	e7f3      	b.n	16fa8 <z_reset_time_slice+0x8>
   16fc0:	2000868c 	.word	0x2000868c
   16fc4:	2000865c 	.word	0x2000865c

00016fc8 <k_sched_time_slice_set>:
{
   16fc8:	b570      	push	{r4, r5, r6, lr}
   16fca:	4604      	mov	r4, r0
   16fcc:	460e      	mov	r6, r1
	LOCKED(&sched_spinlock) {
   16fce:	2300      	movs	r3, #0
	__asm__ volatile(
   16fd0:	f04f 0220 	mov.w	r2, #32
   16fd4:	f3ef 8511 	mrs	r5, BASEPRI
   16fd8:	f382 8812 	msr	BASEPRI_MAX, r2
   16fdc:	f3bf 8f6f 	isb	sy
	z_spin_lock_set_owner(l);
#if defined(CONFIG_SPIN_LOCK_TIME_LIMIT) && (CONFIG_SPIN_LOCK_TIME_LIMIT != 0)
	l->lock_time = sys_clock_cycle_get_32();
#endif /* CONFIG_SPIN_LOCK_TIME_LIMIT */
#endif/* CONFIG_SPIN_VALIDATE */
	return k;
   16fe0:	e00e      	b.n	17000 <k_sched_time_slice_set+0x38>
			slice_ticks = MAX(2, slice_ticks);
   16fe2:	2802      	cmp	r0, #2
   16fe4:	bfb8      	it	lt
   16fe6:	2002      	movlt	r0, #2
   16fe8:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
   16fea:	4b11      	ldr	r3, [pc, #68]	; (17030 <k_sched_time_slice_set+0x68>)
   16fec:	601e      	str	r6, [r3, #0]
		z_reset_time_slice(_current);
   16fee:	4b11      	ldr	r3, [pc, #68]	; (17034 <k_sched_time_slice_set+0x6c>)
   16ff0:	6898      	ldr	r0, [r3, #8]
   16ff2:	f7ff ffd5 	bl	16fa0 <z_reset_time_slice>
	__asm__ volatile(
   16ff6:	f385 8811 	msr	BASEPRI, r5
   16ffa:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   16ffe:	2301      	movs	r3, #1
   17000:	b9a3      	cbnz	r3, 1702c <k_sched_time_slice_set+0x64>
		_current_cpu->slice_ticks = 0;
   17002:	4b0c      	ldr	r3, [pc, #48]	; (17034 <k_sched_time_slice_set+0x6c>)
   17004:	2200      	movs	r2, #0
   17006:	611a      	str	r2, [r3, #16]
			return (uint32_t)((t * to_hz + off) / from_hz);
   17008:	0c61      	lsrs	r1, r4, #17
   1700a:	03e0      	lsls	r0, r4, #15
   1700c:	f240 33e7 	movw	r3, #999	; 0x3e7
   17010:	18c0      	adds	r0, r0, r3
   17012:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   17016:	f04f 0300 	mov.w	r3, #0
   1701a:	f141 0100 	adc.w	r1, r1, #0
   1701e:	f7f9 ff03 	bl	10e28 <__aeabi_uldivmod>
		slice_ticks = k_ms_to_ticks_ceil32(slice);
   17022:	4b05      	ldr	r3, [pc, #20]	; (17038 <k_sched_time_slice_set+0x70>)
   17024:	6018      	str	r0, [r3, #0]
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
   17026:	2c00      	cmp	r4, #0
   17028:	dcdb      	bgt.n	16fe2 <k_sched_time_slice_set+0x1a>
   1702a:	e7de      	b.n	16fea <k_sched_time_slice_set+0x22>
}
   1702c:	bd70      	pop	{r4, r5, r6, pc}
   1702e:	bf00      	nop
   17030:	20008688 	.word	0x20008688
   17034:	2000865c 	.word	0x2000865c
   17038:	2000868c 	.word	0x2000868c

0001703c <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
   1703c:	b508      	push	{r3, lr}
	if (resched(key.key) && need_swap()) {
   1703e:	460b      	mov	r3, r1
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   17040:	b959      	cbnz	r1, 1705a <z_reschedule+0x1e>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   17042:	f3ef 8205 	mrs	r2, IPSR
   17046:	b942      	cbnz	r2, 1705a <z_reschedule+0x1e>
	new_thread = _kernel.ready_q.cache;
   17048:	4a06      	ldr	r2, [pc, #24]	; (17064 <z_reschedule+0x28>)
   1704a:	69d0      	ldr	r0, [r2, #28]
	return new_thread != _current;
   1704c:	6892      	ldr	r2, [r2, #8]
	if (resched(key.key) && need_swap()) {
   1704e:	4290      	cmp	r0, r2
   17050:	d003      	beq.n	1705a <z_reschedule+0x1e>
	ret = arch_swap(key);
   17052:	4608      	mov	r0, r1
   17054:	f7fc fd24 	bl	13aa0 <arch_swap>
		z_swap(lock, key);
   17058:	e003      	b.n	17062 <z_reschedule+0x26>
   1705a:	f383 8811 	msr	BASEPRI, r3
   1705e:	f3bf 8f6f 	isb	sy
	} else {
		k_spin_unlock(lock, key);
		signal_pending_ipi();
	}
}
   17062:	bd08      	pop	{r3, pc}
   17064:	2000865c 	.word	0x2000865c

00017068 <k_sched_lock>:
	}
}

void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
   17068:	2300      	movs	r3, #0
	__asm__ volatile(
   1706a:	f04f 0220 	mov.w	r2, #32
   1706e:	f3ef 8111 	mrs	r1, BASEPRI
   17072:	f382 8812 	msr	BASEPRI_MAX, r2
   17076:	f3bf 8f6f 	isb	sy
   1707a:	e009      	b.n	17090 <k_sched_lock+0x28>
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
   1707c:	4b06      	ldr	r3, [pc, #24]	; (17098 <k_sched_lock+0x30>)
   1707e:	689a      	ldr	r2, [r3, #8]
   17080:	7bd3      	ldrb	r3, [r2, #15]
   17082:	3b01      	subs	r3, #1
   17084:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
   17086:	f381 8811 	msr	BASEPRI, r1
   1708a:	f3bf 8f6f 	isb	sy
   1708e:	2301      	movs	r3, #1
   17090:	2b00      	cmp	r3, #0
   17092:	d0f3      	beq.n	1707c <k_sched_lock+0x14>
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
   17094:	4770      	bx	lr
   17096:	bf00      	nop
   17098:	2000865c 	.word	0x2000865c

0001709c <update_cache>:
{
   1709c:	b538      	push	{r3, r4, r5, lr}
   1709e:	4604      	mov	r4, r0
	return _priq_run_best(curr_cpu_runq());
   170a0:	4810      	ldr	r0, [pc, #64]	; (170e4 <update_cache+0x48>)
   170a2:	f003 fe45 	bl	1ad30 <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   170a6:	4605      	mov	r5, r0
   170a8:	b170      	cbz	r0, 170c8 <update_cache+0x2c>
	if (preempt_ok != 0) {
   170aa:	b984      	cbnz	r4, 170ce <update_cache+0x32>
	if (z_is_thread_prevented_from_running(_current)) {
   170ac:	4b0e      	ldr	r3, [pc, #56]	; (170e8 <update_cache+0x4c>)
   170ae:	689b      	ldr	r3, [r3, #8]
	uint8_t state = thread->base.thread_state;
   170b0:	7b5a      	ldrb	r2, [r3, #13]
   170b2:	f012 0f1f 	tst.w	r2, #31
   170b6:	d10a      	bne.n	170ce <update_cache+0x32>
	return node->next != NULL;
   170b8:	69aa      	ldr	r2, [r5, #24]
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   170ba:	b942      	cbnz	r2, 170ce <update_cache+0x32>
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
   170bc:	89da      	ldrh	r2, [r3, #14]
	if (is_preempt(_current) || is_metairq(thread)) {
   170be:	2a7f      	cmp	r2, #127	; 0x7f
   170c0:	d905      	bls.n	170ce <update_cache+0x32>
		_kernel.ready_q.cache = _current;
   170c2:	4a09      	ldr	r2, [pc, #36]	; (170e8 <update_cache+0x4c>)
   170c4:	61d3      	str	r3, [r2, #28]
   170c6:	e00b      	b.n	170e0 <update_cache+0x44>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   170c8:	4b07      	ldr	r3, [pc, #28]	; (170e8 <update_cache+0x4c>)
   170ca:	68dd      	ldr	r5, [r3, #12]
   170cc:	e7ed      	b.n	170aa <update_cache+0xe>
		if (thread != _current) {
   170ce:	4b06      	ldr	r3, [pc, #24]	; (170e8 <update_cache+0x4c>)
   170d0:	689b      	ldr	r3, [r3, #8]
   170d2:	42ab      	cmp	r3, r5
   170d4:	d002      	beq.n	170dc <update_cache+0x40>
			z_reset_time_slice(thread);
   170d6:	4628      	mov	r0, r5
   170d8:	f7ff ff62 	bl	16fa0 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
   170dc:	4b02      	ldr	r3, [pc, #8]	; (170e8 <update_cache+0x4c>)
   170de:	61dd      	str	r5, [r3, #28]
}
   170e0:	bd38      	pop	{r3, r4, r5, pc}
   170e2:	bf00      	nop
   170e4:	2000867c 	.word	0x2000867c
   170e8:	2000865c 	.word	0x2000865c

000170ec <move_thread_to_end_of_prio_q>:
{
   170ec:	b538      	push	{r3, r4, r5, lr}
   170ee:	4605      	mov	r5, r0
	return (thread->base.thread_state & state) != 0U;
   170f0:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
   170f2:	f990 300d 	ldrsb.w	r3, [r0, #13]
   170f6:	2b00      	cmp	r3, #0
   170f8:	db0a      	blt.n	17110 <move_thread_to_end_of_prio_q+0x24>
	thread->base.thread_state |= _THREAD_QUEUED;
   170fa:	7b6b      	ldrb	r3, [r5, #13]
   170fc:	f063 037f 	orn	r3, r3, #127	; 0x7f
   17100:	736b      	strb	r3, [r5, #13]
	return list->head == list;
   17102:	4b1b      	ldr	r3, [pc, #108]	; (17170 <move_thread_to_end_of_prio_q+0x84>)
   17104:	f853 4f20 	ldr.w	r4, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   17108:	429c      	cmp	r4, r3
   1710a:	d110      	bne.n	1712e <move_thread_to_end_of_prio_q+0x42>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1710c:	2400      	movs	r4, #0
   1710e:	e00e      	b.n	1712e <move_thread_to_end_of_prio_q+0x42>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   17110:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   17114:	7342      	strb	r2, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
   17116:	4601      	mov	r1, r0
   17118:	4816      	ldr	r0, [pc, #88]	; (17174 <move_thread_to_end_of_prio_q+0x88>)
   1711a:	f003 fdf3 	bl	1ad04 <z_priq_dumb_remove>
}
   1711e:	e7ec      	b.n	170fa <move_thread_to_end_of_prio_q+0xe>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
   17120:	6863      	ldr	r3, [r4, #4]

	node->prev = prev;
   17122:	606b      	str	r3, [r5, #4]
	node->next = successor;
   17124:	602c      	str	r4, [r5, #0]
	prev->next = node;
   17126:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   17128:	6065      	str	r5, [r4, #4]
}
   1712a:	e017      	b.n	1715c <move_thread_to_end_of_prio_q+0x70>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1712c:	2400      	movs	r4, #0
   1712e:	b16c      	cbz	r4, 1714c <move_thread_to_end_of_prio_q+0x60>
		if (z_sched_prio_cmp(thread, t) > 0) {
   17130:	4621      	mov	r1, r4
   17132:	4628      	mov	r0, r5
   17134:	f003 fdc2 	bl	1acbc <z_sched_prio_cmp>
   17138:	2800      	cmp	r0, #0
   1713a:	dcf1      	bgt.n	17120 <move_thread_to_end_of_prio_q+0x34>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1713c:	2c00      	cmp	r4, #0
   1713e:	d0f6      	beq.n	1712e <move_thread_to_end_of_prio_q+0x42>
	return (node == list->tail) ? NULL : node->next;
   17140:	4b0b      	ldr	r3, [pc, #44]	; (17170 <move_thread_to_end_of_prio_q+0x84>)
   17142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   17144:	429c      	cmp	r4, r3
   17146:	d0f1      	beq.n	1712c <move_thread_to_end_of_prio_q+0x40>
   17148:	6824      	ldr	r4, [r4, #0]
   1714a:	e7f0      	b.n	1712e <move_thread_to_end_of_prio_q+0x42>
	sys_dnode_t *const tail = list->tail;
   1714c:	4b08      	ldr	r3, [pc, #32]	; (17170 <move_thread_to_end_of_prio_q+0x84>)
   1714e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
   17150:	f103 0120 	add.w	r1, r3, #32
   17154:	6029      	str	r1, [r5, #0]
	node->prev = tail;
   17156:	606a      	str	r2, [r5, #4]
	tail->next = node;
   17158:	6015      	str	r5, [r2, #0]
	list->tail = node;
   1715a:	625d      	str	r5, [r3, #36]	; 0x24
	update_cache(thread == _current);
   1715c:	4b04      	ldr	r3, [pc, #16]	; (17170 <move_thread_to_end_of_prio_q+0x84>)
   1715e:	6898      	ldr	r0, [r3, #8]
   17160:	42a8      	cmp	r0, r5
   17162:	bf14      	ite	ne
   17164:	2000      	movne	r0, #0
   17166:	2001      	moveq	r0, #1
   17168:	f7ff ff98 	bl	1709c <update_cache>
}
   1716c:	bd38      	pop	{r3, r4, r5, pc}
   1716e:	bf00      	nop
   17170:	2000865c 	.word	0x2000865c
   17174:	2000867c 	.word	0x2000867c

00017178 <slice_expired_locked>:
{
   17178:	b538      	push	{r3, r4, r5, lr}
   1717a:	4604      	mov	r4, r0
	struct k_thread *curr = _current;
   1717c:	4b07      	ldr	r3, [pc, #28]	; (1719c <slice_expired_locked+0x24>)
   1717e:	689d      	ldr	r5, [r3, #8]
	uint8_t state = thread->base.thread_state;
   17180:	7b6b      	ldrb	r3, [r5, #13]
	if (!z_is_thread_prevented_from_running(curr)) {
   17182:	f013 0f1f 	tst.w	r3, #31
   17186:	d004      	beq.n	17192 <slice_expired_locked+0x1a>
	z_reset_time_slice(curr);
   17188:	4628      	mov	r0, r5
   1718a:	f7ff ff09 	bl	16fa0 <z_reset_time_slice>
}
   1718e:	4620      	mov	r0, r4
   17190:	bd38      	pop	{r3, r4, r5, pc}
		move_thread_to_end_of_prio_q(curr);
   17192:	4628      	mov	r0, r5
   17194:	f7ff ffaa 	bl	170ec <move_thread_to_end_of_prio_q>
   17198:	e7f6      	b.n	17188 <slice_expired_locked+0x10>
   1719a:	bf00      	nop
   1719c:	2000865c 	.word	0x2000865c

000171a0 <z_time_slice>:
{
   171a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   171a2:	4605      	mov	r5, r0
	__asm__ volatile(
   171a4:	f04f 0320 	mov.w	r3, #32
   171a8:	f3ef 8611 	mrs	r6, BASEPRI
   171ac:	f383 8812 	msr	BASEPRI_MAX, r3
   171b0:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
   171b4:	4b15      	ldr	r3, [pc, #84]	; (1720c <z_time_slice+0x6c>)
   171b6:	6898      	ldr	r0, [r3, #8]
   171b8:	4b15      	ldr	r3, [pc, #84]	; (17210 <z_time_slice+0x70>)
   171ba:	681b      	ldr	r3, [r3, #0]
   171bc:	4298      	cmp	r0, r3
   171be:	d011      	beq.n	171e4 <z_time_slice+0x44>
   171c0:	4634      	mov	r4, r6
	pending_current = NULL;
   171c2:	4b13      	ldr	r3, [pc, #76]	; (17210 <z_time_slice+0x70>)
   171c4:	2200      	movs	r2, #0
   171c6:	601a      	str	r2, [r3, #0]
	int ret = slice_ticks;
   171c8:	4b12      	ldr	r3, [pc, #72]	; (17214 <z_time_slice+0x74>)
   171ca:	681b      	ldr	r3, [r3, #0]
	if (slice_time(_current) && sliceable(_current)) {
   171cc:	b1b3      	cbz	r3, 171fc <z_time_slice+0x5c>
   171ce:	f7ff feb9 	bl	16f44 <sliceable>
   171d2:	b198      	cbz	r0, 171fc <z_time_slice+0x5c>
		if (ticks >= _current_cpu->slice_ticks) {
   171d4:	4b0d      	ldr	r3, [pc, #52]	; (1720c <z_time_slice+0x6c>)
   171d6:	691b      	ldr	r3, [r3, #16]
   171d8:	42ab      	cmp	r3, r5
   171da:	dd0a      	ble.n	171f2 <z_time_slice+0x52>
			_current_cpu->slice_ticks -= ticks;
   171dc:	1b5b      	subs	r3, r3, r5
   171de:	4a0b      	ldr	r2, [pc, #44]	; (1720c <z_time_slice+0x6c>)
   171e0:	6113      	str	r3, [r2, #16]
   171e2:	e00e      	b.n	17202 <z_time_slice+0x62>
		z_reset_time_slice(_current);
   171e4:	f7ff fedc 	bl	16fa0 <z_reset_time_slice>
	__asm__ volatile(
   171e8:	f386 8811 	msr	BASEPRI, r6
   171ec:	f3bf 8f6f 	isb	sy
		return;
   171f0:	e00b      	b.n	1720a <z_time_slice+0x6a>
			key = slice_expired_locked(key);
   171f2:	4630      	mov	r0, r6
   171f4:	f7ff ffc0 	bl	17178 <slice_expired_locked>
   171f8:	4604      	mov	r4, r0
   171fa:	e002      	b.n	17202 <z_time_slice+0x62>
		_current_cpu->slice_ticks = 0;
   171fc:	4b03      	ldr	r3, [pc, #12]	; (1720c <z_time_slice+0x6c>)
   171fe:	2200      	movs	r2, #0
   17200:	611a      	str	r2, [r3, #16]
   17202:	f384 8811 	msr	BASEPRI, r4
   17206:	f3bf 8f6f 	isb	sy
}
   1720a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1720c:	2000865c 	.word	0x2000865c
   17210:	20008684 	.word	0x20008684
   17214:	2000868c 	.word	0x2000868c

00017218 <ready_thread>:
	return (thread->base.thread_state & state) != 0U;
   17218:	7b42      	ldrb	r2, [r0, #13]
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   1721a:	f990 300d 	ldrsb.w	r3, [r0, #13]
   1721e:	2b00      	cmp	r3, #0
   17220:	db33      	blt.n	1728a <ready_thread+0x72>
{
   17222:	b570      	push	{r4, r5, r6, lr}
   17224:	4604      	mov	r4, r0
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   17226:	f012 0f1f 	tst.w	r2, #31
   1722a:	d101      	bne.n	17230 <ready_thread+0x18>
	return node->next != NULL;
   1722c:	6986      	ldr	r6, [r0, #24]
   1722e:	b106      	cbz	r6, 17232 <ready_thread+0x1a>
}
   17230:	bd70      	pop	{r4, r5, r6, pc}
	thread->base.thread_state |= _THREAD_QUEUED;
   17232:	f062 027f 	orn	r2, r2, #127	; 0x7f
   17236:	7342      	strb	r2, [r0, #13]
	return list->head == list;
   17238:	4b14      	ldr	r3, [pc, #80]	; (1728c <ready_thread+0x74>)
   1723a:	f853 5f20 	ldr.w	r5, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1723e:	429d      	cmp	r5, r3
   17240:	d108      	bne.n	17254 <ready_thread+0x3c>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   17242:	4635      	mov	r5, r6
   17244:	e006      	b.n	17254 <ready_thread+0x3c>
	sys_dnode_t *const prev = successor->prev;
   17246:	686b      	ldr	r3, [r5, #4]
	node->prev = prev;
   17248:	6063      	str	r3, [r4, #4]
	node->next = successor;
   1724a:	6025      	str	r5, [r4, #0]
	prev->next = node;
   1724c:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   1724e:	606c      	str	r4, [r5, #4]
}
   17250:	e017      	b.n	17282 <ready_thread+0x6a>
   17252:	4635      	mov	r5, r6
   17254:	b16d      	cbz	r5, 17272 <ready_thread+0x5a>
		if (z_sched_prio_cmp(thread, t) > 0) {
   17256:	4629      	mov	r1, r5
   17258:	4620      	mov	r0, r4
   1725a:	f003 fd2f 	bl	1acbc <z_sched_prio_cmp>
   1725e:	2800      	cmp	r0, #0
   17260:	dcf1      	bgt.n	17246 <ready_thread+0x2e>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   17262:	2d00      	cmp	r5, #0
   17264:	d0f6      	beq.n	17254 <ready_thread+0x3c>
	return (node == list->tail) ? NULL : node->next;
   17266:	4b09      	ldr	r3, [pc, #36]	; (1728c <ready_thread+0x74>)
   17268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1726a:	429d      	cmp	r5, r3
   1726c:	d0f1      	beq.n	17252 <ready_thread+0x3a>
   1726e:	682d      	ldr	r5, [r5, #0]
   17270:	e7f0      	b.n	17254 <ready_thread+0x3c>
	sys_dnode_t *const tail = list->tail;
   17272:	4b06      	ldr	r3, [pc, #24]	; (1728c <ready_thread+0x74>)
   17274:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
   17276:	f103 0120 	add.w	r1, r3, #32
   1727a:	6021      	str	r1, [r4, #0]
	node->prev = tail;
   1727c:	6062      	str	r2, [r4, #4]
	tail->next = node;
   1727e:	6014      	str	r4, [r2, #0]
	list->tail = node;
   17280:	625c      	str	r4, [r3, #36]	; 0x24
		update_cache(0);
   17282:	2000      	movs	r0, #0
   17284:	f7ff ff0a 	bl	1709c <update_cache>
}
   17288:	e7d2      	b.n	17230 <ready_thread+0x18>
   1728a:	4770      	bx	lr
   1728c:	2000865c 	.word	0x2000865c

00017290 <z_sched_start>:
{
   17290:	b510      	push	{r4, lr}
	__asm__ volatile(
   17292:	f04f 0320 	mov.w	r3, #32
   17296:	f3ef 8411 	mrs	r4, BASEPRI
   1729a:	f383 8812 	msr	BASEPRI_MAX, r3
   1729e:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
   172a2:	7b43      	ldrb	r3, [r0, #13]
	if (z_has_thread_started(thread)) {
   172a4:	f013 0f04 	tst.w	r3, #4
   172a8:	d104      	bne.n	172b4 <z_sched_start+0x24>
	__asm__ volatile(
   172aa:	f384 8811 	msr	BASEPRI, r4
   172ae:	f3bf 8f6f 	isb	sy
}
   172b2:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   172b4:	f023 0304 	bic.w	r3, r3, #4
   172b8:	7343      	strb	r3, [r0, #13]
	ready_thread(thread);
   172ba:	f7ff ffad 	bl	17218 <ready_thread>
	z_reschedule(&sched_spinlock, key);
   172be:	4621      	mov	r1, r4
   172c0:	4801      	ldr	r0, [pc, #4]	; (172c8 <z_sched_start+0x38>)
   172c2:	f7ff febb 	bl	1703c <z_reschedule>
   172c6:	e7f4      	b.n	172b2 <z_sched_start+0x22>
   172c8:	20008690 	.word	0x20008690

000172cc <unready_thread>:
{
   172cc:	b510      	push	{r4, lr}
   172ce:	4604      	mov	r4, r0
	return (thread->base.thread_state & state) != 0U;
   172d0:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
   172d2:	f990 300d 	ldrsb.w	r3, [r0, #13]
   172d6:	2b00      	cmp	r3, #0
   172d8:	db08      	blt.n	172ec <unready_thread+0x20>
	update_cache(thread == _current);
   172da:	4b08      	ldr	r3, [pc, #32]	; (172fc <unready_thread+0x30>)
   172dc:	6898      	ldr	r0, [r3, #8]
   172de:	42a0      	cmp	r0, r4
   172e0:	bf14      	ite	ne
   172e2:	2000      	movne	r0, #0
   172e4:	2001      	moveq	r0, #1
   172e6:	f7ff fed9 	bl	1709c <update_cache>
}
   172ea:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
   172ec:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   172f0:	7342      	strb	r2, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
   172f2:	4601      	mov	r1, r0
   172f4:	4802      	ldr	r0, [pc, #8]	; (17300 <unready_thread+0x34>)
   172f6:	f003 fd05 	bl	1ad04 <z_priq_dumb_remove>
}
   172fa:	e7ee      	b.n	172da <unready_thread+0xe>
   172fc:	2000865c 	.word	0x2000865c
   17300:	2000867c 	.word	0x2000867c

00017304 <z_pend_curr>:
{
   17304:	b510      	push	{r4, lr}
   17306:	460c      	mov	r4, r1
   17308:	4611      	mov	r1, r2
	pending_current = _current;
   1730a:	480a      	ldr	r0, [pc, #40]	; (17334 <z_pend_curr+0x30>)
   1730c:	6882      	ldr	r2, [r0, #8]
   1730e:	4b0a      	ldr	r3, [pc, #40]	; (17338 <z_pend_curr+0x34>)
   17310:	601a      	str	r2, [r3, #0]
	__asm__ volatile(
   17312:	f04f 0220 	mov.w	r2, #32
   17316:	f3ef 8311 	mrs	r3, BASEPRI
   1731a:	f382 8812 	msr	BASEPRI_MAX, r2
   1731e:	f3bf 8f6f 	isb	sy
	pend_locked(_current, wait_q, timeout);
   17322:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   17326:	6880      	ldr	r0, [r0, #8]
   17328:	f003 fd93 	bl	1ae52 <pend_locked>
   1732c:	4620      	mov	r0, r4
   1732e:	f7fc fbb7 	bl	13aa0 <arch_swap>
}
   17332:	bd10      	pop	{r4, pc}
   17334:	2000865c 	.word	0x2000865c
   17338:	20008684 	.word	0x20008684

0001733c <z_set_prio>:
{
   1733c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   17340:	4605      	mov	r5, r0
   17342:	460f      	mov	r7, r1
	LOCKED(&sched_spinlock) {
   17344:	2300      	movs	r3, #0
   17346:	f04f 0220 	mov.w	r2, #32
   1734a:	f3ef 8611 	mrs	r6, BASEPRI
   1734e:	f382 8812 	msr	BASEPRI_MAX, r2
   17352:	f3bf 8f6f 	isb	sy
	bool need_sched = 0;
   17356:	4618      	mov	r0, r3
   17358:	e029      	b.n	173ae <z_set_prio+0x72>
	sys_dnode_t *const prev = successor->prev;
   1735a:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
   1735c:	606b      	str	r3, [r5, #4]
	node->next = successor;
   1735e:	602c      	str	r4, [r5, #0]
	prev->next = node;
   17360:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   17362:	6065      	str	r5, [r4, #4]
}
   17364:	e017      	b.n	17396 <z_set_prio+0x5a>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   17366:	4644      	mov	r4, r8
   17368:	b16c      	cbz	r4, 17386 <z_set_prio+0x4a>
		if (z_sched_prio_cmp(thread, t) > 0) {
   1736a:	4621      	mov	r1, r4
   1736c:	4628      	mov	r0, r5
   1736e:	f003 fca5 	bl	1acbc <z_sched_prio_cmp>
   17372:	2800      	cmp	r0, #0
   17374:	dcf1      	bgt.n	1735a <z_set_prio+0x1e>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   17376:	2c00      	cmp	r4, #0
   17378:	d0f6      	beq.n	17368 <z_set_prio+0x2c>
	return (node == list->tail) ? NULL : node->next;
   1737a:	4b1d      	ldr	r3, [pc, #116]	; (173f0 <z_set_prio+0xb4>)
   1737c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1737e:	429c      	cmp	r4, r3
   17380:	d0f1      	beq.n	17366 <z_set_prio+0x2a>
   17382:	6824      	ldr	r4, [r4, #0]
   17384:	e7f0      	b.n	17368 <z_set_prio+0x2c>
	sys_dnode_t *const tail = list->tail;
   17386:	4b1a      	ldr	r3, [pc, #104]	; (173f0 <z_set_prio+0xb4>)
   17388:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
   1738a:	f103 0120 	add.w	r1, r3, #32
   1738e:	6029      	str	r1, [r5, #0]
	node->prev = tail;
   17390:	606a      	str	r2, [r5, #4]
	tail->next = node;
   17392:	6015      	str	r5, [r2, #0]
	list->tail = node;
   17394:	625d      	str	r5, [r3, #36]	; 0x24
			update_cache(1);
   17396:	2001      	movs	r0, #1
   17398:	f7ff fe80 	bl	1709c <update_cache>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   1739c:	2001      	movs	r0, #1
   1739e:	e001      	b.n	173a4 <z_set_prio+0x68>
			thread->base.prio = prio;
   173a0:	73af      	strb	r7, [r5, #14]
   173a2:	2000      	movs	r0, #0
	__asm__ volatile(
   173a4:	f386 8811 	msr	BASEPRI, r6
   173a8:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   173ac:	2301      	movs	r3, #1
   173ae:	b9e3      	cbnz	r3, 173ea <z_set_prio+0xae>
	uint8_t state = thread->base.thread_state;
   173b0:	7b6b      	ldrb	r3, [r5, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   173b2:	f013 0f1f 	tst.w	r3, #31
   173b6:	d1f3      	bne.n	173a0 <z_set_prio+0x64>
	return node->next != NULL;
   173b8:	f8d5 8018 	ldr.w	r8, [r5, #24]
   173bc:	f1b8 0f00 	cmp.w	r8, #0
   173c0:	d1ee      	bne.n	173a0 <z_set_prio+0x64>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   173c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   173c6:	736b      	strb	r3, [r5, #13]
	_priq_run_remove(thread_runq(thread), thread);
   173c8:	f8df 9028 	ldr.w	r9, [pc, #40]	; 173f4 <z_set_prio+0xb8>
   173cc:	4629      	mov	r1, r5
   173ce:	4648      	mov	r0, r9
   173d0:	f003 fc98 	bl	1ad04 <z_priq_dumb_remove>
				thread->base.prio = prio;
   173d4:	73af      	strb	r7, [r5, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
   173d6:	7b6b      	ldrb	r3, [r5, #13]
   173d8:	f063 037f 	orn	r3, r3, #127	; 0x7f
   173dc:	736b      	strb	r3, [r5, #13]
	return list->head == list;
   173de:	f8d9 4000 	ldr.w	r4, [r9]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   173e2:	454c      	cmp	r4, r9
   173e4:	d1c0      	bne.n	17368 <z_set_prio+0x2c>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   173e6:	4644      	mov	r4, r8
   173e8:	e7be      	b.n	17368 <z_set_prio+0x2c>
}
   173ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   173ee:	bf00      	nop
   173f0:	2000865c 	.word	0x2000865c
   173f4:	2000867c 	.word	0x2000867c

000173f8 <z_impl_k_thread_suspend>:
{
   173f8:	b538      	push	{r3, r4, r5, lr}
   173fa:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   173fc:	3018      	adds	r0, #24
   173fe:	f003 fd71 	bl	1aee4 <z_abort_timeout>
	LOCKED(&sched_spinlock) {
   17402:	2300      	movs	r3, #0
	__asm__ volatile(
   17404:	f04f 0220 	mov.w	r2, #32
   17408:	f3ef 8511 	mrs	r5, BASEPRI
   1740c:	f382 8812 	msr	BASEPRI_MAX, r2
   17410:	f3bf 8f6f 	isb	sy
   17414:	e010      	b.n	17438 <z_impl_k_thread_suspend+0x40>
	thread->base.thread_state |= _THREAD_SUSPENDED;
   17416:	7b63      	ldrb	r3, [r4, #13]
   17418:	f043 0310 	orr.w	r3, r3, #16
   1741c:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
   1741e:	4b11      	ldr	r3, [pc, #68]	; (17464 <z_impl_k_thread_suspend+0x6c>)
   17420:	6898      	ldr	r0, [r3, #8]
   17422:	42a0      	cmp	r0, r4
   17424:	bf14      	ite	ne
   17426:	2000      	movne	r0, #0
   17428:	2001      	moveq	r0, #1
   1742a:	f7ff fe37 	bl	1709c <update_cache>
	__asm__ volatile(
   1742e:	f385 8811 	msr	BASEPRI, r5
   17432:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   17436:	2301      	movs	r3, #1
   17438:	b963      	cbnz	r3, 17454 <z_impl_k_thread_suspend+0x5c>
	return (thread->base.thread_state & state) != 0U;
   1743a:	7b62      	ldrb	r2, [r4, #13]
		if (z_is_thread_queued(thread)) {
   1743c:	f994 300d 	ldrsb.w	r3, [r4, #13]
   17440:	2b00      	cmp	r3, #0
   17442:	dae8      	bge.n	17416 <z_impl_k_thread_suspend+0x1e>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   17444:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   17448:	7362      	strb	r2, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
   1744a:	4621      	mov	r1, r4
   1744c:	4806      	ldr	r0, [pc, #24]	; (17468 <z_impl_k_thread_suspend+0x70>)
   1744e:	f003 fc59 	bl	1ad04 <z_priq_dumb_remove>
}
   17452:	e7e0      	b.n	17416 <z_impl_k_thread_suspend+0x1e>
	if (thread == _current) {
   17454:	4b03      	ldr	r3, [pc, #12]	; (17464 <z_impl_k_thread_suspend+0x6c>)
   17456:	689b      	ldr	r3, [r3, #8]
   17458:	42a3      	cmp	r3, r4
   1745a:	d000      	beq.n	1745e <z_impl_k_thread_suspend+0x66>
}
   1745c:	bd38      	pop	{r3, r4, r5, pc}
		z_reschedule_unlocked();
   1745e:	f003 fc45 	bl	1acec <z_reschedule_unlocked>
}
   17462:	e7fb      	b.n	1745c <z_impl_k_thread_suspend+0x64>
   17464:	2000865c 	.word	0x2000865c
   17468:	2000867c 	.word	0x2000867c

0001746c <k_sched_unlock>:

void k_sched_unlock(void)
{
   1746c:	b510      	push	{r4, lr}
	LOCKED(&sched_spinlock) {
   1746e:	2300      	movs	r3, #0
	__asm__ volatile(
   17470:	f04f 0220 	mov.w	r2, #32
   17474:	f3ef 8411 	mrs	r4, BASEPRI
   17478:	f382 8812 	msr	BASEPRI_MAX, r2
   1747c:	f3bf 8f6f 	isb	sy
   17480:	e00c      	b.n	1749c <k_sched_unlock+0x30>
		__ASSERT(_current->base.sched_locked != 0U, "");
		__ASSERT(!arch_is_in_isr(), "");

		++_current->base.sched_locked;
   17482:	4b09      	ldr	r3, [pc, #36]	; (174a8 <k_sched_unlock+0x3c>)
   17484:	689a      	ldr	r2, [r3, #8]
   17486:	7bd3      	ldrb	r3, [r2, #15]
   17488:	3301      	adds	r3, #1
   1748a:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   1748c:	2000      	movs	r0, #0
   1748e:	f7ff fe05 	bl	1709c <update_cache>
	__asm__ volatile(
   17492:	f384 8811 	msr	BASEPRI, r4
   17496:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   1749a:	2301      	movs	r3, #1
   1749c:	2b00      	cmp	r3, #0
   1749e:	d0f0      	beq.n	17482 <k_sched_unlock+0x16>
	LOG_DBG("scheduler unlocked (%p:%d)",
		_current, _current->base.sched_locked);

	SYS_PORT_TRACING_FUNC(k_thread, sched_unlock);

	z_reschedule_unlocked();
   174a0:	f003 fc24 	bl	1acec <z_reschedule_unlocked>
}
   174a4:	bd10      	pop	{r4, pc}
   174a6:	bf00      	nop
   174a8:	2000865c 	.word	0x2000865c

000174ac <end_thread>:
static void end_thread(struct k_thread *thread)
{
	/* We hold the lock, and the thread is known not to be running
	 * anywhere.
	 */
	if ((thread->base.thread_state & _THREAD_DEAD) == 0U) {
   174ac:	7b43      	ldrb	r3, [r0, #13]
   174ae:	f013 0f08 	tst.w	r3, #8
   174b2:	d127      	bne.n	17504 <end_thread+0x58>
{
   174b4:	b510      	push	{r4, lr}
   174b6:	4604      	mov	r4, r0
		thread->base.thread_state |= _THREAD_DEAD;
   174b8:	f043 0208 	orr.w	r2, r3, #8
   174bc:	7342      	strb	r2, [r0, #13]
		thread->base.thread_state &= ~_THREAD_ABORTING;
   174be:	f023 0220 	bic.w	r2, r3, #32
   174c2:	f042 0208 	orr.w	r2, r2, #8
   174c6:	7342      	strb	r2, [r0, #13]
		if (z_is_thread_queued(thread)) {
   174c8:	f012 0f80 	tst.w	r2, #128	; 0x80
   174cc:	d110      	bne.n	174f0 <end_thread+0x44>
			dequeue_thread(thread);
		}
		if (thread->base.pended_on != NULL) {
   174ce:	68a3      	ldr	r3, [r4, #8]
   174d0:	b113      	cbz	r3, 174d8 <end_thread+0x2c>
			unpend_thread_no_timeout(thread);
   174d2:	4620      	mov	r0, r4
   174d4:	f003 fc1e 	bl	1ad14 <unpend_thread_no_timeout>
   174d8:	f104 0018 	add.w	r0, r4, #24
   174dc:	f003 fd02 	bl	1aee4 <z_abort_timeout>
		}
		(void)z_abort_thread_timeout(thread);
		unpend_all(&thread->join_queue);
   174e0:	f104 0058 	add.w	r0, r4, #88	; 0x58
   174e4:	f003 fc76 	bl	1add4 <unpend_all>
		update_cache(1);
   174e8:	2001      	movs	r0, #1
   174ea:	f7ff fdd7 	bl	1709c <update_cache>
		z_thread_perms_all_clear(thread);
		z_object_uninit(thread->stack_obj);
		z_object_uninit(thread);
#endif
	}
}
   174ee:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
   174f0:	f003 035f 	and.w	r3, r3, #95	; 0x5f
   174f4:	f043 0308 	orr.w	r3, r3, #8
   174f8:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
   174fa:	4601      	mov	r1, r0
   174fc:	4802      	ldr	r0, [pc, #8]	; (17508 <end_thread+0x5c>)
   174fe:	f003 fc01 	bl	1ad04 <z_priq_dumb_remove>
}
   17502:	e7e4      	b.n	174ce <end_thread+0x22>
   17504:	4770      	bx	lr
   17506:	bf00      	nop
   17508:	2000867c 	.word	0x2000867c

0001750c <z_sched_init>:
{
   1750c:	b508      	push	{r3, lr}
	init_ready_q(&_kernel.ready_q);
   1750e:	4804      	ldr	r0, [pc, #16]	; (17520 <z_sched_init+0x14>)
   17510:	f003 fccd 	bl	1aeae <init_ready_q>
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   17514:	2100      	movs	r1, #0
   17516:	4608      	mov	r0, r1
   17518:	f7ff fd56 	bl	16fc8 <k_sched_time_slice_set>
}
   1751c:	bd08      	pop	{r3, pc}
   1751e:	bf00      	nop
   17520:	20008678 	.word	0x20008678

00017524 <z_impl_k_yield>:
{
   17524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
   17526:	f04f 0320 	mov.w	r3, #32
   1752a:	f3ef 8611 	mrs	r6, BASEPRI
   1752e:	f383 8812 	msr	BASEPRI_MAX, r3
   17532:	f3bf 8f6f 	isb	sy
		dequeue_thread(_current);
   17536:	4c1d      	ldr	r4, [pc, #116]	; (175ac <z_impl_k_yield+0x88>)
   17538:	68a1      	ldr	r1, [r4, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1753a:	7b4b      	ldrb	r3, [r1, #13]
   1753c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   17540:	734b      	strb	r3, [r1, #13]
	_priq_run_remove(thread_runq(thread), thread);
   17542:	f104 0720 	add.w	r7, r4, #32
   17546:	4638      	mov	r0, r7
   17548:	f003 fbdc 	bl	1ad04 <z_priq_dumb_remove>
	queue_thread(_current);
   1754c:	68a5      	ldr	r5, [r4, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
   1754e:	7b6b      	ldrb	r3, [r5, #13]
   17550:	f063 037f 	orn	r3, r3, #127	; 0x7f
   17554:	736b      	strb	r3, [r5, #13]
	return list->head == list;
   17556:	6a24      	ldr	r4, [r4, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   17558:	42bc      	cmp	r4, r7
   1755a:	d108      	bne.n	1756e <z_impl_k_yield+0x4a>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1755c:	2400      	movs	r4, #0
   1755e:	e006      	b.n	1756e <z_impl_k_yield+0x4a>
	sys_dnode_t *const prev = successor->prev;
   17560:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
   17562:	606b      	str	r3, [r5, #4]
	node->next = successor;
   17564:	602c      	str	r4, [r5, #0]
	prev->next = node;
   17566:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   17568:	6065      	str	r5, [r4, #4]
}
   1756a:	e017      	b.n	1759c <z_impl_k_yield+0x78>
   1756c:	2400      	movs	r4, #0
   1756e:	b16c      	cbz	r4, 1758c <z_impl_k_yield+0x68>
		if (z_sched_prio_cmp(thread, t) > 0) {
   17570:	4621      	mov	r1, r4
   17572:	4628      	mov	r0, r5
   17574:	f003 fba2 	bl	1acbc <z_sched_prio_cmp>
   17578:	2800      	cmp	r0, #0
   1757a:	dcf1      	bgt.n	17560 <z_impl_k_yield+0x3c>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1757c:	2c00      	cmp	r4, #0
   1757e:	d0f6      	beq.n	1756e <z_impl_k_yield+0x4a>
	return (node == list->tail) ? NULL : node->next;
   17580:	4b0a      	ldr	r3, [pc, #40]	; (175ac <z_impl_k_yield+0x88>)
   17582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   17584:	429c      	cmp	r4, r3
   17586:	d0f1      	beq.n	1756c <z_impl_k_yield+0x48>
   17588:	6824      	ldr	r4, [r4, #0]
   1758a:	e7f0      	b.n	1756e <z_impl_k_yield+0x4a>
	sys_dnode_t *const tail = list->tail;
   1758c:	4b07      	ldr	r3, [pc, #28]	; (175ac <z_impl_k_yield+0x88>)
   1758e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
   17590:	f103 0120 	add.w	r1, r3, #32
   17594:	6029      	str	r1, [r5, #0]
	node->prev = tail;
   17596:	606a      	str	r2, [r5, #4]
	tail->next = node;
   17598:	6015      	str	r5, [r2, #0]
	list->tail = node;
   1759a:	625d      	str	r5, [r3, #36]	; 0x24
	update_cache(1);
   1759c:	2001      	movs	r0, #1
   1759e:	f7ff fd7d 	bl	1709c <update_cache>
   175a2:	4630      	mov	r0, r6
   175a4:	f7fc fa7c 	bl	13aa0 <arch_swap>
}
   175a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   175aa:	bf00      	nop
   175ac:	2000865c 	.word	0x2000865c

000175b0 <z_tick_sleep>:
{
   175b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (ticks == 0) {
   175b4:	ea50 0301 	orrs.w	r3, r0, r1
   175b8:	d038      	beq.n	1762c <z_tick_sleep+0x7c>
   175ba:	4604      	mov	r4, r0
   175bc:	460e      	mov	r6, r1
	if (Z_TICK_ABS(ticks) <= 0) {
   175be:	f06f 0301 	mvn.w	r3, #1
   175c2:	1a1b      	subs	r3, r3, r0
   175c4:	f04f 32ff 	mov.w	r2, #4294967295
   175c8:	eb62 0201 	sbc.w	r2, r2, r1
   175cc:	2b01      	cmp	r3, #1
   175ce:	f172 0200 	sbcs.w	r2, r2, #0
   175d2:	db2f      	blt.n	17634 <z_tick_sleep+0x84>
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
   175d4:	f06f 0501 	mvn.w	r5, #1
   175d8:	1a2d      	subs	r5, r5, r0
   175da:	f04f 0320 	mov.w	r3, #32
   175de:	f3ef 8811 	mrs	r8, BASEPRI
   175e2:	f383 8812 	msr	BASEPRI_MAX, r3
   175e6:	f3bf 8f6f 	isb	sy
	pending_current = _current;
   175ea:	4f14      	ldr	r7, [pc, #80]	; (1763c <z_tick_sleep+0x8c>)
   175ec:	68b8      	ldr	r0, [r7, #8]
   175ee:	4b14      	ldr	r3, [pc, #80]	; (17640 <z_tick_sleep+0x90>)
   175f0:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
   175f2:	f7ff fe6b 	bl	172cc <unready_thread>
	z_add_thread_timeout(_current, timeout);
   175f6:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   175f8:	4622      	mov	r2, r4
   175fa:	4633      	mov	r3, r6
   175fc:	4911      	ldr	r1, [pc, #68]	; (17644 <z_tick_sleep+0x94>)
   175fe:	3018      	adds	r0, #24
   17600:	f000 f922 	bl	17848 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   17604:	68ba      	ldr	r2, [r7, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
   17606:	7b53      	ldrb	r3, [r2, #13]
   17608:	f043 0310 	orr.w	r3, r3, #16
   1760c:	7353      	strb	r3, [r2, #13]
   1760e:	4640      	mov	r0, r8
   17610:	f7fc fa46 	bl	13aa0 <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
   17614:	f003 fcc6 	bl	1afa4 <sys_clock_tick_get_32>
   17618:	1a28      	subs	r0, r5, r0
   1761a:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
   1761e:	2801      	cmp	r0, #1
   17620:	f173 0300 	sbcs.w	r3, r3, #0
   17624:	da00      	bge.n	17628 <z_tick_sleep+0x78>
	return 0;
   17626:	2000      	movs	r0, #0
}
   17628:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	z_impl_k_yield();
   1762c:	f7ff ff7a 	bl	17524 <z_impl_k_yield>
		return 0;
   17630:	2000      	movs	r0, #0
   17632:	e7f9      	b.n	17628 <z_tick_sleep+0x78>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
   17634:	f003 fcb6 	bl	1afa4 <sys_clock_tick_get_32>
   17638:	1905      	adds	r5, r0, r4
   1763a:	e7ce      	b.n	175da <z_tick_sleep+0x2a>
   1763c:	2000865c 	.word	0x2000865c
   17640:	20008684 	.word	0x20008684
   17644:	0001ad77 	.word	0x0001ad77

00017648 <z_impl_k_sleep>:
{
   17648:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1764a:	f1b1 3fff 	cmp.w	r1, #4294967295
   1764e:	bf08      	it	eq
   17650:	f1b0 3fff 	cmpeq.w	r0, #4294967295
   17654:	d018      	beq.n	17688 <z_impl_k_sleep+0x40>
	ticks = z_tick_sleep(ticks);
   17656:	f7ff ffab 	bl	175b0 <z_tick_sleep>
	int32_t ret = k_ticks_to_ms_floor64(ticks);
   1765a:	17c2      	asrs	r2, r0, #31
			return ((t * to_hz + off) / from_hz);
   1765c:	0151      	lsls	r1, r2, #5
   1765e:	ea41 61d0 	orr.w	r1, r1, r0, lsr #27
   17662:	0143      	lsls	r3, r0, #5
   17664:	1a1b      	subs	r3, r3, r0
   17666:	eb61 0102 	sbc.w	r1, r1, r2
   1766a:	0089      	lsls	r1, r1, #2
   1766c:	ea41 7193 	orr.w	r1, r1, r3, lsr #30
   17670:	009b      	lsls	r3, r3, #2
   17672:	181b      	adds	r3, r3, r0
   17674:	eb42 0201 	adc.w	r2, r2, r1
   17678:	00d2      	lsls	r2, r2, #3
   1767a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
   1767e:	f3c3 3310 	ubfx	r3, r3, #12, #17
   17682:	ea43 4042 	orr.w	r0, r3, r2, lsl #17
}
   17686:	bd08      	pop	{r3, pc}
		k_thread_suspend(_current);
   17688:	4b03      	ldr	r3, [pc, #12]	; (17698 <z_impl_k_sleep+0x50>)
   1768a:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   1768c:	f7ff feb4 	bl	173f8 <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
   17690:	f04f 30ff 	mov.w	r0, #4294967295
   17694:	e7f7      	b.n	17686 <z_impl_k_sleep+0x3e>
   17696:	bf00      	nop
   17698:	2000865c 	.word	0x2000865c

0001769c <z_impl_k_usleep>:
{
   1769c:	b508      	push	{r3, lr}
	ticks = k_us_to_ticks_ceil64(us);
   1769e:	17c1      	asrs	r1, r0, #31
   176a0:	03c9      	lsls	r1, r1, #15
   176a2:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
   176a6:	03c0      	lsls	r0, r0, #15
   176a8:	4b15      	ldr	r3, [pc, #84]	; (17700 <z_impl_k_usleep+0x64>)
   176aa:	18c0      	adds	r0, r0, r3
   176ac:	4a15      	ldr	r2, [pc, #84]	; (17704 <z_impl_k_usleep+0x68>)
   176ae:	f04f 0300 	mov.w	r3, #0
   176b2:	f141 0100 	adc.w	r1, r1, #0
   176b6:	f7f9 fbb7 	bl	10e28 <__aeabi_uldivmod>
	ticks = z_tick_sleep(ticks);
   176ba:	17c1      	asrs	r1, r0, #31
   176bc:	f7ff ff78 	bl	175b0 <z_tick_sleep>
	return k_ticks_to_us_floor64(ticks);
   176c0:	ea4f 7ce0 	mov.w	ip, r0, asr #31
   176c4:	ea4f 124c 	mov.w	r2, ip, lsl #5
   176c8:	ea42 62d0 	orr.w	r2, r2, r0, lsr #27
   176cc:	0143      	lsls	r3, r0, #5
   176ce:	1a1b      	subs	r3, r3, r0
   176d0:	eb62 020c 	sbc.w	r2, r2, ip
   176d4:	0252      	lsls	r2, r2, #9
   176d6:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
   176da:	025b      	lsls	r3, r3, #9
   176dc:	181b      	adds	r3, r3, r0
   176de:	eb4c 0202 	adc.w	r2, ip, r2
   176e2:	ea4f 1e82 	mov.w	lr, r2, lsl #6
   176e6:	ea4e 6e93 	orr.w	lr, lr, r3, lsr #26
   176ea:	0199      	lsls	r1, r3, #6
   176ec:	1acb      	subs	r3, r1, r3
   176ee:	eb6e 0e02 	sbc.w	lr, lr, r2
   176f2:	181b      	adds	r3, r3, r0
   176f4:	eb4c 000e 	adc.w	r0, ip, lr
   176f8:	0bdb      	lsrs	r3, r3, #15
}
   176fa:	ea43 4040 	orr.w	r0, r3, r0, lsl #17
   176fe:	bd08      	pop	{r3, pc}
   17700:	000f423f 	.word	0x000f423f
   17704:	000f4240 	.word	0x000f4240

00017708 <z_impl_z_current_get>:
}
   17708:	4b01      	ldr	r3, [pc, #4]	; (17710 <z_impl_z_current_get+0x8>)
   1770a:	6898      	ldr	r0, [r3, #8]
   1770c:	4770      	bx	lr
   1770e:	bf00      	nop
   17710:	2000865c 	.word	0x2000865c

00017714 <z_thread_abort>:

void z_thread_abort(struct k_thread *thread)
{
   17714:	b570      	push	{r4, r5, r6, lr}
   17716:	f04f 0320 	mov.w	r3, #32
   1771a:	f3ef 8511 	mrs	r5, BASEPRI
   1771e:	f383 8812 	msr	BASEPRI_MAX, r3
   17722:	f3bf 8f6f 	isb	sy
   17726:	462e      	mov	r6, r5
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.user_options & K_ESSENTIAL) != 0) {
   17728:	7b03      	ldrb	r3, [r0, #12]
   1772a:	f013 0f01 	tst.w	r3, #1
   1772e:	d109      	bne.n	17744 <z_thread_abort+0x30>
   17730:	4604      	mov	r4, r0
		__ASSERT(false, "aborting essential thread %p", thread);
		k_panic();
		return;
	}

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
   17732:	7b43      	ldrb	r3, [r0, #13]
   17734:	f013 0f08 	tst.w	r3, #8
   17738:	d00f      	beq.n	1775a <z_thread_abort+0x46>
	__asm__ volatile(
   1773a:	f385 8811 	msr	BASEPRI, r5
   1773e:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&sched_spinlock, key);
		return;
   17742:	e009      	b.n	17758 <z_thread_abort+0x44>
   17744:	f385 8811 	msr	BASEPRI, r5
   17748:	f3bf 8f6f 	isb	sy
		k_panic();
   1774c:	4040      	eors	r0, r0
   1774e:	f380 8811 	msr	BASEPRI, r0
   17752:	f04f 0004 	mov.w	r0, #4
   17756:	df02      	svc	2
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
   17758:	bd70      	pop	{r4, r5, r6, pc}
	end_thread(thread);
   1775a:	f7ff fea7 	bl	174ac <end_thread>
	if (thread == _current && !arch_is_in_isr()) {
   1775e:	4b08      	ldr	r3, [pc, #32]	; (17780 <z_thread_abort+0x6c>)
   17760:	689b      	ldr	r3, [r3, #8]
   17762:	42a3      	cmp	r3, r4
   17764:	d004      	beq.n	17770 <z_thread_abort+0x5c>
   17766:	f386 8811 	msr	BASEPRI, r6
   1776a:	f3bf 8f6f 	isb	sy
   1776e:	e7f3      	b.n	17758 <z_thread_abort+0x44>
   17770:	f3ef 8305 	mrs	r3, IPSR
   17774:	2b00      	cmp	r3, #0
   17776:	d1f6      	bne.n	17766 <z_thread_abort+0x52>
   17778:	4628      	mov	r0, r5
   1777a:	f7fc f991 	bl	13aa0 <arch_swap>
	return ret;
   1777e:	e7f2      	b.n	17766 <z_thread_abort+0x52>
   17780:	2000865c 	.word	0x2000865c

00017784 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
   17784:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
   17786:	4806      	ldr	r0, [pc, #24]	; (177a0 <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
   17788:	4a06      	ldr	r2, [pc, #24]	; (177a4 <z_data_copy+0x20>)
   1778a:	1a12      	subs	r2, r2, r0
   1778c:	4906      	ldr	r1, [pc, #24]	; (177a8 <z_data_copy+0x24>)
   1778e:	f003 fa4c 	bl	1ac2a <z_early_memcpy>
#ifdef CONFIG_ARCH_HAS_RAMFUNC_SUPPORT
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
   17792:	4a06      	ldr	r2, [pc, #24]	; (177ac <z_data_copy+0x28>)
   17794:	4906      	ldr	r1, [pc, #24]	; (177b0 <z_data_copy+0x2c>)
   17796:	4807      	ldr	r0, [pc, #28]	; (177b4 <z_data_copy+0x30>)
   17798:	f003 fa47 	bl	1ac2a <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   1779c:	bd08      	pop	{r3, pc}
   1779e:	bf00      	nop
   177a0:	20008000 	.word	0x20008000
   177a4:	20008370 	.word	0x20008370
   177a8:	0001c6c4 	.word	0x0001c6c4
   177ac:	00000000 	.word	0x00000000
   177b0:	0001c6c4 	.word	0x0001c6c4
   177b4:	20008000 	.word	0x20008000

000177b8 <first>:
	return list->head == list;
   177b8:	4b03      	ldr	r3, [pc, #12]	; (177c8 <first+0x10>)
   177ba:	6818      	ldr	r0, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   177bc:	4298      	cmp	r0, r3
   177be:	d000      	beq.n	177c2 <first+0xa>
static struct _timeout *first(void)
{
	sys_dnode_t *t = sys_dlist_peek_head(&timeout_list);

	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
}
   177c0:	4770      	bx	lr
   177c2:	2000      	movs	r0, #0
	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
   177c4:	e7fc      	b.n	177c0 <first+0x8>
   177c6:	bf00      	nop
   177c8:	20008138 	.word	0x20008138

000177cc <next>:
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   177cc:	b130      	cbz	r0, 177dc <next+0x10>
	return (node == list->tail) ? NULL : node->next;
   177ce:	4a04      	ldr	r2, [pc, #16]	; (177e0 <next+0x14>)
   177d0:	6852      	ldr	r2, [r2, #4]
   177d2:	4290      	cmp	r0, r2
   177d4:	d001      	beq.n	177da <next+0xe>
   177d6:	6800      	ldr	r0, [r0, #0]
   177d8:	4770      	bx	lr
   177da:	2000      	movs	r0, #0
static struct _timeout *next(struct _timeout *t)
{
	sys_dnode_t *n = sys_dlist_peek_next(&timeout_list, &t->node);

	return n == NULL ? NULL : CONTAINER_OF(n, struct _timeout, node);
}
   177dc:	4770      	bx	lr
   177de:	bf00      	nop
   177e0:	20008138 	.word	0x20008138

000177e4 <elapsed>:

	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
   177e4:	b508      	push	{r3, lr}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   177e6:	4b04      	ldr	r3, [pc, #16]	; (177f8 <elapsed+0x14>)
   177e8:	681b      	ldr	r3, [r3, #0]
   177ea:	b10b      	cbz	r3, 177f0 <elapsed+0xc>
   177ec:	2000      	movs	r0, #0
}
   177ee:	bd08      	pop	{r3, pc}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   177f0:	f7fd fd20 	bl	15234 <sys_clock_elapsed>
   177f4:	e7fb      	b.n	177ee <elapsed+0xa>
   177f6:	bf00      	nop
   177f8:	20008690 	.word	0x20008690

000177fc <next_timeout>:

static int32_t next_timeout(void)
{
   177fc:	b510      	push	{r4, lr}
	struct _timeout *to = first();
   177fe:	f7ff ffdb 	bl	177b8 <first>
   17802:	4604      	mov	r4, r0
	int32_t ticks_elapsed = elapsed();
   17804:	f7ff ffee 	bl	177e4 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
   17808:	b17c      	cbz	r4, 1782a <next_timeout+0x2e>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
   1780a:	6923      	ldr	r3, [r4, #16]
   1780c:	6962      	ldr	r2, [r4, #20]
   1780e:	1a1b      	subs	r3, r3, r0
   17810:	eb62 72e0 	sbc.w	r2, r2, r0, asr #31
	if ((to == NULL) ||
   17814:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   17818:	f172 0100 	sbcs.w	r1, r2, #0
   1781c:	da08      	bge.n	17830 <next_timeout+0x34>
		ret = MAX_WAIT;
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
   1781e:	2a00      	cmp	r2, #0
   17820:	db01      	blt.n	17826 <next_timeout+0x2a>
   17822:	4618      	mov	r0, r3
   17824:	e006      	b.n	17834 <next_timeout+0x38>
   17826:	2300      	movs	r3, #0
   17828:	e7fb      	b.n	17822 <next_timeout+0x26>
		ret = MAX_WAIT;
   1782a:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   1782e:	e001      	b.n	17834 <next_timeout+0x38>
   17830:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   17834:	4b03      	ldr	r3, [pc, #12]	; (17844 <next_timeout+0x48>)
   17836:	691b      	ldr	r3, [r3, #16]
   17838:	b113      	cbz	r3, 17840 <next_timeout+0x44>
   1783a:	4283      	cmp	r3, r0
   1783c:	da00      	bge.n	17840 <next_timeout+0x44>
		ret = _current_cpu->slice_ticks;
   1783e:	4618      	mov	r0, r3
	}
#endif
	return ret;
}
   17840:	bd10      	pop	{r4, pc}
   17842:	bf00      	nop
   17844:	2000865c 	.word	0x2000865c

00017848 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   17848:	f1b3 3fff 	cmp.w	r3, #4294967295
   1784c:	bf08      	it	eq
   1784e:	f1b2 3fff 	cmpeq.w	r2, #4294967295
   17852:	d07b      	beq.n	1794c <z_add_timeout+0x104>
{
   17854:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   17858:	4604      	mov	r4, r0
   1785a:	4692      	mov	sl, r2
   1785c:	461d      	mov	r5, r3
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
   1785e:	6081      	str	r1, [r0, #8]

	LOCKED(&timeout_lock) {
   17860:	2300      	movs	r3, #0
	__asm__ volatile(
   17862:	f04f 0220 	mov.w	r2, #32
   17866:	f3ef 8711 	mrs	r7, BASEPRI
   1786a:	f382 8812 	msr	BASEPRI_MAX, r2
   1786e:	f3bf 8f6f 	isb	sy
   17872:	e026      	b.n	178c2 <z_add_timeout+0x7a>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;

			to->dticks = MAX(1, ticks);
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
   17874:	f11a 0801 	adds.w	r8, sl, #1
   17878:	f145 0900 	adc.w	r9, r5, #0
   1787c:	f7ff ffb2 	bl	177e4 <elapsed>
   17880:	eb18 0300 	adds.w	r3, r8, r0
   17884:	eb49 70e0 	adc.w	r0, r9, r0, asr #31
   17888:	6123      	str	r3, [r4, #16]
   1788a:	6160      	str	r0, [r4, #20]
   1788c:	e03b      	b.n	17906 <z_add_timeout+0xbe>
		}

		for (t = first(); t != NULL; t = next(t)) {
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
   1788e:	1a52      	subs	r2, r2, r1
   17890:	eb66 0303 	sbc.w	r3, r6, r3
   17894:	6102      	str	r2, [r0, #16]
   17896:	6143      	str	r3, [r0, #20]
	sys_dnode_t *const prev = successor->prev;
   17898:	6843      	ldr	r3, [r0, #4]
	node->prev = prev;
   1789a:	6063      	str	r3, [r4, #4]
	node->next = successor;
   1789c:	6020      	str	r0, [r4, #0]
	prev->next = node;
   1789e:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   178a0:	6044      	str	r4, [r0, #4]
				break;
			}
			to->dticks -= t->dticks;
		}

		if (t == NULL) {
   178a2:	e005      	b.n	178b0 <z_add_timeout+0x68>
	sys_dnode_t *const tail = list->tail;
   178a4:	4b2a      	ldr	r3, [pc, #168]	; (17950 <z_add_timeout+0x108>)
   178a6:	685a      	ldr	r2, [r3, #4]
	node->next = list;
   178a8:	6023      	str	r3, [r4, #0]
	node->prev = tail;
   178aa:	6062      	str	r2, [r4, #4]
	tail->next = node;
   178ac:	6014      	str	r4, [r2, #0]
	list->tail = node;
   178ae:	605c      	str	r4, [r3, #4]
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   178b0:	f7ff ff82 	bl	177b8 <first>
   178b4:	4284      	cmp	r4, r0
   178b6:	d03a      	beq.n	1792e <z_add_timeout+0xe6>
	__asm__ volatile(
   178b8:	f387 8811 	msr	BASEPRI, r7
   178bc:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   178c0:	2301      	movs	r3, #1
   178c2:	2b00      	cmp	r3, #0
   178c4:	d140      	bne.n	17948 <z_add_timeout+0x100>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
   178c6:	4653      	mov	r3, sl
   178c8:	f06f 0101 	mvn.w	r1, #1
   178cc:	ebb1 010a 	subs.w	r1, r1, sl
   178d0:	f04f 30ff 	mov.w	r0, #4294967295
   178d4:	eb60 0205 	sbc.w	r2, r0, r5
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
   178d8:	2a00      	cmp	r2, #0
   178da:	dbcb      	blt.n	17874 <z_add_timeout+0x2c>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
   178dc:	4a1d      	ldr	r2, [pc, #116]	; (17954 <z_add_timeout+0x10c>)
   178de:	6811      	ldr	r1, [r2, #0]
   178e0:	6852      	ldr	r2, [r2, #4]
   178e2:	185b      	adds	r3, r3, r1
   178e4:	eb42 0205 	adc.w	r2, r2, r5
   178e8:	f06f 0101 	mvn.w	r1, #1
   178ec:	1ac9      	subs	r1, r1, r3
   178ee:	eb60 0302 	sbc.w	r3, r0, r2
			to->dticks = MAX(1, ticks);
   178f2:	4608      	mov	r0, r1
   178f4:	461a      	mov	r2, r3
   178f6:	2901      	cmp	r1, #1
   178f8:	f173 0300 	sbcs.w	r3, r3, #0
   178fc:	da01      	bge.n	17902 <z_add_timeout+0xba>
   178fe:	2001      	movs	r0, #1
   17900:	2200      	movs	r2, #0
   17902:	6120      	str	r0, [r4, #16]
   17904:	6162      	str	r2, [r4, #20]
		for (t = first(); t != NULL; t = next(t)) {
   17906:	f7ff ff57 	bl	177b8 <first>
   1790a:	2800      	cmp	r0, #0
   1790c:	d0ca      	beq.n	178a4 <z_add_timeout+0x5c>
			if (t->dticks > to->dticks) {
   1790e:	6902      	ldr	r2, [r0, #16]
   17910:	6946      	ldr	r6, [r0, #20]
   17912:	6921      	ldr	r1, [r4, #16]
   17914:	6963      	ldr	r3, [r4, #20]
   17916:	4291      	cmp	r1, r2
   17918:	eb73 0e06 	sbcs.w	lr, r3, r6
   1791c:	dbb7      	blt.n	1788e <z_add_timeout+0x46>
			to->dticks -= t->dticks;
   1791e:	1a89      	subs	r1, r1, r2
   17920:	eb63 0306 	sbc.w	r3, r3, r6
   17924:	6121      	str	r1, [r4, #16]
   17926:	6163      	str	r3, [r4, #20]
		for (t = first(); t != NULL; t = next(t)) {
   17928:	f7ff ff50 	bl	177cc <next>
   1792c:	e7ed      	b.n	1790a <z_add_timeout+0xc2>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
   1792e:	f7ff ff65 	bl	177fc <next_timeout>

			if (next_time == 0 ||
   17932:	4603      	mov	r3, r0
   17934:	b118      	cbz	r0, 1793e <z_add_timeout+0xf6>
			    _current_cpu->slice_ticks != next_time) {
   17936:	4a08      	ldr	r2, [pc, #32]	; (17958 <z_add_timeout+0x110>)
   17938:	6912      	ldr	r2, [r2, #16]
			if (next_time == 0 ||
   1793a:	4282      	cmp	r2, r0
   1793c:	d0bc      	beq.n	178b8 <z_add_timeout+0x70>
				sys_clock_set_timeout(next_time, false);
   1793e:	2100      	movs	r1, #0
   17940:	4618      	mov	r0, r3
   17942:	f7fd fc45 	bl	151d0 <sys_clock_set_timeout>
   17946:	e7b7      	b.n	178b8 <z_add_timeout+0x70>
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
   17948:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1794c:	4770      	bx	lr
   1794e:	bf00      	nop
   17950:	20008138 	.word	0x20008138
   17954:	200084a8 	.word	0x200084a8
   17958:	2000865c 	.word	0x2000865c

0001795c <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
   1795c:	b570      	push	{r4, r5, r6, lr}
   1795e:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   17960:	f7ff fc1e 	bl	171a0 <z_time_slice>
	__asm__ volatile(
   17964:	f04f 0320 	mov.w	r3, #32
   17968:	f3ef 8611 	mrs	r6, BASEPRI
   1796c:	f383 8812 	msr	BASEPRI_MAX, r3
   17970:	f3bf 8f6f 	isb	sy
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
   17974:	4b28      	ldr	r3, [pc, #160]	; (17a18 <sys_clock_announce+0xbc>)
   17976:	601c      	str	r4, [r3, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
   17978:	e021      	b.n	179be <sys_clock_announce+0x62>
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
   1797a:	4a28      	ldr	r2, [pc, #160]	; (17a1c <sys_clock_announce+0xc0>)
   1797c:	6813      	ldr	r3, [r2, #0]
   1797e:	6851      	ldr	r1, [r2, #4]
   17980:	195b      	adds	r3, r3, r5
   17982:	eb41 71e5 	adc.w	r1, r1, r5, asr #31
   17986:	6013      	str	r3, [r2, #0]
   17988:	6051      	str	r1, [r2, #4]
		t->dticks = 0;
   1798a:	2200      	movs	r2, #0
   1798c:	2300      	movs	r3, #0
   1798e:	e9c4 2304 	strd	r2, r3, [r4, #16]
		remove_timeout(t);
   17992:	4620      	mov	r0, r4
   17994:	f003 fa8f 	bl	1aeb6 <remove_timeout>
	__asm__ volatile(
   17998:	f386 8811 	msr	BASEPRI, r6
   1799c:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&timeout_lock, key);
		t->fn(t);
   179a0:	68a3      	ldr	r3, [r4, #8]
   179a2:	4620      	mov	r0, r4
   179a4:	4798      	blx	r3
	__asm__ volatile(
   179a6:	f04f 0320 	mov.w	r3, #32
   179aa:	f3ef 8611 	mrs	r6, BASEPRI
   179ae:	f383 8812 	msr	BASEPRI_MAX, r3
   179b2:	f3bf 8f6f 	isb	sy
		key = k_spin_lock(&timeout_lock);
		announce_remaining -= dt;
   179b6:	4a18      	ldr	r2, [pc, #96]	; (17a18 <sys_clock_announce+0xbc>)
   179b8:	6813      	ldr	r3, [r2, #0]
   179ba:	1b5b      	subs	r3, r3, r5
   179bc:	6013      	str	r3, [r2, #0]
	while (first() != NULL && first()->dticks <= announce_remaining) {
   179be:	f7ff fefb 	bl	177b8 <first>
   179c2:	4604      	mov	r4, r0
   179c4:	b138      	cbz	r0, 179d6 <sys_clock_announce+0x7a>
   179c6:	6905      	ldr	r5, [r0, #16]
   179c8:	6941      	ldr	r1, [r0, #20]
   179ca:	4b13      	ldr	r3, [pc, #76]	; (17a18 <sys_clock_announce+0xbc>)
   179cc:	681a      	ldr	r2, [r3, #0]
   179ce:	17d3      	asrs	r3, r2, #31
   179d0:	42aa      	cmp	r2, r5
   179d2:	418b      	sbcs	r3, r1
   179d4:	dad1      	bge.n	1797a <sys_clock_announce+0x1e>
	}

	if (first() != NULL) {
   179d6:	b144      	cbz	r4, 179ea <sys_clock_announce+0x8e>
		first()->dticks -= announce_remaining;
   179d8:	6923      	ldr	r3, [r4, #16]
   179da:	6962      	ldr	r2, [r4, #20]
   179dc:	490e      	ldr	r1, [pc, #56]	; (17a18 <sys_clock_announce+0xbc>)
   179de:	6809      	ldr	r1, [r1, #0]
   179e0:	1a5b      	subs	r3, r3, r1
   179e2:	eb62 72e1 	sbc.w	r2, r2, r1, asr #31
   179e6:	6123      	str	r3, [r4, #16]
   179e8:	6162      	str	r2, [r4, #20]
	}

	curr_tick += announce_remaining;
   179ea:	4a0c      	ldr	r2, [pc, #48]	; (17a1c <sys_clock_announce+0xc0>)
   179ec:	4d0a      	ldr	r5, [pc, #40]	; (17a18 <sys_clock_announce+0xbc>)
   179ee:	6828      	ldr	r0, [r5, #0]
   179f0:	6813      	ldr	r3, [r2, #0]
   179f2:	6851      	ldr	r1, [r2, #4]
   179f4:	181b      	adds	r3, r3, r0
   179f6:	eb41 71e0 	adc.w	r1, r1, r0, asr #31
   179fa:	6013      	str	r3, [r2, #0]
   179fc:	6051      	str	r1, [r2, #4]
	announce_remaining = 0;
   179fe:	2400      	movs	r4, #0
   17a00:	602c      	str	r4, [r5, #0]

	sys_clock_set_timeout(next_timeout(), false);
   17a02:	f7ff fefb 	bl	177fc <next_timeout>
   17a06:	4621      	mov	r1, r4
   17a08:	f7fd fbe2 	bl	151d0 <sys_clock_set_timeout>
	__asm__ volatile(
   17a0c:	f386 8811 	msr	BASEPRI, r6
   17a10:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   17a14:	bd70      	pop	{r4, r5, r6, pc}
   17a16:	bf00      	nop
   17a18:	20008690 	.word	0x20008690
   17a1c:	200084a8 	.word	0x200084a8

00017a20 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
   17a20:	b510      	push	{r4, lr}
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
   17a22:	2200      	movs	r2, #0
	__asm__ volatile(
   17a24:	f04f 0320 	mov.w	r3, #32
   17a28:	f3ef 8411 	mrs	r4, BASEPRI
   17a2c:	f383 8812 	msr	BASEPRI_MAX, r3
   17a30:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;
   17a34:	4613      	mov	r3, r2
   17a36:	4611      	mov	r1, r2
   17a38:	e00c      	b.n	17a54 <sys_clock_tick_get+0x34>
		t = curr_tick + elapsed();
   17a3a:	f7ff fed3 	bl	177e4 <elapsed>
   17a3e:	4a07      	ldr	r2, [pc, #28]	; (17a5c <sys_clock_tick_get+0x3c>)
   17a40:	6813      	ldr	r3, [r2, #0]
   17a42:	6851      	ldr	r1, [r2, #4]
   17a44:	18c3      	adds	r3, r0, r3
   17a46:	eb41 71e0 	adc.w	r1, r1, r0, asr #31
	__asm__ volatile(
   17a4a:	f384 8811 	msr	BASEPRI, r4
   17a4e:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   17a52:	2201      	movs	r2, #1
   17a54:	2a00      	cmp	r2, #0
   17a56:	d0f0      	beq.n	17a3a <sys_clock_tick_get+0x1a>
	}
	return t;
}
   17a58:	4618      	mov	r0, r3
   17a5a:	bd10      	pop	{r4, pc}
   17a5c:	200084a8 	.word	0x200084a8

00017a60 <boot_banner>:
#else
#define BANNER_VERSION KERNEL_VERSION_STRING
#endif

void boot_banner(void)
{
   17a60:	b508      	push	{r3, lr}
	printk("***** delaying boot " DELAY_STR "ms (per build configuration) *****\n");
	k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
#endif /* defined(CONFIG_BOOT_DELAY) && (CONFIG_BOOT_DELAY > 0) */

#if CONFIG_BOOT_BANNER
	printk("*** Booting Zephyr OS build " BANNER_VERSION BANNER_POSTFIX " ***\n");
   17a62:	4802      	ldr	r0, [pc, #8]	; (17a6c <boot_banner+0xc>)
   17a64:	f001 fdbe 	bl	195e4 <printk>
#endif /* CONFIG_BOOT_BANNER */
}
   17a68:	bd08      	pop	{r3, pc}
   17a6a:	bf00      	nop
   17a6c:	0001c378 	.word	0x0001c378

00017a70 <sqrt>:
   17a70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   17a72:	4606      	mov	r6, r0
   17a74:	460f      	mov	r7, r1
   17a76:	f000 f827 	bl	17ac8 <__ieee754_sqrt>
   17a7a:	4b12      	ldr	r3, [pc, #72]	; (17ac4 <sqrt+0x54>)
   17a7c:	4604      	mov	r4, r0
   17a7e:	460d      	mov	r5, r1
   17a80:	f993 3000 	ldrsb.w	r3, [r3]
   17a84:	3301      	adds	r3, #1
   17a86:	d019      	beq.n	17abc <sqrt+0x4c>
   17a88:	4632      	mov	r2, r6
   17a8a:	463b      	mov	r3, r7
   17a8c:	4630      	mov	r0, r6
   17a8e:	4639      	mov	r1, r7
   17a90:	f7f9 f9e4 	bl	10e5c <__aeabi_dcmpun>
   17a94:	b990      	cbnz	r0, 17abc <sqrt+0x4c>
   17a96:	2200      	movs	r2, #0
   17a98:	2300      	movs	r3, #0
   17a9a:	4630      	mov	r0, r6
   17a9c:	4639      	mov	r1, r7
   17a9e:	f7f9 f83d 	bl	10b1c <__aeabi_dcmplt>
   17aa2:	b158      	cbz	r0, 17abc <sqrt+0x4c>
   17aa4:	f002 fa88 	bl	19fb8 <__errno>
   17aa8:	2321      	movs	r3, #33	; 0x21
   17aaa:	2200      	movs	r2, #0
   17aac:	6003      	str	r3, [r0, #0]
   17aae:	2300      	movs	r3, #0
   17ab0:	4610      	mov	r0, r2
   17ab2:	4619      	mov	r1, r3
   17ab4:	f7f8 feea 	bl	1088c <__aeabi_ddiv>
   17ab8:	4604      	mov	r4, r0
   17aba:	460d      	mov	r5, r1
   17abc:	4620      	mov	r0, r4
   17abe:	4629      	mov	r1, r5
   17ac0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   17ac2:	bf00      	nop
   17ac4:	20008310 	.word	0x20008310

00017ac8 <__ieee754_sqrt>:
   17ac8:	4a5a      	ldr	r2, [pc, #360]	; (17c34 <__ieee754_sqrt+0x16c>)
   17aca:	460b      	mov	r3, r1
   17acc:	438a      	bics	r2, r1
   17ace:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17ad2:	4604      	mov	r4, r0
   17ad4:	460d      	mov	r5, r1
   17ad6:	4606      	mov	r6, r0
   17ad8:	d10e      	bne.n	17af8 <__ieee754_sqrt+0x30>
   17ada:	4602      	mov	r2, r0
   17adc:	f7f8 fdac 	bl	10638 <__aeabi_dmul>
   17ae0:	4602      	mov	r2, r0
   17ae2:	460b      	mov	r3, r1
   17ae4:	4620      	mov	r0, r4
   17ae6:	4629      	mov	r1, r5
   17ae8:	f7f8 fbf0 	bl	102cc <__adddf3>
   17aec:	4604      	mov	r4, r0
   17aee:	460d      	mov	r5, r1
   17af0:	4620      	mov	r0, r4
   17af2:	4629      	mov	r1, r5
   17af4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   17af8:	2900      	cmp	r1, #0
   17afa:	dc0c      	bgt.n	17b16 <__ieee754_sqrt+0x4e>
   17afc:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
   17b00:	4302      	orrs	r2, r0
   17b02:	d0f5      	beq.n	17af0 <__ieee754_sqrt+0x28>
   17b04:	b189      	cbz	r1, 17b2a <__ieee754_sqrt+0x62>
   17b06:	4602      	mov	r2, r0
   17b08:	f7f8 fbde 	bl	102c8 <__aeabi_dsub>
   17b0c:	4602      	mov	r2, r0
   17b0e:	460b      	mov	r3, r1
   17b10:	f7f8 febc 	bl	1088c <__aeabi_ddiv>
   17b14:	e7ea      	b.n	17aec <__ieee754_sqrt+0x24>
   17b16:	150a      	asrs	r2, r1, #20
   17b18:	d115      	bne.n	17b46 <__ieee754_sqrt+0x7e>
   17b1a:	2100      	movs	r1, #0
   17b1c:	e009      	b.n	17b32 <__ieee754_sqrt+0x6a>
   17b1e:	0af3      	lsrs	r3, r6, #11
   17b20:	3a15      	subs	r2, #21
   17b22:	0576      	lsls	r6, r6, #21
   17b24:	2b00      	cmp	r3, #0
   17b26:	d0fa      	beq.n	17b1e <__ieee754_sqrt+0x56>
   17b28:	e7f7      	b.n	17b1a <__ieee754_sqrt+0x52>
   17b2a:	460a      	mov	r2, r1
   17b2c:	e7fa      	b.n	17b24 <__ieee754_sqrt+0x5c>
   17b2e:	005b      	lsls	r3, r3, #1
   17b30:	3101      	adds	r1, #1
   17b32:	02dc      	lsls	r4, r3, #11
   17b34:	d5fb      	bpl.n	17b2e <__ieee754_sqrt+0x66>
   17b36:	1e48      	subs	r0, r1, #1
   17b38:	1a12      	subs	r2, r2, r0
   17b3a:	f1c1 0020 	rsb	r0, r1, #32
   17b3e:	fa26 f000 	lsr.w	r0, r6, r0
   17b42:	408e      	lsls	r6, r1
   17b44:	4303      	orrs	r3, r0
   17b46:	f3c3 0313 	ubfx	r3, r3, #0, #20
   17b4a:	07d0      	lsls	r0, r2, #31
   17b4c:	f2a2 35ff 	subw	r5, r2, #1023	; 0x3ff
   17b50:	f04f 0700 	mov.w	r7, #0
   17b54:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   17b58:	f04f 0e16 	mov.w	lr, #22
   17b5c:	ea4f 0565 	mov.w	r5, r5, asr #1
   17b60:	46b8      	mov	r8, r7
   17b62:	bf58      	it	pl
   17b64:	005b      	lslpl	r3, r3, #1
   17b66:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   17b6a:	bf5c      	itt	pl
   17b6c:	eb03 73d6 	addpl.w	r3, r3, r6, lsr #31
   17b70:	0076      	lslpl	r6, r6, #1
   17b72:	005b      	lsls	r3, r3, #1
   17b74:	eb03 73d6 	add.w	r3, r3, r6, lsr #31
   17b78:	0076      	lsls	r6, r6, #1
   17b7a:	eb08 0102 	add.w	r1, r8, r2
   17b7e:	4299      	cmp	r1, r3
   17b80:	bfde      	ittt	le
   17b82:	1a5b      	suble	r3, r3, r1
   17b84:	eb02 0801 	addle.w	r8, r2, r1
   17b88:	18bf      	addle	r7, r7, r2
   17b8a:	f1be 0e01 	subs.w	lr, lr, #1
   17b8e:	ea4f 0343 	mov.w	r3, r3, lsl #1
   17b92:	ea4f 0252 	mov.w	r2, r2, lsr #1
   17b96:	eb03 73d6 	add.w	r3, r3, r6, lsr #31
   17b9a:	ea4f 0646 	mov.w	r6, r6, lsl #1
   17b9e:	d1ec      	bne.n	17b7a <__ieee754_sqrt+0xb2>
   17ba0:	46f4      	mov	ip, lr
   17ba2:	2020      	movs	r0, #32
   17ba4:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
   17ba8:	4598      	cmp	r8, r3
   17baa:	eb01 020e 	add.w	r2, r1, lr
   17bae:	db2f      	blt.n	17c10 <__ieee754_sqrt+0x148>
   17bb0:	d10b      	bne.n	17bca <__ieee754_sqrt+0x102>
   17bb2:	42b2      	cmp	r2, r6
   17bb4:	d809      	bhi.n	17bca <__ieee754_sqrt+0x102>
   17bb6:	2a00      	cmp	r2, #0
   17bb8:	eb01 0e02 	add.w	lr, r1, r2
   17bbc:	da02      	bge.n	17bc4 <__ieee754_sqrt+0xfc>
   17bbe:	f1be 0f00 	cmp.w	lr, #0
   17bc2:	da2c      	bge.n	17c1e <__ieee754_sqrt+0x156>
   17bc4:	2300      	movs	r3, #0
   17bc6:	1ab6      	subs	r6, r6, r2
   17bc8:	448c      	add	ip, r1
   17bca:	005b      	lsls	r3, r3, #1
   17bcc:	3801      	subs	r0, #1
   17bce:	ea4f 0151 	mov.w	r1, r1, lsr #1
   17bd2:	eb03 73d6 	add.w	r3, r3, r6, lsr #31
   17bd6:	ea4f 0646 	mov.w	r6, r6, lsl #1
   17bda:	d1e5      	bne.n	17ba8 <__ieee754_sqrt+0xe0>
   17bdc:	4333      	orrs	r3, r6
   17bde:	d008      	beq.n	17bf2 <__ieee754_sqrt+0x12a>
   17be0:	f1bc 3fff 	cmp.w	ip, #4294967295
   17be4:	bf13      	iteet	ne
   17be6:	f10c 0301 	addne.w	r3, ip, #1
   17bea:	3701      	addeq	r7, #1
   17bec:	4684      	moveq	ip, r0
   17bee:	f023 0c01 	bicne.w	ip, r3, #1
   17bf2:	107a      	asrs	r2, r7, #1
   17bf4:	07f9      	lsls	r1, r7, #31
   17bf6:	ea4f 035c 	mov.w	r3, ip, lsr #1
   17bfa:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
   17bfe:	bf48      	it	mi
   17c00:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
   17c04:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
   17c08:	4618      	mov	r0, r3
   17c0a:	eb02 5105 	add.w	r1, r2, r5, lsl #20
   17c0e:	e76d      	b.n	17aec <__ieee754_sqrt+0x24>
   17c10:	2a00      	cmp	r2, #0
   17c12:	eb01 0e02 	add.w	lr, r1, r2
   17c16:	da0b      	bge.n	17c30 <__ieee754_sqrt+0x168>
   17c18:	f1be 0f00 	cmp.w	lr, #0
   17c1c:	db08      	blt.n	17c30 <__ieee754_sqrt+0x168>
   17c1e:	f108 0401 	add.w	r4, r8, #1
   17c22:	42b2      	cmp	r2, r6
   17c24:	eba3 0308 	sub.w	r3, r3, r8
   17c28:	d900      	bls.n	17c2c <__ieee754_sqrt+0x164>
   17c2a:	3b01      	subs	r3, #1
   17c2c:	46a0      	mov	r8, r4
   17c2e:	e7ca      	b.n	17bc6 <__ieee754_sqrt+0xfe>
   17c30:	4644      	mov	r4, r8
   17c32:	e7f6      	b.n	17c22 <__ieee754_sqrt+0x15a>
   17c34:	7ff00000 	.word	0x7ff00000

00017c38 <malloc>:
   17c38:	4b02      	ldr	r3, [pc, #8]	; (17c44 <malloc+0xc>)
   17c3a:	4601      	mov	r1, r0
   17c3c:	6818      	ldr	r0, [r3, #0]
   17c3e:	f000 b84d 	b.w	17cdc <_malloc_r>
   17c42:	bf00      	nop
   17c44:	20008140 	.word	0x20008140

00017c48 <_free_r>:
   17c48:	b538      	push	{r3, r4, r5, lr}
   17c4a:	4605      	mov	r5, r0
   17c4c:	2900      	cmp	r1, #0
   17c4e:	d041      	beq.n	17cd4 <_free_r+0x8c>
   17c50:	f851 3c04 	ldr.w	r3, [r1, #-4]
   17c54:	1f0c      	subs	r4, r1, #4
   17c56:	2b00      	cmp	r3, #0
   17c58:	bfb8      	it	lt
   17c5a:	18e4      	addlt	r4, r4, r3
   17c5c:	f000 fce8 	bl	18630 <__malloc_lock>
   17c60:	4a1d      	ldr	r2, [pc, #116]	; (17cd8 <_free_r+0x90>)
   17c62:	6813      	ldr	r3, [r2, #0]
   17c64:	b933      	cbnz	r3, 17c74 <_free_r+0x2c>
   17c66:	6063      	str	r3, [r4, #4]
   17c68:	6014      	str	r4, [r2, #0]
   17c6a:	4628      	mov	r0, r5
   17c6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   17c70:	f000 bce4 	b.w	1863c <__malloc_unlock>
   17c74:	42a3      	cmp	r3, r4
   17c76:	d908      	bls.n	17c8a <_free_r+0x42>
   17c78:	6820      	ldr	r0, [r4, #0]
   17c7a:	1821      	adds	r1, r4, r0
   17c7c:	428b      	cmp	r3, r1
   17c7e:	bf01      	itttt	eq
   17c80:	6819      	ldreq	r1, [r3, #0]
   17c82:	685b      	ldreq	r3, [r3, #4]
   17c84:	1809      	addeq	r1, r1, r0
   17c86:	6021      	streq	r1, [r4, #0]
   17c88:	e7ed      	b.n	17c66 <_free_r+0x1e>
   17c8a:	461a      	mov	r2, r3
   17c8c:	685b      	ldr	r3, [r3, #4]
   17c8e:	b10b      	cbz	r3, 17c94 <_free_r+0x4c>
   17c90:	42a3      	cmp	r3, r4
   17c92:	d9fa      	bls.n	17c8a <_free_r+0x42>
   17c94:	6811      	ldr	r1, [r2, #0]
   17c96:	1850      	adds	r0, r2, r1
   17c98:	42a0      	cmp	r0, r4
   17c9a:	d10b      	bne.n	17cb4 <_free_r+0x6c>
   17c9c:	6820      	ldr	r0, [r4, #0]
   17c9e:	4401      	add	r1, r0
   17ca0:	1850      	adds	r0, r2, r1
   17ca2:	6011      	str	r1, [r2, #0]
   17ca4:	4283      	cmp	r3, r0
   17ca6:	d1e0      	bne.n	17c6a <_free_r+0x22>
   17ca8:	6818      	ldr	r0, [r3, #0]
   17caa:	685b      	ldr	r3, [r3, #4]
   17cac:	4408      	add	r0, r1
   17cae:	6053      	str	r3, [r2, #4]
   17cb0:	6010      	str	r0, [r2, #0]
   17cb2:	e7da      	b.n	17c6a <_free_r+0x22>
   17cb4:	d902      	bls.n	17cbc <_free_r+0x74>
   17cb6:	230c      	movs	r3, #12
   17cb8:	602b      	str	r3, [r5, #0]
   17cba:	e7d6      	b.n	17c6a <_free_r+0x22>
   17cbc:	6820      	ldr	r0, [r4, #0]
   17cbe:	1821      	adds	r1, r4, r0
   17cc0:	428b      	cmp	r3, r1
   17cc2:	bf02      	ittt	eq
   17cc4:	6819      	ldreq	r1, [r3, #0]
   17cc6:	685b      	ldreq	r3, [r3, #4]
   17cc8:	1809      	addeq	r1, r1, r0
   17cca:	6063      	str	r3, [r4, #4]
   17ccc:	bf08      	it	eq
   17cce:	6021      	streq	r1, [r4, #0]
   17cd0:	6054      	str	r4, [r2, #4]
   17cd2:	e7ca      	b.n	17c6a <_free_r+0x22>
   17cd4:	bd38      	pop	{r3, r4, r5, pc}
   17cd6:	bf00      	nop
   17cd8:	20008698 	.word	0x20008698

00017cdc <_malloc_r>:
   17cdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   17cde:	1ccd      	adds	r5, r1, #3
   17ce0:	4606      	mov	r6, r0
   17ce2:	f025 0503 	bic.w	r5, r5, #3
   17ce6:	3508      	adds	r5, #8
   17ce8:	2d0c      	cmp	r5, #12
   17cea:	bf38      	it	cc
   17cec:	250c      	movcc	r5, #12
   17cee:	2d00      	cmp	r5, #0
   17cf0:	db01      	blt.n	17cf6 <_malloc_r+0x1a>
   17cf2:	42a9      	cmp	r1, r5
   17cf4:	d903      	bls.n	17cfe <_malloc_r+0x22>
   17cf6:	230c      	movs	r3, #12
   17cf8:	6033      	str	r3, [r6, #0]
   17cfa:	2000      	movs	r0, #0
   17cfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   17cfe:	f000 fc97 	bl	18630 <__malloc_lock>
   17d02:	4921      	ldr	r1, [pc, #132]	; (17d88 <_malloc_r+0xac>)
   17d04:	680a      	ldr	r2, [r1, #0]
   17d06:	4614      	mov	r4, r2
   17d08:	b99c      	cbnz	r4, 17d32 <_malloc_r+0x56>
   17d0a:	4f20      	ldr	r7, [pc, #128]	; (17d8c <_malloc_r+0xb0>)
   17d0c:	683b      	ldr	r3, [r7, #0]
   17d0e:	b923      	cbnz	r3, 17d1a <_malloc_r+0x3e>
   17d10:	4621      	mov	r1, r4
   17d12:	4630      	mov	r0, r6
   17d14:	f000 fbb8 	bl	18488 <_sbrk_r>
   17d18:	6038      	str	r0, [r7, #0]
   17d1a:	4629      	mov	r1, r5
   17d1c:	4630      	mov	r0, r6
   17d1e:	f000 fbb3 	bl	18488 <_sbrk_r>
   17d22:	1c43      	adds	r3, r0, #1
   17d24:	d123      	bne.n	17d6e <_malloc_r+0x92>
   17d26:	230c      	movs	r3, #12
   17d28:	4630      	mov	r0, r6
   17d2a:	6033      	str	r3, [r6, #0]
   17d2c:	f000 fc86 	bl	1863c <__malloc_unlock>
   17d30:	e7e3      	b.n	17cfa <_malloc_r+0x1e>
   17d32:	6823      	ldr	r3, [r4, #0]
   17d34:	1b5b      	subs	r3, r3, r5
   17d36:	d417      	bmi.n	17d68 <_malloc_r+0x8c>
   17d38:	2b0b      	cmp	r3, #11
   17d3a:	d903      	bls.n	17d44 <_malloc_r+0x68>
   17d3c:	6023      	str	r3, [r4, #0]
   17d3e:	441c      	add	r4, r3
   17d40:	6025      	str	r5, [r4, #0]
   17d42:	e004      	b.n	17d4e <_malloc_r+0x72>
   17d44:	6863      	ldr	r3, [r4, #4]
   17d46:	42a2      	cmp	r2, r4
   17d48:	bf0c      	ite	eq
   17d4a:	600b      	streq	r3, [r1, #0]
   17d4c:	6053      	strne	r3, [r2, #4]
   17d4e:	4630      	mov	r0, r6
   17d50:	f000 fc74 	bl	1863c <__malloc_unlock>
   17d54:	f104 000b 	add.w	r0, r4, #11
   17d58:	1d23      	adds	r3, r4, #4
   17d5a:	f020 0007 	bic.w	r0, r0, #7
   17d5e:	1ac2      	subs	r2, r0, r3
   17d60:	bf1c      	itt	ne
   17d62:	1a1b      	subne	r3, r3, r0
   17d64:	50a3      	strne	r3, [r4, r2]
   17d66:	e7c9      	b.n	17cfc <_malloc_r+0x20>
   17d68:	4622      	mov	r2, r4
   17d6a:	6864      	ldr	r4, [r4, #4]
   17d6c:	e7cc      	b.n	17d08 <_malloc_r+0x2c>
   17d6e:	1cc4      	adds	r4, r0, #3
   17d70:	f024 0403 	bic.w	r4, r4, #3
   17d74:	42a0      	cmp	r0, r4
   17d76:	d0e3      	beq.n	17d40 <_malloc_r+0x64>
   17d78:	1a21      	subs	r1, r4, r0
   17d7a:	4630      	mov	r0, r6
   17d7c:	f000 fb84 	bl	18488 <_sbrk_r>
   17d80:	3001      	adds	r0, #1
   17d82:	d1dd      	bne.n	17d40 <_malloc_r+0x64>
   17d84:	e7cf      	b.n	17d26 <_malloc_r+0x4a>
   17d86:	bf00      	nop
   17d88:	20008698 	.word	0x20008698
   17d8c:	20008694 	.word	0x20008694

00017d90 <_printf_float>:
   17d90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17d94:	b091      	sub	sp, #68	; 0x44
   17d96:	460c      	mov	r4, r1
   17d98:	4616      	mov	r6, r2
   17d9a:	461f      	mov	r7, r3
   17d9c:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
   17da0:	4605      	mov	r5, r0
   17da2:	f000 fc41 	bl	18628 <_localeconv_r>
   17da6:	6803      	ldr	r3, [r0, #0]
   17da8:	4618      	mov	r0, r3
   17daa:	9308      	str	r3, [sp, #32]
   17dac:	f7f9 f9e2 	bl	11174 <strlen>
   17db0:	2300      	movs	r3, #0
   17db2:	9009      	str	r0, [sp, #36]	; 0x24
   17db4:	930e      	str	r3, [sp, #56]	; 0x38
   17db6:	f8d8 3000 	ldr.w	r3, [r8]
   17dba:	f894 a018 	ldrb.w	sl, [r4, #24]
   17dbe:	3307      	adds	r3, #7
   17dc0:	f8d4 b000 	ldr.w	fp, [r4]
   17dc4:	f023 0307 	bic.w	r3, r3, #7
   17dc8:	f103 0208 	add.w	r2, r3, #8
   17dcc:	f8c8 2000 	str.w	r2, [r8]
   17dd0:	f04f 32ff 	mov.w	r2, #4294967295
   17dd4:	e9d3 8900 	ldrd	r8, r9, [r3]
   17dd8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
   17ddc:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
   17de0:	930b      	str	r3, [sp, #44]	; 0x2c
   17de2:	4b9d      	ldr	r3, [pc, #628]	; (18058 <_printf_float+0x2c8>)
   17de4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   17de8:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
   17dec:	f7f9 f836 	bl	10e5c <__aeabi_dcmpun>
   17df0:	bb70      	cbnz	r0, 17e50 <_printf_float+0xc0>
   17df2:	f04f 32ff 	mov.w	r2, #4294967295
   17df6:	4b98      	ldr	r3, [pc, #608]	; (18058 <_printf_float+0x2c8>)
   17df8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   17dfc:	f7f8 fe98 	bl	10b30 <__aeabi_dcmple>
   17e00:	bb30      	cbnz	r0, 17e50 <_printf_float+0xc0>
   17e02:	2200      	movs	r2, #0
   17e04:	2300      	movs	r3, #0
   17e06:	4640      	mov	r0, r8
   17e08:	4649      	mov	r1, r9
   17e0a:	f7f8 fe87 	bl	10b1c <__aeabi_dcmplt>
   17e0e:	b110      	cbz	r0, 17e16 <_printf_float+0x86>
   17e10:	232d      	movs	r3, #45	; 0x2d
   17e12:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   17e16:	4a91      	ldr	r2, [pc, #580]	; (1805c <_printf_float+0x2cc>)
   17e18:	4b91      	ldr	r3, [pc, #580]	; (18060 <_printf_float+0x2d0>)
   17e1a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
   17e1e:	bf94      	ite	ls
   17e20:	4690      	movls	r8, r2
   17e22:	4698      	movhi	r8, r3
   17e24:	2303      	movs	r3, #3
   17e26:	f04f 0900 	mov.w	r9, #0
   17e2a:	6123      	str	r3, [r4, #16]
   17e2c:	f02b 0304 	bic.w	r3, fp, #4
   17e30:	6023      	str	r3, [r4, #0]
   17e32:	4633      	mov	r3, r6
   17e34:	aa0f      	add	r2, sp, #60	; 0x3c
   17e36:	4621      	mov	r1, r4
   17e38:	4628      	mov	r0, r5
   17e3a:	9700      	str	r7, [sp, #0]
   17e3c:	f003 f983 	bl	1b146 <_printf_common>
   17e40:	3001      	adds	r0, #1
   17e42:	f040 8099 	bne.w	17f78 <_printf_float+0x1e8>
   17e46:	f04f 30ff 	mov.w	r0, #4294967295
   17e4a:	b011      	add	sp, #68	; 0x44
   17e4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17e50:	4642      	mov	r2, r8
   17e52:	464b      	mov	r3, r9
   17e54:	4640      	mov	r0, r8
   17e56:	4649      	mov	r1, r9
   17e58:	f7f9 f800 	bl	10e5c <__aeabi_dcmpun>
   17e5c:	b140      	cbz	r0, 17e70 <_printf_float+0xe0>
   17e5e:	464b      	mov	r3, r9
   17e60:	4a80      	ldr	r2, [pc, #512]	; (18064 <_printf_float+0x2d4>)
   17e62:	2b00      	cmp	r3, #0
   17e64:	bfbc      	itt	lt
   17e66:	232d      	movlt	r3, #45	; 0x2d
   17e68:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
   17e6c:	4b7e      	ldr	r3, [pc, #504]	; (18068 <_printf_float+0x2d8>)
   17e6e:	e7d4      	b.n	17e1a <_printf_float+0x8a>
   17e70:	6863      	ldr	r3, [r4, #4]
   17e72:	1c5a      	adds	r2, r3, #1
   17e74:	d129      	bne.n	17eca <_printf_float+0x13a>
   17e76:	2306      	movs	r3, #6
   17e78:	6063      	str	r3, [r4, #4]
   17e7a:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
   17e7e:	2200      	movs	r2, #0
   17e80:	4628      	mov	r0, r5
   17e82:	6023      	str	r3, [r4, #0]
   17e84:	9206      	str	r2, [sp, #24]
   17e86:	aa0e      	add	r2, sp, #56	; 0x38
   17e88:	e9cd a204 	strd	sl, r2, [sp, #16]
   17e8c:	aa0d      	add	r2, sp, #52	; 0x34
   17e8e:	9203      	str	r2, [sp, #12]
   17e90:	f10d 0233 	add.w	r2, sp, #51	; 0x33
   17e94:	e9cd 3201 	strd	r3, r2, [sp, #4]
   17e98:	6863      	ldr	r3, [r4, #4]
   17e9a:	4642      	mov	r2, r8
   17e9c:	9300      	str	r3, [sp, #0]
   17e9e:	464b      	mov	r3, r9
   17ea0:	f003 f8b1 	bl	1b006 <__cvt>
   17ea4:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
   17ea8:	4680      	mov	r8, r0
   17eaa:	990d      	ldr	r1, [sp, #52]	; 0x34
   17eac:	d115      	bne.n	17eda <_printf_float+0x14a>
   17eae:	1ccb      	adds	r3, r1, #3
   17eb0:	db3b      	blt.n	17f2a <_printf_float+0x19a>
   17eb2:	6863      	ldr	r3, [r4, #4]
   17eb4:	4299      	cmp	r1, r3
   17eb6:	dc38      	bgt.n	17f2a <_printf_float+0x19a>
   17eb8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   17eba:	4299      	cmp	r1, r3
   17ebc:	db55      	blt.n	17f6a <_printf_float+0x1da>
   17ebe:	6823      	ldr	r3, [r4, #0]
   17ec0:	6121      	str	r1, [r4, #16]
   17ec2:	07d8      	lsls	r0, r3, #31
   17ec4:	d545      	bpl.n	17f52 <_printf_float+0x1c2>
   17ec6:	1c4b      	adds	r3, r1, #1
   17ec8:	e042      	b.n	17f50 <_printf_float+0x1c0>
   17eca:	f00a 02df 	and.w	r2, sl, #223	; 0xdf
   17ece:	2a47      	cmp	r2, #71	; 0x47
   17ed0:	d1d3      	bne.n	17e7a <_printf_float+0xea>
   17ed2:	2b00      	cmp	r3, #0
   17ed4:	d1d1      	bne.n	17e7a <_printf_float+0xea>
   17ed6:	2301      	movs	r3, #1
   17ed8:	e7ce      	b.n	17e78 <_printf_float+0xe8>
   17eda:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
   17ede:	d107      	bne.n	17ef0 <_printf_float+0x160>
   17ee0:	1cc8      	adds	r0, r1, #3
   17ee2:	db25      	blt.n	17f30 <_printf_float+0x1a0>
   17ee4:	6863      	ldr	r3, [r4, #4]
   17ee6:	428b      	cmp	r3, r1
   17ee8:	db22      	blt.n	17f30 <_printf_float+0x1a0>
   17eea:	f04f 0a67 	mov.w	sl, #103	; 0x67
   17eee:	e7e3      	b.n	17eb8 <_printf_float+0x128>
   17ef0:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
   17ef4:	d81f      	bhi.n	17f36 <_printf_float+0x1a6>
   17ef6:	3901      	subs	r1, #1
   17ef8:	4652      	mov	r2, sl
   17efa:	f104 0050 	add.w	r0, r4, #80	; 0x50
   17efe:	910d      	str	r1, [sp, #52]	; 0x34
   17f00:	f003 f8e8 	bl	1b0d4 <__exponent>
   17f04:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   17f06:	4681      	mov	r9, r0
   17f08:	1813      	adds	r3, r2, r0
   17f0a:	2a01      	cmp	r2, #1
   17f0c:	6123      	str	r3, [r4, #16]
   17f0e:	dc02      	bgt.n	17f16 <_printf_float+0x186>
   17f10:	6822      	ldr	r2, [r4, #0]
   17f12:	07d2      	lsls	r2, r2, #31
   17f14:	d501      	bpl.n	17f1a <_printf_float+0x18a>
   17f16:	3301      	adds	r3, #1
   17f18:	6123      	str	r3, [r4, #16]
   17f1a:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
   17f1e:	2b00      	cmp	r3, #0
   17f20:	d087      	beq.n	17e32 <_printf_float+0xa2>
   17f22:	232d      	movs	r3, #45	; 0x2d
   17f24:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   17f28:	e783      	b.n	17e32 <_printf_float+0xa2>
   17f2a:	f04f 0a65 	mov.w	sl, #101	; 0x65
   17f2e:	e7e2      	b.n	17ef6 <_printf_float+0x166>
   17f30:	f04f 0a45 	mov.w	sl, #69	; 0x45
   17f34:	e7df      	b.n	17ef6 <_printf_float+0x166>
   17f36:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
   17f3a:	d1bd      	bne.n	17eb8 <_printf_float+0x128>
   17f3c:	2900      	cmp	r1, #0
   17f3e:	6863      	ldr	r3, [r4, #4]
   17f40:	dd0b      	ble.n	17f5a <_printf_float+0x1ca>
   17f42:	6121      	str	r1, [r4, #16]
   17f44:	b913      	cbnz	r3, 17f4c <_printf_float+0x1bc>
   17f46:	6822      	ldr	r2, [r4, #0]
   17f48:	07d0      	lsls	r0, r2, #31
   17f4a:	d502      	bpl.n	17f52 <_printf_float+0x1c2>
   17f4c:	3301      	adds	r3, #1
   17f4e:	440b      	add	r3, r1
   17f50:	6123      	str	r3, [r4, #16]
   17f52:	f04f 0900 	mov.w	r9, #0
   17f56:	65a1      	str	r1, [r4, #88]	; 0x58
   17f58:	e7df      	b.n	17f1a <_printf_float+0x18a>
   17f5a:	b913      	cbnz	r3, 17f62 <_printf_float+0x1d2>
   17f5c:	6822      	ldr	r2, [r4, #0]
   17f5e:	07d2      	lsls	r2, r2, #31
   17f60:	d501      	bpl.n	17f66 <_printf_float+0x1d6>
   17f62:	3302      	adds	r3, #2
   17f64:	e7f4      	b.n	17f50 <_printf_float+0x1c0>
   17f66:	2301      	movs	r3, #1
   17f68:	e7f2      	b.n	17f50 <_printf_float+0x1c0>
   17f6a:	2900      	cmp	r1, #0
   17f6c:	bfd4      	ite	le
   17f6e:	f1c1 0202 	rsble	r2, r1, #2
   17f72:	2201      	movgt	r2, #1
   17f74:	4413      	add	r3, r2
   17f76:	e7eb      	b.n	17f50 <_printf_float+0x1c0>
   17f78:	6823      	ldr	r3, [r4, #0]
   17f7a:	055a      	lsls	r2, r3, #21
   17f7c:	d407      	bmi.n	17f8e <_printf_float+0x1fe>
   17f7e:	6923      	ldr	r3, [r4, #16]
   17f80:	4642      	mov	r2, r8
   17f82:	4631      	mov	r1, r6
   17f84:	4628      	mov	r0, r5
   17f86:	47b8      	blx	r7
   17f88:	3001      	adds	r0, #1
   17f8a:	d12b      	bne.n	17fe4 <_printf_float+0x254>
   17f8c:	e75b      	b.n	17e46 <_printf_float+0xb6>
   17f8e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
   17f92:	f240 80dc 	bls.w	1814e <_printf_float+0x3be>
   17f96:	2200      	movs	r2, #0
   17f98:	2300      	movs	r3, #0
   17f9a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
   17f9e:	f7f8 fdb3 	bl	10b08 <__aeabi_dcmpeq>
   17fa2:	2800      	cmp	r0, #0
   17fa4:	d033      	beq.n	1800e <_printf_float+0x27e>
   17fa6:	2301      	movs	r3, #1
   17fa8:	4a30      	ldr	r2, [pc, #192]	; (1806c <_printf_float+0x2dc>)
   17faa:	4631      	mov	r1, r6
   17fac:	4628      	mov	r0, r5
   17fae:	47b8      	blx	r7
   17fb0:	3001      	adds	r0, #1
   17fb2:	f43f af48 	beq.w	17e46 <_printf_float+0xb6>
   17fb6:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	; 0x34
   17fba:	4543      	cmp	r3, r8
   17fbc:	db02      	blt.n	17fc4 <_printf_float+0x234>
   17fbe:	6823      	ldr	r3, [r4, #0]
   17fc0:	07d8      	lsls	r0, r3, #31
   17fc2:	d50f      	bpl.n	17fe4 <_printf_float+0x254>
   17fc4:	4631      	mov	r1, r6
   17fc6:	4628      	mov	r0, r5
   17fc8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   17fcc:	47b8      	blx	r7
   17fce:	3001      	adds	r0, #1
   17fd0:	f43f af39 	beq.w	17e46 <_printf_float+0xb6>
   17fd4:	f04f 0900 	mov.w	r9, #0
   17fd8:	f108 38ff 	add.w	r8, r8, #4294967295
   17fdc:	f104 0a1a 	add.w	sl, r4, #26
   17fe0:	45c8      	cmp	r8, r9
   17fe2:	dc09      	bgt.n	17ff8 <_printf_float+0x268>
   17fe4:	6823      	ldr	r3, [r4, #0]
   17fe6:	079b      	lsls	r3, r3, #30
   17fe8:	f100 8102 	bmi.w	181f0 <_printf_float+0x460>
   17fec:	68e0      	ldr	r0, [r4, #12]
   17fee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   17ff0:	4298      	cmp	r0, r3
   17ff2:	bfb8      	it	lt
   17ff4:	4618      	movlt	r0, r3
   17ff6:	e728      	b.n	17e4a <_printf_float+0xba>
   17ff8:	2301      	movs	r3, #1
   17ffa:	4652      	mov	r2, sl
   17ffc:	4631      	mov	r1, r6
   17ffe:	4628      	mov	r0, r5
   18000:	47b8      	blx	r7
   18002:	3001      	adds	r0, #1
   18004:	f43f af1f 	beq.w	17e46 <_printf_float+0xb6>
   18008:	f109 0901 	add.w	r9, r9, #1
   1800c:	e7e8      	b.n	17fe0 <_printf_float+0x250>
   1800e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   18010:	2b00      	cmp	r3, #0
   18012:	dc38      	bgt.n	18086 <_printf_float+0x2f6>
   18014:	2301      	movs	r3, #1
   18016:	4a15      	ldr	r2, [pc, #84]	; (1806c <_printf_float+0x2dc>)
   18018:	4631      	mov	r1, r6
   1801a:	4628      	mov	r0, r5
   1801c:	47b8      	blx	r7
   1801e:	3001      	adds	r0, #1
   18020:	f43f af11 	beq.w	17e46 <_printf_float+0xb6>
   18024:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	; 0x34
   18028:	ea59 0303 	orrs.w	r3, r9, r3
   1802c:	d102      	bne.n	18034 <_printf_float+0x2a4>
   1802e:	6823      	ldr	r3, [r4, #0]
   18030:	07d9      	lsls	r1, r3, #31
   18032:	d5d7      	bpl.n	17fe4 <_printf_float+0x254>
   18034:	4631      	mov	r1, r6
   18036:	4628      	mov	r0, r5
   18038:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   1803c:	47b8      	blx	r7
   1803e:	3001      	adds	r0, #1
   18040:	f43f af01 	beq.w	17e46 <_printf_float+0xb6>
   18044:	f04f 0a00 	mov.w	sl, #0
   18048:	f104 0b1a 	add.w	fp, r4, #26
   1804c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1804e:	425b      	negs	r3, r3
   18050:	4553      	cmp	r3, sl
   18052:	dc0d      	bgt.n	18070 <_printf_float+0x2e0>
   18054:	464b      	mov	r3, r9
   18056:	e793      	b.n	17f80 <_printf_float+0x1f0>
   18058:	7fefffff 	.word	0x7fefffff
   1805c:	0001c519 	.word	0x0001c519
   18060:	0001c51d 	.word	0x0001c51d
   18064:	0001c521 	.word	0x0001c521
   18068:	0001c525 	.word	0x0001c525
   1806c:	0001c529 	.word	0x0001c529
   18070:	2301      	movs	r3, #1
   18072:	465a      	mov	r2, fp
   18074:	4631      	mov	r1, r6
   18076:	4628      	mov	r0, r5
   18078:	47b8      	blx	r7
   1807a:	3001      	adds	r0, #1
   1807c:	f43f aee3 	beq.w	17e46 <_printf_float+0xb6>
   18080:	f10a 0a01 	add.w	sl, sl, #1
   18084:	e7e2      	b.n	1804c <_printf_float+0x2bc>
   18086:	6da3      	ldr	r3, [r4, #88]	; 0x58
   18088:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
   1808c:	4553      	cmp	r3, sl
   1808e:	bfa8      	it	ge
   18090:	4653      	movge	r3, sl
   18092:	2b00      	cmp	r3, #0
   18094:	4699      	mov	r9, r3
   18096:	dc36      	bgt.n	18106 <_printf_float+0x376>
   18098:	f04f 0b00 	mov.w	fp, #0
   1809c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
   180a0:	f104 021a 	add.w	r2, r4, #26
   180a4:	6da3      	ldr	r3, [r4, #88]	; 0x58
   180a6:	930a      	str	r3, [sp, #40]	; 0x28
   180a8:	eba3 0309 	sub.w	r3, r3, r9
   180ac:	455b      	cmp	r3, fp
   180ae:	dc31      	bgt.n	18114 <_printf_float+0x384>
   180b0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   180b2:	459a      	cmp	sl, r3
   180b4:	dc3a      	bgt.n	1812c <_printf_float+0x39c>
   180b6:	6823      	ldr	r3, [r4, #0]
   180b8:	07da      	lsls	r2, r3, #31
   180ba:	d437      	bmi.n	1812c <_printf_float+0x39c>
   180bc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   180be:	ebaa 0903 	sub.w	r9, sl, r3
   180c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   180c4:	ebaa 0303 	sub.w	r3, sl, r3
   180c8:	4599      	cmp	r9, r3
   180ca:	bfa8      	it	ge
   180cc:	4699      	movge	r9, r3
   180ce:	f1b9 0f00 	cmp.w	r9, #0
   180d2:	dc33      	bgt.n	1813c <_printf_float+0x3ac>
   180d4:	f04f 0800 	mov.w	r8, #0
   180d8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
   180dc:	f104 0b1a 	add.w	fp, r4, #26
   180e0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   180e2:	ebaa 0303 	sub.w	r3, sl, r3
   180e6:	eba3 0309 	sub.w	r3, r3, r9
   180ea:	4543      	cmp	r3, r8
   180ec:	f77f af7a 	ble.w	17fe4 <_printf_float+0x254>
   180f0:	2301      	movs	r3, #1
   180f2:	465a      	mov	r2, fp
   180f4:	4631      	mov	r1, r6
   180f6:	4628      	mov	r0, r5
   180f8:	47b8      	blx	r7
   180fa:	3001      	adds	r0, #1
   180fc:	f43f aea3 	beq.w	17e46 <_printf_float+0xb6>
   18100:	f108 0801 	add.w	r8, r8, #1
   18104:	e7ec      	b.n	180e0 <_printf_float+0x350>
   18106:	4642      	mov	r2, r8
   18108:	4631      	mov	r1, r6
   1810a:	4628      	mov	r0, r5
   1810c:	47b8      	blx	r7
   1810e:	3001      	adds	r0, #1
   18110:	d1c2      	bne.n	18098 <_printf_float+0x308>
   18112:	e698      	b.n	17e46 <_printf_float+0xb6>
   18114:	2301      	movs	r3, #1
   18116:	4631      	mov	r1, r6
   18118:	4628      	mov	r0, r5
   1811a:	920a      	str	r2, [sp, #40]	; 0x28
   1811c:	47b8      	blx	r7
   1811e:	3001      	adds	r0, #1
   18120:	f43f ae91 	beq.w	17e46 <_printf_float+0xb6>
   18124:	f10b 0b01 	add.w	fp, fp, #1
   18128:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1812a:	e7bb      	b.n	180a4 <_printf_float+0x314>
   1812c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   18130:	4631      	mov	r1, r6
   18132:	4628      	mov	r0, r5
   18134:	47b8      	blx	r7
   18136:	3001      	adds	r0, #1
   18138:	d1c0      	bne.n	180bc <_printf_float+0x32c>
   1813a:	e684      	b.n	17e46 <_printf_float+0xb6>
   1813c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1813e:	464b      	mov	r3, r9
   18140:	4631      	mov	r1, r6
   18142:	4628      	mov	r0, r5
   18144:	4442      	add	r2, r8
   18146:	47b8      	blx	r7
   18148:	3001      	adds	r0, #1
   1814a:	d1c3      	bne.n	180d4 <_printf_float+0x344>
   1814c:	e67b      	b.n	17e46 <_printf_float+0xb6>
   1814e:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
   18152:	f1ba 0f01 	cmp.w	sl, #1
   18156:	dc01      	bgt.n	1815c <_printf_float+0x3cc>
   18158:	07db      	lsls	r3, r3, #31
   1815a:	d536      	bpl.n	181ca <_printf_float+0x43a>
   1815c:	2301      	movs	r3, #1
   1815e:	4642      	mov	r2, r8
   18160:	4631      	mov	r1, r6
   18162:	4628      	mov	r0, r5
   18164:	47b8      	blx	r7
   18166:	3001      	adds	r0, #1
   18168:	f43f ae6d 	beq.w	17e46 <_printf_float+0xb6>
   1816c:	4631      	mov	r1, r6
   1816e:	4628      	mov	r0, r5
   18170:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   18174:	47b8      	blx	r7
   18176:	3001      	adds	r0, #1
   18178:	f43f ae65 	beq.w	17e46 <_printf_float+0xb6>
   1817c:	2200      	movs	r2, #0
   1817e:	2300      	movs	r3, #0
   18180:	f10a 3aff 	add.w	sl, sl, #4294967295
   18184:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
   18188:	f7f8 fcbe 	bl	10b08 <__aeabi_dcmpeq>
   1818c:	b9c0      	cbnz	r0, 181c0 <_printf_float+0x430>
   1818e:	4653      	mov	r3, sl
   18190:	f108 0201 	add.w	r2, r8, #1
   18194:	4631      	mov	r1, r6
   18196:	4628      	mov	r0, r5
   18198:	47b8      	blx	r7
   1819a:	3001      	adds	r0, #1
   1819c:	d10c      	bne.n	181b8 <_printf_float+0x428>
   1819e:	e652      	b.n	17e46 <_printf_float+0xb6>
   181a0:	2301      	movs	r3, #1
   181a2:	465a      	mov	r2, fp
   181a4:	4631      	mov	r1, r6
   181a6:	4628      	mov	r0, r5
   181a8:	47b8      	blx	r7
   181aa:	3001      	adds	r0, #1
   181ac:	f43f ae4b 	beq.w	17e46 <_printf_float+0xb6>
   181b0:	f108 0801 	add.w	r8, r8, #1
   181b4:	45d0      	cmp	r8, sl
   181b6:	dbf3      	blt.n	181a0 <_printf_float+0x410>
   181b8:	464b      	mov	r3, r9
   181ba:	f104 0250 	add.w	r2, r4, #80	; 0x50
   181be:	e6e0      	b.n	17f82 <_printf_float+0x1f2>
   181c0:	f04f 0800 	mov.w	r8, #0
   181c4:	f104 0b1a 	add.w	fp, r4, #26
   181c8:	e7f4      	b.n	181b4 <_printf_float+0x424>
   181ca:	2301      	movs	r3, #1
   181cc:	4642      	mov	r2, r8
   181ce:	e7e1      	b.n	18194 <_printf_float+0x404>
   181d0:	2301      	movs	r3, #1
   181d2:	464a      	mov	r2, r9
   181d4:	4631      	mov	r1, r6
   181d6:	4628      	mov	r0, r5
   181d8:	47b8      	blx	r7
   181da:	3001      	adds	r0, #1
   181dc:	f43f ae33 	beq.w	17e46 <_printf_float+0xb6>
   181e0:	f108 0801 	add.w	r8, r8, #1
   181e4:	68e3      	ldr	r3, [r4, #12]
   181e6:	990f      	ldr	r1, [sp, #60]	; 0x3c
   181e8:	1a5b      	subs	r3, r3, r1
   181ea:	4543      	cmp	r3, r8
   181ec:	dcf0      	bgt.n	181d0 <_printf_float+0x440>
   181ee:	e6fd      	b.n	17fec <_printf_float+0x25c>
   181f0:	f04f 0800 	mov.w	r8, #0
   181f4:	f104 0919 	add.w	r9, r4, #25
   181f8:	e7f4      	b.n	181e4 <_printf_float+0x454>
   181fa:	bf00      	nop

000181fc <_printf_i>:
   181fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   18200:	7e0f      	ldrb	r7, [r1, #24]
   18202:	4691      	mov	r9, r2
   18204:	4680      	mov	r8, r0
   18206:	460c      	mov	r4, r1
   18208:	2f78      	cmp	r7, #120	; 0x78
   1820a:	469a      	mov	sl, r3
   1820c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   1820e:	f101 0243 	add.w	r2, r1, #67	; 0x43
   18212:	d807      	bhi.n	18224 <_printf_i+0x28>
   18214:	2f62      	cmp	r7, #98	; 0x62
   18216:	d80a      	bhi.n	1822e <_printf_i+0x32>
   18218:	2f00      	cmp	r7, #0
   1821a:	f000 80e0 	beq.w	183de <_printf_i+0x1e2>
   1821e:	2f58      	cmp	r7, #88	; 0x58
   18220:	f000 80bb 	beq.w	1839a <_printf_i+0x19e>
   18224:	f104 0642 	add.w	r6, r4, #66	; 0x42
   18228:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
   1822c:	e03a      	b.n	182a4 <_printf_i+0xa8>
   1822e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
   18232:	2b15      	cmp	r3, #21
   18234:	d8f6      	bhi.n	18224 <_printf_i+0x28>
   18236:	a101      	add	r1, pc, #4	; (adr r1, 1823c <_printf_i+0x40>)
   18238:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
   1823c:	00018295 	.word	0x00018295
   18240:	000182a9 	.word	0x000182a9
   18244:	00018225 	.word	0x00018225
   18248:	00018225 	.word	0x00018225
   1824c:	00018225 	.word	0x00018225
   18250:	00018225 	.word	0x00018225
   18254:	000182a9 	.word	0x000182a9
   18258:	00018225 	.word	0x00018225
   1825c:	00018225 	.word	0x00018225
   18260:	00018225 	.word	0x00018225
   18264:	00018225 	.word	0x00018225
   18268:	000183c5 	.word	0x000183c5
   1826c:	00018339 	.word	0x00018339
   18270:	0001837b 	.word	0x0001837b
   18274:	00018225 	.word	0x00018225
   18278:	00018225 	.word	0x00018225
   1827c:	000183e7 	.word	0x000183e7
   18280:	00018225 	.word	0x00018225
   18284:	00018339 	.word	0x00018339
   18288:	00018225 	.word	0x00018225
   1828c:	00018225 	.word	0x00018225
   18290:	00018383 	.word	0x00018383
   18294:	682b      	ldr	r3, [r5, #0]
   18296:	f104 0642 	add.w	r6, r4, #66	; 0x42
   1829a:	1d1a      	adds	r2, r3, #4
   1829c:	681b      	ldr	r3, [r3, #0]
   1829e:	602a      	str	r2, [r5, #0]
   182a0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
   182a4:	2301      	movs	r3, #1
   182a6:	e0ab      	b.n	18400 <_printf_i+0x204>
   182a8:	6823      	ldr	r3, [r4, #0]
   182aa:	6829      	ldr	r1, [r5, #0]
   182ac:	061f      	lsls	r7, r3, #24
   182ae:	f101 0004 	add.w	r0, r1, #4
   182b2:	6028      	str	r0, [r5, #0]
   182b4:	d501      	bpl.n	182ba <_printf_i+0xbe>
   182b6:	680d      	ldr	r5, [r1, #0]
   182b8:	e003      	b.n	182c2 <_printf_i+0xc6>
   182ba:	065e      	lsls	r6, r3, #25
   182bc:	d5fb      	bpl.n	182b6 <_printf_i+0xba>
   182be:	f9b1 5000 	ldrsh.w	r5, [r1]
   182c2:	2d00      	cmp	r5, #0
   182c4:	6861      	ldr	r1, [r4, #4]
   182c6:	da7a      	bge.n	183be <_printf_i+0x1c2>
   182c8:	202d      	movs	r0, #45	; 0x2d
   182ca:	2900      	cmp	r1, #0
   182cc:	60a1      	str	r1, [r4, #8]
   182ce:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
   182d2:	da2d      	bge.n	18330 <_printf_i+0x134>
   182d4:	426d      	negs	r5, r5
   182d6:	485e      	ldr	r0, [pc, #376]	; (18450 <_printf_i+0x254>)
   182d8:	230a      	movs	r3, #10
   182da:	4616      	mov	r6, r2
   182dc:	fbb5 f1f3 	udiv	r1, r5, r3
   182e0:	fb03 5711 	mls	r7, r3, r1, r5
   182e4:	5dc7      	ldrb	r7, [r0, r7]
   182e6:	f806 7d01 	strb.w	r7, [r6, #-1]!
   182ea:	462f      	mov	r7, r5
   182ec:	460d      	mov	r5, r1
   182ee:	42bb      	cmp	r3, r7
   182f0:	d9f4      	bls.n	182dc <_printf_i+0xe0>
   182f2:	2b08      	cmp	r3, #8
   182f4:	d10b      	bne.n	1830e <_printf_i+0x112>
   182f6:	6823      	ldr	r3, [r4, #0]
   182f8:	07df      	lsls	r7, r3, #31
   182fa:	d508      	bpl.n	1830e <_printf_i+0x112>
   182fc:	6923      	ldr	r3, [r4, #16]
   182fe:	6861      	ldr	r1, [r4, #4]
   18300:	4299      	cmp	r1, r3
   18302:	bfde      	ittt	le
   18304:	2330      	movle	r3, #48	; 0x30
   18306:	f806 3c01 	strble.w	r3, [r6, #-1]
   1830a:	f106 36ff 	addle.w	r6, r6, #4294967295
   1830e:	1b92      	subs	r2, r2, r6
   18310:	6122      	str	r2, [r4, #16]
   18312:	464b      	mov	r3, r9
   18314:	aa03      	add	r2, sp, #12
   18316:	4621      	mov	r1, r4
   18318:	4640      	mov	r0, r8
   1831a:	f8cd a000 	str.w	sl, [sp]
   1831e:	f002 ff12 	bl	1b146 <_printf_common>
   18322:	3001      	adds	r0, #1
   18324:	d171      	bne.n	1840a <_printf_i+0x20e>
   18326:	f04f 30ff 	mov.w	r0, #4294967295
   1832a:	b004      	add	sp, #16
   1832c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   18330:	f023 0304 	bic.w	r3, r3, #4
   18334:	6023      	str	r3, [r4, #0]
   18336:	e7cd      	b.n	182d4 <_printf_i+0xd8>
   18338:	682b      	ldr	r3, [r5, #0]
   1833a:	6820      	ldr	r0, [r4, #0]
   1833c:	1d19      	adds	r1, r3, #4
   1833e:	6029      	str	r1, [r5, #0]
   18340:	0605      	lsls	r5, r0, #24
   18342:	d501      	bpl.n	18348 <_printf_i+0x14c>
   18344:	681d      	ldr	r5, [r3, #0]
   18346:	e002      	b.n	1834e <_printf_i+0x152>
   18348:	0641      	lsls	r1, r0, #25
   1834a:	d5fb      	bpl.n	18344 <_printf_i+0x148>
   1834c:	881d      	ldrh	r5, [r3, #0]
   1834e:	2f6f      	cmp	r7, #111	; 0x6f
   18350:	483f      	ldr	r0, [pc, #252]	; (18450 <_printf_i+0x254>)
   18352:	bf14      	ite	ne
   18354:	230a      	movne	r3, #10
   18356:	2308      	moveq	r3, #8
   18358:	2100      	movs	r1, #0
   1835a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
   1835e:	6866      	ldr	r6, [r4, #4]
   18360:	2e00      	cmp	r6, #0
   18362:	60a6      	str	r6, [r4, #8]
   18364:	dbb9      	blt.n	182da <_printf_i+0xde>
   18366:	6821      	ldr	r1, [r4, #0]
   18368:	f021 0104 	bic.w	r1, r1, #4
   1836c:	6021      	str	r1, [r4, #0]
   1836e:	2d00      	cmp	r5, #0
   18370:	d1b3      	bne.n	182da <_printf_i+0xde>
   18372:	2e00      	cmp	r6, #0
   18374:	d1b1      	bne.n	182da <_printf_i+0xde>
   18376:	4616      	mov	r6, r2
   18378:	e7bb      	b.n	182f2 <_printf_i+0xf6>
   1837a:	6823      	ldr	r3, [r4, #0]
   1837c:	f043 0320 	orr.w	r3, r3, #32
   18380:	6023      	str	r3, [r4, #0]
   18382:	2778      	movs	r7, #120	; 0x78
   18384:	4833      	ldr	r0, [pc, #204]	; (18454 <_printf_i+0x258>)
   18386:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
   1838a:	6829      	ldr	r1, [r5, #0]
   1838c:	6823      	ldr	r3, [r4, #0]
   1838e:	1d0e      	adds	r6, r1, #4
   18390:	602e      	str	r6, [r5, #0]
   18392:	061e      	lsls	r6, r3, #24
   18394:	d503      	bpl.n	1839e <_printf_i+0x1a2>
   18396:	680d      	ldr	r5, [r1, #0]
   18398:	e004      	b.n	183a4 <_printf_i+0x1a8>
   1839a:	482d      	ldr	r0, [pc, #180]	; (18450 <_printf_i+0x254>)
   1839c:	e7f3      	b.n	18386 <_printf_i+0x18a>
   1839e:	065d      	lsls	r5, r3, #25
   183a0:	d5f9      	bpl.n	18396 <_printf_i+0x19a>
   183a2:	880d      	ldrh	r5, [r1, #0]
   183a4:	07d9      	lsls	r1, r3, #31
   183a6:	bf44      	itt	mi
   183a8:	f043 0320 	orrmi.w	r3, r3, #32
   183ac:	6023      	strmi	r3, [r4, #0]
   183ae:	b10d      	cbz	r5, 183b4 <_printf_i+0x1b8>
   183b0:	2310      	movs	r3, #16
   183b2:	e7d1      	b.n	18358 <_printf_i+0x15c>
   183b4:	6823      	ldr	r3, [r4, #0]
   183b6:	f023 0320 	bic.w	r3, r3, #32
   183ba:	6023      	str	r3, [r4, #0]
   183bc:	e7f8      	b.n	183b0 <_printf_i+0x1b4>
   183be:	4824      	ldr	r0, [pc, #144]	; (18450 <_printf_i+0x254>)
   183c0:	230a      	movs	r3, #10
   183c2:	e7cc      	b.n	1835e <_printf_i+0x162>
   183c4:	682b      	ldr	r3, [r5, #0]
   183c6:	6826      	ldr	r6, [r4, #0]
   183c8:	1d18      	adds	r0, r3, #4
   183ca:	6961      	ldr	r1, [r4, #20]
   183cc:	6028      	str	r0, [r5, #0]
   183ce:	0635      	lsls	r5, r6, #24
   183d0:	681b      	ldr	r3, [r3, #0]
   183d2:	d501      	bpl.n	183d8 <_printf_i+0x1dc>
   183d4:	6019      	str	r1, [r3, #0]
   183d6:	e002      	b.n	183de <_printf_i+0x1e2>
   183d8:	0670      	lsls	r0, r6, #25
   183da:	d5fb      	bpl.n	183d4 <_printf_i+0x1d8>
   183dc:	8019      	strh	r1, [r3, #0]
   183de:	2300      	movs	r3, #0
   183e0:	4616      	mov	r6, r2
   183e2:	6123      	str	r3, [r4, #16]
   183e4:	e795      	b.n	18312 <_printf_i+0x116>
   183e6:	682b      	ldr	r3, [r5, #0]
   183e8:	2100      	movs	r1, #0
   183ea:	1d1a      	adds	r2, r3, #4
   183ec:	602a      	str	r2, [r5, #0]
   183ee:	681e      	ldr	r6, [r3, #0]
   183f0:	6862      	ldr	r2, [r4, #4]
   183f2:	4630      	mov	r0, r6
   183f4:	f002 ffe7 	bl	1b3c6 <memchr>
   183f8:	b108      	cbz	r0, 183fe <_printf_i+0x202>
   183fa:	1b80      	subs	r0, r0, r6
   183fc:	6060      	str	r0, [r4, #4]
   183fe:	6863      	ldr	r3, [r4, #4]
   18400:	6123      	str	r3, [r4, #16]
   18402:	2300      	movs	r3, #0
   18404:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   18408:	e783      	b.n	18312 <_printf_i+0x116>
   1840a:	6923      	ldr	r3, [r4, #16]
   1840c:	4632      	mov	r2, r6
   1840e:	4649      	mov	r1, r9
   18410:	4640      	mov	r0, r8
   18412:	47d0      	blx	sl
   18414:	3001      	adds	r0, #1
   18416:	d086      	beq.n	18326 <_printf_i+0x12a>
   18418:	6823      	ldr	r3, [r4, #0]
   1841a:	079b      	lsls	r3, r3, #30
   1841c:	d414      	bmi.n	18448 <_printf_i+0x24c>
   1841e:	68e0      	ldr	r0, [r4, #12]
   18420:	9b03      	ldr	r3, [sp, #12]
   18422:	4298      	cmp	r0, r3
   18424:	bfb8      	it	lt
   18426:	4618      	movlt	r0, r3
   18428:	e77f      	b.n	1832a <_printf_i+0x12e>
   1842a:	2301      	movs	r3, #1
   1842c:	4632      	mov	r2, r6
   1842e:	4649      	mov	r1, r9
   18430:	4640      	mov	r0, r8
   18432:	47d0      	blx	sl
   18434:	3001      	adds	r0, #1
   18436:	f43f af76 	beq.w	18326 <_printf_i+0x12a>
   1843a:	3501      	adds	r5, #1
   1843c:	68e3      	ldr	r3, [r4, #12]
   1843e:	9903      	ldr	r1, [sp, #12]
   18440:	1a5b      	subs	r3, r3, r1
   18442:	42ab      	cmp	r3, r5
   18444:	dcf1      	bgt.n	1842a <_printf_i+0x22e>
   18446:	e7ea      	b.n	1841e <_printf_i+0x222>
   18448:	2500      	movs	r5, #0
   1844a:	f104 0619 	add.w	r6, r4, #25
   1844e:	e7f5      	b.n	1843c <_printf_i+0x240>
   18450:	0001c52b 	.word	0x0001c52b
   18454:	0001c53c 	.word	0x0001c53c

00018458 <iprintf>:
   18458:	b40f      	push	{r0, r1, r2, r3}
   1845a:	4b0a      	ldr	r3, [pc, #40]	; (18484 <iprintf+0x2c>)
   1845c:	b513      	push	{r0, r1, r4, lr}
   1845e:	681c      	ldr	r4, [r3, #0]
   18460:	b124      	cbz	r4, 1846c <iprintf+0x14>
   18462:	69a3      	ldr	r3, [r4, #24]
   18464:	b913      	cbnz	r3, 1846c <iprintf+0x14>
   18466:	4620      	mov	r0, r4
   18468:	f000 f860 	bl	1852c <__sinit>
   1846c:	ab05      	add	r3, sp, #20
   1846e:	9a04      	ldr	r2, [sp, #16]
   18470:	68a1      	ldr	r1, [r4, #8]
   18472:	4620      	mov	r0, r4
   18474:	9301      	str	r3, [sp, #4]
   18476:	f000 fc05 	bl	18c84 <_vfiprintf_r>
   1847a:	b002      	add	sp, #8
   1847c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   18480:	b004      	add	sp, #16
   18482:	4770      	bx	lr
   18484:	20008140 	.word	0x20008140

00018488 <_sbrk_r>:
   18488:	b538      	push	{r3, r4, r5, lr}
   1848a:	2300      	movs	r3, #0
   1848c:	4d05      	ldr	r5, [pc, #20]	; (184a4 <_sbrk_r+0x1c>)
   1848e:	4604      	mov	r4, r0
   18490:	4608      	mov	r0, r1
   18492:	602b      	str	r3, [r5, #0]
   18494:	f7fb ff6e 	bl	14374 <_sbrk>
   18498:	1c43      	adds	r3, r0, #1
   1849a:	d102      	bne.n	184a2 <_sbrk_r+0x1a>
   1849c:	682b      	ldr	r3, [r5, #0]
   1849e:	b103      	cbz	r3, 184a2 <_sbrk_r+0x1a>
   184a0:	6023      	str	r3, [r4, #0]
   184a2:	bd38      	pop	{r3, r4, r5, pc}
   184a4:	2000869c 	.word	0x2000869c

000184a8 <std>:
   184a8:	2300      	movs	r3, #0
   184aa:	b510      	push	{r4, lr}
   184ac:	4604      	mov	r4, r0
   184ae:	6083      	str	r3, [r0, #8]
   184b0:	8181      	strh	r1, [r0, #12]
   184b2:	4619      	mov	r1, r3
   184b4:	6643      	str	r3, [r0, #100]	; 0x64
   184b6:	81c2      	strh	r2, [r0, #14]
   184b8:	2208      	movs	r2, #8
   184ba:	6183      	str	r3, [r0, #24]
   184bc:	e9c0 3300 	strd	r3, r3, [r0]
   184c0:	e9c0 3304 	strd	r3, r3, [r0, #16]
   184c4:	305c      	adds	r0, #92	; 0x5c
   184c6:	f002 fd88 	bl	1afda <memset>
   184ca:	4b05      	ldr	r3, [pc, #20]	; (184e0 <std+0x38>)
   184cc:	6224      	str	r4, [r4, #32]
   184ce:	6263      	str	r3, [r4, #36]	; 0x24
   184d0:	4b04      	ldr	r3, [pc, #16]	; (184e4 <std+0x3c>)
   184d2:	62a3      	str	r3, [r4, #40]	; 0x28
   184d4:	4b04      	ldr	r3, [pc, #16]	; (184e8 <std+0x40>)
   184d6:	62e3      	str	r3, [r4, #44]	; 0x2c
   184d8:	4b04      	ldr	r3, [pc, #16]	; (184ec <std+0x44>)
   184da:	6323      	str	r3, [r4, #48]	; 0x30
   184dc:	bd10      	pop	{r4, pc}
   184de:	bf00      	nop
   184e0:	0001b505 	.word	0x0001b505
   184e4:	0001b527 	.word	0x0001b527
   184e8:	0001b55f 	.word	0x0001b55f
   184ec:	0001b583 	.word	0x0001b583

000184f0 <_cleanup_r>:
   184f0:	4901      	ldr	r1, [pc, #4]	; (184f8 <_cleanup_r+0x8>)
   184f2:	f002 bf49 	b.w	1b388 <_fwalk_reent>
   184f6:	bf00      	nop
   184f8:	000190d9 	.word	0x000190d9

000184fc <__sfp_lock_acquire>:
   184fc:	4801      	ldr	r0, [pc, #4]	; (18504 <__sfp_lock_acquire+0x8>)
   184fe:	f001 bd4f 	b.w	19fa0 <__retarget_lock_acquire_recursive>
   18502:	bf00      	nop
   18504:	20008334 	.word	0x20008334

00018508 <__sfp_lock_release>:
   18508:	4801      	ldr	r0, [pc, #4]	; (18510 <__sfp_lock_release+0x8>)
   1850a:	f001 bd51 	b.w	19fb0 <__retarget_lock_release_recursive>
   1850e:	bf00      	nop
   18510:	20008334 	.word	0x20008334

00018514 <__sinit_lock_acquire>:
   18514:	4801      	ldr	r0, [pc, #4]	; (1851c <__sinit_lock_acquire+0x8>)
   18516:	f001 bd43 	b.w	19fa0 <__retarget_lock_acquire_recursive>
   1851a:	bf00      	nop
   1851c:	20008348 	.word	0x20008348

00018520 <__sinit_lock_release>:
   18520:	4801      	ldr	r0, [pc, #4]	; (18528 <__sinit_lock_release+0x8>)
   18522:	f001 bd45 	b.w	19fb0 <__retarget_lock_release_recursive>
   18526:	bf00      	nop
   18528:	20008348 	.word	0x20008348

0001852c <__sinit>:
   1852c:	b510      	push	{r4, lr}
   1852e:	4604      	mov	r4, r0
   18530:	f7ff fff0 	bl	18514 <__sinit_lock_acquire>
   18534:	69a3      	ldr	r3, [r4, #24]
   18536:	b11b      	cbz	r3, 18540 <__sinit+0x14>
   18538:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1853c:	f7ff bff0 	b.w	18520 <__sinit_lock_release>
   18540:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
   18544:	6523      	str	r3, [r4, #80]	; 0x50
   18546:	4620      	mov	r0, r4
   18548:	4b12      	ldr	r3, [pc, #72]	; (18594 <__sinit+0x68>)
   1854a:	4a13      	ldr	r2, [pc, #76]	; (18598 <__sinit+0x6c>)
   1854c:	681b      	ldr	r3, [r3, #0]
   1854e:	62a2      	str	r2, [r4, #40]	; 0x28
   18550:	42a3      	cmp	r3, r4
   18552:	bf04      	itt	eq
   18554:	2301      	moveq	r3, #1
   18556:	61a3      	streq	r3, [r4, #24]
   18558:	f000 f820 	bl	1859c <__sfp>
   1855c:	6060      	str	r0, [r4, #4]
   1855e:	4620      	mov	r0, r4
   18560:	f000 f81c 	bl	1859c <__sfp>
   18564:	60a0      	str	r0, [r4, #8]
   18566:	4620      	mov	r0, r4
   18568:	f000 f818 	bl	1859c <__sfp>
   1856c:	2200      	movs	r2, #0
   1856e:	2104      	movs	r1, #4
   18570:	60e0      	str	r0, [r4, #12]
   18572:	6860      	ldr	r0, [r4, #4]
   18574:	f7ff ff98 	bl	184a8 <std>
   18578:	2201      	movs	r2, #1
   1857a:	2109      	movs	r1, #9
   1857c:	68a0      	ldr	r0, [r4, #8]
   1857e:	f7ff ff93 	bl	184a8 <std>
   18582:	2202      	movs	r2, #2
   18584:	2112      	movs	r1, #18
   18586:	68e0      	ldr	r0, [r4, #12]
   18588:	f7ff ff8e 	bl	184a8 <std>
   1858c:	2301      	movs	r3, #1
   1858e:	61a3      	str	r3, [r4, #24]
   18590:	e7d2      	b.n	18538 <__sinit+0xc>
   18592:	bf00      	nop
   18594:	0001c3a8 	.word	0x0001c3a8
   18598:	000184f1 	.word	0x000184f1

0001859c <__sfp>:
   1859c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1859e:	4607      	mov	r7, r0
   185a0:	f7ff ffac 	bl	184fc <__sfp_lock_acquire>
   185a4:	4b1e      	ldr	r3, [pc, #120]	; (18620 <__sfp+0x84>)
   185a6:	681e      	ldr	r6, [r3, #0]
   185a8:	69b3      	ldr	r3, [r6, #24]
   185aa:	b913      	cbnz	r3, 185b2 <__sfp+0x16>
   185ac:	4630      	mov	r0, r6
   185ae:	f7ff ffbd 	bl	1852c <__sinit>
   185b2:	3648      	adds	r6, #72	; 0x48
   185b4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
   185b8:	3b01      	subs	r3, #1
   185ba:	d503      	bpl.n	185c4 <__sfp+0x28>
   185bc:	6833      	ldr	r3, [r6, #0]
   185be:	b30b      	cbz	r3, 18604 <__sfp+0x68>
   185c0:	6836      	ldr	r6, [r6, #0]
   185c2:	e7f7      	b.n	185b4 <__sfp+0x18>
   185c4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
   185c8:	b9d5      	cbnz	r5, 18600 <__sfp+0x64>
   185ca:	4b16      	ldr	r3, [pc, #88]	; (18624 <__sfp+0x88>)
   185cc:	f104 0058 	add.w	r0, r4, #88	; 0x58
   185d0:	6665      	str	r5, [r4, #100]	; 0x64
   185d2:	60e3      	str	r3, [r4, #12]
   185d4:	f001 fcdb 	bl	19f8e <__retarget_lock_init_recursive>
   185d8:	f7ff ff96 	bl	18508 <__sfp_lock_release>
   185dc:	2208      	movs	r2, #8
   185de:	4629      	mov	r1, r5
   185e0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
   185e4:	6025      	str	r5, [r4, #0]
   185e6:	61a5      	str	r5, [r4, #24]
   185e8:	e9c4 5501 	strd	r5, r5, [r4, #4]
   185ec:	e9c4 5504 	strd	r5, r5, [r4, #16]
   185f0:	f002 fcf3 	bl	1afda <memset>
   185f4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
   185f8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
   185fc:	4620      	mov	r0, r4
   185fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   18600:	3468      	adds	r4, #104	; 0x68
   18602:	e7d9      	b.n	185b8 <__sfp+0x1c>
   18604:	2104      	movs	r1, #4
   18606:	4638      	mov	r0, r7
   18608:	f002 fea8 	bl	1b35c <__sfmoreglue>
   1860c:	4604      	mov	r4, r0
   1860e:	6030      	str	r0, [r6, #0]
   18610:	2800      	cmp	r0, #0
   18612:	d1d5      	bne.n	185c0 <__sfp+0x24>
   18614:	f7ff ff78 	bl	18508 <__sfp_lock_release>
   18618:	230c      	movs	r3, #12
   1861a:	603b      	str	r3, [r7, #0]
   1861c:	e7ee      	b.n	185fc <__sfp+0x60>
   1861e:	bf00      	nop
   18620:	0001c3a8 	.word	0x0001c3a8
   18624:	ffff0001 	.word	0xffff0001

00018628 <_localeconv_r>:
   18628:	4800      	ldr	r0, [pc, #0]	; (1862c <_localeconv_r+0x4>)
   1862a:	4770      	bx	lr
   1862c:	20008294 	.word	0x20008294

00018630 <__malloc_lock>:
   18630:	4801      	ldr	r0, [pc, #4]	; (18638 <__malloc_lock+0x8>)
   18632:	f001 bcb5 	b.w	19fa0 <__retarget_lock_acquire_recursive>
   18636:	bf00      	nop
   18638:	20008320 	.word	0x20008320

0001863c <__malloc_unlock>:
   1863c:	4801      	ldr	r0, [pc, #4]	; (18644 <__malloc_unlock+0x8>)
   1863e:	f001 bcb7 	b.w	19fb0 <__retarget_lock_release_recursive>
   18642:	bf00      	nop
   18644:	20008320 	.word	0x20008320

00018648 <_Balloc>:
   18648:	b570      	push	{r4, r5, r6, lr}
   1864a:	6a46      	ldr	r6, [r0, #36]	; 0x24
   1864c:	4604      	mov	r4, r0
   1864e:	460d      	mov	r5, r1
   18650:	b976      	cbnz	r6, 18670 <_Balloc+0x28>
   18652:	2010      	movs	r0, #16
   18654:	f7ff faf0 	bl	17c38 <malloc>
   18658:	4602      	mov	r2, r0
   1865a:	6260      	str	r0, [r4, #36]	; 0x24
   1865c:	b920      	cbnz	r0, 18668 <_Balloc+0x20>
   1865e:	4b18      	ldr	r3, [pc, #96]	; (186c0 <_Balloc+0x78>)
   18660:	2166      	movs	r1, #102	; 0x66
   18662:	4818      	ldr	r0, [pc, #96]	; (186c4 <_Balloc+0x7c>)
   18664:	f000 fd0a 	bl	1907c <__assert_func>
   18668:	e9c0 6601 	strd	r6, r6, [r0, #4]
   1866c:	6006      	str	r6, [r0, #0]
   1866e:	60c6      	str	r6, [r0, #12]
   18670:	6a66      	ldr	r6, [r4, #36]	; 0x24
   18672:	68f3      	ldr	r3, [r6, #12]
   18674:	b183      	cbz	r3, 18698 <_Balloc+0x50>
   18676:	6a63      	ldr	r3, [r4, #36]	; 0x24
   18678:	68db      	ldr	r3, [r3, #12]
   1867a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   1867e:	b9b8      	cbnz	r0, 186b0 <_Balloc+0x68>
   18680:	2101      	movs	r1, #1
   18682:	4620      	mov	r0, r4
   18684:	fa01 f605 	lsl.w	r6, r1, r5
   18688:	1d72      	adds	r2, r6, #5
   1868a:	0092      	lsls	r2, r2, #2
   1868c:	f002 fcad 	bl	1afea <_calloc_r>
   18690:	b160      	cbz	r0, 186ac <_Balloc+0x64>
   18692:	e9c0 5601 	strd	r5, r6, [r0, #4]
   18696:	e00e      	b.n	186b6 <_Balloc+0x6e>
   18698:	2221      	movs	r2, #33	; 0x21
   1869a:	2104      	movs	r1, #4
   1869c:	4620      	mov	r0, r4
   1869e:	f002 fca4 	bl	1afea <_calloc_r>
   186a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
   186a4:	60f0      	str	r0, [r6, #12]
   186a6:	68db      	ldr	r3, [r3, #12]
   186a8:	2b00      	cmp	r3, #0
   186aa:	d1e4      	bne.n	18676 <_Balloc+0x2e>
   186ac:	2000      	movs	r0, #0
   186ae:	bd70      	pop	{r4, r5, r6, pc}
   186b0:	6802      	ldr	r2, [r0, #0]
   186b2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   186b6:	2300      	movs	r3, #0
   186b8:	e9c0 3303 	strd	r3, r3, [r0, #12]
   186bc:	e7f7      	b.n	186ae <_Balloc+0x66>
   186be:	bf00      	nop
   186c0:	0001c55a 	.word	0x0001c55a
   186c4:	0001c5f6 	.word	0x0001c5f6

000186c8 <_Bfree>:
   186c8:	b570      	push	{r4, r5, r6, lr}
   186ca:	6a46      	ldr	r6, [r0, #36]	; 0x24
   186cc:	4605      	mov	r5, r0
   186ce:	460c      	mov	r4, r1
   186d0:	b976      	cbnz	r6, 186f0 <_Bfree+0x28>
   186d2:	2010      	movs	r0, #16
   186d4:	f7ff fab0 	bl	17c38 <malloc>
   186d8:	4602      	mov	r2, r0
   186da:	6268      	str	r0, [r5, #36]	; 0x24
   186dc:	b920      	cbnz	r0, 186e8 <_Bfree+0x20>
   186de:	4b09      	ldr	r3, [pc, #36]	; (18704 <_Bfree+0x3c>)
   186e0:	218a      	movs	r1, #138	; 0x8a
   186e2:	4809      	ldr	r0, [pc, #36]	; (18708 <_Bfree+0x40>)
   186e4:	f000 fcca 	bl	1907c <__assert_func>
   186e8:	e9c0 6601 	strd	r6, r6, [r0, #4]
   186ec:	6006      	str	r6, [r0, #0]
   186ee:	60c6      	str	r6, [r0, #12]
   186f0:	b13c      	cbz	r4, 18702 <_Bfree+0x3a>
   186f2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   186f4:	6862      	ldr	r2, [r4, #4]
   186f6:	68db      	ldr	r3, [r3, #12]
   186f8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   186fc:	6021      	str	r1, [r4, #0]
   186fe:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   18702:	bd70      	pop	{r4, r5, r6, pc}
   18704:	0001c55a 	.word	0x0001c55a
   18708:	0001c5f6 	.word	0x0001c5f6

0001870c <__multadd>:
   1870c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18710:	f101 0c14 	add.w	ip, r1, #20
   18714:	4607      	mov	r7, r0
   18716:	460c      	mov	r4, r1
   18718:	461e      	mov	r6, r3
   1871a:	690d      	ldr	r5, [r1, #16]
   1871c:	2000      	movs	r0, #0
   1871e:	f8dc 3000 	ldr.w	r3, [ip]
   18722:	3001      	adds	r0, #1
   18724:	b299      	uxth	r1, r3
   18726:	4285      	cmp	r5, r0
   18728:	fb02 6101 	mla	r1, r2, r1, r6
   1872c:	ea4f 4613 	mov.w	r6, r3, lsr #16
   18730:	ea4f 4311 	mov.w	r3, r1, lsr #16
   18734:	b289      	uxth	r1, r1
   18736:	fb02 3306 	mla	r3, r2, r6, r3
   1873a:	eb01 4103 	add.w	r1, r1, r3, lsl #16
   1873e:	ea4f 4613 	mov.w	r6, r3, lsr #16
   18742:	f84c 1b04 	str.w	r1, [ip], #4
   18746:	dcea      	bgt.n	1871e <__multadd+0x12>
   18748:	b30e      	cbz	r6, 1878e <__multadd+0x82>
   1874a:	68a3      	ldr	r3, [r4, #8]
   1874c:	42ab      	cmp	r3, r5
   1874e:	dc19      	bgt.n	18784 <__multadd+0x78>
   18750:	6861      	ldr	r1, [r4, #4]
   18752:	4638      	mov	r0, r7
   18754:	3101      	adds	r1, #1
   18756:	f7ff ff77 	bl	18648 <_Balloc>
   1875a:	4680      	mov	r8, r0
   1875c:	b928      	cbnz	r0, 1876a <__multadd+0x5e>
   1875e:	4602      	mov	r2, r0
   18760:	4b0c      	ldr	r3, [pc, #48]	; (18794 <__multadd+0x88>)
   18762:	21b5      	movs	r1, #181	; 0xb5
   18764:	480c      	ldr	r0, [pc, #48]	; (18798 <__multadd+0x8c>)
   18766:	f000 fc89 	bl	1907c <__assert_func>
   1876a:	6922      	ldr	r2, [r4, #16]
   1876c:	f104 010c 	add.w	r1, r4, #12
   18770:	300c      	adds	r0, #12
   18772:	3202      	adds	r2, #2
   18774:	0092      	lsls	r2, r2, #2
   18776:	f002 fc23 	bl	1afc0 <memcpy>
   1877a:	4621      	mov	r1, r4
   1877c:	4644      	mov	r4, r8
   1877e:	4638      	mov	r0, r7
   18780:	f7ff ffa2 	bl	186c8 <_Bfree>
   18784:	eb04 0385 	add.w	r3, r4, r5, lsl #2
   18788:	3501      	adds	r5, #1
   1878a:	615e      	str	r6, [r3, #20]
   1878c:	6125      	str	r5, [r4, #16]
   1878e:	4620      	mov	r0, r4
   18790:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   18794:	0001c5e5 	.word	0x0001c5e5
   18798:	0001c5f6 	.word	0x0001c5f6

0001879c <__i2b>:
   1879c:	b510      	push	{r4, lr}
   1879e:	460c      	mov	r4, r1
   187a0:	2101      	movs	r1, #1
   187a2:	f7ff ff51 	bl	18648 <_Balloc>
   187a6:	4602      	mov	r2, r0
   187a8:	b928      	cbnz	r0, 187b6 <__i2b+0x1a>
   187aa:	4b05      	ldr	r3, [pc, #20]	; (187c0 <__i2b+0x24>)
   187ac:	f44f 71a0 	mov.w	r1, #320	; 0x140
   187b0:	4804      	ldr	r0, [pc, #16]	; (187c4 <__i2b+0x28>)
   187b2:	f000 fc63 	bl	1907c <__assert_func>
   187b6:	2301      	movs	r3, #1
   187b8:	6144      	str	r4, [r0, #20]
   187ba:	6103      	str	r3, [r0, #16]
   187bc:	bd10      	pop	{r4, pc}
   187be:	bf00      	nop
   187c0:	0001c5e5 	.word	0x0001c5e5
   187c4:	0001c5f6 	.word	0x0001c5f6

000187c8 <__multiply>:
   187c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   187cc:	4614      	mov	r4, r2
   187ce:	690a      	ldr	r2, [r1, #16]
   187d0:	460f      	mov	r7, r1
   187d2:	b085      	sub	sp, #20
   187d4:	6923      	ldr	r3, [r4, #16]
   187d6:	429a      	cmp	r2, r3
   187d8:	bfa2      	ittt	ge
   187da:	4623      	movge	r3, r4
   187dc:	460c      	movge	r4, r1
   187de:	461f      	movge	r7, r3
   187e0:	f8d4 a010 	ldr.w	sl, [r4, #16]
   187e4:	68a3      	ldr	r3, [r4, #8]
   187e6:	f8d7 9010 	ldr.w	r9, [r7, #16]
   187ea:	6861      	ldr	r1, [r4, #4]
   187ec:	eb0a 0609 	add.w	r6, sl, r9
   187f0:	42b3      	cmp	r3, r6
   187f2:	bfb8      	it	lt
   187f4:	3101      	addlt	r1, #1
   187f6:	f7ff ff27 	bl	18648 <_Balloc>
   187fa:	b930      	cbnz	r0, 1880a <__multiply+0x42>
   187fc:	4602      	mov	r2, r0
   187fe:	4b45      	ldr	r3, [pc, #276]	; (18914 <__multiply+0x14c>)
   18800:	f240 115d 	movw	r1, #349	; 0x15d
   18804:	4844      	ldr	r0, [pc, #272]	; (18918 <__multiply+0x150>)
   18806:	f000 fc39 	bl	1907c <__assert_func>
   1880a:	f100 0514 	add.w	r5, r0, #20
   1880e:	2200      	movs	r2, #0
   18810:	eb05 0886 	add.w	r8, r5, r6, lsl #2
   18814:	462b      	mov	r3, r5
   18816:	4543      	cmp	r3, r8
   18818:	d321      	bcc.n	1885e <__multiply+0x96>
   1881a:	f107 0114 	add.w	r1, r7, #20
   1881e:	f104 0214 	add.w	r2, r4, #20
   18822:	f104 0715 	add.w	r7, r4, #21
   18826:	eb02 028a 	add.w	r2, r2, sl, lsl #2
   1882a:	eb01 0389 	add.w	r3, r1, r9, lsl #2
   1882e:	9302      	str	r3, [sp, #8]
   18830:	1b13      	subs	r3, r2, r4
   18832:	3b15      	subs	r3, #21
   18834:	f023 0303 	bic.w	r3, r3, #3
   18838:	3304      	adds	r3, #4
   1883a:	42ba      	cmp	r2, r7
   1883c:	bf38      	it	cc
   1883e:	2304      	movcc	r3, #4
   18840:	9301      	str	r3, [sp, #4]
   18842:	9b02      	ldr	r3, [sp, #8]
   18844:	9103      	str	r1, [sp, #12]
   18846:	428b      	cmp	r3, r1
   18848:	d80c      	bhi.n	18864 <__multiply+0x9c>
   1884a:	2e00      	cmp	r6, #0
   1884c:	dd03      	ble.n	18856 <__multiply+0x8e>
   1884e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   18852:	2b00      	cmp	r3, #0
   18854:	d05b      	beq.n	1890e <__multiply+0x146>
   18856:	6106      	str	r6, [r0, #16]
   18858:	b005      	add	sp, #20
   1885a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1885e:	f843 2b04 	str.w	r2, [r3], #4
   18862:	e7d8      	b.n	18816 <__multiply+0x4e>
   18864:	f8b1 a000 	ldrh.w	sl, [r1]
   18868:	f1ba 0f00 	cmp.w	sl, #0
   1886c:	d024      	beq.n	188b8 <__multiply+0xf0>
   1886e:	f104 0e14 	add.w	lr, r4, #20
   18872:	46a9      	mov	r9, r5
   18874:	f04f 0c00 	mov.w	ip, #0
   18878:	f85e 7b04 	ldr.w	r7, [lr], #4
   1887c:	f8d9 3000 	ldr.w	r3, [r9]
   18880:	fa1f fb87 	uxth.w	fp, r7
   18884:	4572      	cmp	r2, lr
   18886:	b29b      	uxth	r3, r3
   18888:	ea4f 4717 	mov.w	r7, r7, lsr #16
   1888c:	fb0a 330b 	mla	r3, sl, fp, r3
   18890:	4463      	add	r3, ip
   18892:	f8d9 c000 	ldr.w	ip, [r9]
   18896:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
   1889a:	fb0a c707 	mla	r7, sl, r7, ip
   1889e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
   188a2:	b29b      	uxth	r3, r3
   188a4:	ea4f 4c17 	mov.w	ip, r7, lsr #16
   188a8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
   188ac:	f849 3b04 	str.w	r3, [r9], #4
   188b0:	d8e2      	bhi.n	18878 <__multiply+0xb0>
   188b2:	9b01      	ldr	r3, [sp, #4]
   188b4:	f845 c003 	str.w	ip, [r5, r3]
   188b8:	9b03      	ldr	r3, [sp, #12]
   188ba:	3104      	adds	r1, #4
   188bc:	f8b3 9002 	ldrh.w	r9, [r3, #2]
   188c0:	f1b9 0f00 	cmp.w	r9, #0
   188c4:	d021      	beq.n	1890a <__multiply+0x142>
   188c6:	682b      	ldr	r3, [r5, #0]
   188c8:	f104 0c14 	add.w	ip, r4, #20
   188cc:	46ae      	mov	lr, r5
   188ce:	f04f 0a00 	mov.w	sl, #0
   188d2:	f8bc b000 	ldrh.w	fp, [ip]
   188d6:	b29b      	uxth	r3, r3
   188d8:	f8be 7002 	ldrh.w	r7, [lr, #2]
   188dc:	fb09 770b 	mla	r7, r9, fp, r7
   188e0:	4457      	add	r7, sl
   188e2:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
   188e6:	f84e 3b04 	str.w	r3, [lr], #4
   188ea:	f85c 3b04 	ldr.w	r3, [ip], #4
   188ee:	ea4f 4a13 	mov.w	sl, r3, lsr #16
   188f2:	f8be 3000 	ldrh.w	r3, [lr]
   188f6:	4562      	cmp	r2, ip
   188f8:	fb09 330a 	mla	r3, r9, sl, r3
   188fc:	eb03 4317 	add.w	r3, r3, r7, lsr #16
   18900:	ea4f 4a13 	mov.w	sl, r3, lsr #16
   18904:	d8e5      	bhi.n	188d2 <__multiply+0x10a>
   18906:	9f01      	ldr	r7, [sp, #4]
   18908:	51eb      	str	r3, [r5, r7]
   1890a:	3504      	adds	r5, #4
   1890c:	e799      	b.n	18842 <__multiply+0x7a>
   1890e:	3e01      	subs	r6, #1
   18910:	e79b      	b.n	1884a <__multiply+0x82>
   18912:	bf00      	nop
   18914:	0001c5e5 	.word	0x0001c5e5
   18918:	0001c5f6 	.word	0x0001c5f6

0001891c <__pow5mult>:
   1891c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   18920:	4615      	mov	r5, r2
   18922:	f012 0203 	ands.w	r2, r2, #3
   18926:	4607      	mov	r7, r0
   18928:	460e      	mov	r6, r1
   1892a:	d007      	beq.n	1893c <__pow5mult+0x20>
   1892c:	3a01      	subs	r2, #1
   1892e:	4c25      	ldr	r4, [pc, #148]	; (189c4 <__pow5mult+0xa8>)
   18930:	2300      	movs	r3, #0
   18932:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   18936:	f7ff fee9 	bl	1870c <__multadd>
   1893a:	4606      	mov	r6, r0
   1893c:	10ad      	asrs	r5, r5, #2
   1893e:	d03d      	beq.n	189bc <__pow5mult+0xa0>
   18940:	6a7c      	ldr	r4, [r7, #36]	; 0x24
   18942:	b97c      	cbnz	r4, 18964 <__pow5mult+0x48>
   18944:	2010      	movs	r0, #16
   18946:	f7ff f977 	bl	17c38 <malloc>
   1894a:	4602      	mov	r2, r0
   1894c:	6278      	str	r0, [r7, #36]	; 0x24
   1894e:	b928      	cbnz	r0, 1895c <__pow5mult+0x40>
   18950:	4b1d      	ldr	r3, [pc, #116]	; (189c8 <__pow5mult+0xac>)
   18952:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
   18956:	481d      	ldr	r0, [pc, #116]	; (189cc <__pow5mult+0xb0>)
   18958:	f000 fb90 	bl	1907c <__assert_func>
   1895c:	e9c0 4401 	strd	r4, r4, [r0, #4]
   18960:	6004      	str	r4, [r0, #0]
   18962:	60c4      	str	r4, [r0, #12]
   18964:	f8d7 8024 	ldr.w	r8, [r7, #36]	; 0x24
   18968:	f8d8 4008 	ldr.w	r4, [r8, #8]
   1896c:	b94c      	cbnz	r4, 18982 <__pow5mult+0x66>
   1896e:	f240 2171 	movw	r1, #625	; 0x271
   18972:	4638      	mov	r0, r7
   18974:	f7ff ff12 	bl	1879c <__i2b>
   18978:	2300      	movs	r3, #0
   1897a:	4604      	mov	r4, r0
   1897c:	f8c8 0008 	str.w	r0, [r8, #8]
   18980:	6003      	str	r3, [r0, #0]
   18982:	f04f 0900 	mov.w	r9, #0
   18986:	07eb      	lsls	r3, r5, #31
   18988:	d50a      	bpl.n	189a0 <__pow5mult+0x84>
   1898a:	4631      	mov	r1, r6
   1898c:	4622      	mov	r2, r4
   1898e:	4638      	mov	r0, r7
   18990:	f7ff ff1a 	bl	187c8 <__multiply>
   18994:	4680      	mov	r8, r0
   18996:	4631      	mov	r1, r6
   18998:	4638      	mov	r0, r7
   1899a:	4646      	mov	r6, r8
   1899c:	f7ff fe94 	bl	186c8 <_Bfree>
   189a0:	106d      	asrs	r5, r5, #1
   189a2:	d00b      	beq.n	189bc <__pow5mult+0xa0>
   189a4:	6820      	ldr	r0, [r4, #0]
   189a6:	b938      	cbnz	r0, 189b8 <__pow5mult+0x9c>
   189a8:	4622      	mov	r2, r4
   189aa:	4621      	mov	r1, r4
   189ac:	4638      	mov	r0, r7
   189ae:	f7ff ff0b 	bl	187c8 <__multiply>
   189b2:	6020      	str	r0, [r4, #0]
   189b4:	f8c0 9000 	str.w	r9, [r0]
   189b8:	4604      	mov	r4, r0
   189ba:	e7e4      	b.n	18986 <__pow5mult+0x6a>
   189bc:	4630      	mov	r0, r6
   189be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   189c2:	bf00      	nop
   189c4:	0001c40c 	.word	0x0001c40c
   189c8:	0001c55a 	.word	0x0001c55a
   189cc:	0001c5f6 	.word	0x0001c5f6

000189d0 <__lshift>:
   189d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   189d4:	460c      	mov	r4, r1
   189d6:	4607      	mov	r7, r0
   189d8:	4691      	mov	r9, r2
   189da:	ea4f 1a62 	mov.w	sl, r2, asr #5
   189de:	6923      	ldr	r3, [r4, #16]
   189e0:	6849      	ldr	r1, [r1, #4]
   189e2:	eb03 1862 	add.w	r8, r3, r2, asr #5
   189e6:	68a3      	ldr	r3, [r4, #8]
   189e8:	f108 0601 	add.w	r6, r8, #1
   189ec:	42b3      	cmp	r3, r6
   189ee:	db0b      	blt.n	18a08 <__lshift+0x38>
   189f0:	4638      	mov	r0, r7
   189f2:	f7ff fe29 	bl	18648 <_Balloc>
   189f6:	4605      	mov	r5, r0
   189f8:	b948      	cbnz	r0, 18a0e <__lshift+0x3e>
   189fa:	4602      	mov	r2, r0
   189fc:	4b28      	ldr	r3, [pc, #160]	; (18aa0 <__lshift+0xd0>)
   189fe:	f240 11d9 	movw	r1, #473	; 0x1d9
   18a02:	4828      	ldr	r0, [pc, #160]	; (18aa4 <__lshift+0xd4>)
   18a04:	f000 fb3a 	bl	1907c <__assert_func>
   18a08:	3101      	adds	r1, #1
   18a0a:	005b      	lsls	r3, r3, #1
   18a0c:	e7ee      	b.n	189ec <__lshift+0x1c>
   18a0e:	2300      	movs	r3, #0
   18a10:	f100 0114 	add.w	r1, r0, #20
   18a14:	f100 0210 	add.w	r2, r0, #16
   18a18:	4618      	mov	r0, r3
   18a1a:	4553      	cmp	r3, sl
   18a1c:	db33      	blt.n	18a86 <__lshift+0xb6>
   18a1e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   18a22:	f104 0314 	add.w	r3, r4, #20
   18a26:	6920      	ldr	r0, [r4, #16]
   18a28:	f019 091f 	ands.w	r9, r9, #31
   18a2c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   18a30:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
   18a34:	d02b      	beq.n	18a8e <__lshift+0xbe>
   18a36:	f1c9 0e20 	rsb	lr, r9, #32
   18a3a:	468a      	mov	sl, r1
   18a3c:	2200      	movs	r2, #0
   18a3e:	6818      	ldr	r0, [r3, #0]
   18a40:	fa00 f009 	lsl.w	r0, r0, r9
   18a44:	4310      	orrs	r0, r2
   18a46:	f84a 0b04 	str.w	r0, [sl], #4
   18a4a:	f853 2b04 	ldr.w	r2, [r3], #4
   18a4e:	459c      	cmp	ip, r3
   18a50:	fa22 f20e 	lsr.w	r2, r2, lr
   18a54:	d8f3      	bhi.n	18a3e <__lshift+0x6e>
   18a56:	ebac 0304 	sub.w	r3, ip, r4
   18a5a:	f104 0015 	add.w	r0, r4, #21
   18a5e:	3b15      	subs	r3, #21
   18a60:	f023 0303 	bic.w	r3, r3, #3
   18a64:	3304      	adds	r3, #4
   18a66:	4584      	cmp	ip, r0
   18a68:	bf38      	it	cc
   18a6a:	2304      	movcc	r3, #4
   18a6c:	50ca      	str	r2, [r1, r3]
   18a6e:	b10a      	cbz	r2, 18a74 <__lshift+0xa4>
   18a70:	f108 0602 	add.w	r6, r8, #2
   18a74:	3e01      	subs	r6, #1
   18a76:	4638      	mov	r0, r7
   18a78:	4621      	mov	r1, r4
   18a7a:	612e      	str	r6, [r5, #16]
   18a7c:	f7ff fe24 	bl	186c8 <_Bfree>
   18a80:	4628      	mov	r0, r5
   18a82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   18a86:	3301      	adds	r3, #1
   18a88:	f842 0f04 	str.w	r0, [r2, #4]!
   18a8c:	e7c5      	b.n	18a1a <__lshift+0x4a>
   18a8e:	3904      	subs	r1, #4
   18a90:	f853 2b04 	ldr.w	r2, [r3], #4
   18a94:	459c      	cmp	ip, r3
   18a96:	f841 2f04 	str.w	r2, [r1, #4]!
   18a9a:	d8f9      	bhi.n	18a90 <__lshift+0xc0>
   18a9c:	e7ea      	b.n	18a74 <__lshift+0xa4>
   18a9e:	bf00      	nop
   18aa0:	0001c5e5 	.word	0x0001c5e5
   18aa4:	0001c5f6 	.word	0x0001c5f6

00018aa8 <__mdiff>:
   18aa8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18aac:	4689      	mov	r9, r1
   18aae:	4606      	mov	r6, r0
   18ab0:	4611      	mov	r1, r2
   18ab2:	4614      	mov	r4, r2
   18ab4:	4648      	mov	r0, r9
   18ab6:	f002 fce3 	bl	1b480 <__mcmp>
   18aba:	1e05      	subs	r5, r0, #0
   18abc:	d112      	bne.n	18ae4 <__mdiff+0x3c>
   18abe:	4629      	mov	r1, r5
   18ac0:	4630      	mov	r0, r6
   18ac2:	f7ff fdc1 	bl	18648 <_Balloc>
   18ac6:	4602      	mov	r2, r0
   18ac8:	b928      	cbnz	r0, 18ad6 <__mdiff+0x2e>
   18aca:	4b40      	ldr	r3, [pc, #256]	; (18bcc <__mdiff+0x124>)
   18acc:	f240 2132 	movw	r1, #562	; 0x232
   18ad0:	483f      	ldr	r0, [pc, #252]	; (18bd0 <__mdiff+0x128>)
   18ad2:	f000 fad3 	bl	1907c <__assert_func>
   18ad6:	2301      	movs	r3, #1
   18ad8:	e9c0 3504 	strd	r3, r5, [r0, #16]
   18adc:	4610      	mov	r0, r2
   18ade:	b003      	add	sp, #12
   18ae0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18ae4:	bfbc      	itt	lt
   18ae6:	464b      	movlt	r3, r9
   18ae8:	46a1      	movlt	r9, r4
   18aea:	4630      	mov	r0, r6
   18aec:	bfb8      	it	lt
   18aee:	2501      	movlt	r5, #1
   18af0:	f8d9 1004 	ldr.w	r1, [r9, #4]
   18af4:	bfb4      	ite	lt
   18af6:	461c      	movlt	r4, r3
   18af8:	2500      	movge	r5, #0
   18afa:	f7ff fda5 	bl	18648 <_Balloc>
   18afe:	4602      	mov	r2, r0
   18b00:	b918      	cbnz	r0, 18b0a <__mdiff+0x62>
   18b02:	4b32      	ldr	r3, [pc, #200]	; (18bcc <__mdiff+0x124>)
   18b04:	f44f 7110 	mov.w	r1, #576	; 0x240
   18b08:	e7e2      	b.n	18ad0 <__mdiff+0x28>
   18b0a:	f8d9 7010 	ldr.w	r7, [r9, #16]
   18b0e:	f104 0e14 	add.w	lr, r4, #20
   18b12:	6926      	ldr	r6, [r4, #16]
   18b14:	f100 0b14 	add.w	fp, r0, #20
   18b18:	60c5      	str	r5, [r0, #12]
   18b1a:	f109 0514 	add.w	r5, r9, #20
   18b1e:	f109 0310 	add.w	r3, r9, #16
   18b22:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
   18b26:	eb05 0887 	add.w	r8, r5, r7, lsl #2
   18b2a:	46d9      	mov	r9, fp
   18b2c:	f04f 0c00 	mov.w	ip, #0
   18b30:	9301      	str	r3, [sp, #4]
   18b32:	9b01      	ldr	r3, [sp, #4]
   18b34:	f85e 0b04 	ldr.w	r0, [lr], #4
   18b38:	f853 af04 	ldr.w	sl, [r3, #4]!
   18b3c:	b281      	uxth	r1, r0
   18b3e:	4576      	cmp	r6, lr
   18b40:	9301      	str	r3, [sp, #4]
   18b42:	fa1f f38a 	uxth.w	r3, sl
   18b46:	ea4f 4010 	mov.w	r0, r0, lsr #16
   18b4a:	eba3 0301 	sub.w	r3, r3, r1
   18b4e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
   18b52:	4463      	add	r3, ip
   18b54:	eb00 4023 	add.w	r0, r0, r3, asr #16
   18b58:	b29b      	uxth	r3, r3
   18b5a:	ea4f 4c20 	mov.w	ip, r0, asr #16
   18b5e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
   18b62:	f849 3b04 	str.w	r3, [r9], #4
   18b66:	d8e4      	bhi.n	18b32 <__mdiff+0x8a>
   18b68:	1b33      	subs	r3, r6, r4
   18b6a:	3415      	adds	r4, #21
   18b6c:	3b15      	subs	r3, #21
   18b6e:	f023 0303 	bic.w	r3, r3, #3
   18b72:	3304      	adds	r3, #4
   18b74:	42a6      	cmp	r6, r4
   18b76:	bf38      	it	cc
   18b78:	2304      	movcc	r3, #4
   18b7a:	441d      	add	r5, r3
   18b7c:	445b      	add	r3, fp
   18b7e:	462c      	mov	r4, r5
   18b80:	461e      	mov	r6, r3
   18b82:	4544      	cmp	r4, r8
   18b84:	d30e      	bcc.n	18ba4 <__mdiff+0xfc>
   18b86:	f108 0103 	add.w	r1, r8, #3
   18b8a:	1b49      	subs	r1, r1, r5
   18b8c:	3d03      	subs	r5, #3
   18b8e:	f021 0103 	bic.w	r1, r1, #3
   18b92:	45a8      	cmp	r8, r5
   18b94:	bf38      	it	cc
   18b96:	2100      	movcc	r1, #0
   18b98:	440b      	add	r3, r1
   18b9a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   18b9e:	b199      	cbz	r1, 18bc8 <__mdiff+0x120>
   18ba0:	6117      	str	r7, [r2, #16]
   18ba2:	e79b      	b.n	18adc <__mdiff+0x34>
   18ba4:	f854 1b04 	ldr.w	r1, [r4], #4
   18ba8:	46e6      	mov	lr, ip
   18baa:	fa1f fc81 	uxth.w	ip, r1
   18bae:	0c08      	lsrs	r0, r1, #16
   18bb0:	4471      	add	r1, lr
   18bb2:	44f4      	add	ip, lr
   18bb4:	b289      	uxth	r1, r1
   18bb6:	eb00 402c 	add.w	r0, r0, ip, asr #16
   18bba:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
   18bbe:	ea4f 4c20 	mov.w	ip, r0, asr #16
   18bc2:	f846 1b04 	str.w	r1, [r6], #4
   18bc6:	e7dc      	b.n	18b82 <__mdiff+0xda>
   18bc8:	3f01      	subs	r7, #1
   18bca:	e7e6      	b.n	18b9a <__mdiff+0xf2>
   18bcc:	0001c5e5 	.word	0x0001c5e5
   18bd0:	0001c5f6 	.word	0x0001c5f6

00018bd4 <__d2b>:
   18bd4:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
   18bd8:	2101      	movs	r1, #1
   18bda:	4690      	mov	r8, r2
   18bdc:	4699      	mov	r9, r3
   18bde:	9e08      	ldr	r6, [sp, #32]
   18be0:	f7ff fd32 	bl	18648 <_Balloc>
   18be4:	4604      	mov	r4, r0
   18be6:	b930      	cbnz	r0, 18bf6 <__d2b+0x22>
   18be8:	4602      	mov	r2, r0
   18bea:	4b24      	ldr	r3, [pc, #144]	; (18c7c <__d2b+0xa8>)
   18bec:	f240 310a 	movw	r1, #778	; 0x30a
   18bf0:	4823      	ldr	r0, [pc, #140]	; (18c80 <__d2b+0xac>)
   18bf2:	f000 fa43 	bl	1907c <__assert_func>
   18bf6:	f3c9 550a 	ubfx	r5, r9, #20, #11
   18bfa:	f3c9 0313 	ubfx	r3, r9, #0, #20
   18bfe:	b10d      	cbz	r5, 18c04 <__d2b+0x30>
   18c00:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   18c04:	9301      	str	r3, [sp, #4]
   18c06:	f1b8 0300 	subs.w	r3, r8, #0
   18c0a:	d024      	beq.n	18c56 <__d2b+0x82>
   18c0c:	4668      	mov	r0, sp
   18c0e:	9300      	str	r3, [sp, #0]
   18c10:	f002 fc09 	bl	1b426 <__lo0bits>
   18c14:	e9dd 1200 	ldrd	r1, r2, [sp]
   18c18:	b1d8      	cbz	r0, 18c52 <__d2b+0x7e>
   18c1a:	f1c0 0320 	rsb	r3, r0, #32
   18c1e:	fa02 f303 	lsl.w	r3, r2, r3
   18c22:	40c2      	lsrs	r2, r0
   18c24:	430b      	orrs	r3, r1
   18c26:	9201      	str	r2, [sp, #4]
   18c28:	6163      	str	r3, [r4, #20]
   18c2a:	9b01      	ldr	r3, [sp, #4]
   18c2c:	2b00      	cmp	r3, #0
   18c2e:	61a3      	str	r3, [r4, #24]
   18c30:	bf0c      	ite	eq
   18c32:	2201      	moveq	r2, #1
   18c34:	2202      	movne	r2, #2
   18c36:	6122      	str	r2, [r4, #16]
   18c38:	b1ad      	cbz	r5, 18c66 <__d2b+0x92>
   18c3a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   18c3e:	4405      	add	r5, r0
   18c40:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   18c44:	6035      	str	r5, [r6, #0]
   18c46:	9b09      	ldr	r3, [sp, #36]	; 0x24
   18c48:	6018      	str	r0, [r3, #0]
   18c4a:	4620      	mov	r0, r4
   18c4c:	b002      	add	sp, #8
   18c4e:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
   18c52:	6161      	str	r1, [r4, #20]
   18c54:	e7e9      	b.n	18c2a <__d2b+0x56>
   18c56:	a801      	add	r0, sp, #4
   18c58:	f002 fbe5 	bl	1b426 <__lo0bits>
   18c5c:	9b01      	ldr	r3, [sp, #4]
   18c5e:	3020      	adds	r0, #32
   18c60:	2201      	movs	r2, #1
   18c62:	6163      	str	r3, [r4, #20]
   18c64:	e7e7      	b.n	18c36 <__d2b+0x62>
   18c66:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   18c6a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   18c6e:	6030      	str	r0, [r6, #0]
   18c70:	6918      	ldr	r0, [r3, #16]
   18c72:	f002 fbb6 	bl	1b3e2 <__hi0bits>
   18c76:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
   18c7a:	e7e4      	b.n	18c46 <__d2b+0x72>
   18c7c:	0001c5e5 	.word	0x0001c5e5
   18c80:	0001c5f6 	.word	0x0001c5f6

00018c84 <_vfiprintf_r>:
   18c84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18c88:	460d      	mov	r5, r1
   18c8a:	b09d      	sub	sp, #116	; 0x74
   18c8c:	4614      	mov	r4, r2
   18c8e:	4698      	mov	r8, r3
   18c90:	4606      	mov	r6, r0
   18c92:	b118      	cbz	r0, 18c9c <_vfiprintf_r+0x18>
   18c94:	6983      	ldr	r3, [r0, #24]
   18c96:	b90b      	cbnz	r3, 18c9c <_vfiprintf_r+0x18>
   18c98:	f7ff fc48 	bl	1852c <__sinit>
   18c9c:	4b87      	ldr	r3, [pc, #540]	; (18ebc <_vfiprintf_r+0x238>)
   18c9e:	429d      	cmp	r5, r3
   18ca0:	d11b      	bne.n	18cda <_vfiprintf_r+0x56>
   18ca2:	6875      	ldr	r5, [r6, #4]
   18ca4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   18ca6:	07d9      	lsls	r1, r3, #31
   18ca8:	d405      	bmi.n	18cb6 <_vfiprintf_r+0x32>
   18caa:	89ab      	ldrh	r3, [r5, #12]
   18cac:	059a      	lsls	r2, r3, #22
   18cae:	d402      	bmi.n	18cb6 <_vfiprintf_r+0x32>
   18cb0:	6da8      	ldr	r0, [r5, #88]	; 0x58
   18cb2:	f001 f975 	bl	19fa0 <__retarget_lock_acquire_recursive>
   18cb6:	89ab      	ldrh	r3, [r5, #12]
   18cb8:	071b      	lsls	r3, r3, #28
   18cba:	d501      	bpl.n	18cc0 <_vfiprintf_r+0x3c>
   18cbc:	692b      	ldr	r3, [r5, #16]
   18cbe:	b9eb      	cbnz	r3, 18cfc <_vfiprintf_r+0x78>
   18cc0:	4629      	mov	r1, r5
   18cc2:	4630      	mov	r0, r6
   18cc4:	f000 f96e 	bl	18fa4 <__swsetup_r>
   18cc8:	b1c0      	cbz	r0, 18cfc <_vfiprintf_r+0x78>
   18cca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   18ccc:	07dc      	lsls	r4, r3, #31
   18cce:	d50e      	bpl.n	18cee <_vfiprintf_r+0x6a>
   18cd0:	f04f 30ff 	mov.w	r0, #4294967295
   18cd4:	b01d      	add	sp, #116	; 0x74
   18cd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18cda:	4b79      	ldr	r3, [pc, #484]	; (18ec0 <_vfiprintf_r+0x23c>)
   18cdc:	429d      	cmp	r5, r3
   18cde:	d101      	bne.n	18ce4 <_vfiprintf_r+0x60>
   18ce0:	68b5      	ldr	r5, [r6, #8]
   18ce2:	e7df      	b.n	18ca4 <_vfiprintf_r+0x20>
   18ce4:	4b77      	ldr	r3, [pc, #476]	; (18ec4 <_vfiprintf_r+0x240>)
   18ce6:	429d      	cmp	r5, r3
   18ce8:	bf08      	it	eq
   18cea:	68f5      	ldreq	r5, [r6, #12]
   18cec:	e7da      	b.n	18ca4 <_vfiprintf_r+0x20>
   18cee:	89ab      	ldrh	r3, [r5, #12]
   18cf0:	0598      	lsls	r0, r3, #22
   18cf2:	d4ed      	bmi.n	18cd0 <_vfiprintf_r+0x4c>
   18cf4:	6da8      	ldr	r0, [r5, #88]	; 0x58
   18cf6:	f001 f95b 	bl	19fb0 <__retarget_lock_release_recursive>
   18cfa:	e7e9      	b.n	18cd0 <_vfiprintf_r+0x4c>
   18cfc:	2300      	movs	r3, #0
   18cfe:	f8cd 800c 	str.w	r8, [sp, #12]
   18d02:	f04f 0901 	mov.w	r9, #1
   18d06:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 18ec8 <_vfiprintf_r+0x244>
   18d0a:	9309      	str	r3, [sp, #36]	; 0x24
   18d0c:	2320      	movs	r3, #32
   18d0e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
   18d12:	2330      	movs	r3, #48	; 0x30
   18d14:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
   18d18:	4623      	mov	r3, r4
   18d1a:	469a      	mov	sl, r3
   18d1c:	f813 2b01 	ldrb.w	r2, [r3], #1
   18d20:	b10a      	cbz	r2, 18d26 <_vfiprintf_r+0xa2>
   18d22:	2a25      	cmp	r2, #37	; 0x25
   18d24:	d1f9      	bne.n	18d1a <_vfiprintf_r+0x96>
   18d26:	ebba 0b04 	subs.w	fp, sl, r4
   18d2a:	d00b      	beq.n	18d44 <_vfiprintf_r+0xc0>
   18d2c:	465b      	mov	r3, fp
   18d2e:	4622      	mov	r2, r4
   18d30:	4629      	mov	r1, r5
   18d32:	4630      	mov	r0, r6
   18d34:	f002 fbd4 	bl	1b4e0 <__sfputs_r>
   18d38:	3001      	adds	r0, #1
   18d3a:	f000 80a6 	beq.w	18e8a <_vfiprintf_r+0x206>
   18d3e:	9a09      	ldr	r2, [sp, #36]	; 0x24
   18d40:	445a      	add	r2, fp
   18d42:	9209      	str	r2, [sp, #36]	; 0x24
   18d44:	f89a 3000 	ldrb.w	r3, [sl]
   18d48:	2b00      	cmp	r3, #0
   18d4a:	f000 809e 	beq.w	18e8a <_vfiprintf_r+0x206>
   18d4e:	2300      	movs	r3, #0
   18d50:	f04f 32ff 	mov.w	r2, #4294967295
   18d54:	f10a 0a01 	add.w	sl, sl, #1
   18d58:	9304      	str	r3, [sp, #16]
   18d5a:	9307      	str	r3, [sp, #28]
   18d5c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
   18d60:	931a      	str	r3, [sp, #104]	; 0x68
   18d62:	e9cd 2305 	strd	r2, r3, [sp, #20]
   18d66:	4654      	mov	r4, sl
   18d68:	2205      	movs	r2, #5
   18d6a:	4857      	ldr	r0, [pc, #348]	; (18ec8 <_vfiprintf_r+0x244>)
   18d6c:	f814 1b01 	ldrb.w	r1, [r4], #1
   18d70:	f002 fb29 	bl	1b3c6 <memchr>
   18d74:	9b04      	ldr	r3, [sp, #16]
   18d76:	b9d0      	cbnz	r0, 18dae <_vfiprintf_r+0x12a>
   18d78:	06d9      	lsls	r1, r3, #27
   18d7a:	bf44      	itt	mi
   18d7c:	2220      	movmi	r2, #32
   18d7e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
   18d82:	071a      	lsls	r2, r3, #28
   18d84:	bf44      	itt	mi
   18d86:	222b      	movmi	r2, #43	; 0x2b
   18d88:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
   18d8c:	f89a 2000 	ldrb.w	r2, [sl]
   18d90:	2a2a      	cmp	r2, #42	; 0x2a
   18d92:	d014      	beq.n	18dbe <_vfiprintf_r+0x13a>
   18d94:	9a07      	ldr	r2, [sp, #28]
   18d96:	4654      	mov	r4, sl
   18d98:	2000      	movs	r0, #0
   18d9a:	f04f 0c0a 	mov.w	ip, #10
   18d9e:	4621      	mov	r1, r4
   18da0:	f811 3b01 	ldrb.w	r3, [r1], #1
   18da4:	3b30      	subs	r3, #48	; 0x30
   18da6:	2b09      	cmp	r3, #9
   18da8:	d94a      	bls.n	18e40 <_vfiprintf_r+0x1bc>
   18daa:	b970      	cbnz	r0, 18dca <_vfiprintf_r+0x146>
   18dac:	e014      	b.n	18dd8 <_vfiprintf_r+0x154>
   18dae:	eba0 0008 	sub.w	r0, r0, r8
   18db2:	46a2      	mov	sl, r4
   18db4:	fa09 f000 	lsl.w	r0, r9, r0
   18db8:	4318      	orrs	r0, r3
   18dba:	9004      	str	r0, [sp, #16]
   18dbc:	e7d3      	b.n	18d66 <_vfiprintf_r+0xe2>
   18dbe:	9a03      	ldr	r2, [sp, #12]
   18dc0:	1d11      	adds	r1, r2, #4
   18dc2:	6812      	ldr	r2, [r2, #0]
   18dc4:	2a00      	cmp	r2, #0
   18dc6:	9103      	str	r1, [sp, #12]
   18dc8:	db01      	blt.n	18dce <_vfiprintf_r+0x14a>
   18dca:	9207      	str	r2, [sp, #28]
   18dcc:	e004      	b.n	18dd8 <_vfiprintf_r+0x154>
   18dce:	4252      	negs	r2, r2
   18dd0:	f043 0302 	orr.w	r3, r3, #2
   18dd4:	9207      	str	r2, [sp, #28]
   18dd6:	9304      	str	r3, [sp, #16]
   18dd8:	7823      	ldrb	r3, [r4, #0]
   18dda:	2b2e      	cmp	r3, #46	; 0x2e
   18ddc:	d10a      	bne.n	18df4 <_vfiprintf_r+0x170>
   18dde:	7863      	ldrb	r3, [r4, #1]
   18de0:	2b2a      	cmp	r3, #42	; 0x2a
   18de2:	d132      	bne.n	18e4a <_vfiprintf_r+0x1c6>
   18de4:	9b03      	ldr	r3, [sp, #12]
   18de6:	3402      	adds	r4, #2
   18de8:	1d1a      	adds	r2, r3, #4
   18dea:	681b      	ldr	r3, [r3, #0]
   18dec:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
   18df0:	9203      	str	r2, [sp, #12]
   18df2:	9305      	str	r3, [sp, #20]
   18df4:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 18ecc <_vfiprintf_r+0x248>
   18df8:	2203      	movs	r2, #3
   18dfa:	7821      	ldrb	r1, [r4, #0]
   18dfc:	4650      	mov	r0, sl
   18dfe:	f002 fae2 	bl	1b3c6 <memchr>
   18e02:	b138      	cbz	r0, 18e14 <_vfiprintf_r+0x190>
   18e04:	eba0 000a 	sub.w	r0, r0, sl
   18e08:	2240      	movs	r2, #64	; 0x40
   18e0a:	9b04      	ldr	r3, [sp, #16]
   18e0c:	3401      	adds	r4, #1
   18e0e:	4082      	lsls	r2, r0
   18e10:	4313      	orrs	r3, r2
   18e12:	9304      	str	r3, [sp, #16]
   18e14:	f814 1b01 	ldrb.w	r1, [r4], #1
   18e18:	2206      	movs	r2, #6
   18e1a:	482d      	ldr	r0, [pc, #180]	; (18ed0 <_vfiprintf_r+0x24c>)
   18e1c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
   18e20:	f002 fad1 	bl	1b3c6 <memchr>
   18e24:	2800      	cmp	r0, #0
   18e26:	d03f      	beq.n	18ea8 <_vfiprintf_r+0x224>
   18e28:	4b2a      	ldr	r3, [pc, #168]	; (18ed4 <_vfiprintf_r+0x250>)
   18e2a:	bb1b      	cbnz	r3, 18e74 <_vfiprintf_r+0x1f0>
   18e2c:	9b03      	ldr	r3, [sp, #12]
   18e2e:	3307      	adds	r3, #7
   18e30:	f023 0307 	bic.w	r3, r3, #7
   18e34:	3308      	adds	r3, #8
   18e36:	9303      	str	r3, [sp, #12]
   18e38:	9b09      	ldr	r3, [sp, #36]	; 0x24
   18e3a:	443b      	add	r3, r7
   18e3c:	9309      	str	r3, [sp, #36]	; 0x24
   18e3e:	e76b      	b.n	18d18 <_vfiprintf_r+0x94>
   18e40:	fb0c 3202 	mla	r2, ip, r2, r3
   18e44:	460c      	mov	r4, r1
   18e46:	2001      	movs	r0, #1
   18e48:	e7a9      	b.n	18d9e <_vfiprintf_r+0x11a>
   18e4a:	2300      	movs	r3, #0
   18e4c:	3401      	adds	r4, #1
   18e4e:	f04f 0c0a 	mov.w	ip, #10
   18e52:	4619      	mov	r1, r3
   18e54:	9305      	str	r3, [sp, #20]
   18e56:	4620      	mov	r0, r4
   18e58:	f810 2b01 	ldrb.w	r2, [r0], #1
   18e5c:	3a30      	subs	r2, #48	; 0x30
   18e5e:	2a09      	cmp	r2, #9
   18e60:	d903      	bls.n	18e6a <_vfiprintf_r+0x1e6>
   18e62:	2b00      	cmp	r3, #0
   18e64:	d0c6      	beq.n	18df4 <_vfiprintf_r+0x170>
   18e66:	9105      	str	r1, [sp, #20]
   18e68:	e7c4      	b.n	18df4 <_vfiprintf_r+0x170>
   18e6a:	fb0c 2101 	mla	r1, ip, r1, r2
   18e6e:	4604      	mov	r4, r0
   18e70:	2301      	movs	r3, #1
   18e72:	e7f0      	b.n	18e56 <_vfiprintf_r+0x1d2>
   18e74:	ab03      	add	r3, sp, #12
   18e76:	462a      	mov	r2, r5
   18e78:	a904      	add	r1, sp, #16
   18e7a:	4630      	mov	r0, r6
   18e7c:	9300      	str	r3, [sp, #0]
   18e7e:	4b16      	ldr	r3, [pc, #88]	; (18ed8 <_vfiprintf_r+0x254>)
   18e80:	f7fe ff86 	bl	17d90 <_printf_float>
   18e84:	4607      	mov	r7, r0
   18e86:	1c78      	adds	r0, r7, #1
   18e88:	d1d6      	bne.n	18e38 <_vfiprintf_r+0x1b4>
   18e8a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   18e8c:	07d9      	lsls	r1, r3, #31
   18e8e:	d405      	bmi.n	18e9c <_vfiprintf_r+0x218>
   18e90:	89ab      	ldrh	r3, [r5, #12]
   18e92:	059a      	lsls	r2, r3, #22
   18e94:	d402      	bmi.n	18e9c <_vfiprintf_r+0x218>
   18e96:	6da8      	ldr	r0, [r5, #88]	; 0x58
   18e98:	f001 f88a 	bl	19fb0 <__retarget_lock_release_recursive>
   18e9c:	89ab      	ldrh	r3, [r5, #12]
   18e9e:	065b      	lsls	r3, r3, #25
   18ea0:	f53f af16 	bmi.w	18cd0 <_vfiprintf_r+0x4c>
   18ea4:	9809      	ldr	r0, [sp, #36]	; 0x24
   18ea6:	e715      	b.n	18cd4 <_vfiprintf_r+0x50>
   18ea8:	ab03      	add	r3, sp, #12
   18eaa:	462a      	mov	r2, r5
   18eac:	a904      	add	r1, sp, #16
   18eae:	4630      	mov	r0, r6
   18eb0:	9300      	str	r3, [sp, #0]
   18eb2:	4b09      	ldr	r3, [pc, #36]	; (18ed8 <_vfiprintf_r+0x254>)
   18eb4:	f7ff f9a2 	bl	181fc <_printf_i>
   18eb8:	e7e4      	b.n	18e84 <_vfiprintf_r+0x200>
   18eba:	bf00      	nop
   18ebc:	0001c3ec 	.word	0x0001c3ec
   18ec0:	0001c3cc 	.word	0x0001c3cc
   18ec4:	0001c3ac 	.word	0x0001c3ac
   18ec8:	0001c66b 	.word	0x0001c66b
   18ecc:	0001c671 	.word	0x0001c671
   18ed0:	0001c675 	.word	0x0001c675
   18ed4:	00017d91 	.word	0x00017d91
   18ed8:	0001b4e1 	.word	0x0001b4e1

00018edc <__swbuf_r>:
   18edc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18ede:	460e      	mov	r6, r1
   18ee0:	4614      	mov	r4, r2
   18ee2:	4605      	mov	r5, r0
   18ee4:	b118      	cbz	r0, 18eee <__swbuf_r+0x12>
   18ee6:	6983      	ldr	r3, [r0, #24]
   18ee8:	b90b      	cbnz	r3, 18eee <__swbuf_r+0x12>
   18eea:	f7ff fb1f 	bl	1852c <__sinit>
   18eee:	4b21      	ldr	r3, [pc, #132]	; (18f74 <__swbuf_r+0x98>)
   18ef0:	429c      	cmp	r4, r3
   18ef2:	d110      	bne.n	18f16 <__swbuf_r+0x3a>
   18ef4:	686c      	ldr	r4, [r5, #4]
   18ef6:	69a3      	ldr	r3, [r4, #24]
   18ef8:	60a3      	str	r3, [r4, #8]
   18efa:	89a3      	ldrh	r3, [r4, #12]
   18efc:	071a      	lsls	r2, r3, #28
   18efe:	d501      	bpl.n	18f04 <__swbuf_r+0x28>
   18f00:	6923      	ldr	r3, [r4, #16]
   18f02:	b993      	cbnz	r3, 18f2a <__swbuf_r+0x4e>
   18f04:	4621      	mov	r1, r4
   18f06:	4628      	mov	r0, r5
   18f08:	f000 f84c 	bl	18fa4 <__swsetup_r>
   18f0c:	b168      	cbz	r0, 18f2a <__swbuf_r+0x4e>
   18f0e:	f04f 37ff 	mov.w	r7, #4294967295
   18f12:	4638      	mov	r0, r7
   18f14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   18f16:	4b18      	ldr	r3, [pc, #96]	; (18f78 <__swbuf_r+0x9c>)
   18f18:	429c      	cmp	r4, r3
   18f1a:	d101      	bne.n	18f20 <__swbuf_r+0x44>
   18f1c:	68ac      	ldr	r4, [r5, #8]
   18f1e:	e7ea      	b.n	18ef6 <__swbuf_r+0x1a>
   18f20:	4b16      	ldr	r3, [pc, #88]	; (18f7c <__swbuf_r+0xa0>)
   18f22:	429c      	cmp	r4, r3
   18f24:	bf08      	it	eq
   18f26:	68ec      	ldreq	r4, [r5, #12]
   18f28:	e7e5      	b.n	18ef6 <__swbuf_r+0x1a>
   18f2a:	6923      	ldr	r3, [r4, #16]
   18f2c:	b2f6      	uxtb	r6, r6
   18f2e:	6820      	ldr	r0, [r4, #0]
   18f30:	4637      	mov	r7, r6
   18f32:	1ac0      	subs	r0, r0, r3
   18f34:	6963      	ldr	r3, [r4, #20]
   18f36:	4283      	cmp	r3, r0
   18f38:	dc05      	bgt.n	18f46 <__swbuf_r+0x6a>
   18f3a:	4621      	mov	r1, r4
   18f3c:	4628      	mov	r0, r5
   18f3e:	f000 f8cb 	bl	190d8 <_fflush_r>
   18f42:	2800      	cmp	r0, #0
   18f44:	d1e3      	bne.n	18f0e <__swbuf_r+0x32>
   18f46:	68a3      	ldr	r3, [r4, #8]
   18f48:	3001      	adds	r0, #1
   18f4a:	3b01      	subs	r3, #1
   18f4c:	60a3      	str	r3, [r4, #8]
   18f4e:	6823      	ldr	r3, [r4, #0]
   18f50:	1c5a      	adds	r2, r3, #1
   18f52:	6022      	str	r2, [r4, #0]
   18f54:	701e      	strb	r6, [r3, #0]
   18f56:	6963      	ldr	r3, [r4, #20]
   18f58:	4283      	cmp	r3, r0
   18f5a:	d004      	beq.n	18f66 <__swbuf_r+0x8a>
   18f5c:	89a3      	ldrh	r3, [r4, #12]
   18f5e:	07db      	lsls	r3, r3, #31
   18f60:	d5d7      	bpl.n	18f12 <__swbuf_r+0x36>
   18f62:	2e0a      	cmp	r6, #10
   18f64:	d1d5      	bne.n	18f12 <__swbuf_r+0x36>
   18f66:	4621      	mov	r1, r4
   18f68:	4628      	mov	r0, r5
   18f6a:	f000 f8b5 	bl	190d8 <_fflush_r>
   18f6e:	2800      	cmp	r0, #0
   18f70:	d0cf      	beq.n	18f12 <__swbuf_r+0x36>
   18f72:	e7cc      	b.n	18f0e <__swbuf_r+0x32>
   18f74:	0001c3ec 	.word	0x0001c3ec
   18f78:	0001c3cc 	.word	0x0001c3cc
   18f7c:	0001c3ac 	.word	0x0001c3ac

00018f80 <_write_r>:
   18f80:	b538      	push	{r3, r4, r5, lr}
   18f82:	4604      	mov	r4, r0
   18f84:	4d06      	ldr	r5, [pc, #24]	; (18fa0 <_write_r+0x20>)
   18f86:	4608      	mov	r0, r1
   18f88:	4611      	mov	r1, r2
   18f8a:	2200      	movs	r2, #0
   18f8c:	602a      	str	r2, [r5, #0]
   18f8e:	461a      	mov	r2, r3
   18f90:	f000 ffe4 	bl	19f5c <_write>
   18f94:	1c43      	adds	r3, r0, #1
   18f96:	d102      	bne.n	18f9e <_write_r+0x1e>
   18f98:	682b      	ldr	r3, [r5, #0]
   18f9a:	b103      	cbz	r3, 18f9e <_write_r+0x1e>
   18f9c:	6023      	str	r3, [r4, #0]
   18f9e:	bd38      	pop	{r3, r4, r5, pc}
   18fa0:	2000869c 	.word	0x2000869c

00018fa4 <__swsetup_r>:
   18fa4:	4b31      	ldr	r3, [pc, #196]	; (1906c <__swsetup_r+0xc8>)
   18fa6:	b570      	push	{r4, r5, r6, lr}
   18fa8:	681d      	ldr	r5, [r3, #0]
   18faa:	4606      	mov	r6, r0
   18fac:	460c      	mov	r4, r1
   18fae:	b125      	cbz	r5, 18fba <__swsetup_r+0x16>
   18fb0:	69ab      	ldr	r3, [r5, #24]
   18fb2:	b913      	cbnz	r3, 18fba <__swsetup_r+0x16>
   18fb4:	4628      	mov	r0, r5
   18fb6:	f7ff fab9 	bl	1852c <__sinit>
   18fba:	4b2d      	ldr	r3, [pc, #180]	; (19070 <__swsetup_r+0xcc>)
   18fbc:	429c      	cmp	r4, r3
   18fbe:	d10e      	bne.n	18fde <__swsetup_r+0x3a>
   18fc0:	686c      	ldr	r4, [r5, #4]
   18fc2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   18fc6:	071a      	lsls	r2, r3, #28
   18fc8:	d42c      	bmi.n	19024 <__swsetup_r+0x80>
   18fca:	06dd      	lsls	r5, r3, #27
   18fcc:	d411      	bmi.n	18ff2 <__swsetup_r+0x4e>
   18fce:	2209      	movs	r2, #9
   18fd0:	6032      	str	r2, [r6, #0]
   18fd2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   18fd6:	f04f 30ff 	mov.w	r0, #4294967295
   18fda:	81a3      	strh	r3, [r4, #12]
   18fdc:	e03d      	b.n	1905a <__swsetup_r+0xb6>
   18fde:	4b25      	ldr	r3, [pc, #148]	; (19074 <__swsetup_r+0xd0>)
   18fe0:	429c      	cmp	r4, r3
   18fe2:	d101      	bne.n	18fe8 <__swsetup_r+0x44>
   18fe4:	68ac      	ldr	r4, [r5, #8]
   18fe6:	e7ec      	b.n	18fc2 <__swsetup_r+0x1e>
   18fe8:	4b23      	ldr	r3, [pc, #140]	; (19078 <__swsetup_r+0xd4>)
   18fea:	429c      	cmp	r4, r3
   18fec:	bf08      	it	eq
   18fee:	68ec      	ldreq	r4, [r5, #12]
   18ff0:	e7e7      	b.n	18fc2 <__swsetup_r+0x1e>
   18ff2:	0758      	lsls	r0, r3, #29
   18ff4:	d512      	bpl.n	1901c <__swsetup_r+0x78>
   18ff6:	6b61      	ldr	r1, [r4, #52]	; 0x34
   18ff8:	b141      	cbz	r1, 1900c <__swsetup_r+0x68>
   18ffa:	f104 0344 	add.w	r3, r4, #68	; 0x44
   18ffe:	4299      	cmp	r1, r3
   19000:	d002      	beq.n	19008 <__swsetup_r+0x64>
   19002:	4630      	mov	r0, r6
   19004:	f7fe fe20 	bl	17c48 <_free_r>
   19008:	2300      	movs	r3, #0
   1900a:	6363      	str	r3, [r4, #52]	; 0x34
   1900c:	89a3      	ldrh	r3, [r4, #12]
   1900e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
   19012:	81a3      	strh	r3, [r4, #12]
   19014:	2300      	movs	r3, #0
   19016:	6063      	str	r3, [r4, #4]
   19018:	6923      	ldr	r3, [r4, #16]
   1901a:	6023      	str	r3, [r4, #0]
   1901c:	89a3      	ldrh	r3, [r4, #12]
   1901e:	f043 0308 	orr.w	r3, r3, #8
   19022:	81a3      	strh	r3, [r4, #12]
   19024:	6923      	ldr	r3, [r4, #16]
   19026:	b94b      	cbnz	r3, 1903c <__swsetup_r+0x98>
   19028:	89a3      	ldrh	r3, [r4, #12]
   1902a:	f403 7320 	and.w	r3, r3, #640	; 0x280
   1902e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   19032:	d003      	beq.n	1903c <__swsetup_r+0x98>
   19034:	4621      	mov	r1, r4
   19036:	4630      	mov	r0, r6
   19038:	f000 f8ae 	bl	19198 <__smakebuf_r>
   1903c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   19040:	f013 0201 	ands.w	r2, r3, #1
   19044:	d00a      	beq.n	1905c <__swsetup_r+0xb8>
   19046:	2200      	movs	r2, #0
   19048:	60a2      	str	r2, [r4, #8]
   1904a:	6962      	ldr	r2, [r4, #20]
   1904c:	4252      	negs	r2, r2
   1904e:	61a2      	str	r2, [r4, #24]
   19050:	6922      	ldr	r2, [r4, #16]
   19052:	b942      	cbnz	r2, 19066 <__swsetup_r+0xc2>
   19054:	f013 0080 	ands.w	r0, r3, #128	; 0x80
   19058:	d1bb      	bne.n	18fd2 <__swsetup_r+0x2e>
   1905a:	bd70      	pop	{r4, r5, r6, pc}
   1905c:	0799      	lsls	r1, r3, #30
   1905e:	bf58      	it	pl
   19060:	6962      	ldrpl	r2, [r4, #20]
   19062:	60a2      	str	r2, [r4, #8]
   19064:	e7f4      	b.n	19050 <__swsetup_r+0xac>
   19066:	2000      	movs	r0, #0
   19068:	e7f7      	b.n	1905a <__swsetup_r+0xb6>
   1906a:	bf00      	nop
   1906c:	20008140 	.word	0x20008140
   19070:	0001c3ec 	.word	0x0001c3ec
   19074:	0001c3cc 	.word	0x0001c3cc
   19078:	0001c3ac 	.word	0x0001c3ac

0001907c <__assert_func>:
   1907c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   1907e:	4614      	mov	r4, r2
   19080:	461a      	mov	r2, r3
   19082:	4b09      	ldr	r3, [pc, #36]	; (190a8 <__assert_func+0x2c>)
   19084:	4605      	mov	r5, r0
   19086:	681b      	ldr	r3, [r3, #0]
   19088:	68d8      	ldr	r0, [r3, #12]
   1908a:	b954      	cbnz	r4, 190a2 <__assert_func+0x26>
   1908c:	4b07      	ldr	r3, [pc, #28]	; (190ac <__assert_func+0x30>)
   1908e:	461c      	mov	r4, r3
   19090:	9100      	str	r1, [sp, #0]
   19092:	4907      	ldr	r1, [pc, #28]	; (190b0 <__assert_func+0x34>)
   19094:	e9cd 3401 	strd	r3, r4, [sp, #4]
   19098:	462b      	mov	r3, r5
   1909a:	f000 f859 	bl	19150 <fiprintf>
   1909e:	f002 fb37 	bl	1b710 <abort>
   190a2:	4b04      	ldr	r3, [pc, #16]	; (190b4 <__assert_func+0x38>)
   190a4:	e7f4      	b.n	19090 <__assert_func+0x14>
   190a6:	bf00      	nop
   190a8:	20008140 	.word	0x20008140
   190ac:	0001c6b7 	.word	0x0001c6b7
   190b0:	0001c689 	.word	0x0001c689
   190b4:	0001c67c 	.word	0x0001c67c

000190b8 <_close_r>:
   190b8:	b538      	push	{r3, r4, r5, lr}
   190ba:	2300      	movs	r3, #0
   190bc:	4d05      	ldr	r5, [pc, #20]	; (190d4 <_close_r+0x1c>)
   190be:	4604      	mov	r4, r0
   190c0:	4608      	mov	r0, r1
   190c2:	602b      	str	r3, [r5, #0]
   190c4:	f000 ff50 	bl	19f68 <_close>
   190c8:	1c43      	adds	r3, r0, #1
   190ca:	d102      	bne.n	190d2 <_close_r+0x1a>
   190cc:	682b      	ldr	r3, [r5, #0]
   190ce:	b103      	cbz	r3, 190d2 <_close_r+0x1a>
   190d0:	6023      	str	r3, [r4, #0]
   190d2:	bd38      	pop	{r3, r4, r5, pc}
   190d4:	2000869c 	.word	0x2000869c

000190d8 <_fflush_r>:
   190d8:	b538      	push	{r3, r4, r5, lr}
   190da:	690b      	ldr	r3, [r1, #16]
   190dc:	4605      	mov	r5, r0
   190de:	460c      	mov	r4, r1
   190e0:	b913      	cbnz	r3, 190e8 <_fflush_r+0x10>
   190e2:	2500      	movs	r5, #0
   190e4:	4628      	mov	r0, r5
   190e6:	bd38      	pop	{r3, r4, r5, pc}
   190e8:	b118      	cbz	r0, 190f2 <_fflush_r+0x1a>
   190ea:	6983      	ldr	r3, [r0, #24]
   190ec:	b90b      	cbnz	r3, 190f2 <_fflush_r+0x1a>
   190ee:	f7ff fa1d 	bl	1852c <__sinit>
   190f2:	4b14      	ldr	r3, [pc, #80]	; (19144 <_fflush_r+0x6c>)
   190f4:	429c      	cmp	r4, r3
   190f6:	d11b      	bne.n	19130 <_fflush_r+0x58>
   190f8:	686c      	ldr	r4, [r5, #4]
   190fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   190fe:	2b00      	cmp	r3, #0
   19100:	d0ef      	beq.n	190e2 <_fflush_r+0xa>
   19102:	6e62      	ldr	r2, [r4, #100]	; 0x64
   19104:	07d0      	lsls	r0, r2, #31
   19106:	d404      	bmi.n	19112 <_fflush_r+0x3a>
   19108:	0599      	lsls	r1, r3, #22
   1910a:	d402      	bmi.n	19112 <_fflush_r+0x3a>
   1910c:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1910e:	f000 ff47 	bl	19fa0 <__retarget_lock_acquire_recursive>
   19112:	4628      	mov	r0, r5
   19114:	4621      	mov	r1, r4
   19116:	f002 fa38 	bl	1b58a <__sflush_r>
   1911a:	6e63      	ldr	r3, [r4, #100]	; 0x64
   1911c:	4605      	mov	r5, r0
   1911e:	07da      	lsls	r2, r3, #31
   19120:	d4e0      	bmi.n	190e4 <_fflush_r+0xc>
   19122:	89a3      	ldrh	r3, [r4, #12]
   19124:	059b      	lsls	r3, r3, #22
   19126:	d4dd      	bmi.n	190e4 <_fflush_r+0xc>
   19128:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1912a:	f000 ff41 	bl	19fb0 <__retarget_lock_release_recursive>
   1912e:	e7d9      	b.n	190e4 <_fflush_r+0xc>
   19130:	4b05      	ldr	r3, [pc, #20]	; (19148 <_fflush_r+0x70>)
   19132:	429c      	cmp	r4, r3
   19134:	d101      	bne.n	1913a <_fflush_r+0x62>
   19136:	68ac      	ldr	r4, [r5, #8]
   19138:	e7df      	b.n	190fa <_fflush_r+0x22>
   1913a:	4b04      	ldr	r3, [pc, #16]	; (1914c <_fflush_r+0x74>)
   1913c:	429c      	cmp	r4, r3
   1913e:	bf08      	it	eq
   19140:	68ec      	ldreq	r4, [r5, #12]
   19142:	e7da      	b.n	190fa <_fflush_r+0x22>
   19144:	0001c3ec 	.word	0x0001c3ec
   19148:	0001c3cc 	.word	0x0001c3cc
   1914c:	0001c3ac 	.word	0x0001c3ac

00019150 <fiprintf>:
   19150:	b40e      	push	{r1, r2, r3}
   19152:	b503      	push	{r0, r1, lr}
   19154:	ab03      	add	r3, sp, #12
   19156:	4601      	mov	r1, r0
   19158:	4805      	ldr	r0, [pc, #20]	; (19170 <fiprintf+0x20>)
   1915a:	f853 2b04 	ldr.w	r2, [r3], #4
   1915e:	6800      	ldr	r0, [r0, #0]
   19160:	9301      	str	r3, [sp, #4]
   19162:	f7ff fd8f 	bl	18c84 <_vfiprintf_r>
   19166:	b002      	add	sp, #8
   19168:	f85d eb04 	ldr.w	lr, [sp], #4
   1916c:	b003      	add	sp, #12
   1916e:	4770      	bx	lr
   19170:	20008140 	.word	0x20008140

00019174 <_lseek_r>:
   19174:	b538      	push	{r3, r4, r5, lr}
   19176:	4604      	mov	r4, r0
   19178:	4d06      	ldr	r5, [pc, #24]	; (19194 <_lseek_r+0x20>)
   1917a:	4608      	mov	r0, r1
   1917c:	4611      	mov	r1, r2
   1917e:	2200      	movs	r2, #0
   19180:	602a      	str	r2, [r5, #0]
   19182:	461a      	mov	r2, r3
   19184:	f000 fef3 	bl	19f6e <_lseek>
   19188:	1c43      	adds	r3, r0, #1
   1918a:	d102      	bne.n	19192 <_lseek_r+0x1e>
   1918c:	682b      	ldr	r3, [r5, #0]
   1918e:	b103      	cbz	r3, 19192 <_lseek_r+0x1e>
   19190:	6023      	str	r3, [r4, #0]
   19192:	bd38      	pop	{r3, r4, r5, pc}
   19194:	2000869c 	.word	0x2000869c

00019198 <__smakebuf_r>:
   19198:	898b      	ldrh	r3, [r1, #12]
   1919a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1919c:	079d      	lsls	r5, r3, #30
   1919e:	4606      	mov	r6, r0
   191a0:	460c      	mov	r4, r1
   191a2:	d507      	bpl.n	191b4 <__smakebuf_r+0x1c>
   191a4:	f104 0347 	add.w	r3, r4, #71	; 0x47
   191a8:	6023      	str	r3, [r4, #0]
   191aa:	6123      	str	r3, [r4, #16]
   191ac:	2301      	movs	r3, #1
   191ae:	6163      	str	r3, [r4, #20]
   191b0:	b003      	add	sp, #12
   191b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   191b4:	ab01      	add	r3, sp, #4
   191b6:	466a      	mov	r2, sp
   191b8:	f002 fa66 	bl	1b688 <__swhatbuf_r>
   191bc:	9f00      	ldr	r7, [sp, #0]
   191be:	4605      	mov	r5, r0
   191c0:	4630      	mov	r0, r6
   191c2:	4639      	mov	r1, r7
   191c4:	f7fe fd8a 	bl	17cdc <_malloc_r>
   191c8:	b948      	cbnz	r0, 191de <__smakebuf_r+0x46>
   191ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   191ce:	059a      	lsls	r2, r3, #22
   191d0:	d4ee      	bmi.n	191b0 <__smakebuf_r+0x18>
   191d2:	f023 0303 	bic.w	r3, r3, #3
   191d6:	f043 0302 	orr.w	r3, r3, #2
   191da:	81a3      	strh	r3, [r4, #12]
   191dc:	e7e2      	b.n	191a4 <__smakebuf_r+0xc>
   191de:	4b0d      	ldr	r3, [pc, #52]	; (19214 <__smakebuf_r+0x7c>)
   191e0:	62b3      	str	r3, [r6, #40]	; 0x28
   191e2:	89a3      	ldrh	r3, [r4, #12]
   191e4:	6020      	str	r0, [r4, #0]
   191e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   191ea:	81a3      	strh	r3, [r4, #12]
   191ec:	9b01      	ldr	r3, [sp, #4]
   191ee:	e9c4 0704 	strd	r0, r7, [r4, #16]
   191f2:	b15b      	cbz	r3, 1920c <__smakebuf_r+0x74>
   191f4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   191f8:	4630      	mov	r0, r6
   191fa:	f000 f831 	bl	19260 <_isatty_r>
   191fe:	b128      	cbz	r0, 1920c <__smakebuf_r+0x74>
   19200:	89a3      	ldrh	r3, [r4, #12]
   19202:	f023 0303 	bic.w	r3, r3, #3
   19206:	f043 0301 	orr.w	r3, r3, #1
   1920a:	81a3      	strh	r3, [r4, #12]
   1920c:	89a3      	ldrh	r3, [r4, #12]
   1920e:	431d      	orrs	r5, r3
   19210:	81a5      	strh	r5, [r4, #12]
   19212:	e7cd      	b.n	191b0 <__smakebuf_r+0x18>
   19214:	000184f1 	.word	0x000184f1

00019218 <_read_r>:
   19218:	b538      	push	{r3, r4, r5, lr}
   1921a:	4604      	mov	r4, r0
   1921c:	4d06      	ldr	r5, [pc, #24]	; (19238 <_read_r+0x20>)
   1921e:	4608      	mov	r0, r1
   19220:	4611      	mov	r1, r2
   19222:	2200      	movs	r2, #0
   19224:	602a      	str	r2, [r5, #0]
   19226:	461a      	mov	r2, r3
   19228:	f000 fe92 	bl	19f50 <_read>
   1922c:	1c43      	adds	r3, r0, #1
   1922e:	d102      	bne.n	19236 <_read_r+0x1e>
   19230:	682b      	ldr	r3, [r5, #0]
   19232:	b103      	cbz	r3, 19236 <_read_r+0x1e>
   19234:	6023      	str	r3, [r4, #0]
   19236:	bd38      	pop	{r3, r4, r5, pc}
   19238:	2000869c 	.word	0x2000869c

0001923c <_fstat_r>:
   1923c:	b538      	push	{r3, r4, r5, lr}
   1923e:	2300      	movs	r3, #0
   19240:	4d06      	ldr	r5, [pc, #24]	; (1925c <_fstat_r+0x20>)
   19242:	4604      	mov	r4, r0
   19244:	4608      	mov	r0, r1
   19246:	4611      	mov	r1, r2
   19248:	602b      	str	r3, [r5, #0]
   1924a:	f000 fe9b 	bl	19f84 <_fstat>
   1924e:	1c43      	adds	r3, r0, #1
   19250:	d102      	bne.n	19258 <_fstat_r+0x1c>
   19252:	682b      	ldr	r3, [r5, #0]
   19254:	b103      	cbz	r3, 19258 <_fstat_r+0x1c>
   19256:	6023      	str	r3, [r4, #0]
   19258:	bd38      	pop	{r3, r4, r5, pc}
   1925a:	bf00      	nop
   1925c:	2000869c 	.word	0x2000869c

00019260 <_isatty_r>:
   19260:	b538      	push	{r3, r4, r5, lr}
   19262:	2300      	movs	r3, #0
   19264:	4d05      	ldr	r5, [pc, #20]	; (1927c <_isatty_r+0x1c>)
   19266:	4604      	mov	r4, r0
   19268:	4608      	mov	r0, r1
   1926a:	602b      	str	r3, [r5, #0]
   1926c:	f000 fe81 	bl	19f72 <_isatty>
   19270:	1c43      	adds	r3, r0, #1
   19272:	d102      	bne.n	1927a <_isatty_r+0x1a>
   19274:	682b      	ldr	r3, [r5, #0]
   19276:	b103      	cbz	r3, 1927a <_isatty_r+0x1a>
   19278:	6023      	str	r3, [r4, #0]
   1927a:	bd38      	pop	{r3, r4, r5, pc}
   1927c:	2000869c 	.word	0x2000869c

00019280 <raise>:
   19280:	4b02      	ldr	r3, [pc, #8]	; (1928c <raise+0xc>)
   19282:	4601      	mov	r1, r0
   19284:	6818      	ldr	r0, [r3, #0]
   19286:	f002 ba4a 	b.w	1b71e <_raise_r>
   1928a:	bf00      	nop
   1928c:	20008140 	.word	0x20008140

00019290 <_kill_r>:
   19290:	b538      	push	{r3, r4, r5, lr}
   19292:	2300      	movs	r3, #0
   19294:	4d06      	ldr	r5, [pc, #24]	; (192b0 <_kill_r+0x20>)
   19296:	4604      	mov	r4, r0
   19298:	4608      	mov	r0, r1
   1929a:	4611      	mov	r1, r2
   1929c:	602b      	str	r3, [r5, #0]
   1929e:	f000 fe6d 	bl	19f7c <_kill>
   192a2:	1c43      	adds	r3, r0, #1
   192a4:	d102      	bne.n	192ac <_kill_r+0x1c>
   192a6:	682b      	ldr	r3, [r5, #0]
   192a8:	b103      	cbz	r3, 192ac <_kill_r+0x1c>
   192aa:	6023      	str	r3, [r4, #0]
   192ac:	bd38      	pop	{r3, r4, r5, pc}
   192ae:	bf00      	nop
   192b0:	2000869c 	.word	0x2000869c

000192b4 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
   192b4:	4770      	bx	lr

000192b6 <z_impl_gpio_pin_interrupt_configure>:
{
   192b6:	b538      	push	{r3, r4, r5, lr}
	const struct gpio_driver_api *api =
   192b8:	6883      	ldr	r3, [r0, #8]
	const struct gpio_driver_data *const data =
   192ba:	6904      	ldr	r4, [r0, #16]
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
   192bc:	f412 0f00 	tst.w	r2, #8388608	; 0x800000
   192c0:	d006      	beq.n	192d0 <z_impl_gpio_pin_interrupt_configure+0x1a>
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
   192c2:	6825      	ldr	r5, [r4, #0]
   192c4:	2401      	movs	r4, #1
   192c6:	408c      	lsls	r4, r1
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
   192c8:	4225      	tst	r5, r4
   192ca:	d001      	beq.n	192d0 <z_impl_gpio_pin_interrupt_configure+0x1a>
		flags ^= (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1);
   192cc:	f082 62c0 	eor.w	r2, r2, #100663296	; 0x6000000
	return api->pin_interrupt_configure(port, pin, mode, trig);
   192d0:	699c      	ldr	r4, [r3, #24]
   192d2:	f002 63c0 	and.w	r3, r2, #100663296	; 0x6000000
   192d6:	f002 72b0 	and.w	r2, r2, #23068672	; 0x1600000
   192da:	47a0      	blx	r4
}
   192dc:	bd38      	pop	{r3, r4, r5, pc}

000192de <z_impl_gpio_pin_configure>:
{
   192de:	b538      	push	{r3, r4, r5, lr}
   192e0:	4613      	mov	r3, r2
	const struct gpio_driver_api *api =
   192e2:	6885      	ldr	r5, [r0, #8]
	struct gpio_driver_data *data =
   192e4:	6904      	ldr	r4, [r0, #16]
	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
   192e6:	f412 1f80 	tst.w	r2, #1048576	; 0x100000
   192ea:	d007      	beq.n	192fc <z_impl_gpio_pin_configure+0x1e>
	    && ((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) != 0)
   192ec:	f412 2f40 	tst.w	r2, #786432	; 0xc0000
   192f0:	d004      	beq.n	192fc <z_impl_gpio_pin_configure+0x1e>
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
   192f2:	f012 0f01 	tst.w	r2, #1
   192f6:	d001      	beq.n	192fc <z_impl_gpio_pin_configure+0x1e>
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
   192f8:	f482 2340 	eor.w	r3, r2, #786432	; 0xc0000
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
   192fc:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
   19300:	f013 0f01 	tst.w	r3, #1
   19304:	d00a      	beq.n	1931c <z_impl_gpio_pin_configure+0x3e>
		data->invert |= (gpio_port_pins_t)BIT(pin);
   19306:	6823      	ldr	r3, [r4, #0]
   19308:	f04f 0c01 	mov.w	ip, #1
   1930c:	fa0c fc01 	lsl.w	ip, ip, r1
   19310:	ea43 030c 	orr.w	r3, r3, ip
   19314:	6023      	str	r3, [r4, #0]
	return api->pin_configure(port, pin, flags);
   19316:	682b      	ldr	r3, [r5, #0]
   19318:	4798      	blx	r3
}
   1931a:	bd38      	pop	{r3, r4, r5, pc}
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   1931c:	6823      	ldr	r3, [r4, #0]
   1931e:	f04f 0c01 	mov.w	ip, #1
   19322:	fa0c fc01 	lsl.w	ip, ip, r1
   19326:	ea23 030c 	bic.w	r3, r3, ip
   1932a:	6023      	str	r3, [r4, #0]
   1932c:	e7f3      	b.n	19316 <z_impl_gpio_pin_configure+0x38>

0001932e <gpio_add_callback>:
 *
 * Note: enables to add as many callback as needed on the same port.
 */
static inline int gpio_add_callback(const struct device *port,
				    struct gpio_callback *callback)
{
   1932e:	b508      	push	{r3, lr}
	const struct gpio_driver_api *api =
   19330:	6883      	ldr	r3, [r0, #8]
		(const struct gpio_driver_api *)port->api;

	if (api->manage_callback == NULL) {
   19332:	69db      	ldr	r3, [r3, #28]
   19334:	b113      	cbz	r3, 1933c <gpio_add_callback+0xe>
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
   19336:	2201      	movs	r2, #1
   19338:	4798      	blx	r3
}
   1933a:	bd08      	pop	{r3, pc}
		return -ENOTSUP;
   1933c:	f06f 0085 	mvn.w	r0, #133	; 0x85
   19340:	e7fb      	b.n	1933a <gpio_add_callback+0xc>

00019342 <k_uptime_get_32>:
{
   19342:	b508      	push	{r3, lr}
	return z_impl_k_uptime_ticks();
   19344:	f001 fe32 	bl	1afac <z_impl_k_uptime_ticks>
	return k_ticks_to_ms_floor64(k_uptime_ticks());
   19348:	4602      	mov	r2, r0
   1934a:	014b      	lsls	r3, r1, #5
   1934c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
   19350:	0140      	lsls	r0, r0, #5
   19352:	1a80      	subs	r0, r0, r2
   19354:	eb63 0301 	sbc.w	r3, r3, r1
   19358:	009b      	lsls	r3, r3, #2
   1935a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
   1935e:	0080      	lsls	r0, r0, #2
   19360:	1880      	adds	r0, r0, r2
   19362:	eb43 0301 	adc.w	r3, r3, r1
   19366:	00db      	lsls	r3, r3, #3
   19368:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
   1936c:	f3c0 3010 	ubfx	r0, r0, #12, #17
}
   19370:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
   19374:	bd08      	pop	{r3, pc}

00019376 <gpio_enable_interrupt>:
	gt[channel].g_int.active = enable;
   19376:	232c      	movs	r3, #44	; 0x2c
   19378:	fb03 0001 	mla	r0, r3, r1, r0
   1937c:	7602      	strb	r2, [r0, #24]
}
   1937e:	4770      	bx	lr

00019380 <gpio_enable>:
	gt[channel].active = enable;
   19380:	232c      	movs	r3, #44	; 0x2c
   19382:	fb03 f101 	mul.w	r1, r3, r1
   19386:	5442      	strb	r2, [r0, r1]
}
   19388:	4770      	bx	lr

0001938a <get_gpio_pin_interrupt_config>:
uint32_t get_gpio_pin_interrupt_config(Gpio_t* gt, uint8_t size){
   1938a:	4684      	mov	ip, r0
	for (int i = 0; i < size; i++) {
   1938c:	2200      	movs	r2, #0
	uint32_t pin_list = 0;
   1938e:	4610      	mov	r0, r2
	for (int i = 0; i < size; i++) {
   19390:	4291      	cmp	r1, r2
   19392:	dd1a      	ble.n	193ca <get_gpio_pin_interrupt_config+0x40>
uint32_t get_gpio_pin_interrupt_config(Gpio_t* gt, uint8_t size){
   19394:	b500      	push	{lr}
   19396:	e002      	b.n	1939e <get_gpio_pin_interrupt_config+0x14>
	for (int i = 0; i < size; i++) {
   19398:	3201      	adds	r2, #1
   1939a:	4291      	cmp	r1, r2
   1939c:	dd13      	ble.n	193c6 <get_gpio_pin_interrupt_config+0x3c>
		if (gt[i].active && gt[i].g_int.active) {
   1939e:	232c      	movs	r3, #44	; 0x2c
   193a0:	fb02 f303 	mul.w	r3, r2, r3
   193a4:	eb0c 0e03 	add.w	lr, ip, r3
   193a8:	f81c 3003 	ldrb.w	r3, [ip, r3]
   193ac:	2b00      	cmp	r3, #0
   193ae:	d0f3      	beq.n	19398 <get_gpio_pin_interrupt_config+0xe>
   193b0:	f89e 3018 	ldrb.w	r3, [lr, #24]
   193b4:	2b00      	cmp	r3, #0
   193b6:	d0ef      	beq.n	19398 <get_gpio_pin_interrupt_config+0xe>
			pin_list |= BIT(gt[i].pin);
   193b8:	f89e e008 	ldrb.w	lr, [lr, #8]
   193bc:	2301      	movs	r3, #1
   193be:	fa03 f30e 	lsl.w	r3, r3, lr
   193c2:	4318      	orrs	r0, r3
   193c4:	e7e8      	b.n	19398 <get_gpio_pin_interrupt_config+0xe>
}
   193c6:	f85d fb04 	ldr.w	pc, [sp], #4
   193ca:	4770      	bx	lr

000193cc <reset_gpio_interrupt>:

void reset_gpio_interrupt(Gpio_t* gt, uint8_t channel){
	if (gt[channel].active && gt[channel].g_int.active){
   193cc:	232c      	movs	r3, #44	; 0x2c
   193ce:	fb03 f101 	mul.w	r1, r3, r1
   193d2:	1842      	adds	r2, r0, r1
   193d4:	5c43      	ldrb	r3, [r0, r1]
   193d6:	b123      	cbz	r3, 193e2 <reset_gpio_interrupt+0x16>
   193d8:	7e13      	ldrb	r3, [r2, #24]
   193da:	b113      	cbz	r3, 193e2 <reset_gpio_interrupt+0x16>
		gt[channel].g_int.status = false;
   193dc:	2300      	movs	r3, #0
   193de:	f882 3020 	strb.w	r3, [r2, #32]
	}
}
   193e2:	4770      	bx	lr

000193e4 <get_gpio_interrupt_status>:

bool get_gpio_interrupt_status(Gpio_t* gt, uint8_t channel){
	if (gt[channel].active && gt[channel].g_int.active){
   193e4:	232c      	movs	r3, #44	; 0x2c
   193e6:	fb03 f101 	mul.w	r1, r3, r1
   193ea:	1843      	adds	r3, r0, r1
   193ec:	5c40      	ldrb	r0, [r0, r1]
   193ee:	b118      	cbz	r0, 193f8 <get_gpio_interrupt_status+0x14>
   193f0:	7e18      	ldrb	r0, [r3, #24]
   193f2:	b108      	cbz	r0, 193f8 <get_gpio_interrupt_status+0x14>
		return gt[channel].g_int.status;
   193f4:	f893 0020 	ldrb.w	r0, [r3, #32]
	}else{
		return false;
	}
   193f8:	4770      	bx	lr

000193fa <k_uptime_get_32>:
{
   193fa:	b508      	push	{r3, lr}
   193fc:	f001 fdd6 	bl	1afac <z_impl_k_uptime_ticks>
	return k_ticks_to_ms_floor64(k_uptime_ticks());
   19400:	4602      	mov	r2, r0
   19402:	014b      	lsls	r3, r1, #5
   19404:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
   19408:	0140      	lsls	r0, r0, #5
   1940a:	1a80      	subs	r0, r0, r2
   1940c:	eb63 0301 	sbc.w	r3, r3, r1
   19410:	009b      	lsls	r3, r3, #2
   19412:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
   19416:	0080      	lsls	r0, r0, #2
   19418:	1880      	adds	r0, r0, r2
   1941a:	eb43 0301 	adc.w	r3, r3, r1
   1941e:	00db      	lsls	r3, r3, #3
   19420:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
   19424:	f3c0 3010 	ubfx	r0, r0, #12, #17
}
   19428:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
   1942c:	bd08      	pop	{r3, pc}

0001942e <k_uptime_get_32>:
{
   1942e:	b508      	push	{r3, lr}
   19430:	f001 fdbc 	bl	1afac <z_impl_k_uptime_ticks>
	return k_ticks_to_ms_floor64(k_uptime_ticks());
   19434:	4602      	mov	r2, r0
   19436:	014b      	lsls	r3, r1, #5
   19438:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
   1943c:	0140      	lsls	r0, r0, #5
   1943e:	1a80      	subs	r0, r0, r2
   19440:	eb63 0301 	sbc.w	r3, r3, r1
   19444:	009b      	lsls	r3, r3, #2
   19446:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
   1944a:	0080      	lsls	r0, r0, #2
   1944c:	1880      	adds	r0, r0, r2
   1944e:	eb43 0301 	adc.w	r3, r3, r1
   19452:	00db      	lsls	r3, r3, #3
   19454:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
   19458:	f3c0 3010 	ubfx	r0, r0, #12, #17
}
   1945c:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
   19460:	bd08      	pop	{r3, pc}

00019462 <k_uptime_get_32>:
{
   19462:	b508      	push	{r3, lr}
   19464:	f001 fda2 	bl	1afac <z_impl_k_uptime_ticks>
	return k_ticks_to_ms_floor64(k_uptime_ticks());
   19468:	4602      	mov	r2, r0
   1946a:	014b      	lsls	r3, r1, #5
   1946c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
   19470:	0140      	lsls	r0, r0, #5
   19472:	1a80      	subs	r0, r0, r2
   19474:	eb63 0301 	sbc.w	r3, r3, r1
   19478:	009b      	lsls	r3, r3, #2
   1947a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
   1947e:	0080      	lsls	r0, r0, #2
   19480:	1880      	adds	r0, r0, r2
   19482:	eb43 0301 	adc.w	r3, r3, r1
   19486:	00db      	lsls	r3, r3, #3
   19488:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
   1948c:	f3c0 3010 	ubfx	r0, r0, #12, #17
}
   19490:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
   19494:	bd08      	pop	{r3, pc}

00019496 <i2c_melexis_getCtrlReg>:
uint16_t i2c_melexis_getCtrlReg(){
   19496:	b500      	push	{lr}
   19498:	b083      	sub	sp, #12
    ret = mlx90632_i2c_read(MLX90632_REG_CTRL, &reg_value);
   1949a:	f10d 0106 	add.w	r1, sp, #6
   1949e:	f243 0001 	movw	r0, #12289	; 0x3001
   194a2:	f7f9 fc6b 	bl	12d7c <mlx90632_i2c_read>
    if (ret < 0){
   194a6:	2800      	cmp	r0, #0
   194a8:	db04      	blt.n	194b4 <i2c_melexis_getCtrlReg+0x1e>
}
   194aa:	f8bd 0006 	ldrh.w	r0, [sp, #6]
   194ae:	b003      	add	sp, #12
   194b0:	f85d fb04 	ldr.w	pc, [sp], #4
        reg_value = 0xFFFF; //error during reading
   194b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
   194b8:	f8ad 3006 	strh.w	r3, [sp, #6]
   194bc:	e7f5      	b.n	194aa <i2c_melexis_getCtrlReg+0x14>

000194be <i2c_melexis_e2busy>:
bool i2c_melexis_e2busy(){
   194be:	b508      	push	{r3, lr}
    reg_value = i2c_melexis_getStsReg();
   194c0:	f7f8 ff62 	bl	12388 <i2c_melexis_getStsReg>
}
   194c4:	2000      	movs	r0, #0
   194c6:	bd08      	pop	{r3, pc}

000194c8 <i2c_melexis_setmode>:
int32_t i2c_melexis_setmode(uint8_t mode){
   194c8:	b538      	push	{r3, r4, r5, lr}
   194ca:	4605      	mov	r5, r0
    reg_ctrl = 0x00;
   194cc:	2000      	movs	r0, #0
    int32_t ret = 0;
   194ce:	4604      	mov	r4, r0
    while ((reg_ctrl & (uint16_t)(GENMASK(2,1))) != mode){
   194d0:	e009      	b.n	194e6 <i2c_melexis_setmode+0x1e>
        reg_ctrl |= mode; //Set the bits
   194d2:	ea40 0105 	orr.w	r1, r0, r5
        ret = mlx90632_i2c_write(MLX90632_REG_CTRL, reg_ctrl); //Set the mode bits
   194d6:	b289      	uxth	r1, r1
   194d8:	f243 0001 	movw	r0, #12289	; 0x3001
   194dc:	f7f9 fc84 	bl	12de8 <mlx90632_i2c_write>
   194e0:	4604      	mov	r4, r0
        reg_ctrl = i2c_melexis_getCtrlReg();
   194e2:	f7ff ffd8 	bl	19496 <i2c_melexis_getCtrlReg>
    while ((reg_ctrl & (uint16_t)(GENMASK(2,1))) != mode){
   194e6:	f000 0306 	and.w	r3, r0, #6
   194ea:	42ab      	cmp	r3, r5
   194ec:	d1f1      	bne.n	194d2 <i2c_melexis_setmode+0xa>
}
   194ee:	4620      	mov	r0, r4
   194f0:	bd38      	pop	{r3, r4, r5, pc}

000194f2 <i2c_melexis_set_soc>:
int32_t i2c_melexis_set_soc(){
   194f2:	b510      	push	{r4, lr}
    reg_ctrl = i2c_melexis_getCtrlReg();
   194f4:	f7ff ffcf 	bl	19496 <i2c_melexis_getCtrlReg>
    if (reg_ctrl == 0xFFFF)
   194f8:	f64f 73ff 	movw	r3, #65535	; 0xffff
   194fc:	4298      	cmp	r0, r3
   194fe:	d010      	beq.n	19522 <i2c_melexis_set_soc+0x30>
    int32_t ret = 0;
   19500:	2400      	movs	r4, #0
   19502:	e009      	b.n	19518 <i2c_melexis_set_soc+0x26>
        reg_ctrl |= MLX90632_CFG_SOC_MASK;
   19504:	f040 0008 	orr.w	r0, r0, #8
        ret = mlx90632_i2c_write(MLX90632_REG_CTRL, reg_ctrl);
   19508:	b281      	uxth	r1, r0
   1950a:	f243 0001 	movw	r0, #12289	; 0x3001
   1950e:	f7f9 fc6b 	bl	12de8 <mlx90632_i2c_write>
   19512:	4604      	mov	r4, r0
        reg_ctrl = i2c_melexis_getCtrlReg();
   19514:	f7ff ffbf 	bl	19496 <i2c_melexis_getCtrlReg>
    while ((reg_ctrl & (uint16_t)(MLX90632_CFG_SOC_MASK)) != MLX90632_CFG_SOC_MASK){
   19518:	f010 0f08 	tst.w	r0, #8
   1951c:	d0f2      	beq.n	19504 <i2c_melexis_set_soc+0x12>
}
   1951e:	4620      	mov	r0, r4
   19520:	bd10      	pop	{r4, pc}
        return -1;
   19522:	f04f 34ff 	mov.w	r4, #4294967295
   19526:	e7fa      	b.n	1951e <i2c_melexis_set_soc+0x2c>

00019528 <mlx90632_get_refresh_rate>:
mlx90632_meas_t mlx90632_get_refresh_rate(void){
   19528:	b500      	push	{lr}
   1952a:	b083      	sub	sp, #12
    ret = mlx90632_i2c_read(MLX90632_EE_MEDICAL_MEAS1, &meas1);
   1952c:	f10d 0106 	add.w	r1, sp, #6
   19530:	f242 40e1 	movw	r0, #9441	; 0x24e1
   19534:	f7f9 fc22 	bl	12d7c <mlx90632_i2c_read>
    if (ret < 0)
   19538:	2800      	cmp	r0, #0
   1953a:	db06      	blt.n	1954a <mlx90632_get_refresh_rate+0x22>
    return (mlx90632_meas_t)MLX90632_REFRESH_RATE(meas1);
   1953c:	f8bd 0006 	ldrh.w	r0, [sp, #6]
   19540:	f3c0 2002 	ubfx	r0, r0, #8, #3
}
   19544:	b003      	add	sp, #12
   19546:	f85d fb04 	ldr.w	pc, [sp], #4
        return MLX90632_MEAS_HZ_ERROR;
   1954a:	f04f 30ff 	mov.w	r0, #4294967295
   1954e:	e7f9      	b.n	19544 <mlx90632_get_refresh_rate+0x1c>

00019550 <usleep>:

extern void usleep(int min_range, int max_range){
   19550:	b508      	push	{r3, lr}

    k_usleep(( min_range + max_range )  / 2);
   19552:	4408      	add	r0, r1
   19554:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
   19558:	1040      	asrs	r0, r0, #1
	return z_impl_k_usleep(us);
   1955a:	f7fe f89f 	bl	1769c <z_impl_k_usleep>
}
   1955e:	bd08      	pop	{r3, pc}

00019560 <mlx90632_addressed_reset>:
int32_t mlx90632_addressed_reset(void){
   19560:	b500      	push	{lr}
   19562:	b083      	sub	sp, #12
    ret = mlx90632_i2c_read(MLX90632_REG_CTRL, &reg_value);
   19564:	f10d 0106 	add.w	r1, sp, #6
   19568:	f243 0001 	movw	r0, #12289	; 0x3001
   1956c:	f7f9 fc06 	bl	12d7c <mlx90632_i2c_read>
    if (ret < 0)
   19570:	2800      	cmp	r0, #0
   19572:	db1c      	blt.n	195ae <mlx90632_addressed_reset+0x4e>
    reg_ctrl = reg_value & ~MLX90632_CFG_PWR_MASK;
   19574:	f8bd 1006 	ldrh.w	r1, [sp, #6]
   19578:	f021 0106 	bic.w	r1, r1, #6
    ret = mlx90632_i2c_write(MLX90632_REG_CTRL, reg_ctrl);
   1957c:	f041 0104 	orr.w	r1, r1, #4
   19580:	f243 0001 	movw	r0, #12289	; 0x3001
   19584:	f7f9 fc30 	bl	12de8 <mlx90632_i2c_write>
    if (ret < 0)
   19588:	2800      	cmp	r0, #0
   1958a:	db10      	blt.n	195ae <mlx90632_addressed_reset+0x4e>
    ret = mlx90632_i2c_write(0x3005, reg_ctrl);
   1958c:	2106      	movs	r1, #6
   1958e:	f243 0005 	movw	r0, #12293	; 0x3005
   19592:	f7f9 fc29 	bl	12de8 <mlx90632_i2c_write>
    if (ret < 0)
   19596:	2800      	cmp	r0, #0
   19598:	db09      	blt.n	195ae <mlx90632_addressed_reset+0x4e>
    usleep(150, 200);
   1959a:	21c8      	movs	r1, #200	; 0xc8
   1959c:	2096      	movs	r0, #150	; 0x96
   1959e:	f7ff ffd7 	bl	19550 <usleep>
    ret = mlx90632_i2c_write(MLX90632_REG_CTRL, reg_value);
   195a2:	f8bd 1006 	ldrh.w	r1, [sp, #6]
   195a6:	f243 0001 	movw	r0, #12289	; 0x3001
   195aa:	f7f9 fc1d 	bl	12de8 <mlx90632_i2c_write>
}
   195ae:	b003      	add	sp, #12
   195b0:	f85d fb04 	ldr.w	pc, [sp], #4

000195b4 <msleep>:

extern void msleep(int msecs){
   195b4:	b508      	push	{r3, lr}

    k_sleep(K_MSEC(msecs));
   195b6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   195ba:	17c1      	asrs	r1, r0, #31
   195bc:	03c9      	lsls	r1, r1, #15
   195be:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
   195c2:	03c0      	lsls	r0, r0, #15
   195c4:	f240 33e7 	movw	r3, #999	; 0x3e7
   195c8:	18c0      	adds	r0, r0, r3
   195ca:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   195ce:	f04f 0300 	mov.w	r3, #0
   195d2:	f141 0100 	adc.w	r1, r1, #0
   195d6:	f7f7 fc27 	bl	10e28 <__aeabi_uldivmod>
	return z_impl_k_sleep(timeout);
   195da:	f7fe f835 	bl	17648 <z_impl_k_sleep>
}
   195de:	bd08      	pop	{r3, pc}

000195e0 <arch_printk_char_out>:
}
   195e0:	2000      	movs	r0, #0
   195e2:	4770      	bx	lr

000195e4 <printk>:
 *
 * @param fmt formatted string to output
 */

void printk(const char *fmt, ...)
{
   195e4:	b40f      	push	{r0, r1, r2, r3}
   195e6:	b500      	push	{lr}
   195e8:	b083      	sub	sp, #12
   195ea:	a904      	add	r1, sp, #16
   195ec:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
   195f0:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
   195f2:	f7f9 fc39 	bl	12e68 <vprintk>

	va_end(ap);
}
   195f6:	b003      	add	sp, #12
   195f8:	f85d eb04 	ldr.w	lr, [sp], #4
   195fc:	b004      	add	sp, #16
   195fe:	4770      	bx	lr

00019600 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   19600:	b508      	push	{r3, lr}
   19602:	4604      	mov	r4, r0
   19604:	4608      	mov	r0, r1
   19606:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
   19608:	461a      	mov	r2, r3
   1960a:	47a0      	blx	r4
	return z_impl_z_current_get();
   1960c:	f7fe f87c 	bl	17708 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
   19610:	f7fa fccc 	bl	13fac <z_impl_k_thread_abort>

00019614 <set_state>:
	mgr->flags = (state & ONOFF_STATE_MASK)
   19614:	f001 0107 	and.w	r1, r1, #7
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   19618:	8b03      	ldrh	r3, [r0, #24]
   1961a:	f023 0307 	bic.w	r3, r3, #7
   1961e:	430b      	orrs	r3, r1
	mgr->flags = (state & ONOFF_STATE_MASK)
   19620:	8303      	strh	r3, [r0, #24]
}
   19622:	4770      	bx	lr

00019624 <notify_monitors>:
{
   19624:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19628:	4606      	mov	r6, r0
   1962a:	460f      	mov	r7, r1
   1962c:	4690      	mov	r8, r2
	return list->head;
   1962e:	6881      	ldr	r1, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   19630:	b121      	cbz	r1, 1963c <notify_monitors+0x18>
	return node->next;
   19632:	680c      	ldr	r4, [r1, #0]
   19634:	b13c      	cbz	r4, 19646 <notify_monitors+0x22>
Z_GENLIST_PEEK_NEXT(slist, snode)
   19636:	b931      	cbnz	r1, 19646 <notify_monitors+0x22>
   19638:	460c      	mov	r4, r1
   1963a:	e004      	b.n	19646 <notify_monitors+0x22>
   1963c:	460c      	mov	r4, r1
   1963e:	e002      	b.n	19646 <notify_monitors+0x22>
   19640:	4623      	mov	r3, r4
   19642:	4621      	mov	r1, r4
   19644:	461c      	mov	r4, r3
   19646:	b169      	cbz	r1, 19664 <notify_monitors+0x40>
		mon->callback(mgr, mon, state, res);
   19648:	684d      	ldr	r5, [r1, #4]
   1964a:	4643      	mov	r3, r8
   1964c:	463a      	mov	r2, r7
   1964e:	4630      	mov	r0, r6
   19650:	47a8      	blx	r5
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   19652:	2c00      	cmp	r4, #0
   19654:	d0f4      	beq.n	19640 <notify_monitors+0x1c>
	return node->next;
   19656:	6823      	ldr	r3, [r4, #0]
   19658:	2b00      	cmp	r3, #0
   1965a:	d0f2      	beq.n	19642 <notify_monitors+0x1e>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1965c:	2c00      	cmp	r4, #0
   1965e:	d1f0      	bne.n	19642 <notify_monitors+0x1e>
   19660:	4623      	mov	r3, r4
   19662:	e7ee      	b.n	19642 <notify_monitors+0x1e>
}
   19664:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00019668 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   19668:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
   1966a:	f013 0307 	ands.w	r3, r3, #7
   1966e:	d103      	bne.n	19678 <process_recheck+0x10>
	return list->head;
   19670:	6802      	ldr	r2, [r0, #0]
	    && !sys_slist_is_empty(&mgr->clients)) {
   19672:	b10a      	cbz	r2, 19678 <process_recheck+0x10>
		evt = EVT_START;
   19674:	2003      	movs	r0, #3
   19676:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   19678:	2b02      	cmp	r3, #2
   1967a:	d003      	beq.n	19684 <process_recheck+0x1c>
	} else if ((state == ONOFF_STATE_ERROR)
   1967c:	2b01      	cmp	r3, #1
   1967e:	d006      	beq.n	1968e <process_recheck+0x26>
	int evt = EVT_NOP;
   19680:	2000      	movs	r0, #0
   19682:	4770      	bx	lr
		   && (mgr->refs == 0U)) {
   19684:	8b42      	ldrh	r2, [r0, #26]
   19686:	2a00      	cmp	r2, #0
   19688:	d1f8      	bne.n	1967c <process_recheck+0x14>
		evt = EVT_STOP;
   1968a:	2004      	movs	r0, #4
   1968c:	4770      	bx	lr
   1968e:	6803      	ldr	r3, [r0, #0]
		   && !sys_slist_is_empty(&mgr->clients)) {
   19690:	b10b      	cbz	r3, 19696 <process_recheck+0x2e>
		evt = EVT_RESET;
   19692:	2005      	movs	r0, #5
}
   19694:	4770      	bx	lr
	int evt = EVT_NOP;
   19696:	2000      	movs	r0, #0
   19698:	4770      	bx	lr

0001969a <process_complete>:
{
   1969a:	b510      	push	{r4, lr}
   1969c:	4604      	mov	r4, r0
   1969e:	468c      	mov	ip, r1
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   196a0:	8b03      	ldrh	r3, [r0, #24]
	if (res < 0) {
   196a2:	2a00      	cmp	r2, #0
   196a4:	db07      	blt.n	196b6 <process_complete+0x1c>
   196a6:	f003 0307 	and.w	r3, r3, #7
		   || (state == ONOFF_STATE_RESETTING)) {
   196aa:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
   196ac:	2a01      	cmp	r2, #1
   196ae:	d90e      	bls.n	196ce <process_complete+0x34>
	} else if (state == ONOFF_STATE_TO_OFF) {
   196b0:	2b04      	cmp	r3, #4
   196b2:	d036      	beq.n	19722 <process_complete+0x88>
}
   196b4:	bd10      	pop	{r4, pc}
		*clients = mgr->clients;
   196b6:	e9d0 0100 	ldrd	r0, r1, [r0]
   196ba:	e88c 0003 	stmia.w	ip, {r0, r1}
	list->head = NULL;
   196be:	2300      	movs	r3, #0
   196c0:	6023      	str	r3, [r4, #0]
	list->tail = NULL;
   196c2:	6063      	str	r3, [r4, #4]
		set_state(mgr, ONOFF_STATE_ERROR);
   196c4:	2101      	movs	r1, #1
   196c6:	4620      	mov	r0, r4
   196c8:	f7ff ffa4 	bl	19614 <set_state>
   196cc:	e7f2      	b.n	196b4 <process_complete+0x1a>
		*clients = mgr->clients;
   196ce:	e9d0 0100 	ldrd	r0, r1, [r0]
   196d2:	e88c 0003 	stmia.w	ip, {r0, r1}
	list->head = NULL;
   196d6:	2200      	movs	r2, #0
   196d8:	6022      	str	r2, [r4, #0]
	list->tail = NULL;
   196da:	6062      	str	r2, [r4, #4]
		if (state == ONOFF_STATE_TO_ON) {
   196dc:	2b06      	cmp	r3, #6
   196de:	d11b      	bne.n	19718 <process_complete+0x7e>
	return list->head;
   196e0:	f8dc 3000 	ldr.w	r3, [ip]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   196e4:	b153      	cbz	r3, 196fc <process_complete+0x62>
				mgr->refs += 1U;
   196e6:	8b62      	ldrh	r2, [r4, #26]
   196e8:	3201      	adds	r2, #1
   196ea:	8362      	strh	r2, [r4, #26]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   196ec:	461a      	mov	r2, r3
	return node->next;
   196ee:	681b      	ldr	r3, [r3, #0]
   196f0:	2b00      	cmp	r3, #0
   196f2:	d0f7      	beq.n	196e4 <process_complete+0x4a>
Z_GENLIST_PEEK_NEXT(slist, snode)
   196f4:	2a00      	cmp	r2, #0
   196f6:	d1f5      	bne.n	196e4 <process_complete+0x4a>
   196f8:	4613      	mov	r3, r2
   196fa:	e7f3      	b.n	196e4 <process_complete+0x4a>
			set_state(mgr, ONOFF_STATE_ON);
   196fc:	2102      	movs	r1, #2
   196fe:	4620      	mov	r0, r4
   19700:	f7ff ff88 	bl	19614 <set_state>
		if (process_recheck(mgr) != EVT_NOP) {
   19704:	4620      	mov	r0, r4
   19706:	f7ff ffaf 	bl	19668 <process_recheck>
   1970a:	2800      	cmp	r0, #0
   1970c:	d0d2      	beq.n	196b4 <process_complete+0x1a>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   1970e:	8b23      	ldrh	r3, [r4, #24]
   19710:	f043 0320 	orr.w	r3, r3, #32
   19714:	8323      	strh	r3, [r4, #24]
   19716:	e7cd      	b.n	196b4 <process_complete+0x1a>
			set_state(mgr, ONOFF_STATE_OFF);
   19718:	2100      	movs	r1, #0
   1971a:	4620      	mov	r0, r4
   1971c:	f7ff ff7a 	bl	19614 <set_state>
   19720:	e7f0      	b.n	19704 <process_complete+0x6a>
		set_state(mgr, ONOFF_STATE_OFF);
   19722:	2100      	movs	r1, #0
   19724:	f7ff ff76 	bl	19614 <set_state>
		if (process_recheck(mgr) != EVT_NOP) {
   19728:	4620      	mov	r0, r4
   1972a:	f7ff ff9d 	bl	19668 <process_recheck>
   1972e:	2800      	cmp	r0, #0
   19730:	d0c0      	beq.n	196b4 <process_complete+0x1a>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   19732:	8b23      	ldrh	r3, [r4, #24]
   19734:	f043 0320 	orr.w	r3, r3, #32
   19738:	8323      	strh	r3, [r4, #24]
}
   1973a:	e7bb      	b.n	196b4 <process_complete+0x1a>

0001973c <validate_args>:
	if ((mgr == NULL) || (cli == NULL)) {
   1973c:	b150      	cbz	r0, 19754 <validate_args+0x18>
{
   1973e:	b510      	push	{r4, lr}
   19740:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   19742:	b151      	cbz	r1, 1975a <validate_args+0x1e>
	int rv = sys_notify_validate(&cli->notify);
   19744:	1d08      	adds	r0, r1, #4
   19746:	f000 f8c4 	bl	198d2 <sys_notify_validate>
	if ((rv == 0)
   1974a:	b910      	cbnz	r0, 19752 <validate_args+0x16>
	    && ((cli->notify.flags
   1974c:	68a3      	ldr	r3, [r4, #8]
   1974e:	2b03      	cmp	r3, #3
   19750:	d806      	bhi.n	19760 <validate_args+0x24>
}
   19752:	bd10      	pop	{r4, pc}
		return -EINVAL;
   19754:	f06f 0015 	mvn.w	r0, #21
}
   19758:	4770      	bx	lr
		return -EINVAL;
   1975a:	f06f 0015 	mvn.w	r0, #21
   1975e:	e7f8      	b.n	19752 <validate_args+0x16>
		rv = -EINVAL;
   19760:	f06f 0015 	mvn.w	r0, #21
   19764:	e7f5      	b.n	19752 <validate_args+0x16>

00019766 <notify_one>:
{
   19766:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1976a:	4607      	mov	r7, r0
   1976c:	460c      	mov	r4, r1
   1976e:	4616      	mov	r6, r2
   19770:	461d      	mov	r5, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   19772:	4619      	mov	r1, r3
   19774:	1d20      	adds	r0, r4, #4
   19776:	f000 f8c3 	bl	19900 <sys_notify_finalize>
	if (cb) {
   1977a:	b128      	cbz	r0, 19788 <notify_one+0x22>
   1977c:	4680      	mov	r8, r0
		cb(mgr, cli, state, res);
   1977e:	462b      	mov	r3, r5
   19780:	4632      	mov	r2, r6
   19782:	4621      	mov	r1, r4
   19784:	4638      	mov	r0, r7
   19786:	47c0      	blx	r8
}
   19788:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001978c <notify_all>:
{
   1978c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19790:	4680      	mov	r8, r0
   19792:	460c      	mov	r4, r1
   19794:	4617      	mov	r7, r2
   19796:	461e      	mov	r6, r3
	while (!sys_slist_is_empty(list)) {
   19798:	e004      	b.n	197a4 <notify_all+0x18>
		notify_one(mgr, cli, state, res);
   1979a:	4633      	mov	r3, r6
   1979c:	463a      	mov	r2, r7
   1979e:	4640      	mov	r0, r8
   197a0:	f7ff ffe1 	bl	19766 <notify_one>
	return list->head;
   197a4:	6821      	ldr	r1, [r4, #0]
	while (!sys_slist_is_empty(list)) {
   197a6:	b131      	cbz	r1, 197b6 <notify_all+0x2a>
	return node->next;
   197a8:	680d      	ldr	r5, [r1, #0]
	list->head = node;
   197aa:	6025      	str	r5, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list);

Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   197ac:	6863      	ldr	r3, [r4, #4]
   197ae:	428b      	cmp	r3, r1
   197b0:	d1f3      	bne.n	1979a <notify_all+0xe>
	list->tail = node;
   197b2:	6065      	str	r5, [r4, #4]
}
   197b4:	e7f1      	b.n	1979a <notify_all+0xe>
}
   197b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000197ba <transition_complete>:
{
   197ba:	b508      	push	{r3, lr}
	__asm__ volatile(
   197bc:	f04f 0c20 	mov.w	ip, #32
   197c0:	f3ef 8211 	mrs	r2, BASEPRI
   197c4:	f38c 8812 	msr	BASEPRI_MAX, ip
   197c8:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
   197cc:	6141      	str	r1, [r0, #20]
	process_event(mgr, EVT_COMPLETE, key);
   197ce:	2101      	movs	r1, #1
   197d0:	f7f9 fb58 	bl	12e84 <process_event>
}
   197d4:	bd08      	pop	{r3, pc}

000197d6 <onoff_manager_init>:
	if ((mgr == NULL)
   197d6:	4603      	mov	r3, r0
   197d8:	b170      	cbz	r0, 197f8 <onoff_manager_init+0x22>
	    || (transitions == NULL)
   197da:	b181      	cbz	r1, 197fe <onoff_manager_init+0x28>
	    || (transitions->start == NULL)
   197dc:	680a      	ldr	r2, [r1, #0]
   197de:	b18a      	cbz	r2, 19804 <onoff_manager_init+0x2e>
	    || (transitions->stop == NULL)) {
   197e0:	684a      	ldr	r2, [r1, #4]
   197e2:	b192      	cbz	r2, 1980a <onoff_manager_init+0x34>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   197e4:	2000      	movs	r0, #0
   197e6:	6018      	str	r0, [r3, #0]
   197e8:	6058      	str	r0, [r3, #4]
   197ea:	6098      	str	r0, [r3, #8]
   197ec:	60d8      	str	r0, [r3, #12]
   197ee:	6118      	str	r0, [r3, #16]
   197f0:	6158      	str	r0, [r3, #20]
   197f2:	6198      	str	r0, [r3, #24]
   197f4:	6119      	str	r1, [r3, #16]
	return 0;
   197f6:	4770      	bx	lr
		return -EINVAL;
   197f8:	f06f 0015 	mvn.w	r0, #21
   197fc:	4770      	bx	lr
   197fe:	f06f 0015 	mvn.w	r0, #21
   19802:	4770      	bx	lr
   19804:	f06f 0015 	mvn.w	r0, #21
   19808:	4770      	bx	lr
   1980a:	f06f 0015 	mvn.w	r0, #21
}
   1980e:	4770      	bx	lr

00019810 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   19810:	b570      	push	{r4, r5, r6, lr}
   19812:	4605      	mov	r5, r0
   19814:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   19816:	f7ff ff91 	bl	1973c <validate_args>

	if (rv < 0) {
   1981a:	1e04      	subs	r4, r0, #0
   1981c:	db30      	blt.n	19880 <onoff_request+0x70>
   1981e:	f04f 0320 	mov.w	r3, #32
   19822:	f3ef 8211 	mrs	r2, BASEPRI
   19826:	f383 8812 	msr	BASEPRI_MAX, r3
   1982a:	f3bf 8f6f 	isb	sy
   1982e:	4696      	mov	lr, r2
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   19830:	f8b5 c018 	ldrh.w	ip, [r5, #24]
   19834:	f00c 0c07 	and.w	ip, ip, #7

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   19838:	8b6b      	ldrh	r3, [r5, #26]
   1983a:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1983e:	428b      	cmp	r3, r1
   19840:	d02c      	beq.n	1989c <onoff_request+0x8c>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
   19842:	4664      	mov	r4, ip
	if (state == ONOFF_STATE_ON) {
   19844:	f1bc 0f02 	cmp.w	ip, #2
   19848:	d008      	beq.n	1985c <onoff_request+0x4c>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
	} else if ((state == ONOFF_STATE_OFF)
   1984a:	f1bc 0f06 	cmp.w	ip, #6
   1984e:	d819      	bhi.n	19884 <onoff_request+0x74>
   19850:	e8df f00c 	tbb	[pc, ip]
   19854:	1818181e 	.word	0x1818181e
   19858:	2a1e      	.short	0x2a1e
   1985a:	1e          	.byte	0x1e
   1985b:	00          	.byte	0x00
		mgr->refs += 1U;
   1985c:	3301      	adds	r3, #1
   1985e:	836b      	strh	r3, [r5, #26]
		notify = true;
   19860:	2301      	movs	r3, #1
	bool start = false;             /* trigger a start transition */
   19862:	2100      	movs	r1, #0
	bool add_client = false;        /* add client to pending list */
   19864:	4608      	mov	r0, r1
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
		rv = -EIO;
	}

out:
	if (add_client) {
   19866:	b128      	cbz	r0, 19874 <onoff_request+0x64>
	parent->next = child;
   19868:	2000      	movs	r0, #0
   1986a:	6030      	str	r0, [r6, #0]
	return list->tail;
   1986c:	6868      	ldr	r0, [r5, #4]
Z_GENLIST_APPEND(slist, snode)
   1986e:	b308      	cbz	r0, 198b4 <onoff_request+0xa4>
	parent->next = child;
   19870:	6006      	str	r6, [r0, #0]
	list->tail = node;
   19872:	606e      	str	r6, [r5, #4]
		sys_slist_append(&mgr->clients, &cli->node);
	}

	if (start) {
   19874:	bb09      	cbnz	r1, 198ba <onoff_request+0xaa>
	__asm__ volatile(
   19876:	f38e 8811 	msr	BASEPRI, lr
   1987a:	f3bf 8f6f 	isb	sy
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
   1987e:	bb0b      	cbnz	r3, 198c4 <onoff_request+0xb4>
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
   19880:	4620      	mov	r0, r4
   19882:	bd70      	pop	{r4, r5, r6, pc}
	if (state == ONOFF_STATE_ON) {
   19884:	f06f 0404 	mvn.w	r4, #4
   19888:	2300      	movs	r3, #0
   1988a:	4619      	mov	r1, r3
   1988c:	4618      	mov	r0, r3
   1988e:	e7ea      	b.n	19866 <onoff_request+0x56>
		start = (state == ONOFF_STATE_OFF);
   19890:	fabc f18c 	clz	r1, ip
   19894:	0949      	lsrs	r1, r1, #5
	bool notify = false;            /* do client notification */
   19896:	2300      	movs	r3, #0
		add_client = true;
   19898:	2001      	movs	r0, #1
   1989a:	e7e4      	b.n	19866 <onoff_request+0x56>
		rv = -EAGAIN;
   1989c:	f06f 040a 	mvn.w	r4, #10
	bool notify = false;            /* do client notification */
   198a0:	2300      	movs	r3, #0
	bool start = false;             /* trigger a start transition */
   198a2:	4619      	mov	r1, r3
	bool add_client = false;        /* add client to pending list */
   198a4:	4618      	mov	r0, r3
   198a6:	e7de      	b.n	19866 <onoff_request+0x56>
	if (state == ONOFF_STATE_ON) {
   198a8:	f06f 0485 	mvn.w	r4, #133	; 0x85
   198ac:	2300      	movs	r3, #0
   198ae:	4619      	mov	r1, r3
   198b0:	4618      	mov	r0, r3
   198b2:	e7d8      	b.n	19866 <onoff_request+0x56>
   198b4:	606e      	str	r6, [r5, #4]
	list->head = node;
   198b6:	602e      	str	r6, [r5, #0]
}
   198b8:	e7dc      	b.n	19874 <onoff_request+0x64>
		process_event(mgr, EVT_RECHECK, key);
   198ba:	2102      	movs	r1, #2
   198bc:	4628      	mov	r0, r5
   198be:	f7f9 fae1 	bl	12e84 <process_event>
   198c2:	e7dd      	b.n	19880 <onoff_request+0x70>
			notify_one(mgr, cli, state, 0);
   198c4:	2300      	movs	r3, #0
   198c6:	4662      	mov	r2, ip
   198c8:	4631      	mov	r1, r6
   198ca:	4628      	mov	r0, r5
   198cc:	f7ff ff4b 	bl	19766 <notify_one>
   198d0:	e7d6      	b.n	19880 <onoff_request+0x70>

000198d2 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
   198d2:	4602      	mov	r2, r0
   198d4:	b158      	cbz	r0, 198ee <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   198d6:	6843      	ldr	r3, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   198d8:	f003 0303 	and.w	r3, r3, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
   198dc:	2b01      	cmp	r3, #1
   198de:	d003      	beq.n	198e8 <sys_notify_validate+0x16>
   198e0:	2b03      	cmp	r3, #3
   198e2:	d107      	bne.n	198f4 <sys_notify_validate+0x22>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		if (notify->method.callback == NULL) {
   198e4:	6803      	ldr	r3, [r0, #0]
   198e6:	b143      	cbz	r3, 198fa <sys_notify_validate+0x28>
		break;
	}

	/* Clear the result here instead of in all callers. */
	if (rv == 0) {
		notify->result = 0;
   198e8:	2000      	movs	r0, #0
   198ea:	6090      	str	r0, [r2, #8]
   198ec:	4770      	bx	lr
		return -EINVAL;
   198ee:	f06f 0015 	mvn.w	r0, #21
   198f2:	4770      	bx	lr
	switch (sys_notify_get_method(notify)) {
   198f4:	f06f 0015 	mvn.w	r0, #21
   198f8:	4770      	bx	lr
			rv = -EINVAL;
   198fa:	f06f 0015 	mvn.w	r0, #21
	}

	return rv;
}
   198fe:	4770      	bx	lr

00019900 <sys_notify_finalize>:

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
   19900:	4603      	mov	r3, r0
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   19902:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   19904:	f002 0203 	and.w	r2, r2, #3
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
   19908:	6081      	str	r1, [r0, #8]
	switch (method) {
   1990a:	2a03      	cmp	r2, #3
   1990c:	d103      	bne.n	19916 <sys_notify_finalize+0x16>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
   1990e:	6800      	ldr	r0, [r0, #0]
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   19910:	2200      	movs	r2, #0
   19912:	605a      	str	r2, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   19914:	4770      	bx	lr
	sys_notify_generic_callback rv = NULL;
   19916:	2000      	movs	r0, #0
   19918:	e7fa      	b.n	19910 <sys_notify_finalize+0x10>

0001991a <extract_width>:
{
   1991a:	b530      	push	{r4, r5, lr}
   1991c:	b083      	sub	sp, #12
   1991e:	4604      	mov	r4, r0
   19920:	9101      	str	r1, [sp, #4]
	conv->width_present = true;
   19922:	7803      	ldrb	r3, [r0, #0]
   19924:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   19928:	7003      	strb	r3, [r0, #0]
	if (*sp == '*') {
   1992a:	460d      	mov	r5, r1
   1992c:	780b      	ldrb	r3, [r1, #0]
   1992e:	2b2a      	cmp	r3, #42	; 0x2a
   19930:	d018      	beq.n	19964 <extract_width+0x4a>
	size_t width = extract_decimal(&sp);
   19932:	a801      	add	r0, sp, #4
   19934:	f7f9 fb5c 	bl	12ff0 <extract_decimal>
	if (sp != wp) {
   19938:	9b01      	ldr	r3, [sp, #4]
   1993a:	429d      	cmp	r5, r3
   1993c:	d00f      	beq.n	1995e <extract_width+0x44>
		conv->width_present = true;
   1993e:	7823      	ldrb	r3, [r4, #0]
   19940:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   19944:	7023      	strb	r3, [r4, #0]
		conv->width_value = width;
   19946:	6060      	str	r0, [r4, #4]
		conv->unsupported |= ((conv->width_value < 0)
   19948:	b2db      	uxtb	r3, r3
   1994a:	f3c3 0340 	ubfx	r3, r3, #1, #1
				      || (width != (size_t)conv->width_value));
   1994e:	2800      	cmp	r0, #0
   19950:	db10      	blt.n	19974 <extract_width+0x5a>
   19952:	2200      	movs	r2, #0
		conv->unsupported |= ((conv->width_value < 0)
   19954:	4313      	orrs	r3, r2
   19956:	7822      	ldrb	r2, [r4, #0]
   19958:	f363 0241 	bfi	r2, r3, #1, #1
   1995c:	7022      	strb	r2, [r4, #0]
	return sp;
   1995e:	9801      	ldr	r0, [sp, #4]
}
   19960:	b003      	add	sp, #12
   19962:	bd30      	pop	{r4, r5, pc}
		conv->width_star = true;
   19964:	7843      	ldrb	r3, [r0, #1]
   19966:	f043 0301 	orr.w	r3, r3, #1
   1996a:	7043      	strb	r3, [r0, #1]
		return ++sp;
   1996c:	4608      	mov	r0, r1
   1996e:	3001      	adds	r0, #1
   19970:	9001      	str	r0, [sp, #4]
   19972:	e7f5      	b.n	19960 <extract_width+0x46>
				      || (width != (size_t)conv->width_value));
   19974:	2201      	movs	r2, #1
   19976:	e7ed      	b.n	19954 <extract_width+0x3a>

00019978 <extract_prec>:
{
   19978:	b510      	push	{r4, lr}
   1997a:	b082      	sub	sp, #8
   1997c:	9101      	str	r1, [sp, #4]
	conv->prec_present = (*sp == '.');
   1997e:	780b      	ldrb	r3, [r1, #0]
   19980:	2b2e      	cmp	r3, #46	; 0x2e
   19982:	bf14      	ite	ne
   19984:	2300      	movne	r3, #0
   19986:	2301      	moveq	r3, #1
   19988:	7842      	ldrb	r2, [r0, #1]
   1998a:	f363 0241 	bfi	r2, r3, #1, #1
   1998e:	7042      	strb	r2, [r0, #1]
	if (!conv->prec_present) {
   19990:	b1c3      	cbz	r3, 199c4 <extract_prec+0x4c>
   19992:	4604      	mov	r4, r0
	++sp;
   19994:	9b01      	ldr	r3, [sp, #4]
   19996:	1c5a      	adds	r2, r3, #1
   19998:	9201      	str	r2, [sp, #4]
	if (*sp == '*') {
   1999a:	785b      	ldrb	r3, [r3, #1]
   1999c:	2b2a      	cmp	r3, #42	; 0x2a
   1999e:	d013      	beq.n	199c8 <extract_prec+0x50>
	size_t prec = extract_decimal(&sp);
   199a0:	a801      	add	r0, sp, #4
   199a2:	f7f9 fb25 	bl	12ff0 <extract_decimal>
	conv->prec_value = prec;
   199a6:	60a0      	str	r0, [r4, #8]
	conv->unsupported |= ((conv->prec_value < 0)
   199a8:	7823      	ldrb	r3, [r4, #0]
   199aa:	f3c3 0340 	ubfx	r3, r3, #1, #1
			      || (prec != (size_t)conv->prec_value));
   199ae:	2800      	cmp	r0, #0
   199b0:	db12      	blt.n	199d8 <extract_prec+0x60>
   199b2:	2200      	movs	r2, #0
	conv->unsupported |= ((conv->prec_value < 0)
   199b4:	4313      	orrs	r3, r2
   199b6:	7822      	ldrb	r2, [r4, #0]
   199b8:	f363 0241 	bfi	r2, r3, #1, #1
   199bc:	7022      	strb	r2, [r4, #0]
	return sp;
   199be:	9801      	ldr	r0, [sp, #4]
}
   199c0:	b002      	add	sp, #8
   199c2:	bd10      	pop	{r4, pc}
		return sp;
   199c4:	4608      	mov	r0, r1
   199c6:	e7fb      	b.n	199c0 <extract_prec+0x48>
		conv->prec_star = true;
   199c8:	7843      	ldrb	r3, [r0, #1]
   199ca:	f043 0304 	orr.w	r3, r3, #4
   199ce:	7043      	strb	r3, [r0, #1]
		return ++sp;
   199d0:	4610      	mov	r0, r2
   199d2:	3001      	adds	r0, #1
   199d4:	9001      	str	r0, [sp, #4]
   199d6:	e7f3      	b.n	199c0 <extract_prec+0x48>
			      || (prec != (size_t)conv->prec_value));
   199d8:	2201      	movs	r2, #1
   199da:	e7eb      	b.n	199b4 <extract_prec+0x3c>

000199dc <extract_length>:
{
   199dc:	4602      	mov	r2, r0
	switch (*sp) {
   199de:	780b      	ldrb	r3, [r1, #0]
   199e0:	3b4c      	subs	r3, #76	; 0x4c
   199e2:	2b2e      	cmp	r3, #46	; 0x2e
   199e4:	d85b      	bhi.n	19a9e <extract_length+0xc2>
   199e6:	e8df f003 	tbb	[pc, r3]
   199ea:	5a4f      	.short	0x5a4f
   199ec:	5a5a5a5a 	.word	0x5a5a5a5a
   199f0:	5a5a5a5a 	.word	0x5a5a5a5a
   199f4:	5a5a5a5a 	.word	0x5a5a5a5a
   199f8:	5a5a5a5a 	.word	0x5a5a5a5a
   199fc:	5a5a5a5a 	.word	0x5a5a5a5a
   19a00:	5a5a5a5a 	.word	0x5a5a5a5a
   19a04:	5a185a5a 	.word	0x5a185a5a
   19a08:	5a295a3a 	.word	0x5a295a3a
   19a0c:	5a5a5a5a 	.word	0x5a5a5a5a
   19a10:	5a485a5a 	.word	0x5a485a5a
   19a14:	5a5a5a5a 	.word	0x5a5a5a5a
   19a18:	41          	.byte	0x41
   19a19:	00          	.byte	0x00
		if (*++sp == 'h') {
   19a1a:	1c48      	adds	r0, r1, #1
   19a1c:	784b      	ldrb	r3, [r1, #1]
   19a1e:	2b68      	cmp	r3, #104	; 0x68
   19a20:	d005      	beq.n	19a2e <extract_length+0x52>
			conv->length_mod = LENGTH_H;
   19a22:	7853      	ldrb	r3, [r2, #1]
   19a24:	2102      	movs	r1, #2
   19a26:	f361 03c6 	bfi	r3, r1, #3, #4
   19a2a:	7053      	strb	r3, [r2, #1]
   19a2c:	4770      	bx	lr
			conv->length_mod = LENGTH_HH;
   19a2e:	7853      	ldrb	r3, [r2, #1]
   19a30:	2001      	movs	r0, #1
   19a32:	f360 03c6 	bfi	r3, r0, #3, #4
   19a36:	7053      	strb	r3, [r2, #1]
			++sp;
   19a38:	1c88      	adds	r0, r1, #2
   19a3a:	4770      	bx	lr
		if (*++sp == 'l') {
   19a3c:	1c48      	adds	r0, r1, #1
   19a3e:	784b      	ldrb	r3, [r1, #1]
   19a40:	2b6c      	cmp	r3, #108	; 0x6c
   19a42:	d005      	beq.n	19a50 <extract_length+0x74>
			conv->length_mod = LENGTH_L;
   19a44:	7853      	ldrb	r3, [r2, #1]
   19a46:	2103      	movs	r1, #3
   19a48:	f361 03c6 	bfi	r3, r1, #3, #4
   19a4c:	7053      	strb	r3, [r2, #1]
   19a4e:	4770      	bx	lr
			conv->length_mod = LENGTH_LL;
   19a50:	7853      	ldrb	r3, [r2, #1]
   19a52:	2004      	movs	r0, #4
   19a54:	f360 03c6 	bfi	r3, r0, #3, #4
   19a58:	7053      	strb	r3, [r2, #1]
			++sp;
   19a5a:	1c88      	adds	r0, r1, #2
   19a5c:	4770      	bx	lr
		conv->length_mod = LENGTH_J;
   19a5e:	7853      	ldrb	r3, [r2, #1]
   19a60:	2005      	movs	r0, #5
   19a62:	f360 03c6 	bfi	r3, r0, #3, #4
   19a66:	7053      	strb	r3, [r2, #1]
		++sp;
   19a68:	1c48      	adds	r0, r1, #1
		break;
   19a6a:	4770      	bx	lr
		conv->length_mod = LENGTH_Z;
   19a6c:	7853      	ldrb	r3, [r2, #1]
   19a6e:	2006      	movs	r0, #6
   19a70:	f360 03c6 	bfi	r3, r0, #3, #4
   19a74:	7053      	strb	r3, [r2, #1]
		++sp;
   19a76:	1c48      	adds	r0, r1, #1
		break;
   19a78:	4770      	bx	lr
		conv->length_mod = LENGTH_T;
   19a7a:	7853      	ldrb	r3, [r2, #1]
   19a7c:	2007      	movs	r0, #7
   19a7e:	f360 03c6 	bfi	r3, r0, #3, #4
   19a82:	7053      	strb	r3, [r2, #1]
		++sp;
   19a84:	1c48      	adds	r0, r1, #1
		break;
   19a86:	4770      	bx	lr
		conv->length_mod = LENGTH_UPPER_L;
   19a88:	7853      	ldrb	r3, [r2, #1]
   19a8a:	2008      	movs	r0, #8
   19a8c:	f360 03c6 	bfi	r3, r0, #3, #4
   19a90:	7053      	strb	r3, [r2, #1]
		++sp;
   19a92:	1c48      	adds	r0, r1, #1
		conv->unsupported = true;
   19a94:	7813      	ldrb	r3, [r2, #0]
   19a96:	f043 0302 	orr.w	r3, r3, #2
   19a9a:	7013      	strb	r3, [r2, #0]
		break;
   19a9c:	4770      	bx	lr
		conv->length_mod = LENGTH_NONE;
   19a9e:	7853      	ldrb	r3, [r2, #1]
   19aa0:	f36f 03c6 	bfc	r3, #3, #4
   19aa4:	7053      	strb	r3, [r2, #1]
		break;
   19aa6:	4608      	mov	r0, r1
}
   19aa8:	4770      	bx	lr

00019aaa <extract_specifier>:
{
   19aaa:	b500      	push	{lr}
   19aac:	4602      	mov	r2, r0
	conv->specifier = *sp++;
   19aae:	4608      	mov	r0, r1
   19ab0:	f810 3b01 	ldrb.w	r3, [r0], #1
   19ab4:	70d3      	strb	r3, [r2, #3]
	switch (conv->specifier) {
   19ab6:	2b78      	cmp	r3, #120	; 0x78
   19ab8:	d817      	bhi.n	19aea <extract_specifier+0x40>
   19aba:	2b6e      	cmp	r3, #110	; 0x6e
   19abc:	d229      	bcs.n	19b12 <extract_specifier+0x68>
   19abe:	2b69      	cmp	r3, #105	; 0x69
   19ac0:	d813      	bhi.n	19aea <extract_specifier+0x40>
   19ac2:	2b58      	cmp	r3, #88	; 0x58
   19ac4:	d317      	bcc.n	19af6 <extract_specifier+0x4c>
   19ac6:	f1a3 0c58 	sub.w	ip, r3, #88	; 0x58
   19aca:	fa5f fc8c 	uxtb.w	ip, ip
   19ace:	2101      	movs	r1, #1
   19ad0:	fa01 f10c 	lsl.w	r1, r1, ip
   19ad4:	f411 4f62 	tst.w	r1, #57856	; 0xe200
   19ad8:	d114      	bne.n	19b04 <extract_specifier+0x5a>
   19ada:	f640 0c01 	movw	ip, #2049	; 0x801
   19ade:	ea11 0f0c 	tst.w	r1, ip
   19ae2:	d155      	bne.n	19b90 <extract_specifier+0xe6>
   19ae4:	f411 3f04 	tst.w	r1, #135168	; 0x21000
   19ae8:	d13a      	bne.n	19b60 <extract_specifier+0xb6>
		conv->invalid = true;
   19aea:	7813      	ldrb	r3, [r2, #0]
   19aec:	f043 0301 	orr.w	r3, r3, #1
   19af0:	7013      	strb	r3, [r2, #0]
	bool unsupported = false;
   19af2:	2100      	movs	r1, #0
		break;
   19af4:	e042      	b.n	19b7c <extract_specifier+0xd2>
	switch (conv->specifier) {
   19af6:	2b41      	cmp	r3, #65	; 0x41
   19af8:	d004      	beq.n	19b04 <extract_specifier+0x5a>
   19afa:	d3f6      	bcc.n	19aea <extract_specifier+0x40>
   19afc:	3b45      	subs	r3, #69	; 0x45
   19afe:	b2db      	uxtb	r3, r3
   19b00:	2b02      	cmp	r3, #2
   19b02:	d8f2      	bhi.n	19aea <extract_specifier+0x40>
		conv->specifier_cat = SPECIFIER_FP;
   19b04:	7893      	ldrb	r3, [r2, #2]
   19b06:	2104      	movs	r1, #4
   19b08:	f361 0302 	bfi	r3, r1, #0, #3
   19b0c:	7093      	strb	r3, [r2, #2]
			unsupported = true;
   19b0e:	2101      	movs	r1, #1
			break;
   19b10:	e034      	b.n	19b7c <extract_specifier+0xd2>
	switch (conv->specifier) {
   19b12:	f1a3 016e 	sub.w	r1, r3, #110	; 0x6e
   19b16:	b2c9      	uxtb	r1, r1
   19b18:	f04f 0c01 	mov.w	ip, #1
   19b1c:	fa0c fc01 	lsl.w	ip, ip, r1
   19b20:	f240 4182 	movw	r1, #1154	; 0x482
   19b24:	ea1c 0f01 	tst.w	ip, r1
   19b28:	bf14      	ite	ne
   19b2a:	f04f 0e01 	movne.w	lr, #1
   19b2e:	f04f 0e00 	moveq.w	lr, #0
   19b32:	d12d      	bne.n	19b90 <extract_specifier+0xe6>
   19b34:	f01c 0f24 	tst.w	ip, #36	; 0x24
   19b38:	bf14      	ite	ne
   19b3a:	2101      	movne	r1, #1
   19b3c:	2100      	moveq	r1, #0
   19b3e:	d139      	bne.n	19bb4 <extract_specifier+0x10a>
   19b40:	f01c 0c01 	ands.w	ip, ip, #1
   19b44:	d0d1      	beq.n	19aea <extract_specifier+0x40>
		conv->specifier_cat = SPECIFIER_PTR;
   19b46:	7893      	ldrb	r3, [r2, #2]
   19b48:	f04f 0e03 	mov.w	lr, #3
   19b4c:	f36e 0302 	bfi	r3, lr, #0, #3
   19b50:	7093      	strb	r3, [r2, #2]
		if (conv->length_mod == LENGTH_UPPER_L) {
   19b52:	7853      	ldrb	r3, [r2, #1]
   19b54:	f003 0378 	and.w	r3, r3, #120	; 0x78
   19b58:	2b40      	cmp	r3, #64	; 0x40
   19b5a:	d10f      	bne.n	19b7c <extract_specifier+0xd2>
			unsupported = true;
   19b5c:	4661      	mov	r1, ip
   19b5e:	e00d      	b.n	19b7c <extract_specifier+0xd2>
		conv->specifier_cat = SPECIFIER_SINT;
   19b60:	7891      	ldrb	r1, [r2, #2]
   19b62:	f04f 0c01 	mov.w	ip, #1
   19b66:	f36c 0102 	bfi	r1, ip, #0, #3
   19b6a:	7091      	strb	r1, [r2, #2]
		if (conv->length_mod == LENGTH_UPPER_L) {
   19b6c:	7851      	ldrb	r1, [r2, #1]
   19b6e:	f001 0178 	and.w	r1, r1, #120	; 0x78
   19b72:	2940      	cmp	r1, #64	; 0x40
   19b74:	d013      	beq.n	19b9e <extract_specifier+0xf4>
		if (conv->specifier == 'c') {
   19b76:	2b63      	cmp	r3, #99	; 0x63
   19b78:	d018      	beq.n	19bac <extract_specifier+0x102>
	bool unsupported = false;
   19b7a:	2100      	movs	r1, #0
	conv->unsupported |= unsupported;
   19b7c:	7813      	ldrb	r3, [r2, #0]
   19b7e:	f3c3 0c40 	ubfx	ip, r3, #1, #1
   19b82:	ea41 010c 	orr.w	r1, r1, ip
   19b86:	f361 0341 	bfi	r3, r1, #1, #1
   19b8a:	7013      	strb	r3, [r2, #0]
}
   19b8c:	f85d fb04 	ldr.w	pc, [sp], #4
		conv->specifier_cat = SPECIFIER_UINT;
   19b90:	7891      	ldrb	r1, [r2, #2]
   19b92:	f04f 0c02 	mov.w	ip, #2
   19b96:	f36c 0102 	bfi	r1, ip, #0, #3
   19b9a:	7091      	strb	r1, [r2, #2]
   19b9c:	e7e6      	b.n	19b6c <extract_specifier+0xc2>
			conv->invalid = true;
   19b9e:	f892 c000 	ldrb.w	ip, [r2]
   19ba2:	f04c 0c01 	orr.w	ip, ip, #1
   19ba6:	f882 c000 	strb.w	ip, [r2]
   19baa:	e7e4      	b.n	19b76 <extract_specifier+0xcc>
			unsupported = (conv->length_mod != LENGTH_NONE);
   19bac:	3900      	subs	r1, #0
   19bae:	bf18      	it	ne
   19bb0:	2101      	movne	r1, #1
   19bb2:	e7e3      	b.n	19b7c <extract_specifier+0xd2>
		conv->specifier_cat = SPECIFIER_PTR;
   19bb4:	7893      	ldrb	r3, [r2, #2]
   19bb6:	f04f 0c03 	mov.w	ip, #3
   19bba:	f36c 0302 	bfi	r3, ip, #0, #3
   19bbe:	7093      	strb	r3, [r2, #2]
		if (conv->length_mod != LENGTH_NONE) {
   19bc0:	7853      	ldrb	r3, [r2, #1]
   19bc2:	f013 0f78 	tst.w	r3, #120	; 0x78
   19bc6:	d1d9      	bne.n	19b7c <extract_specifier+0xd2>
	bool unsupported = false;
   19bc8:	4671      	mov	r1, lr
   19bca:	e7d7      	b.n	19b7c <extract_specifier+0xd2>

00019bcc <extract_conversion>:
{
   19bcc:	b510      	push	{r4, lr}
   19bce:	4604      	mov	r4, r0
   19bd0:	4608      	mov	r0, r1
	*conv = (struct conversion) {
   19bd2:	2300      	movs	r3, #0
   19bd4:	6023      	str	r3, [r4, #0]
   19bd6:	6063      	str	r3, [r4, #4]
   19bd8:	60a3      	str	r3, [r4, #8]
	if (*sp == '%') {
   19bda:	784b      	ldrb	r3, [r1, #1]
   19bdc:	2b25      	cmp	r3, #37	; 0x25
   19bde:	d014      	beq.n	19c0a <extract_conversion+0x3e>
   19be0:	3101      	adds	r1, #1
	sp = extract_flags(conv, sp);
   19be2:	4620      	mov	r0, r4
   19be4:	f7f9 fa1a 	bl	1301c <extract_flags>
   19be8:	4601      	mov	r1, r0
	sp = extract_width(conv, sp);
   19bea:	4620      	mov	r0, r4
   19bec:	f7ff fe95 	bl	1991a <extract_width>
   19bf0:	4601      	mov	r1, r0
	sp = extract_prec(conv, sp);
   19bf2:	4620      	mov	r0, r4
   19bf4:	f7ff fec0 	bl	19978 <extract_prec>
   19bf8:	4601      	mov	r1, r0
	sp = extract_length(conv, sp);
   19bfa:	4620      	mov	r0, r4
   19bfc:	f7ff feee 	bl	199dc <extract_length>
   19c00:	4601      	mov	r1, r0
	sp = extract_specifier(conv, sp);
   19c02:	4620      	mov	r0, r4
   19c04:	f7ff ff51 	bl	19aaa <extract_specifier>
}
   19c08:	bd10      	pop	{r4, pc}
		conv->specifier = *sp++;
   19c0a:	3002      	adds	r0, #2
   19c0c:	70e3      	strb	r3, [r4, #3]
		return sp;
   19c0e:	e7fb      	b.n	19c08 <extract_conversion+0x3c>

00019c10 <conversion_radix>:
	switch (specifier) {
   19c10:	286f      	cmp	r0, #111	; 0x6f
   19c12:	d00c      	beq.n	19c2e <conversion_radix+0x1e>
   19c14:	d905      	bls.n	19c22 <conversion_radix+0x12>
   19c16:	2870      	cmp	r0, #112	; 0x70
   19c18:	d00b      	beq.n	19c32 <conversion_radix+0x22>
   19c1a:	2878      	cmp	r0, #120	; 0x78
   19c1c:	d10b      	bne.n	19c36 <conversion_radix+0x26>
		return 16;
   19c1e:	2010      	movs	r0, #16
   19c20:	4770      	bx	lr
	switch (specifier) {
   19c22:	2858      	cmp	r0, #88	; 0x58
   19c24:	d001      	beq.n	19c2a <conversion_radix+0x1a>
   19c26:	200a      	movs	r0, #10
   19c28:	4770      	bx	lr
		return 16;
   19c2a:	2010      	movs	r0, #16
   19c2c:	4770      	bx	lr
		return 8;
   19c2e:	2008      	movs	r0, #8
   19c30:	4770      	bx	lr
		return 16;
   19c32:	2010      	movs	r0, #16
   19c34:	4770      	bx	lr
	switch (specifier) {
   19c36:	200a      	movs	r0, #10
}
   19c38:	4770      	bx	lr

00019c3a <store_count>:
	switch ((enum length_mod_enum)conv->length_mod) {
   19c3a:	7843      	ldrb	r3, [r0, #1]
   19c3c:	f3c3 03c3 	ubfx	r3, r3, #3, #4
   19c40:	2b07      	cmp	r3, #7
   19c42:	d818      	bhi.n	19c76 <store_count+0x3c>
   19c44:	e8df f003 	tbb	[pc, r3]
   19c48:	0a080604 	.word	0x0a080604
   19c4c:	1614100c 	.word	0x1614100c
		*(int *)dp = count;
   19c50:	600a      	str	r2, [r1, #0]
		break;
   19c52:	4770      	bx	lr
		*(signed char *)dp = (signed char)count;
   19c54:	700a      	strb	r2, [r1, #0]
		break;
   19c56:	4770      	bx	lr
		*(short *)dp = (short)count;
   19c58:	800a      	strh	r2, [r1, #0]
		break;
   19c5a:	4770      	bx	lr
		*(long *)dp = (long)count;
   19c5c:	600a      	str	r2, [r1, #0]
		break;
   19c5e:	4770      	bx	lr
		*(long long *)dp = (long long)count;
   19c60:	17d3      	asrs	r3, r2, #31
   19c62:	600a      	str	r2, [r1, #0]
   19c64:	604b      	str	r3, [r1, #4]
		break;
   19c66:	4770      	bx	lr
		*(intmax_t *)dp = (intmax_t)count;
   19c68:	17d3      	asrs	r3, r2, #31
   19c6a:	600a      	str	r2, [r1, #0]
   19c6c:	604b      	str	r3, [r1, #4]
		break;
   19c6e:	4770      	bx	lr
		*(size_t *)dp = (size_t)count;
   19c70:	600a      	str	r2, [r1, #0]
		break;
   19c72:	4770      	bx	lr
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
   19c74:	600a      	str	r2, [r1, #0]
}
   19c76:	4770      	bx	lr

00019c78 <outs>:
{
   19c78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19c7c:	4607      	mov	r7, r0
   19c7e:	460e      	mov	r6, r1
   19c80:	4614      	mov	r4, r2
   19c82:	4698      	mov	r8, r3
	size_t count = 0;
   19c84:	2500      	movs	r5, #0
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   19c86:	e006      	b.n	19c96 <outs+0x1e>
		int rc = out((int)*sp++, ctx);
   19c88:	4631      	mov	r1, r6
   19c8a:	f814 0b01 	ldrb.w	r0, [r4], #1
   19c8e:	47b8      	blx	r7
		if (rc < 0) {
   19c90:	2800      	cmp	r0, #0
   19c92:	db09      	blt.n	19ca8 <outs+0x30>
		++count;
   19c94:	3501      	adds	r5, #1
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   19c96:	4544      	cmp	r4, r8
   19c98:	d3f6      	bcc.n	19c88 <outs+0x10>
   19c9a:	f1b8 0f00 	cmp.w	r8, #0
   19c9e:	d102      	bne.n	19ca6 <outs+0x2e>
   19ca0:	7823      	ldrb	r3, [r4, #0]
   19ca2:	2b00      	cmp	r3, #0
   19ca4:	d1f0      	bne.n	19c88 <outs+0x10>
	return (int)count;
   19ca6:	4628      	mov	r0, r5
}
   19ca8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00019cac <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_WARN_DEPRECATED, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_ENFORCE_ZEPHYR_STDINT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   19cac:	4770      	bx	lr

00019cae <nordicsemi_nrf53_init>:
	__asm__ volatile(
   19cae:	f04f 0320 	mov.w	r3, #32
   19cb2:	f3ef 8111 	mrs	r1, BASEPRI
   19cb6:	f383 8812 	msr	BASEPRI_MAX, r3
   19cba:	f3bf 8f6f 	isb	sy
}

NRF_STATIC_INLINE void nrf_oscillators_lfxo_cap_set(NRF_OSCILLATORS_Type *     p_reg,
                                                    nrf_oscillators_lfxo_cap_t cap)
{
    p_reg->XOSC32KI.INTCAP = (uint32_t)cap;
   19cbe:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   19cc2:	2202      	movs	r2, #2
   19cc4:	f8c3 26d0 	str.w	r2, [r3, #1744]	; 0x6d0
NRF_STATIC_INLINE void nrf_regulators_dcdcen_set(NRF_REGULATORS_Type * p_reg, bool enable)
{
#if defined(REGULATORS_DCDCEN_DCDCEN_Msk)
    p_reg->DCDCEN = (enable ? REGULATORS_DCDCEN_DCDCEN_Msk : 0);
#else
    p_reg->VREGMAIN.DCDCEN = (enable ? REGULATORS_VREGMAIN_DCDCEN_DCDCEN_Msk : 0);
   19cc8:	2201      	movs	r2, #1
   19cca:	f8c3 2704 	str.w	r2, [r3, #1796]	; 0x704
#endif

#if NRF_REGULATORS_HAS_DCDCEN_RADIO
NRF_STATIC_INLINE void nrf_regulators_dcdcen_radio_set(NRF_REGULATORS_Type * p_reg, bool enable)
{
    p_reg->VREGRADIO.DCDCEN = (enable) ? REGULATORS_VREGRADIO_DCDCEN_DCDCEN_Enabled :
   19cce:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
    p_reg->VREGH.DCDCEN = (enable) ? REGULATORS_VREGH_DCDCEN_DCDCEN_Enabled :
   19cd2:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
	__asm__ volatile(
   19cd6:	f381 8811 	msr	BASEPRI, r1
   19cda:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
   19cde:	2000      	movs	r0, #0
   19ce0:	4770      	bx	lr

00019ce2 <arch_busy_wait>:

void arch_busy_wait(uint32_t time_us)
{
   19ce2:	b508      	push	{r3, lr}
	nrfx_coredep_delay_us(time_us);
   19ce4:	f7f9 fd1e 	bl	13724 <nrfx_coredep_delay_us>
}
   19ce8:	bd08      	pop	{r3, pc}

00019cea <nrf_regulators_system_off>:
    p_reg->SYSTEMOFF = REGULATORS_SYSTEMOFF_SYSTEMOFF_Msk;
   19cea:	2301      	movs	r3, #1
   19cec:	f8c0 3500 	str.w	r3, [r0, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
   19cf0:	f3bf 8f4f 	dsb	sy
        __WFE();
   19cf4:	bf20      	wfe
    while (true)
   19cf6:	e7fd      	b.n	19cf4 <nrf_regulators_system_off+0xa>

00019cf8 <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
   19cf8:	2806      	cmp	r0, #6
   19cfa:	d000      	beq.n	19cfe <pm_state_set+0x6>
   19cfc:	4770      	bx	lr
{
   19cfe:	b508      	push	{r3, lr}
	case PM_STATE_SOFT_OFF:
		nrf_regulators_system_off(NRF_REGULATORS);
   19d00:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
   19d04:	f7ff fff1 	bl	19cea <nrf_regulators_system_off>

00019d08 <pm_state_exit_post_ops>:
   19d08:	2300      	movs	r3, #0
   19d0a:	f383 8811 	msr	BASEPRI, r3
   19d0e:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   19d12:	4770      	bx	lr

00019d14 <atomic_test_and_clear_bit>:
 * @param bit Bit number (starting from 0).
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_clear_bit(atomic_t *target, int bit)
{
   19d14:	b500      	push	{lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
   19d16:	f001 021f 	and.w	r2, r1, #31
   19d1a:	2301      	movs	r3, #1
   19d1c:	4093      	lsls	r3, r2
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   19d1e:	0949      	lsrs	r1, r1, #5
   19d20:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   19d24:	43d9      	mvns	r1, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   19d26:	e8d0 2fef 	ldaex	r2, [r0]
   19d2a:	ea02 0c01 	and.w	ip, r2, r1
   19d2e:	e8c0 cfee 	stlex	lr, ip, [r0]
   19d32:	f1be 0f00 	cmp.w	lr, #0
   19d36:	d1f6      	bne.n	19d26 <atomic_test_and_clear_bit+0x12>

	return (old & mask) != 0;
   19d38:	4213      	tst	r3, r2
}
   19d3a:	bf14      	ite	ne
   19d3c:	2001      	movne	r0, #1
   19d3e:	2000      	moveq	r0, #0
   19d40:	f85d fb04 	ldr.w	pc, [sp], #4

00019d44 <atomic_set_bit>:
 * @param target Address of atomic variable or array.
 * @param bit Bit number (starting from 0).
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
   19d44:	f001 021f 	and.w	r2, r1, #31
   19d48:	2301      	movs	r3, #1
   19d4a:	4093      	lsls	r3, r2

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   19d4c:	0949      	lsrs	r1, r1, #5
   19d4e:	eb00 0081 	add.w	r0, r0, r1, lsl #2
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   19d52:	e8d0 2fef 	ldaex	r2, [r0]
   19d56:	431a      	orrs	r2, r3
   19d58:	e8c0 2fe1 	stlex	r1, r2, [r0]
   19d5c:	2900      	cmp	r1, #0
   19d5e:	d1f8      	bne.n	19d52 <atomic_set_bit+0xe>
}
   19d60:	4770      	bx	lr

00019d62 <pm_policy_state_lock_is_active>:
			return (atomic_get(&substate_lock_t[i].lock) != 0);
		}
	}

	return false;
}
   19d62:	2000      	movs	r0, #0
   19d64:	4770      	bx	lr

00019d66 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   19d66:	b508      	push	{r3, lr}

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
   19d68:	f000 ff41 	bl	1abee <z_fatal_error>
}
   19d6c:	bd08      	pop	{r3, pc}

00019d6e <z_do_kernel_oops>:
 *
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 */
void z_do_kernel_oops(const z_arch_esf_t *esf, _callee_saved_t *callee_regs)
{
   19d6e:	b508      	push	{r3, lr}
   19d70:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
   19d72:	6800      	ldr	r0, [r0, #0]
   19d74:	f7ff fff7 	bl	19d66 <z_arm_fatal_error>
	esf_copy.extra_info = (struct __extra_esf_info) { 0 };
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */

	z_arm_fatal_error(reason, &esf_copy);
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
}
   19d78:	bd08      	pop	{r3, pc}

00019d7a <arch_irq_enable>:
{
   19d7a:	b508      	push	{r3, lr}
	NVIC_EnableIRQ((IRQn_Type)irq);
   19d7c:	b240      	sxtb	r0, r0
   19d7e:	f7f9 fe3f 	bl	13a00 <__NVIC_EnableIRQ>
}
   19d82:	bd08      	pop	{r3, pc}

00019d84 <z_arm_irq_priority_set>:
 * The priority is verified if ASSERT_ON is enabled. The maximum number
 * of priority levels is a little complex, as there are some hardware
 * priority levels which are reserved.
 */
void z_arm_irq_priority_set(unsigned int irq, unsigned int prio, uint32_t flags)
{
   19d84:	b508      	push	{r3, lr}
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
   19d86:	3101      	adds	r1, #1
   19d88:	b240      	sxtb	r0, r0
   19d8a:	f7f9 fe47 	bl	13a1c <__NVIC_SetPriority>
}
   19d8e:	bd08      	pop	{r3, pc}

00019d90 <z_irq_spurious>:
 * Installed in all _sw_isr_table slots at boot time. Throws an error if
 * called.
 *
 */
void z_irq_spurious(const void *unused)
{
   19d90:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   19d92:	2100      	movs	r1, #0
   19d94:	2001      	movs	r0, #1
   19d96:	f7ff ffe6 	bl	19d66 <z_arm_fatal_error>
}
   19d9a:	bd08      	pop	{r3, pc}

00019d9c <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
   19d9c:	b508      	push	{r3, lr}
	handler();
   19d9e:	f7f9 fe5f 	bl	13a60 <z_SysNmiOnReset>
	z_arm_int_exit();
   19da2:	f7f9 ff2f 	bl	13c04 <z_arm_exc_exit>
}
   19da6:	bd08      	pop	{r3, pc}

00019da8 <configure_builtin_stack_guard>:
	uint32_t guard_start = thread->stack_info.start;
   19da8:	6e43      	ldr	r3, [r0, #100]	; 0x64
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
   19daa:	f383 880b 	msr	PSPLIM, r3
}
   19dae:	4770      	bx	lr

00019db0 <memory_fault_recoverable>:
}
   19db0:	2000      	movs	r0, #0
   19db2:	4770      	bx	lr

00019db4 <debug_monitor>:
	*recoverable = false;
   19db4:	2300      	movs	r3, #0
   19db6:	700b      	strb	r3, [r1, #0]
}
   19db8:	4770      	bx	lr

00019dba <fault_handle>:
{
   19dba:	b508      	push	{r3, lr}
	*recoverable = false;
   19dbc:	2300      	movs	r3, #0
   19dbe:	7013      	strb	r3, [r2, #0]
	switch (fault) {
   19dc0:	1ecb      	subs	r3, r1, #3
   19dc2:	2b09      	cmp	r3, #9
   19dc4:	d81a      	bhi.n	19dfc <fault_handle+0x42>
   19dc6:	e8df f003 	tbb	[pc, r3]
   19dca:	0905      	.short	0x0905
   19dcc:	1919110d 	.word	0x1919110d
   19dd0:	14191919 	.word	0x14191919
		reason = hard_fault(esf, recoverable);
   19dd4:	4611      	mov	r1, r2
   19dd6:	f7f9 ffb9 	bl	13d4c <hard_fault>
		break;
   19dda:	e010      	b.n	19dfe <fault_handle+0x44>
		reason = mem_manage_fault(esf, 0, recoverable);
   19ddc:	2100      	movs	r1, #0
   19dde:	f7f9 ff1f 	bl	13c20 <mem_manage_fault>
		break;
   19de2:	e00c      	b.n	19dfe <fault_handle+0x44>
		reason = bus_fault(esf, 0, recoverable);
   19de4:	2100      	movs	r1, #0
   19de6:	f7f9 ff51 	bl	13c8c <bus_fault>
		break;
   19dea:	e008      	b.n	19dfe <fault_handle+0x44>
		reason = usage_fault(esf);
   19dec:	f7f9 ff78 	bl	13ce0 <usage_fault>
		break;
   19df0:	e005      	b.n	19dfe <fault_handle+0x44>
		debug_monitor(esf, recoverable);
   19df2:	4611      	mov	r1, r2
   19df4:	f7ff ffde 	bl	19db4 <debug_monitor>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   19df8:	2000      	movs	r0, #0
		break;
   19dfa:	e000      	b.n	19dfe <fault_handle+0x44>
	switch (fault) {
   19dfc:	2000      	movs	r0, #0
}
   19dfe:	bd08      	pop	{r3, pc}

00019e00 <get_esf>:
{
   19e00:	4684      	mov	ip, r0
	*nested_exc = false;
   19e02:	2000      	movs	r0, #0
   19e04:	7018      	strb	r0, [r3, #0]
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
   19e06:	f002 407f 	and.w	r0, r2, #4278190080	; 0xff000000
   19e0a:	f1b0 4f7f 	cmp.w	r0, #4278190080	; 0xff000000
   19e0e:	d11c      	bne.n	19e4a <get_esf+0x4a>
	if (exc_return & EXC_RETURN_EXCEPTION_SECURE_Secure) {
   19e10:	f012 0f01 	tst.w	r2, #1
   19e14:	d11b      	bne.n	19e4e <get_esf+0x4e>
{
   19e16:	b410      	push	{r4}
	if (exc_return & EXC_RETURN_RETURN_STACK_Secure) {
   19e18:	f012 0f40 	tst.w	r2, #64	; 0x40
   19e1c:	d008      	beq.n	19e30 <get_esf+0x30>
		if (exc_return & EXC_RETURN_SPSEL_PROCESS) {
   19e1e:	f012 0f04 	tst.w	r2, #4
   19e22:	d002      	beq.n	19e2a <get_esf+0x2a>
			ptr_esf = (z_arch_esf_t *)psp;
   19e24:	4608      	mov	r0, r1
		alternative_state_exc = true;
   19e26:	2401      	movs	r4, #1
   19e28:	e004      	b.n	19e34 <get_esf+0x34>
			ptr_esf = (z_arch_esf_t *)msp;
   19e2a:	4660      	mov	r0, ip
		alternative_state_exc = true;
   19e2c:	2401      	movs	r4, #1
   19e2e:	e001      	b.n	19e34 <get_esf+0x34>
	z_arch_esf_t *ptr_esf = NULL;
   19e30:	2000      	movs	r0, #0
	bool alternative_state_exc = false;
   19e32:	4604      	mov	r4, r0
	if (!alternative_state_exc) {
   19e34:	b91c      	cbnz	r4, 19e3e <get_esf+0x3e>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
   19e36:	f012 0f08 	tst.w	r2, #8
   19e3a:	d002      	beq.n	19e42 <get_esf+0x42>
			ptr_esf =  (z_arch_esf_t *)psp;
   19e3c:	4608      	mov	r0, r1
}
   19e3e:	bc10      	pop	{r4}
   19e40:	4770      	bx	lr
			ptr_esf = (z_arch_esf_t *)msp;
   19e42:	4660      	mov	r0, ip
			*nested_exc = true;
   19e44:	2201      	movs	r2, #1
   19e46:	701a      	strb	r2, [r3, #0]
   19e48:	e7f9      	b.n	19e3e <get_esf+0x3e>
		return NULL;
   19e4a:	2000      	movs	r0, #0
   19e4c:	4770      	bx	lr
		return NULL;
   19e4e:	2000      	movs	r0, #0
}
   19e50:	4770      	bx	lr

00019e52 <z_arm_save_fp_context>:
		 * here though, since FPCA should have no impact on instruction
		 * fetching.
		 */
	}
#endif
}
   19e52:	4770      	bx	lr

00019e54 <z_arm_restore_fp_context>:
			"vldmia %1, {s16-s31}\n"
			:: "r" (buffer->caller_saved), "r" (buffer->callee_saved) :
		);
	}
#endif
}
   19e54:	4770      	bx	lr

00019e56 <sys_arch_reboot>:
{
   19e56:	b508      	push	{r3, lr}
	NVIC_SystemReset();
   19e58:	f7fa f858 	bl	13f0c <__NVIC_SystemReset>

00019e5c <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
   19e5c:	e840 f000 	tt	r0, r0

int arm_cmse_mpu_region_get(uint32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
   19e60:	f410 3f80 	tst.w	r0, #65536	; 0x10000
   19e64:	d001      	beq.n	19e6a <arm_cmse_mpu_region_get+0xe>
		return addr_info.flags.mpu_region;
   19e66:	b2c0      	uxtb	r0, r0
   19e68:	4770      	bx	lr
	}

	return -EINVAL;
   19e6a:	f06f 0015 	mvn.w	r0, #21
}
   19e6e:	4770      	bx	lr

00019e70 <region_init>:
{
   19e70:	b508      	push	{r3, lr}
		(region_conf->base & MPU_RBAR_BASE_Msk)
   19e72:	680b      	ldr	r3, [r1, #0]
   19e74:	f023 0c1f 	bic.w	ip, r3, #31
		| (region_conf->attr.rbar &
   19e78:	7a0b      	ldrb	r3, [r1, #8]
   19e7a:	f003 0e1f 	and.w	lr, r3, #31
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
   19e7e:	68ca      	ldr	r2, [r1, #12]
   19e80:	f022 021f 	bic.w	r2, r2, #31
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
   19e84:	095b      	lsrs	r3, r3, #5
   19e86:	ea42 0243 	orr.w	r2, r2, r3, lsl #1
	mpu_set_region(
   19e8a:	f042 0201 	orr.w	r2, r2, #1
   19e8e:	ea4c 010e 	orr.w	r1, ip, lr
   19e92:	f7fa f8cf 	bl	14034 <mpu_set_region>
}
   19e96:	bd08      	pop	{r3, pc}

00019e98 <mpu_partition_is_valid>:
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
   19e98:	6843      	ldr	r3, [r0, #4]
		&&
   19e9a:	2b1f      	cmp	r3, #31
   19e9c:	d908      	bls.n	19eb0 <mpu_partition_is_valid+0x18>
		&&
   19e9e:	f013 0f1f 	tst.w	r3, #31
   19ea2:	d107      	bne.n	19eb4 <mpu_partition_is_valid+0x1c>
		((part->start &
   19ea4:	6803      	ldr	r3, [r0, #0]
		&&
   19ea6:	f013 0f1f 	tst.w	r3, #31
   19eaa:	d005      	beq.n	19eb8 <mpu_partition_is_valid+0x20>
   19eac:	2000      	movs	r0, #0
   19eae:	4770      	bx	lr
   19eb0:	2000      	movs	r0, #0
   19eb2:	4770      	bx	lr
   19eb4:	2000      	movs	r0, #0
   19eb6:	4770      	bx	lr
   19eb8:	2001      	movs	r0, #1
}
   19eba:	4770      	bx	lr

00019ebc <region_allocate_and_init>:
	if (index > (get_num_regions() - 1U)) {
   19ebc:	2807      	cmp	r0, #7
   19ebe:	d805      	bhi.n	19ecc <region_allocate_and_init+0x10>
{
   19ec0:	b510      	push	{r4, lr}
   19ec2:	4604      	mov	r4, r0
	region_init(index, region_conf);
   19ec4:	f7ff ffd4 	bl	19e70 <region_init>
	return index;
   19ec8:	4620      	mov	r0, r4
}
   19eca:	bd10      	pop	{r4, pc}
		return -EINVAL;
   19ecc:	f06f 0015 	mvn.w	r0, #21
}
   19ed0:	4770      	bx	lr

00019ed2 <mpu_configure_region>:
{
   19ed2:	b510      	push	{r4, lr}
   19ed4:	b084      	sub	sp, #16
	region_conf.base = new_region->start;
   19ed6:	680b      	ldr	r3, [r1, #0]
   19ed8:	9300      	str	r3, [sp, #0]
		&new_region->attr, new_region->start, new_region->size);
   19eda:	684c      	ldr	r4, [r1, #4]
	p_attr->rbar = attr->rbar &
   19edc:	f8b1 c008 	ldrh.w	ip, [r1, #8]
   19ee0:	f89d 2008 	ldrb.w	r2, [sp, #8]
   19ee4:	f36c 0204 	bfi	r2, ip, #0, #5
   19ee8:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->mair_idx = attr->mair_idx;
   19eec:	8949      	ldrh	r1, [r1, #10]
   19eee:	b2d2      	uxtb	r2, r2
   19ef0:	f361 1247 	bfi	r2, r1, #5, #3
   19ef4:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   19ef8:	f023 031f 	bic.w	r3, r3, #31
   19efc:	4423      	add	r3, r4
   19efe:	3b01      	subs	r3, #1
   19f00:	f023 031f 	bic.w	r3, r3, #31
   19f04:	9303      	str	r3, [sp, #12]
	return region_allocate_and_init(index,
   19f06:	4669      	mov	r1, sp
   19f08:	f7ff ffd8 	bl	19ebc <region_allocate_and_init>
}
   19f0c:	b004      	add	sp, #16
   19f0e:	bd10      	pop	{r4, pc}

00019f10 <get_region_index>:
{
   19f10:	b570      	push	{r4, r5, r6, lr}
   19f12:	4604      	mov	r4, r0
   19f14:	460e      	mov	r6, r1
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
   19f16:	f7ff ffa1 	bl	19e5c <arm_cmse_mpu_region_get>
   19f1a:	4605      	mov	r5, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   19f1c:	4434      	add	r4, r6
   19f1e:	1e60      	subs	r0, r4, #1
   19f20:	f7ff ff9c 	bl	19e5c <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
   19f24:	4285      	cmp	r5, r0
   19f26:	d101      	bne.n	19f2c <get_region_index+0x1c>
}
   19f28:	4628      	mov	r0, r5
   19f2a:	bd70      	pop	{r4, r5, r6, pc}
	return -EINVAL;
   19f2c:	f06f 0515 	mvn.w	r5, #21
   19f30:	e7fa      	b.n	19f28 <get_region_index+0x18>

00019f32 <arm_core_mpu_configure_static_mpu_regions>:
{
   19f32:	b508      	push	{r3, lr}
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
   19f34:	f7fa f96c 	bl	14210 <mpu_configure_static_mpu_regions>
}
   19f38:	bd08      	pop	{r3, pc}

00019f3a <arm_core_mpu_mark_areas_for_dynamic_regions>:
{
   19f3a:	b508      	push	{r3, lr}
	if (mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   19f3c:	f7fa f972 	bl	14224 <mpu_mark_areas_for_dynamic_regions>
}
   19f40:	bd08      	pop	{r3, pc}

00019f42 <malloc_prepare>:
}
   19f42:	2000      	movs	r0, #0
   19f44:	4770      	bx	lr

00019f46 <_stdout_hook_default>:
}
   19f46:	f04f 30ff 	mov.w	r0, #4294967295
   19f4a:	4770      	bx	lr

00019f4c <_stdin_hook_default>:
}
   19f4c:	2000      	movs	r0, #0
   19f4e:	4770      	bx	lr

00019f50 <_read>:
{
   19f50:	b508      	push	{r3, lr}
   19f52:	4608      	mov	r0, r1
   19f54:	4611      	mov	r1, r2
		union { uintptr_t x; int val; } parm1 = { .val = nbytes };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_ZEPHYR_READ_STDIN);
	}
#endif
	compiler_barrier();
	return z_impl_zephyr_read_stdin(buf, nbytes);
   19f56:	f7fa f9d3 	bl	14300 <z_impl_zephyr_read_stdin>
}
   19f5a:	bd08      	pop	{r3, pc}

00019f5c <_write>:
{
   19f5c:	b508      	push	{r3, lr}
   19f5e:	4608      	mov	r0, r1
   19f60:	4611      	mov	r1, r2
		union { uintptr_t x; int val; } parm1 = { .val = nbytes };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_ZEPHYR_WRITE_STDOUT);
	}
#endif
	compiler_barrier();
	return z_impl_zephyr_write_stdout(buf, nbytes);
   19f62:	f7fa f9e3 	bl	1432c <z_impl_zephyr_write_stdout>
}
   19f66:	bd08      	pop	{r3, pc}

00019f68 <_close>:
}
   19f68:	f04f 30ff 	mov.w	r0, #4294967295
   19f6c:	4770      	bx	lr

00019f6e <_lseek>:
}
   19f6e:	2000      	movs	r0, #0
   19f70:	4770      	bx	lr

00019f72 <_isatty>:
}
   19f72:	2802      	cmp	r0, #2
   19f74:	bfcc      	ite	gt
   19f76:	2000      	movgt	r0, #0
   19f78:	2001      	movle	r0, #1
   19f7a:	4770      	bx	lr

00019f7c <_kill>:
}
   19f7c:	2000      	movs	r0, #0
   19f7e:	4770      	bx	lr

00019f80 <_getpid>:
}
   19f80:	2000      	movs	r0, #0
   19f82:	4770      	bx	lr

00019f84 <_fstat>:
	st->st_mode = S_IFCHR;
   19f84:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   19f88:	604b      	str	r3, [r1, #4]
}
   19f8a:	2000      	movs	r0, #0
   19f8c:	4770      	bx	lr

00019f8e <__retarget_lock_init_recursive>:
	k_sem_init((struct k_sem *)*lock, 1, 1);
}

/* Create a new dynamic recursive lock */
void __retarget_lock_init_recursive(_LOCK_T *lock)
{
   19f8e:	b510      	push	{r4, lr}
   19f90:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(lock != NULL);

	/* Allocate mutex object */
#ifndef CONFIG_USERSPACE
	*lock = malloc(sizeof(struct k_mutex));
   19f92:	2014      	movs	r0, #20
   19f94:	f7fd fe50 	bl	17c38 <malloc>
   19f98:	6020      	str	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
   19f9a:	f000 fe84 	bl	1aca6 <z_impl_k_mutex_init>
	*lock = k_object_alloc(K_OBJ_MUTEX);
#endif /* !CONFIG_USERSPACE */
	__ASSERT(*lock != NULL, "recursive lock allocation failed");

	k_mutex_init((struct k_mutex *)*lock);
}
   19f9e:	bd10      	pop	{r4, pc}

00019fa0 <__retarget_lock_acquire_recursive>:
	k_sem_take((struct k_sem *)lock, K_FOREVER);
}

/* Acquiure recursive lock */
void __retarget_lock_acquire_recursive(_LOCK_T lock)
{
   19fa0:	b508      	push	{r3, lr}
	return z_impl_k_mutex_lock(mutex, timeout);
   19fa2:	f04f 32ff 	mov.w	r2, #4294967295
   19fa6:	f04f 33ff 	mov.w	r3, #4294967295
   19faa:	f7fc febf 	bl	16d2c <z_impl_k_mutex_lock>
	__ASSERT_NO_MSG(lock != NULL);
	k_mutex_lock((struct k_mutex *)lock, K_FOREVER);
}
   19fae:	bd08      	pop	{r3, pc}

00019fb0 <__retarget_lock_release_recursive>:
	k_sem_give((struct k_sem *)lock);
}

/* Release recursive lock */
void __retarget_lock_release_recursive(_LOCK_T lock)
{
   19fb0:	b508      	push	{r3, lr}
	return z_impl_k_mutex_unlock(mutex);
   19fb2:	f7fc ff3f 	bl	16e34 <z_impl_k_mutex_unlock>
	__ASSERT_NO_MSG(lock != NULL);
	k_mutex_unlock((struct k_mutex *)lock);
}
   19fb6:	bd08      	pop	{r3, pc}

00019fb8 <__errno>:
#endif /* CONFIG_MULTITHREADING */

__weak int *__errno(void)
{
   19fb8:	b508      	push	{r3, lr}
	if (z_syscall_trap()) {
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
   19fba:	f7fc fcf1 	bl	169a0 <z_impl_z_errno>
	return z_errno();
}
   19fbe:	bd08      	pop	{r3, pc}

00019fc0 <nrf_clock_is_running>:
    switch (domain)
   19fc0:	2903      	cmp	r1, #3
   19fc2:	d82f      	bhi.n	1a024 <nrf_clock_is_running+0x64>
   19fc4:	e8df f001 	tbb	[pc, r1]
   19fc8:	291c0f02 	.word	0x291c0f02
            if (p_clk_src != NULL)
   19fcc:	b122      	cbz	r2, 19fd8 <nrf_clock_is_running+0x18>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   19fce:	f8d0 3418 	ldr.w	r3, [r0, #1048]	; 0x418
   19fd2:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
   19fd6:	7013      	strb	r3, [r2, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   19fd8:	f8d0 3418 	ldr.w	r3, [r0, #1048]	; 0x418
   19fdc:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   19fe0:	d122      	bne.n	1a028 <nrf_clock_is_running+0x68>
    return false;
   19fe2:	2000      	movs	r0, #0
   19fe4:	4770      	bx	lr
            if (p_clk_src != NULL)
   19fe6:	b122      	cbz	r2, 19ff2 <nrf_clock_is_running+0x32>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   19fe8:	f8d0 340c 	ldr.w	r3, [r0, #1036]	; 0x40c
   19fec:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
   19ff0:	7013      	strb	r3, [r2, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   19ff2:	f8d0 340c 	ldr.w	r3, [r0, #1036]	; 0x40c
   19ff6:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   19ffa:	d117      	bne.n	1a02c <nrf_clock_is_running+0x6c>
    return false;
   19ffc:	2000      	movs	r0, #0
   19ffe:	4770      	bx	lr
            if (p_clk_src != NULL)
   1a000:	b122      	cbz	r2, 1a00c <nrf_clock_is_running+0x4c>
                    (nrf_clock_hfclk_t)((p_reg->HFCLK192MSTAT & CLOCK_HFCLK192MSTAT_SRC_Msk)
   1a002:	f8d0 345c 	ldr.w	r3, [r0, #1116]	; 0x45c
   1a006:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
   1a00a:	7013      	strb	r3, [r2, #0]
            if ((p_reg->HFCLK192MSTAT & CLOCK_HFCLK192MSTAT_STATE_Msk)
   1a00c:	f8d0 345c 	ldr.w	r3, [r0, #1116]	; 0x45c
   1a010:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   1a014:	d10c      	bne.n	1a030 <nrf_clock_is_running+0x70>
    return false;
   1a016:	2000      	movs	r0, #0
   1a018:	4770      	bx	lr
            return (p_reg->HFCLKAUDIOSTAT & CLOCK_HFCLKAUDIOSTAT_STATE_Msk) ==
   1a01a:	f8d0 0454 	ldr.w	r0, [r0, #1108]	; 0x454
   1a01e:	f3c0 4000 	ubfx	r0, r0, #16, #1
   1a022:	4770      	bx	lr
    switch (domain)
   1a024:	2000      	movs	r0, #0
   1a026:	4770      	bx	lr
                return true;
   1a028:	2001      	movs	r0, #1
   1a02a:	4770      	bx	lr
                return true;
   1a02c:	2001      	movs	r0, #1
   1a02e:	4770      	bx	lr
                return true;
   1a030:	2001      	movs	r0, #1
}
   1a032:	4770      	bx	lr

0001a034 <get_sub_data>:
	struct nrf_clock_control_data *data = dev->data;
   1a034:	6900      	ldr	r0, [r0, #16]
	return &data->subsys[type];
   1a036:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   1a03a:	0089      	lsls	r1, r1, #2
   1a03c:	3170      	adds	r1, #112	; 0x70
}
   1a03e:	4408      	add	r0, r1
   1a040:	4770      	bx	lr

0001a042 <get_sub_config>:
	const struct nrf_clock_control_config *config =
   1a042:	6840      	ldr	r0, [r0, #4]
}
   1a044:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
   1a048:	4770      	bx	lr

0001a04a <get_onoff_manager>:
	struct nrf_clock_control_data *data = dev->data;
   1a04a:	6900      	ldr	r0, [r0, #16]
	return &data->mgr[type];
   1a04c:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
}
   1a050:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   1a054:	4770      	bx	lr

0001a056 <get_status>:
{
   1a056:	b508      	push	{r3, lr}
	return GET_STATUS(get_sub_data(dev, type)->flags);
   1a058:	b2c9      	uxtb	r1, r1
   1a05a:	f7ff ffeb 	bl	1a034 <get_sub_data>
   1a05e:	6880      	ldr	r0, [r0, #8]
}
   1a060:	f000 0007 	and.w	r0, r0, #7
   1a064:	bd08      	pop	{r3, pc}

0001a066 <set_off_state>:
	__asm__ volatile(
   1a066:	f04f 0320 	mov.w	r3, #32
   1a06a:	f3ef 8211 	mrs	r2, BASEPRI
   1a06e:	f383 8812 	msr	BASEPRI_MAX, r3
   1a072:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   1a076:	6803      	ldr	r3, [r0, #0]
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   1a078:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
   1a07c:	d001      	beq.n	1a082 <set_off_state+0x1c>
   1a07e:	428b      	cmp	r3, r1
   1a080:	d107      	bne.n	1a092 <set_off_state+0x2c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
   1a082:	2301      	movs	r3, #1
   1a084:	6003      	str	r3, [r0, #0]
	int err = 0;
   1a086:	2000      	movs	r0, #0
	__asm__ volatile(
   1a088:	f382 8811 	msr	BASEPRI, r2
   1a08c:	f3bf 8f6f 	isb	sy
}
   1a090:	4770      	bx	lr
		err = -EPERM;
   1a092:	f04f 30ff 	mov.w	r0, #4294967295
   1a096:	e7f7      	b.n	1a088 <set_off_state+0x22>

0001a098 <set_starting_state>:
	__asm__ volatile(
   1a098:	f04f 0320 	mov.w	r3, #32
   1a09c:	f3ef 8211 	mrs	r2, BASEPRI
   1a0a0:	f383 8812 	msr	BASEPRI_MAX, r3
   1a0a4:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   1a0a8:	6803      	ldr	r3, [r0, #0]
   1a0aa:	f003 0cc0 	and.w	ip, r3, #192	; 0xc0
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   1a0ae:	f003 0307 	and.w	r3, r3, #7
   1a0b2:	2b01      	cmp	r3, #1
   1a0b4:	d008      	beq.n	1a0c8 <set_starting_state+0x30>
	} else if (current_ctx != ctx) {
   1a0b6:	458c      	cmp	ip, r1
   1a0b8:	d009      	beq.n	1a0ce <set_starting_state+0x36>
		err = -EPERM;
   1a0ba:	f04f 30ff 	mov.w	r0, #4294967295
	__asm__ volatile(
   1a0be:	f382 8811 	msr	BASEPRI, r2
   1a0c2:	f3bf 8f6f 	isb	sy
}
   1a0c6:	4770      	bx	lr
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   1a0c8:	6001      	str	r1, [r0, #0]
	int err = 0;
   1a0ca:	2000      	movs	r0, #0
   1a0cc:	e7f7      	b.n	1a0be <set_starting_state+0x26>
		err = -EALREADY;
   1a0ce:	f06f 0077 	mvn.w	r0, #119	; 0x77
   1a0d2:	e7f4      	b.n	1a0be <set_starting_state+0x26>

0001a0d4 <set_on_state>:
	__asm__ volatile(
   1a0d4:	f04f 0320 	mov.w	r3, #32
   1a0d8:	f3ef 8211 	mrs	r2, BASEPRI
   1a0dc:	f383 8812 	msr	BASEPRI_MAX, r3
   1a0e0:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   1a0e4:	6803      	ldr	r3, [r0, #0]
   1a0e6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1a0ea:	f043 0302 	orr.w	r3, r3, #2
   1a0ee:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   1a0f0:	f382 8811 	msr	BASEPRI, r2
   1a0f4:	f3bf 8f6f 	isb	sy
}
   1a0f8:	4770      	bx	lr

0001a0fa <clkstarted_handle>:
{
   1a0fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a0fc:	4606      	mov	r6, r0
   1a0fe:	460c      	mov	r4, r1
	struct nrf_clock_control_sub_data *sub_data = get_sub_data(dev, type);
   1a100:	f7ff ff98 	bl	1a034 <get_sub_data>
	clock_control_cb_t callback = sub_data->cb;
   1a104:	6805      	ldr	r5, [r0, #0]
	void *user_data = sub_data->user_data;
   1a106:	6847      	ldr	r7, [r0, #4]
	sub_data->cb = NULL;
   1a108:	2300      	movs	r3, #0
   1a10a:	f840 3b08 	str.w	r3, [r0], #8
	set_on_state(&sub_data->flags);
   1a10e:	f7ff ffe1 	bl	1a0d4 <set_on_state>
	if (callback) {
   1a112:	b11d      	cbz	r5, 1a11c <clkstarted_handle+0x22>
		callback(dev, (clock_control_subsys_t)type, user_data);
   1a114:	463a      	mov	r2, r7
   1a116:	4621      	mov	r1, r4
   1a118:	4630      	mov	r0, r6
   1a11a:	47a8      	blx	r5
}
   1a11c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001a11e <stop>:
{
   1a11e:	b570      	push	{r4, r5, r6, lr}
   1a120:	4606      	mov	r6, r0
   1a122:	4615      	mov	r5, r2
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
   1a124:	b2cc      	uxtb	r4, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
   1a126:	4621      	mov	r1, r4
   1a128:	f7ff ff84 	bl	1a034 <get_sub_data>
	err = set_off_state(&subdata->flags, ctx);
   1a12c:	4629      	mov	r1, r5
   1a12e:	3008      	adds	r0, #8
   1a130:	f7ff ff99 	bl	1a066 <set_off_state>
	if (err < 0) {
   1a134:	2800      	cmp	r0, #0
   1a136:	db06      	blt.n	1a146 <stop+0x28>
	get_sub_config(dev, type)->stop();
   1a138:	4621      	mov	r1, r4
   1a13a:	4630      	mov	r0, r6
   1a13c:	f7ff ff81 	bl	1a042 <get_sub_config>
   1a140:	6843      	ldr	r3, [r0, #4]
   1a142:	4798      	blx	r3
	return 0;
   1a144:	2000      	movs	r0, #0
}
   1a146:	bd70      	pop	{r4, r5, r6, pc}

0001a148 <api_stop>:
{
   1a148:	b508      	push	{r3, lr}
	return stop(dev, subsys, CTX_API);
   1a14a:	2280      	movs	r2, #128	; 0x80
   1a14c:	f7ff ffe7 	bl	1a11e <stop>
}
   1a150:	bd08      	pop	{r3, pc}

0001a152 <async_start>:
{
   1a152:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a156:	4606      	mov	r6, r0
   1a158:	4690      	mov	r8, r2
   1a15a:	461f      	mov	r7, r3
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
   1a15c:	b2cd      	uxtb	r5, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
   1a15e:	4629      	mov	r1, r5
   1a160:	f7ff ff68 	bl	1a034 <get_sub_data>
   1a164:	4604      	mov	r4, r0
	err = set_starting_state(&subdata->flags, ctx);
   1a166:	9906      	ldr	r1, [sp, #24]
   1a168:	3008      	adds	r0, #8
   1a16a:	f7ff ff95 	bl	1a098 <set_starting_state>
	if (err < 0) {
   1a16e:	2800      	cmp	r0, #0
   1a170:	db09      	blt.n	1a186 <async_start+0x34>
	subdata->cb = cb;
   1a172:	f8c4 8000 	str.w	r8, [r4]
	subdata->user_data = user_data;
   1a176:	6067      	str	r7, [r4, #4]
	 get_sub_config(dev, type)->start();
   1a178:	4629      	mov	r1, r5
   1a17a:	4630      	mov	r0, r6
   1a17c:	f7ff ff61 	bl	1a042 <get_sub_config>
   1a180:	6803      	ldr	r3, [r0, #0]
   1a182:	4798      	blx	r3
	return 0;
   1a184:	2000      	movs	r0, #0
}
   1a186:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001a18a <api_start>:
{
   1a18a:	b510      	push	{r4, lr}
   1a18c:	b082      	sub	sp, #8
	return async_start(dev, subsys, cb, user_data, CTX_API);
   1a18e:	2480      	movs	r4, #128	; 0x80
   1a190:	9400      	str	r4, [sp, #0]
   1a192:	f7ff ffde 	bl	1a152 <async_start>
}
   1a196:	b002      	add	sp, #8
   1a198:	bd10      	pop	{r4, pc}

0001a19a <onoff_started_callback>:
{
   1a19a:	b510      	push	{r4, lr}
   1a19c:	4614      	mov	r4, r2
	struct onoff_manager *mgr = get_onoff_manager(dev, type);
   1a19e:	b2c9      	uxtb	r1, r1
   1a1a0:	f7ff ff53 	bl	1a04a <get_onoff_manager>
	notify(mgr, 0);
   1a1a4:	2100      	movs	r1, #0
   1a1a6:	47a0      	blx	r4
}
   1a1a8:	bd10      	pop	{r4, pc}

0001a1aa <hfclk_start>:
{
   1a1aa:	b508      	push	{r3, lr}
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   1a1ac:	2001      	movs	r0, #1
   1a1ae:	f7fb fb05 	bl	157bc <nrfx_clock_start>
}
   1a1b2:	bd08      	pop	{r3, pc}

0001a1b4 <hfclkaudio_start>:
{
   1a1b4:	b508      	push	{r3, lr}
	nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLKAUDIO);
   1a1b6:	2003      	movs	r0, #3
   1a1b8:	f7fb fb00 	bl	157bc <nrfx_clock_start>
}
   1a1bc:	bd08      	pop	{r3, pc}

0001a1be <hfclk192m_start>:
{
   1a1be:	b508      	push	{r3, lr}
	nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK192M);
   1a1c0:	2002      	movs	r0, #2
   1a1c2:	f7fb fafb 	bl	157bc <nrfx_clock_start>
}
   1a1c6:	bd08      	pop	{r3, pc}

0001a1c8 <lfclk_start>:
{
   1a1c8:	b508      	push	{r3, lr}
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   1a1ca:	2000      	movs	r0, #0
   1a1cc:	f7fb faf6 	bl	157bc <nrfx_clock_start>
}
   1a1d0:	bd08      	pop	{r3, pc}

0001a1d2 <hfclk_stop>:
{
   1a1d2:	b508      	push	{r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   1a1d4:	2001      	movs	r0, #1
   1a1d6:	f000 fc28 	bl	1aa2a <nrfx_clock_stop>
}
   1a1da:	bd08      	pop	{r3, pc}

0001a1dc <hfclkaudio_stop>:
{
   1a1dc:	b508      	push	{r3, lr}
	nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLKAUDIO);
   1a1de:	2003      	movs	r0, #3
   1a1e0:	f000 fc23 	bl	1aa2a <nrfx_clock_stop>
}
   1a1e4:	bd08      	pop	{r3, pc}

0001a1e6 <hfclk192m_stop>:
{
   1a1e6:	b508      	push	{r3, lr}
	nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK192M);
   1a1e8:	2002      	movs	r0, #2
   1a1ea:	f000 fc1e 	bl	1aa2a <nrfx_clock_stop>
}
   1a1ee:	bd08      	pop	{r3, pc}

0001a1f0 <lfclk_stop>:
{
   1a1f0:	b508      	push	{r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   1a1f2:	2000      	movs	r0, #0
   1a1f4:	f000 fc19 	bl	1aa2a <nrfx_clock_stop>
}
   1a1f8:	bd08      	pop	{r3, pc}

0001a1fa <k_msleep>:
{
   1a1fa:	b508      	push	{r3, lr}
	return k_sleep(Z_TIMEOUT_MS(ms));
   1a1fc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   1a200:	17c1      	asrs	r1, r0, #31
   1a202:	03c9      	lsls	r1, r1, #15
   1a204:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
   1a208:	03c0      	lsls	r0, r0, #15
   1a20a:	f240 33e7 	movw	r3, #999	; 0x3e7
   1a20e:	18c0      	adds	r0, r0, r3
   1a210:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1a214:	f04f 0300 	mov.w	r3, #0
   1a218:	f141 0100 	adc.w	r1, r1, #0
   1a21c:	f7f6 fe04 	bl	10e28 <__aeabi_uldivmod>
	return z_impl_k_sleep(timeout);
   1a220:	f7fd fa12 	bl	17648 <z_impl_k_sleep>
}
   1a224:	bd08      	pop	{r3, pc}

0001a226 <blocking_start_callback>:
{
   1a226:	b508      	push	{r3, lr}
   1a228:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   1a22a:	f7fc fe41 	bl	16eb0 <z_impl_k_sem_give>
}
   1a22e:	bd08      	pop	{r3, pc}

0001a230 <sys_slist_remove>:
 */
static inline void sys_slist_remove(sys_slist_t *list,
				    sys_snode_t *prev_node,
				    sys_snode_t *node);

Z_GENLIST_REMOVE(slist, snode)
   1a230:	460b      	mov	r3, r1
   1a232:	b139      	cbz	r1, 1a244 <sys_slist_remove+0x14>
	return node->next;
   1a234:	6811      	ldr	r1, [r2, #0]
	parent->next = child;
   1a236:	6019      	str	r1, [r3, #0]
	return list->tail;
   1a238:	6841      	ldr	r1, [r0, #4]
Z_GENLIST_REMOVE(slist, snode)
   1a23a:	428a      	cmp	r2, r1
   1a23c:	d009      	beq.n	1a252 <sys_slist_remove+0x22>
	parent->next = child;
   1a23e:	2300      	movs	r3, #0
   1a240:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   1a242:	4770      	bx	lr
	return node->next;
   1a244:	6813      	ldr	r3, [r2, #0]
	list->head = node;
   1a246:	6003      	str	r3, [r0, #0]
	return list->tail;
   1a248:	6841      	ldr	r1, [r0, #4]
Z_GENLIST_REMOVE(slist, snode)
   1a24a:	428a      	cmp	r2, r1
   1a24c:	d1f7      	bne.n	1a23e <sys_slist_remove+0xe>
	list->tail = node;
   1a24e:	6043      	str	r3, [r0, #4]
}
   1a250:	e7f5      	b.n	1a23e <sys_slist_remove+0xe>
	list->tail = node;
   1a252:	6043      	str	r3, [r0, #4]
}
   1a254:	e7f3      	b.n	1a23e <sys_slist_remove+0xe>

0001a256 <sys_slist_find_and_remove>:
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1a256:	b508      	push	{r3, lr}
   1a258:	460a      	mov	r2, r1
	return list->head;
   1a25a:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1a25c:	2100      	movs	r1, #0
   1a25e:	e001      	b.n	1a264 <sys_slist_find_and_remove+0xe>
   1a260:	4619      	mov	r1, r3
   1a262:	681b      	ldr	r3, [r3, #0]
   1a264:	b12b      	cbz	r3, 1a272 <sys_slist_find_and_remove+0x1c>
   1a266:	4293      	cmp	r3, r2
   1a268:	d1fa      	bne.n	1a260 <sys_slist_find_and_remove+0xa>
   1a26a:	f7ff ffe1 	bl	1a230 <sys_slist_remove>
   1a26e:	2001      	movs	r0, #1
   1a270:	e000      	b.n	1a274 <sys_slist_find_and_remove+0x1e>
   1a272:	2000      	movs	r0, #0
   1a274:	bd08      	pop	{r3, pc}

0001a276 <gpio_manage_callback>:
 * @return 0 on success, negative errno otherwise.
 */
static inline int gpio_manage_callback(sys_slist_t *callbacks,
					struct gpio_callback *callback,
					bool set)
{
   1a276:	b570      	push	{r4, r5, r6, lr}
   1a278:	4604      	mov	r4, r0
   1a27a:	460d      	mov	r5, r1
   1a27c:	4616      	mov	r6, r2
	return list->head;
   1a27e:	6803      	ldr	r3, [r0, #0]
	__ASSERT(callback, "No callback!");
	__ASSERT(callback->handler, "No callback handler!");

	if (!sys_slist_is_empty(callbacks)) {
   1a280:	b133      	cbz	r3, 1a290 <gpio_manage_callback+0x1a>
		if (!sys_slist_find_and_remove(callbacks, &callback->node)) {
   1a282:	f7ff ffe8 	bl	1a256 <sys_slist_find_and_remove>
   1a286:	b970      	cbnz	r0, 1a2a6 <gpio_manage_callback+0x30>
			if (!set) {
   1a288:	b91e      	cbnz	r6, 1a292 <gpio_manage_callback+0x1c>
				return -EINVAL;
   1a28a:	f06f 0015 	mvn.w	r0, #21
   1a28e:	e006      	b.n	1a29e <gpio_manage_callback+0x28>
			}
		}
	} else if (!set) {
   1a290:	b132      	cbz	r2, 1a2a0 <gpio_manage_callback+0x2a>
   1a292:	6823      	ldr	r3, [r4, #0]
	parent->next = child;
   1a294:	602b      	str	r3, [r5, #0]
	list->head = node;
   1a296:	6025      	str	r5, [r4, #0]
	return list->tail;
   1a298:	6863      	ldr	r3, [r4, #4]
Z_GENLIST_PREPEND(slist, snode)
   1a29a:	b143      	cbz	r3, 1a2ae <gpio_manage_callback+0x38>

	if (set) {
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
   1a29c:	2000      	movs	r0, #0
}
   1a29e:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   1a2a0:	f06f 0015 	mvn.w	r0, #21
   1a2a4:	e7fb      	b.n	1a29e <gpio_manage_callback+0x28>
	if (set) {
   1a2a6:	2e00      	cmp	r6, #0
   1a2a8:	d1f3      	bne.n	1a292 <gpio_manage_callback+0x1c>
	return 0;
   1a2aa:	2000      	movs	r0, #0
   1a2ac:	e7f7      	b.n	1a29e <gpio_manage_callback+0x28>
	list->tail = node;
   1a2ae:	6065      	str	r5, [r4, #4]
   1a2b0:	2000      	movs	r0, #0
}
   1a2b2:	e7f4      	b.n	1a29e <gpio_manage_callback+0x28>

0001a2b4 <gpio_fire_callbacks>:
 * @param pins The actual pin mask that triggered the interrupt
 */
static inline void gpio_fire_callbacks(sys_slist_t *list,
					const struct device *port,
					uint32_t pins)
{
   1a2b4:	b570      	push	{r4, r5, r6, lr}
   1a2b6:	460e      	mov	r6, r1
   1a2b8:	4615      	mov	r5, r2
	return list->head;
   1a2ba:	6801      	ldr	r1, [r0, #0]
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   1a2bc:	b121      	cbz	r1, 1a2c8 <gpio_fire_callbacks+0x14>
	return node->next;
   1a2be:	680c      	ldr	r4, [r1, #0]
   1a2c0:	b13c      	cbz	r4, 1a2d2 <gpio_fire_callbacks+0x1e>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1a2c2:	b931      	cbnz	r1, 1a2d2 <gpio_fire_callbacks+0x1e>
   1a2c4:	460c      	mov	r4, r1
   1a2c6:	e004      	b.n	1a2d2 <gpio_fire_callbacks+0x1e>
   1a2c8:	460c      	mov	r4, r1
   1a2ca:	e002      	b.n	1a2d2 <gpio_fire_callbacks+0x1e>
   1a2cc:	4623      	mov	r3, r4
   1a2ce:	4621      	mov	r1, r4
   1a2d0:	461c      	mov	r4, r3
   1a2d2:	b171      	cbz	r1, 1a2f2 <gpio_fire_callbacks+0x3e>
		if (cb->pin_mask & pins) {
   1a2d4:	688a      	ldr	r2, [r1, #8]
   1a2d6:	402a      	ands	r2, r5
   1a2d8:	d002      	beq.n	1a2e0 <gpio_fire_callbacks+0x2c>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
   1a2da:	684b      	ldr	r3, [r1, #4]
   1a2dc:	4630      	mov	r0, r6
   1a2de:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   1a2e0:	2c00      	cmp	r4, #0
   1a2e2:	d0f3      	beq.n	1a2cc <gpio_fire_callbacks+0x18>
	return node->next;
   1a2e4:	6823      	ldr	r3, [r4, #0]
   1a2e6:	2b00      	cmp	r3, #0
   1a2e8:	d0f1      	beq.n	1a2ce <gpio_fire_callbacks+0x1a>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1a2ea:	2c00      	cmp	r4, #0
   1a2ec:	d1ef      	bne.n	1a2ce <gpio_fire_callbacks+0x1a>
   1a2ee:	4623      	mov	r3, r4
   1a2f0:	e7ed      	b.n	1a2ce <gpio_fire_callbacks+0x1a>
		}
	}
}
   1a2f2:	bd70      	pop	{r4, r5, r6, pc}

0001a2f4 <get_drive>:
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   1a2f4:	f020 00f9 	bic.w	r0, r0, #249	; 0xf9
   1a2f8:	0580      	lsls	r0, r0, #22
   1a2fa:	0d80      	lsrs	r0, r0, #22
   1a2fc:	f5b0 7f83 	cmp.w	r0, #262	; 0x106
   1a300:	d033      	beq.n	1a36a <get_drive+0x76>
   1a302:	d816      	bhi.n	1a332 <get_drive+0x3e>
   1a304:	2806      	cmp	r0, #6
   1a306:	d02c      	beq.n	1a362 <get_drive+0x6e>
   1a308:	d906      	bls.n	1a318 <get_drive+0x24>
   1a30a:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
   1a30e:	d10d      	bne.n	1a32c <get_drive+0x38>
		*drive = NRF_GPIO_PIN_H0S1;
   1a310:	2301      	movs	r3, #1
   1a312:	700b      	strb	r3, [r1, #0]
	return 0;
   1a314:	2000      	movs	r0, #0
		break;
   1a316:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   1a318:	b300      	cbz	r0, 1a35c <get_drive+0x68>
   1a31a:	2802      	cmp	r0, #2
   1a31c:	d103      	bne.n	1a326 <get_drive+0x32>
		*drive = NRF_GPIO_PIN_D0S1;
   1a31e:	2304      	movs	r3, #4
   1a320:	700b      	strb	r3, [r1, #0]
	return 0;
   1a322:	2000      	movs	r0, #0
		break;
   1a324:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   1a326:	f06f 0015 	mvn.w	r0, #21
   1a32a:	4770      	bx	lr
   1a32c:	f06f 0015 	mvn.w	r0, #21
   1a330:	4770      	bx	lr
   1a332:	f240 2302 	movw	r3, #514	; 0x202
   1a336:	4298      	cmp	r0, r3
   1a338:	d01b      	beq.n	1a372 <get_drive+0x7e>
   1a33a:	f5b0 7f40 	cmp.w	r0, #768	; 0x300
   1a33e:	d103      	bne.n	1a348 <get_drive+0x54>
		*drive = NRF_GPIO_PIN_H0H1;
   1a340:	2303      	movs	r3, #3
   1a342:	700b      	strb	r3, [r1, #0]
	return 0;
   1a344:	2000      	movs	r0, #0
		break;
   1a346:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   1a348:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
   1a34c:	d103      	bne.n	1a356 <get_drive+0x62>
		*drive = NRF_GPIO_PIN_S0H1;
   1a34e:	2302      	movs	r3, #2
   1a350:	700b      	strb	r3, [r1, #0]
	return 0;
   1a352:	2000      	movs	r0, #0
		break;
   1a354:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   1a356:	f06f 0015 	mvn.w	r0, #21
   1a35a:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_S0S1;
   1a35c:	2000      	movs	r0, #0
   1a35e:	7008      	strb	r0, [r1, #0]
		break;
   1a360:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_S0D1;
   1a362:	2306      	movs	r3, #6
   1a364:	700b      	strb	r3, [r1, #0]
	return 0;
   1a366:	2000      	movs	r0, #0
		break;
   1a368:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_H0D1;
   1a36a:	2307      	movs	r3, #7
   1a36c:	700b      	strb	r3, [r1, #0]
	return 0;
   1a36e:	2000      	movs	r0, #0
		break;
   1a370:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_D0H1;
   1a372:	2305      	movs	r3, #5
   1a374:	700b      	strb	r3, [r1, #0]
	return 0;
   1a376:	2000      	movs	r0, #0
}
   1a378:	4770      	bx	lr

0001a37a <get_pull>:
	if (flags & GPIO_PULL_UP) {
   1a37a:	f010 0f10 	tst.w	r0, #16
   1a37e:	d104      	bne.n	1a38a <get_pull+0x10>
	} else if (flags & GPIO_PULL_DOWN) {
   1a380:	f010 0f20 	tst.w	r0, #32
   1a384:	d103      	bne.n	1a38e <get_pull+0x14>
	return NRF_GPIO_PIN_NOPULL;
   1a386:	2000      	movs	r0, #0
   1a388:	4770      	bx	lr
		return NRF_GPIO_PIN_PULLUP;
   1a38a:	2003      	movs	r0, #3
   1a38c:	4770      	bx	lr
		return NRF_GPIO_PIN_PULLDOWN;
   1a38e:	2001      	movs	r0, #1
}
   1a390:	4770      	bx	lr

0001a392 <gpio_nrfx_port_get_raw>:
	return port->config;
   1a392:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1a394:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   1a396:	691b      	ldr	r3, [r3, #16]
	*value = nrf_gpio_port_in_read(reg);
   1a398:	600b      	str	r3, [r1, #0]
}
   1a39a:	2000      	movs	r0, #0
   1a39c:	4770      	bx	lr

0001a39e <gpio_nrfx_port_set_masked_raw>:
	return port->config;
   1a39e:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1a3a0:	685b      	ldr	r3, [r3, #4]
	const uint32_t set_mask = value & mask;
   1a3a2:	ea02 0001 	and.w	r0, r2, r1
	const uint32_t clear_mask = (~set_mask) & mask;
   1a3a6:	ea21 0102 	bic.w	r1, r1, r2
    p_reg->OUTSET = set_mask;
   1a3aa:	6098      	str	r0, [r3, #8]
    p_reg->OUTCLR = clr_mask;
   1a3ac:	60d9      	str	r1, [r3, #12]
}
   1a3ae:	2000      	movs	r0, #0
   1a3b0:	4770      	bx	lr

0001a3b2 <gpio_nrfx_port_set_bits_raw>:
	return port->config;
   1a3b2:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1a3b4:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
   1a3b6:	6099      	str	r1, [r3, #8]
}
   1a3b8:	2000      	movs	r0, #0
   1a3ba:	4770      	bx	lr

0001a3bc <gpio_nrfx_port_clear_bits_raw>:
	return port->config;
   1a3bc:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1a3be:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
   1a3c0:	60d9      	str	r1, [r3, #12]
}
   1a3c2:	2000      	movs	r0, #0
   1a3c4:	4770      	bx	lr

0001a3c6 <gpio_nrfx_port_toggle_bits>:
	return port->config;
   1a3c6:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1a3c8:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   1a3ca:	6853      	ldr	r3, [r2, #4]
	const uint32_t set_mask = value & mask;
   1a3cc:	ea21 0003 	bic.w	r0, r1, r3
	const uint32_t clear_mask = (~value) & mask;
   1a3d0:	400b      	ands	r3, r1
    p_reg->OUTSET = set_mask;
   1a3d2:	6090      	str	r0, [r2, #8]
    p_reg->OUTCLR = clr_mask;
   1a3d4:	60d3      	str	r3, [r2, #12]
}
   1a3d6:	2000      	movs	r0, #0
   1a3d8:	4770      	bx	lr

0001a3da <get_trigger>:
	if (mode == GPIO_INT_MODE_LEVEL) {
   1a3da:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
   1a3de:	d007      	beq.n	1a3f0 <get_trigger+0x16>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   1a3e0:	f1b1 6fc0 	cmp.w	r1, #100663296	; 0x6000000
   1a3e4:	d00d      	beq.n	1a402 <get_trigger+0x28>
   1a3e6:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
   1a3ea:	d008      	beq.n	1a3fe <get_trigger+0x24>
   1a3ec:	2001      	movs	r0, #1
}
   1a3ee:	4770      	bx	lr
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
   1a3f0:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
   1a3f4:	d001      	beq.n	1a3fa <get_trigger+0x20>
   1a3f6:	2005      	movs	r0, #5
   1a3f8:	4770      	bx	lr
   1a3fa:	2004      	movs	r0, #4
   1a3fc:	4770      	bx	lr
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   1a3fe:	2002      	movs	r0, #2
   1a400:	4770      	bx	lr
   1a402:	2003      	movs	r0, #3
   1a404:	4770      	bx	lr

0001a406 <gpio_nrfx_manage_callback>:
{
   1a406:	b508      	push	{r3, lr}
	return port->data;
   1a408:	6900      	ldr	r0, [r0, #16]
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   1a40a:	3004      	adds	r0, #4
   1a40c:	f7ff ff33 	bl	1a276 <gpio_manage_callback>
}
   1a410:	bd08      	pop	{r3, pc}

0001a412 <nrfx_gpio_handler>:
{
   1a412:	b510      	push	{r4, lr}
    *p_pin = pin_number & 0x1F;
   1a414:	f000 041f 	and.w	r4, r0, #31
	const struct device *port = get_dev(port_id);
   1a418:	0940      	lsrs	r0, r0, #5
   1a41a:	f7fa f977 	bl	1470c <get_dev>
	if (port == NULL) {
   1a41e:	b130      	cbz	r0, 1a42e <nrfx_gpio_handler+0x1c>
   1a420:	4601      	mov	r1, r0
	return port->data;
   1a422:	6900      	ldr	r0, [r0, #16]
	gpio_fire_callbacks(list, port, BIT(pin));
   1a424:	2201      	movs	r2, #1
   1a426:	40a2      	lsls	r2, r4
   1a428:	3004      	adds	r0, #4
   1a42a:	f7ff ff43 	bl	1a2b4 <gpio_fire_callbacks>
}
   1a42e:	bd10      	pop	{r4, pc}

0001a430 <i2c_nrfx_twim_configure>:
	const struct i2c_nrfx_twim_config *dev_config = dev->config;
   1a430:	6843      	ldr	r3, [r0, #4]
	if (I2C_ADDR_10_BITS & i2c_config) {
   1a432:	f011 0f01 	tst.w	r1, #1
   1a436:	d11f      	bne.n	1a478 <i2c_nrfx_twim_configure+0x48>
	switch (I2C_SPEED_GET(i2c_config)) {
   1a438:	f3c1 0142 	ubfx	r1, r1, #1, #3
   1a43c:	2902      	cmp	r1, #2
   1a43e:	d00d      	beq.n	1a45c <i2c_nrfx_twim_configure+0x2c>
   1a440:	2903      	cmp	r1, #3
   1a442:	d012      	beq.n	1a46a <i2c_nrfx_twim_configure+0x3a>
   1a444:	2901      	cmp	r1, #1
   1a446:	d002      	beq.n	1a44e <i2c_nrfx_twim_configure+0x1e>
   1a448:	f06f 0015 	mvn.w	r0, #21
}
   1a44c:	4770      	bx	lr
		nrf_twim_frequency_set(dev_config->twim.p_twim,
   1a44e:	681b      	ldr	r3, [r3, #0]
    p_reg->FREQUENCY = frequency;
   1a450:	f04f 72cc 	mov.w	r2, #26738688	; 0x1980000
   1a454:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
	return 0;
   1a458:	2000      	movs	r0, #0
}
   1a45a:	4770      	bx	lr
		nrf_twim_frequency_set(dev_config->twim.p_twim,
   1a45c:	681b      	ldr	r3, [r3, #0]
    p_reg->FREQUENCY = frequency;
   1a45e:	f04f 62c8 	mov.w	r2, #104857600	; 0x6400000
   1a462:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
	return 0;
   1a466:	2000      	movs	r0, #0
}
   1a468:	4770      	bx	lr
		nrf_twim_frequency_set(dev_config->twim.p_twim,
   1a46a:	681b      	ldr	r3, [r3, #0]
    p_reg->FREQUENCY = frequency;
   1a46c:	f04f 627f 	mov.w	r2, #267386880	; 0xff00000
   1a470:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
	return 0;
   1a474:	2000      	movs	r0, #0
}
   1a476:	4770      	bx	lr
		return -EINVAL;
   1a478:	f06f 0015 	mvn.w	r0, #21
   1a47c:	4770      	bx	lr

0001a47e <pinctrl_apply_state>:
 * @retval -ENOENT If given state id does not exist.
 * @retval -errno Negative errno for other failures.
 */
static inline int pinctrl_apply_state(const struct pinctrl_dev_config *config,
				      uint8_t id)
{
   1a47e:	b510      	push	{r4, lr}
   1a480:	b082      	sub	sp, #8
   1a482:	4604      	mov	r4, r0
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
   1a484:	aa01      	add	r2, sp, #4
   1a486:	f000 fa48 	bl	1a91a <pinctrl_lookup_state>
	if (ret < 0) {
   1a48a:	2800      	cmp	r0, #0
   1a48c:	db05      	blt.n	1a49a <pinctrl_apply_state+0x1c>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
   1a48e:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
   1a490:	6822      	ldr	r2, [r4, #0]
   1a492:	7919      	ldrb	r1, [r3, #4]
   1a494:	6818      	ldr	r0, [r3, #0]
   1a496:	f7fa ff1b 	bl	152d0 <pinctrl_configure_pins>
}
   1a49a:	b002      	add	sp, #8
   1a49c:	bd10      	pop	{r4, pc}

0001a49e <irq_connect1>:
#ifdef CONFIG_I2C_0_NRF_TWIM
I2C_NRFX_TWIM_DEVICE(0);
#endif

#ifdef CONFIG_I2C_1_NRF_TWIM
I2C_NRFX_TWIM_DEVICE(1);
   1a49e:	b508      	push	{r3, lr}
   1a4a0:	2200      	movs	r2, #0
   1a4a2:	2101      	movs	r1, #1
   1a4a4:	2009      	movs	r0, #9
   1a4a6:	f7ff fc6d 	bl	19d84 <z_arm_irq_priority_set>
   1a4aa:	bd08      	pop	{r3, pc}

0001a4ac <endtx_isr>:
	const struct uarte_nrfx_config *config = dev->config;
   1a4ac:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   1a4ae:	681a      	ldr	r2, [r3, #0]
	__asm__ volatile(
   1a4b0:	f04f 0120 	mov.w	r1, #32
   1a4b4:	f3ef 8311 	mrs	r3, BASEPRI
   1a4b8:	f381 8812 	msr	BASEPRI_MAX, r1
   1a4bc:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1a4c0:	f8d2 1120 	ldr.w	r1, [r2, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   1a4c4:	b131      	cbz	r1, 1a4d4 <endtx_isr+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1a4c6:	2100      	movs	r1, #0
   1a4c8:	f8c2 1120 	str.w	r1, [r2, #288]	; 0x120
   1a4cc:	f8d2 1120 	ldr.w	r1, [r2, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1a4d0:	2101      	movs	r1, #1
   1a4d2:	60d1      	str	r1, [r2, #12]
	__asm__ volatile(
   1a4d4:	f383 8811 	msr	BASEPRI, r3
   1a4d8:	f3bf 8f6f 	isb	sy
}
   1a4dc:	4770      	bx	lr

0001a4de <uarte_nrfx_isr_int>:
{
   1a4de:	b538      	push	{r3, r4, r5, lr}
	const struct uarte_nrfx_config *config = dev->config;
   1a4e0:	6845      	ldr	r5, [r0, #4]
	return config->uarte_regs;
   1a4e2:	682c      	ldr	r4, [r5, #0]
    return p_reg->INTENSET & mask;
   1a4e4:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
   1a4e8:	f413 7f80 	tst.w	r3, #256	; 0x100
   1a4ec:	d002      	beq.n	1a4f4 <uarte_nrfx_isr_int+0x16>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1a4ee:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
   1a4f2:	b9d3      	cbnz	r3, 1a52a <uarte_nrfx_isr_int+0x4c>
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   1a4f4:	686b      	ldr	r3, [r5, #4]
   1a4f6:	f013 0f10 	tst.w	r3, #16
   1a4fa:	d015      	beq.n	1a528 <uarte_nrfx_isr_int+0x4a>
	__asm__ volatile(
   1a4fc:	f04f 0220 	mov.w	r2, #32
   1a500:	f3ef 8311 	mrs	r3, BASEPRI
   1a504:	f382 8812 	msr	BASEPRI_MAX, r2
   1a508:	f3bf 8f6f 	isb	sy
   1a50c:	f8d4 2158 	ldr.w	r2, [r4, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
   1a510:	b112      	cbz	r2, 1a518 <uarte_nrfx_isr_int+0x3a>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   1a512:	2200      	movs	r2, #0
   1a514:	f8c4 2500 	str.w	r2, [r4, #1280]	; 0x500
    p_reg->INTENCLR = mask;
   1a518:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   1a51c:	f8c4 2308 	str.w	r2, [r4, #776]	; 0x308
	__asm__ volatile(
   1a520:	f383 8811 	msr	BASEPRI, r3
   1a524:	f3bf 8f6f 	isb	sy
}
   1a528:	bd38      	pop	{r3, r4, r5, pc}
		endtx_isr(dev);
   1a52a:	f7ff ffbf 	bl	1a4ac <endtx_isr>
   1a52e:	e7e1      	b.n	1a4f4 <uarte_nrfx_isr_int+0x16>

0001a530 <uarte_nrfx_configure>:
{
   1a530:	b570      	push	{r4, r5, r6, lr}
   1a532:	b082      	sub	sp, #8
   1a534:	4605      	mov	r5, r0
   1a536:	460c      	mov	r4, r1
	struct uarte_nrfx_data *data = dev->data;
   1a538:	6906      	ldr	r6, [r0, #16]
	switch (cfg->stop_bits) {
   1a53a:	794b      	ldrb	r3, [r1, #5]
   1a53c:	2b01      	cmp	r3, #1
   1a53e:	d006      	beq.n	1a54e <uarte_nrfx_configure+0x1e>
   1a540:	2b03      	cmp	r3, #3
   1a542:	d011      	beq.n	1a568 <uarte_nrfx_configure+0x38>
   1a544:	f06f 0285 	mvn.w	r2, #133	; 0x85
}
   1a548:	4610      	mov	r0, r2
   1a54a:	b002      	add	sp, #8
   1a54c:	bd70      	pop	{r4, r5, r6, pc}
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
   1a54e:	2300      	movs	r3, #0
   1a550:	f88d 3002 	strb.w	r3, [sp, #2]
	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   1a554:	79a3      	ldrb	r3, [r4, #6]
   1a556:	2b03      	cmp	r3, #3
   1a558:	d146      	bne.n	1a5e8 <uarte_nrfx_configure+0xb8>
	switch (cfg->flow_ctrl) {
   1a55a:	79e3      	ldrb	r3, [r4, #7]
   1a55c:	b143      	cbz	r3, 1a570 <uarte_nrfx_configure+0x40>
   1a55e:	2b01      	cmp	r3, #1
   1a560:	d015      	beq.n	1a58e <uarte_nrfx_configure+0x5e>
   1a562:	f06f 0285 	mvn.w	r2, #133	; 0x85
   1a566:	e7ef      	b.n	1a548 <uarte_nrfx_configure+0x18>
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
   1a568:	2310      	movs	r3, #16
   1a56a:	f88d 3002 	strb.w	r3, [sp, #2]
		break;
   1a56e:	e7f1      	b.n	1a554 <uarte_nrfx_configure+0x24>
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
   1a570:	2300      	movs	r3, #0
   1a572:	f88d 3000 	strb.w	r3, [sp]
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
   1a576:	2300      	movs	r3, #0
   1a578:	f8ad 3004 	strh.w	r3, [sp, #4]
	switch (cfg->parity) {
   1a57c:	7923      	ldrb	r3, [r4, #4]
   1a57e:	2b01      	cmp	r3, #1
   1a580:	d02a      	beq.n	1a5d8 <uarte_nrfx_configure+0xa8>
   1a582:	2b02      	cmp	r3, #2
   1a584:	d024      	beq.n	1a5d0 <uarte_nrfx_configure+0xa0>
   1a586:	b133      	cbz	r3, 1a596 <uarte_nrfx_configure+0x66>
   1a588:	f06f 0285 	mvn.w	r2, #133	; 0x85
   1a58c:	e7dc      	b.n	1a548 <uarte_nrfx_configure+0x18>
		uarte_cfg.hwfc = NRF_UARTE_HWFC_ENABLED;
   1a58e:	2301      	movs	r3, #1
   1a590:	f88d 3000 	strb.w	r3, [sp]
		break;
   1a594:	e7ef      	b.n	1a576 <uarte_nrfx_configure+0x46>
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
   1a596:	f88d 3001 	strb.w	r3, [sp, #1]
	if (baudrate_set(dev, cfg->baudrate) != 0) {
   1a59a:	6821      	ldr	r1, [r4, #0]
   1a59c:	4628      	mov	r0, r5
   1a59e:	f7fa fb27 	bl	14bf0 <baudrate_set>
   1a5a2:	4602      	mov	r2, r0
   1a5a4:	bb18      	cbnz	r0, 1a5ee <uarte_nrfx_configure+0xbe>
	const struct uarte_nrfx_config *config = dev->config;
   1a5a6:	686b      	ldr	r3, [r5, #4]
	return config->uarte_regs;
   1a5a8:	6819      	ldr	r1, [r3, #0]
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   1a5aa:	f89d 3001 	ldrb.w	r3, [sp, #1]
                    | (uint32_t)p_cfg->stop
   1a5ae:	f89d 0002 	ldrb.w	r0, [sp, #2]
   1a5b2:	4303      	orrs	r3, r0
                    | (uint32_t)p_cfg->paritytype
   1a5b4:	f8bd 0004 	ldrh.w	r0, [sp, #4]
   1a5b8:	4303      	orrs	r3, r0
                    | (uint32_t)p_cfg->hwfc;
   1a5ba:	f89d 0000 	ldrb.w	r0, [sp]
   1a5be:	4303      	orrs	r3, r0
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   1a5c0:	f8c1 356c 	str.w	r3, [r1, #1388]	; 0x56c
	data->uart_config = *cfg;
   1a5c4:	3604      	adds	r6, #4
   1a5c6:	e894 0003 	ldmia.w	r4, {r0, r1}
   1a5ca:	e886 0003 	stmia.w	r6, {r0, r1}
	return 0;
   1a5ce:	e7bb      	b.n	1a548 <uarte_nrfx_configure+0x18>
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
   1a5d0:	230e      	movs	r3, #14
   1a5d2:	f88d 3001 	strb.w	r3, [sp, #1]
		break;
   1a5d6:	e7e0      	b.n	1a59a <uarte_nrfx_configure+0x6a>
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
   1a5d8:	230e      	movs	r3, #14
   1a5da:	f88d 3001 	strb.w	r3, [sp, #1]
		uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_ODD;
   1a5de:	f44f 7380 	mov.w	r3, #256	; 0x100
   1a5e2:	f8ad 3004 	strh.w	r3, [sp, #4]
		break;
   1a5e6:	e7d8      	b.n	1a59a <uarte_nrfx_configure+0x6a>
		return -ENOTSUP;
   1a5e8:	f06f 0285 	mvn.w	r2, #133	; 0x85
   1a5ec:	e7ac      	b.n	1a548 <uarte_nrfx_configure+0x18>
		return -ENOTSUP;
   1a5ee:	f06f 0285 	mvn.w	r2, #133	; 0x85
   1a5f2:	e7a9      	b.n	1a548 <uarte_nrfx_configure+0x18>

0001a5f4 <uarte_nrfx_config_get>:
{
   1a5f4:	460a      	mov	r2, r1
	struct uarte_nrfx_data *data = dev->data;
   1a5f6:	6903      	ldr	r3, [r0, #16]
	*cfg = data->uart_config;
   1a5f8:	3304      	adds	r3, #4
   1a5fa:	e893 0003 	ldmia.w	r3, {r0, r1}
   1a5fe:	e882 0003 	stmia.w	r2, {r0, r1}
}
   1a602:	2000      	movs	r0, #0
   1a604:	4770      	bx	lr

0001a606 <uarte_nrfx_err_check>:
	const struct uarte_nrfx_config *config = dev->config;
   1a606:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   1a608:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   1a60a:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   1a60e:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   1a612:	4770      	bx	lr

0001a614 <is_tx_ready>:
	const struct uarte_nrfx_config *config = dev->config;
   1a614:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   1a616:	681a      	ldr	r2, [r3, #0]
	bool ppi_endtx = config->flags & UARTE_CFG_FLAG_PPI_ENDTX;
   1a618:	685b      	ldr	r3, [r3, #4]
   1a61a:	f003 0302 	and.w	r3, r3, #2
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1a61e:	f8d2 1158 	ldr.w	r1, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   1a622:	b929      	cbnz	r1, 1a630 <is_tx_ready+0x1c>
   1a624:	b933      	cbnz	r3, 1a634 <is_tx_ready+0x20>
   1a626:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
   1a62a:	b92b      	cbnz	r3, 1a638 <is_tx_ready+0x24>
   1a62c:	2000      	movs	r0, #0
   1a62e:	4770      	bx	lr
   1a630:	2001      	movs	r0, #1
   1a632:	4770      	bx	lr
   1a634:	2000      	movs	r0, #0
   1a636:	4770      	bx	lr
   1a638:	2001      	movs	r0, #1
}
   1a63a:	4770      	bx	lr

0001a63c <uarte_enable>:
	const struct uarte_nrfx_config *config = dev->config;
   1a63c:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   1a63e:	681b      	ldr	r3, [r3, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   1a640:	2208      	movs	r2, #8
   1a642:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
}
   1a646:	4770      	bx	lr

0001a648 <tx_start>:
{
   1a648:	b510      	push	{r4, lr}
	const struct uarte_nrfx_config *config = dev->config;
   1a64a:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   1a64c:	681c      	ldr	r4, [r3, #0]

NRF_STATIC_INLINE void nrf_uarte_tx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t  const * p_buffer,
                                               size_t           length)
{
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   1a64e:	f8c4 1544 	str.w	r1, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   1a652:	f8c4 2548 	str.w	r2, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1a656:	2200      	movs	r2, #0
   1a658:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
   1a65c:	f8d4 1120 	ldr.w	r1, [r4, #288]	; 0x120
   1a660:	f8c4 2158 	str.w	r2, [r4, #344]	; 0x158
   1a664:	f8d4 2158 	ldr.w	r2, [r4, #344]	; 0x158
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   1a668:	685b      	ldr	r3, [r3, #4]
   1a66a:	f013 0f10 	tst.w	r3, #16
   1a66e:	d102      	bne.n	1a676 <tx_start+0x2e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1a670:	2301      	movs	r3, #1
   1a672:	60a3      	str	r3, [r4, #8]
}
   1a674:	bd10      	pop	{r4, pc}
		uarte_enable(dev, UARTE_LOW_POWER_TX);
   1a676:	2101      	movs	r1, #1
   1a678:	f7ff ffe0 	bl	1a63c <uarte_enable>
    p_reg->INTENSET = mask;
   1a67c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   1a680:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
}
   1a684:	e7f4      	b.n	1a670 <tx_start+0x28>

0001a686 <uarte_nrfx_poll_in>:
{
   1a686:	b410      	push	{r4}
	const struct uarte_nrfx_data *data = dev->data;
   1a688:	6904      	ldr	r4, [r0, #16]
	const struct uarte_nrfx_config *config = dev->config;
   1a68a:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   1a68c:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1a68e:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   1a692:	b15a      	cbz	r2, 1a6ac <uarte_nrfx_poll_in+0x26>
	*c = *data->rx_data;
   1a694:	6962      	ldr	r2, [r4, #20]
   1a696:	7812      	ldrb	r2, [r2, #0]
   1a698:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1a69a:	2000      	movs	r0, #0
   1a69c:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   1a6a0:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1a6a4:	2201      	movs	r2, #1
   1a6a6:	601a      	str	r2, [r3, #0]
}
   1a6a8:	bc10      	pop	{r4}
   1a6aa:	4770      	bx	lr
		return -1;
   1a6ac:	f04f 30ff 	mov.w	r0, #4294967295
   1a6b0:	e7fa      	b.n	1a6a8 <uarte_nrfx_poll_in+0x22>

0001a6b2 <k_msleep>:
{
   1a6b2:	b508      	push	{r3, lr}
	return k_sleep(Z_TIMEOUT_MS(ms));
   1a6b4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   1a6b8:	17c1      	asrs	r1, r0, #31
   1a6ba:	03c9      	lsls	r1, r1, #15
   1a6bc:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
   1a6c0:	03c0      	lsls	r0, r0, #15
   1a6c2:	f240 33e7 	movw	r3, #999	; 0x3e7
   1a6c6:	18c0      	adds	r0, r0, r3
   1a6c8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1a6cc:	f04f 0300 	mov.w	r3, #0
   1a6d0:	f141 0100 	adc.w	r1, r1, #0
   1a6d4:	f7f6 fba8 	bl	10e28 <__aeabi_uldivmod>
	return z_impl_k_sleep(timeout);
   1a6d8:	f7fc ffb6 	bl	17648 <z_impl_k_sleep>
}
   1a6dc:	bd08      	pop	{r3, pc}

0001a6de <wait_tx_ready>:
{
   1a6de:	b570      	push	{r4, r5, r6, lr}
   1a6e0:	4606      	mov	r6, r0
   1a6e2:	e013      	b.n	1a70c <wait_tx_ready+0x2e>
		if (res) {
   1a6e4:	b17d      	cbz	r5, 1a706 <wait_tx_ready+0x28>
	__asm__ volatile(
   1a6e6:	f04f 0320 	mov.w	r3, #32
   1a6ea:	f3ef 8411 	mrs	r4, BASEPRI
   1a6ee:	f383 8812 	msr	BASEPRI_MAX, r3
   1a6f2:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   1a6f6:	4630      	mov	r0, r6
   1a6f8:	f7ff ff8c 	bl	1a614 <is_tx_ready>
   1a6fc:	b998      	cbnz	r0, 1a726 <wait_tx_ready+0x48>
	__asm__ volatile(
   1a6fe:	f384 8811 	msr	BASEPRI, r4
   1a702:	f3bf 8f6f 	isb	sy
			k_msleep(1);
   1a706:	2001      	movs	r0, #1
   1a708:	f7ff ffd3 	bl	1a6b2 <k_msleep>
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
   1a70c:	2464      	movs	r4, #100	; 0x64
   1a70e:	4630      	mov	r0, r6
   1a710:	f7ff ff80 	bl	1a614 <is_tx_ready>
   1a714:	4605      	mov	r5, r0
   1a716:	2800      	cmp	r0, #0
   1a718:	d1e4      	bne.n	1a6e4 <wait_tx_ready+0x6>
   1a71a:	2001      	movs	r0, #1
   1a71c:	f000 f926 	bl	1a96c <nrfx_busy_wait>
   1a720:	3c01      	subs	r4, #1
   1a722:	d1f4      	bne.n	1a70e <wait_tx_ready+0x30>
   1a724:	e7de      	b.n	1a6e4 <wait_tx_ready+0x6>
}
   1a726:	4620      	mov	r0, r4
   1a728:	bd70      	pop	{r4, r5, r6, pc}

0001a72a <pinctrl_apply_state>:
{
   1a72a:	b510      	push	{r4, lr}
   1a72c:	b082      	sub	sp, #8
   1a72e:	4604      	mov	r4, r0
	ret = pinctrl_lookup_state(config, id, &state);
   1a730:	aa01      	add	r2, sp, #4
   1a732:	f000 f8f2 	bl	1a91a <pinctrl_lookup_state>
	if (ret < 0) {
   1a736:	2800      	cmp	r0, #0
   1a738:	db05      	blt.n	1a746 <pinctrl_apply_state+0x1c>
	return pinctrl_apply_state_direct(config, state);
   1a73a:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
   1a73c:	6822      	ldr	r2, [r4, #0]
   1a73e:	7919      	ldrb	r1, [r3, #4]
   1a740:	6818      	ldr	r0, [r3, #0]
   1a742:	f7fa fdc5 	bl	152d0 <pinctrl_configure_pins>
}
   1a746:	b002      	add	sp, #8
   1a748:	bd10      	pop	{r4, pc}

0001a74a <uarte_instance_init>:

static int uarte_instance_init(const struct device *dev,
			       uint8_t interrupts_active)
{
   1a74a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a74e:	4604      	mov	r4, r0
	const struct uarte_nrfx_config *config = dev->config;
   1a750:	6847      	ldr	r7, [r0, #4]
	return config->uarte_regs;
   1a752:	683e      	ldr	r6, [r7, #0]
	int err;
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	struct uarte_nrfx_data *data = dev->data;
   1a754:	f8d0 8010 	ldr.w	r8, [r0, #16]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   1a758:	2100      	movs	r1, #0
   1a75a:	f8c6 1500 	str.w	r1, [r6, #1280]	; 0x500
	const struct uarte_nrfx_config *cfg = dev->config;

	nrf_uarte_disable(uarte);

	data->dev = dev;
   1a75e:	f8c8 0000 	str.w	r0, [r8]

#ifdef CONFIG_PINCTRL
	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
   1a762:	68f8      	ldr	r0, [r7, #12]
   1a764:	f7ff ffe1 	bl	1a72a <pinctrl_apply_state>
	if (err < 0) {
   1a768:	1e05      	subs	r5, r0, #0
   1a76a:	db35      	blt.n	1a7d8 <uarte_instance_init+0x8e>
	}
#else
	uarte_nrfx_pins_configure(dev, false);
#endif /* CONFIG_PINCTRL */

	err = uarte_nrfx_configure(dev, &data->uart_config);
   1a76c:	f108 0104 	add.w	r1, r8, #4
   1a770:	4620      	mov	r0, r4
   1a772:	f7ff fedd 	bl	1a530 <uarte_nrfx_configure>
	if (err) {
   1a776:	4605      	mov	r5, r0
   1a778:	bb70      	cbnz	r0, 1a7d8 <uarte_instance_init+0x8e>
		return err;
	}

	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
   1a77a:	687b      	ldr	r3, [r7, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
   1a77c:	f013 0f02 	tst.w	r3, #2
   1a780:	d12d      	bne.n	1a7de <uarte_instance_init+0x94>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   1a782:	2308      	movs	r3, #8
   1a784:	f8c6 3500 	str.w	r3, [r6, #1280]	; 0x500
#endif
	{
		/* Enable receiver and transmitter */
		nrf_uarte_enable(uarte);

		if (!cfg->disable_rx) {
   1a788:	7a3b      	ldrb	r3, [r7, #8]
   1a78a:	b95b      	cbnz	r3, 1a7a4 <uarte_instance_init+0x5a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1a78c:	f8c6 3110 	str.w	r3, [r6, #272]	; 0x110
   1a790:	f8d6 3110 	ldr.w	r3, [r6, #272]	; 0x110
			nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_ENDRX);

			nrf_uarte_rx_buffer_set(uarte, data->rx_data, 1);
   1a794:	f8d8 3014 	ldr.w	r3, [r8, #20]

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   1a798:	f8c6 3534 	str.w	r3, [r6, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   1a79c:	2301      	movs	r3, #1
   1a79e:	f8c6 3538 	str.w	r3, [r6, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1a7a2:	6033      	str	r3, [r6, #0]
			nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STARTRX);
		}
	}

	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
   1a7a4:	687b      	ldr	r3, [r7, #4]
   1a7a6:	f013 0f02 	tst.w	r3, #2
   1a7aa:	d103      	bne.n	1a7b4 <uarte_instance_init+0x6a>
    p_reg->INTENSET = mask;
   1a7ac:	f44f 7380 	mov.w	r3, #256	; 0x100
   1a7b0:	f8c6 3304 	str.w	r3, [r6, #772]	; 0x304
		nrf_uarte_int_enable(uarte, NRF_UARTE_INT_ENDTX_MASK);
	}

	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
   1a7b4:	687b      	ldr	r3, [r7, #4]
   1a7b6:	f013 0f10 	tst.w	r3, #16
   1a7ba:	d003      	beq.n	1a7c4 <uarte_instance_init+0x7a>
   1a7bc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   1a7c0:	f8c6 3304 	str.w	r3, [r6, #772]	; 0x304

	/* Set TXSTOPPED event by requesting fake (zero-length) transfer.
	 * Pointer to RAM variable (data->tx_buffer) is set because otherwise
	 * such operation may result in HardFault or RAM corruption.
	 */
	nrf_uarte_tx_buffer_set(uarte, data->char_out, 0);
   1a7c4:	f8d8 3010 	ldr.w	r3, [r8, #16]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   1a7c8:	f8c6 3544 	str.w	r3, [r6, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   1a7cc:	2300      	movs	r3, #0
   1a7ce:	f8c6 3548 	str.w	r3, [r6, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1a7d2:	2301      	movs	r3, #1
   1a7d4:	60b3      	str	r3, [r6, #8]
   1a7d6:	60f3      	str	r3, [r6, #12]

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
   1a7d8:	4628      	mov	r0, r5
   1a7da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		err = endtx_stoptx_ppi_init(uarte, data);
   1a7de:	4641      	mov	r1, r8
   1a7e0:	4630      	mov	r0, r6
   1a7e2:	f7fa fadb 	bl	14d9c <endtx_stoptx_ppi_init>
		if (err < 0) {
   1a7e6:	2800      	cmp	r0, #0
   1a7e8:	dacb      	bge.n	1a782 <uarte_instance_init+0x38>
			return err;
   1a7ea:	4605      	mov	r5, r0
   1a7ec:	e7f4      	b.n	1a7d8 <uarte_instance_init+0x8e>

0001a7ee <uarte_0_init>:
		(__attribute__((__section__(LINKER_DT_NODE_REGION_NAME(	       \
			DT_PHANDLE(UARTE(idx), memory_regions)))))),	       \
		())

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
   1a7ee:	b510      	push	{r4, lr}
   1a7f0:	4604      	mov	r4, r0
   1a7f2:	2200      	movs	r2, #0
   1a7f4:	2101      	movs	r1, #1
   1a7f6:	2008      	movs	r0, #8
   1a7f8:	f7ff fac4 	bl	19d84 <z_arm_irq_priority_set>
   1a7fc:	2008      	movs	r0, #8
   1a7fe:	f7ff fabc 	bl	19d7a <arch_irq_enable>
   1a802:	2100      	movs	r1, #0
   1a804:	4620      	mov	r0, r4
   1a806:	f7ff ffa0 	bl	1a74a <uarte_instance_init>
   1a80a:	bd10      	pop	{r4, pc}

0001a80c <entropy_cc3xx_rng_get_entropy>:

#define CTR_DRBG_MAX_REQUEST 1024

static int entropy_cc3xx_rng_get_entropy(const struct device *dev,
					 uint8_t *buffer, uint16_t length)
{
   1a80c:	b508      	push	{r3, lr}
   1a80e:	4608      	mov	r0, r1
	int err = EINVAL;

#if defined(CONFIG_BUILD_WITH_TFM)
	psa_status_t status = PSA_ERROR_GENERIC_ERROR;

	status = psa_generate_random(buffer, length);
   1a810:	4611      	mov	r1, r2
   1a812:	f7fa febb 	bl	1558c <psa_generate_random>
	if (status == PSA_SUCCESS) {
   1a816:	b900      	cbnz	r0, 1a81a <entropy_cc3xx_rng_get_entropy+0xe>
		err = 0;
	}

	return err;
#endif /* defined(CONFIG_BUILD_WITH_TFM) */
}
   1a818:	bd08      	pop	{r3, pc}
	int err = EINVAL;
   1a81a:	2016      	movs	r0, #22
	return err;
   1a81c:	e7fc      	b.n	1a818 <entropy_cc3xx_rng_get_entropy+0xc>

0001a81e <entropy_cc3xx_rng_init>:

static int entropy_cc3xx_rng_init(const struct device *dev)
{
   1a81e:	b508      	push	{r3, lr}
	(void)dev;

#if defined(CONFIG_BUILD_WITH_TFM)
	psa_status_t status;

	status = psa_crypto_init();
   1a820:	f000 f89b 	bl	1a95a <psa_crypto_init>
	if (status != PSA_SUCCESS) {
   1a824:	b900      	cbnz	r0, 1a828 <entropy_cc3xx_rng_init+0xa>
		return -EINVAL;
	}
#endif

	return 0;
}
   1a826:	bd08      	pop	{r3, pc}
		return -EINVAL;
   1a828:	f06f 0015 	mvn.w	r0, #21
   1a82c:	e7fb      	b.n	1a826 <entropy_cc3xx_rng_init+0x8>

0001a82e <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
   1a82e:	4770      	bx	lr

0001a830 <counter_sub>:
	return (a - b) & COUNTER_MAX;
   1a830:	1a40      	subs	r0, r0, r1
}
   1a832:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   1a836:	4770      	bx	lr

0001a838 <event_clear>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   1a838:	f100 0350 	add.w	r3, r0, #80	; 0x50
   1a83c:	009b      	lsls	r3, r3, #2
   1a83e:	b29b      	uxth	r3, r3
   1a840:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1a844:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
   1a848:	2200      	movs	r2, #0
   1a84a:	601a      	str	r2, [r3, #0]
   1a84c:	681b      	ldr	r3, [r3, #0]
}
   1a84e:	4770      	bx	lr

0001a850 <absolute_time_to_cc>:
}
   1a850:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   1a854:	4770      	bx	lr

0001a856 <full_int_lock>:
	__asm__ volatile(
   1a856:	f04f 0320 	mov.w	r3, #32
   1a85a:	f3ef 8011 	mrs	r0, BASEPRI
   1a85e:	f383 8812 	msr	BASEPRI_MAX, r3
   1a862:	f3bf 8f6f 	isb	sy
}
   1a866:	4770      	bx	lr

0001a868 <full_int_unlock>:
	__asm__ volatile(
   1a868:	f380 8811 	msr	BASEPRI, r0
   1a86c:	f3bf 8f6f 	isb	sy
}
   1a870:	4770      	bx	lr

0001a872 <set_absolute_alarm>:
{
   1a872:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a874:	4606      	mov	r6, r0
	uint32_t cc_val = abs_val & COUNTER_MAX;
   1a876:	f021 457f 	bic.w	r5, r1, #4278190080	; 0xff000000
	uint32_t prev_cc = get_comparator(chan);
   1a87a:	f7fa fab9 	bl	14df0 <get_comparator>
   1a87e:	4607      	mov	r7, r0
   1a880:	e019      	b.n	1a8b6 <set_absolute_alarm+0x44>
	z_impl_k_busy_wait(usec_to_wait);
   1a882:	2013      	movs	r0, #19
   1a884:	f000 fb96 	bl	1afb4 <z_impl_k_busy_wait>
}
   1a888:	e022      	b.n	1a8d0 <set_absolute_alarm+0x5e>
		event_clear(chan);
   1a88a:	4630      	mov	r0, r6
   1a88c:	f7ff ffd4 	bl	1a838 <event_clear>
		event_enable(chan);
   1a890:	4630      	mov	r0, r6
   1a892:	f7fa fab5 	bl	14e00 <event_enable>
		set_comparator(chan, cc_val);
   1a896:	4629      	mov	r1, r5
   1a898:	4630      	mov	r0, r6
   1a89a:	f7fa fa9f 	bl	14ddc <set_comparator>
		now2 = counter();
   1a89e:	f7fa fac3 	bl	14e28 <counter>
	} while ((now2 != now) &&
   1a8a2:	4284      	cmp	r4, r0
   1a8a4:	d01e      	beq.n	1a8e4 <set_absolute_alarm+0x72>
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
   1a8a6:	1c81      	adds	r1, r0, #2
   1a8a8:	4628      	mov	r0, r5
   1a8aa:	f7ff ffc1 	bl	1a830 <counter_sub>
	} while ((now2 != now) &&
   1a8ae:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   1a8b2:	d917      	bls.n	1a8e4 <set_absolute_alarm+0x72>
		prev_cc = cc_val;
   1a8b4:	462f      	mov	r7, r5
		now = counter();
   1a8b6:	f7fa fab7 	bl	14e28 <counter>
   1a8ba:	4604      	mov	r4, r0
		set_comparator(chan, now);
   1a8bc:	4601      	mov	r1, r0
   1a8be:	4630      	mov	r0, r6
   1a8c0:	f7fa fa8c 	bl	14ddc <set_comparator>
		if (counter_sub(prev_cc, now) == 1) {
   1a8c4:	4621      	mov	r1, r4
   1a8c6:	4638      	mov	r0, r7
   1a8c8:	f7ff ffb2 	bl	1a830 <counter_sub>
   1a8cc:	2801      	cmp	r0, #1
   1a8ce:	d0d8      	beq.n	1a882 <set_absolute_alarm+0x10>
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
   1a8d0:	1ca7      	adds	r7, r4, #2
   1a8d2:	4639      	mov	r1, r7
   1a8d4:	4628      	mov	r0, r5
   1a8d6:	f7ff ffab 	bl	1a830 <counter_sub>
   1a8da:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   1a8de:	d9d4      	bls.n	1a88a <set_absolute_alarm+0x18>
			cc_val = now + 2;
   1a8e0:	463d      	mov	r5, r7
   1a8e2:	e7d2      	b.n	1a88a <set_absolute_alarm+0x18>
}
   1a8e4:	4628      	mov	r0, r5
   1a8e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001a8e8 <compare_set>:
{
   1a8e8:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a8ea:	b083      	sub	sp, #12
   1a8ec:	4604      	mov	r4, r0
   1a8ee:	4617      	mov	r7, r2
   1a8f0:	461d      	mov	r5, r3
	key = compare_int_lock(chan);
   1a8f2:	f7fa fa9f 	bl	14e34 <compare_int_lock>
   1a8f6:	4606      	mov	r6, r0
	int ret = compare_set_nolocks(chan, target_time, handler, user_data);
   1a8f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1a8fa:	9301      	str	r3, [sp, #4]
   1a8fc:	9b08      	ldr	r3, [sp, #32]
   1a8fe:	9300      	str	r3, [sp, #0]
   1a900:	463a      	mov	r2, r7
   1a902:	462b      	mov	r3, r5
   1a904:	4620      	mov	r0, r4
   1a906:	f7fa fb71 	bl	14fec <compare_set_nolocks>
   1a90a:	4605      	mov	r5, r0
	compare_int_unlock(chan, key);
   1a90c:	4631      	mov	r1, r6
   1a90e:	4620      	mov	r0, r4
   1a910:	f7fa fae8 	bl	14ee4 <compare_int_unlock>
}
   1a914:	4628      	mov	r0, r5
   1a916:	b003      	add	sp, #12
   1a918:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001a91a <pinctrl_lookup_state>:

#include <zephyr/drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
   1a91a:	b410      	push	{r4}
	*state = &config->states[0];
   1a91c:	6843      	ldr	r3, [r0, #4]
   1a91e:	6013      	str	r3, [r2, #0]
	while (*state <= &config->states[config->state_cnt - 1U]) {
   1a920:	e001      	b.n	1a926 <pinctrl_lookup_state+0xc>
		if (id == (*state)->id) {
			return 0;
		}

		(*state)++;
   1a922:	3408      	adds	r4, #8
   1a924:	6014      	str	r4, [r2, #0]
	while (*state <= &config->states[config->state_cnt - 1U]) {
   1a926:	6814      	ldr	r4, [r2, #0]
   1a928:	7a03      	ldrb	r3, [r0, #8]
   1a92a:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
   1a92e:	3b01      	subs	r3, #1
   1a930:	f8d0 c004 	ldr.w	ip, [r0, #4]
   1a934:	eb0c 03c3 	add.w	r3, ip, r3, lsl #3
   1a938:	429c      	cmp	r4, r3
   1a93a:	d804      	bhi.n	1a946 <pinctrl_lookup_state+0x2c>
		if (id == (*state)->id) {
   1a93c:	7963      	ldrb	r3, [r4, #5]
   1a93e:	428b      	cmp	r3, r1
   1a940:	d1ef      	bne.n	1a922 <pinctrl_lookup_state+0x8>
			return 0;
   1a942:	2000      	movs	r0, #0
   1a944:	e001      	b.n	1a94a <pinctrl_lookup_state+0x30>
	}

	return -ENOENT;
   1a946:	f06f 0001 	mvn.w	r0, #1
}
   1a94a:	bc10      	pop	{r4}
   1a94c:	4770      	bx	lr

0001a94e <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
   1a94e:	b508      	push	{r3, lr}
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
		sys_arch_reboot(0);
   1a950:	2000      	movs	r0, #0
   1a952:	f7ff fa80 	bl	19e56 <sys_arch_reboot>

0001a956 <ns_interface_init>:

	__ASSERT(tfm_ns_interface_init() == TFM_SUCCESS,
		"TF-M NS interface init failed");

	return 0;
}
   1a956:	2000      	movs	r0, #0
   1a958:	4770      	bx	lr

0001a95a <psa_crypto_init>:
}
   1a95a:	2000      	movs	r0, #0
   1a95c:	4770      	bx	lr

0001a95e <SystemInit>:

void SystemInit(void)
{
   1a95e:	b508      	push	{r3, lr}
        SCB->CPACR |= (3UL << 20) | (3UL << 22);
        __DSB();
        __ISB();
    #endif

    SystemCoreClockUpdate();
   1a960:	f7fa fe5e 	bl	15620 <SystemCoreClockUpdate>
}
   1a964:	bd08      	pop	{r3, pc}

0001a966 <nrfx_isr>:
#include <nrfx.h>
#include <zephyr/kernel.h>
#include <soc/nrfx_coredep.h>

void nrfx_isr(const void *irq_handler)
{
   1a966:	b508      	push	{r3, lr}
	((nrfx_irq_handler_t)irq_handler)();
   1a968:	4780      	blx	r0
}
   1a96a:	bd08      	pop	{r3, pc}

0001a96c <nrfx_busy_wait>:

void nrfx_busy_wait(uint32_t usec_to_wait)
{
   1a96c:	b508      	push	{r3, lr}
	z_impl_k_busy_wait(usec_to_wait);
   1a96e:	f000 fb21 	bl	1afb4 <z_impl_k_busy_wait>
	if (IS_ENABLED(CONFIG_SYS_CLOCK_EXISTS)) {
		k_busy_wait(usec_to_wait);
	} else {
		nrfx_coredep_delay_us(usec_to_wait);
	}
}
   1a972:	bd08      	pop	{r3, pc}

0001a974 <nrf_clock_is_running>:
    switch (domain)
   1a974:	2903      	cmp	r1, #3
   1a976:	d82f      	bhi.n	1a9d8 <nrf_clock_is_running+0x64>
   1a978:	e8df f001 	tbb	[pc, r1]
   1a97c:	291c0f02 	.word	0x291c0f02
            if (p_clk_src != NULL)
   1a980:	b122      	cbz	r2, 1a98c <nrf_clock_is_running+0x18>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   1a982:	f8d0 3418 	ldr.w	r3, [r0, #1048]	; 0x418
   1a986:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
   1a98a:	7013      	strb	r3, [r2, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   1a98c:	f8d0 3418 	ldr.w	r3, [r0, #1048]	; 0x418
   1a990:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   1a994:	d122      	bne.n	1a9dc <nrf_clock_is_running+0x68>
    return false;
   1a996:	2000      	movs	r0, #0
   1a998:	4770      	bx	lr
            if (p_clk_src != NULL)
   1a99a:	b122      	cbz	r2, 1a9a6 <nrf_clock_is_running+0x32>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   1a99c:	f8d0 340c 	ldr.w	r3, [r0, #1036]	; 0x40c
   1a9a0:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
   1a9a4:	7013      	strb	r3, [r2, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   1a9a6:	f8d0 340c 	ldr.w	r3, [r0, #1036]	; 0x40c
   1a9aa:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   1a9ae:	d117      	bne.n	1a9e0 <nrf_clock_is_running+0x6c>
    return false;
   1a9b0:	2000      	movs	r0, #0
   1a9b2:	4770      	bx	lr
            if (p_clk_src != NULL)
   1a9b4:	b122      	cbz	r2, 1a9c0 <nrf_clock_is_running+0x4c>
                    (nrf_clock_hfclk_t)((p_reg->HFCLK192MSTAT & CLOCK_HFCLK192MSTAT_SRC_Msk)
   1a9b6:	f8d0 345c 	ldr.w	r3, [r0, #1116]	; 0x45c
   1a9ba:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
   1a9be:	7013      	strb	r3, [r2, #0]
            if ((p_reg->HFCLK192MSTAT & CLOCK_HFCLK192MSTAT_STATE_Msk)
   1a9c0:	f8d0 345c 	ldr.w	r3, [r0, #1116]	; 0x45c
   1a9c4:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   1a9c8:	d10c      	bne.n	1a9e4 <nrf_clock_is_running+0x70>
    return false;
   1a9ca:	2000      	movs	r0, #0
   1a9cc:	4770      	bx	lr
            return (p_reg->HFCLKAUDIOSTAT & CLOCK_HFCLKAUDIOSTAT_STATE_Msk) ==
   1a9ce:	f8d0 0454 	ldr.w	r0, [r0, #1108]	; 0x454
   1a9d2:	f3c0 4000 	ubfx	r0, r0, #16, #1
   1a9d6:	4770      	bx	lr
    switch (domain)
   1a9d8:	2000      	movs	r0, #0
   1a9da:	4770      	bx	lr
                return true;
   1a9dc:	2001      	movs	r0, #1
   1a9de:	4770      	bx	lr
                return true;
   1a9e0:	2001      	movs	r0, #1
   1a9e2:	4770      	bx	lr
                return true;
   1a9e4:	2001      	movs	r0, #1
}
   1a9e6:	4770      	bx	lr

0001a9e8 <clock_initial_lfclksrc_get>:
}
   1a9e8:	2001      	movs	r0, #1
   1a9ea:	4770      	bx	lr

0001a9ec <nrfx_power_clock_irq_init>:
extern "C" {
#endif


__STATIC_INLINE void nrfx_power_clock_irq_init(void)
{
   1a9ec:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
   1a9ee:	2005      	movs	r0, #5
   1a9f0:	f7f9 f828 	bl	13a44 <arch_irq_is_enabled>
   1a9f4:	b100      	cbz	r0, 1a9f8 <nrfx_power_clock_irq_init+0xc>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    }
}
   1a9f6:	bd08      	pop	{r3, pc}
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
   1a9f8:	2005      	movs	r0, #5
   1a9fa:	f7ff f9be 	bl	19d7a <arch_irq_enable>
}
   1a9fe:	e7fa      	b.n	1a9f6 <nrfx_power_clock_irq_init+0xa>

0001aa00 <clock_lfclksrc_tweak>:
{
   1aa00:	b538      	push	{r3, r4, r5, lr}
   1aa02:	4604      	mov	r4, r0
    bool is_correct_clk = (*p_lfclksrc == NRFX_CLOCK_CONFIG_LF_SRC);
   1aa04:	7803      	ldrb	r3, [r0, #0]
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
   1aa06:	2b02      	cmp	r3, #2
   1aa08:	d006      	beq.n	1aa18 <clock_lfclksrc_tweak+0x18>
   1aa0a:	2b01      	cmp	r3, #1
   1aa0c:	d000      	beq.n	1aa10 <clock_lfclksrc_tweak+0x10>
   1aa0e:	2300      	movs	r3, #0
    if (!is_correct_clk)
   1aa10:	461d      	mov	r5, r3
   1aa12:	b11b      	cbz	r3, 1aa1c <clock_lfclksrc_tweak+0x1c>
}
   1aa14:	4628      	mov	r0, r5
   1aa16:	bd38      	pop	{r3, r4, r5, pc}
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
   1aa18:	2301      	movs	r3, #1
   1aa1a:	e7f9      	b.n	1aa10 <clock_lfclksrc_tweak+0x10>
        clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   1aa1c:	2000      	movs	r0, #0
   1aa1e:	f7fa fe51 	bl	156c4 <clock_stop>
        *p_lfclksrc = clock_initial_lfclksrc_get();
   1aa22:	f7ff ffe1 	bl	1a9e8 <clock_initial_lfclksrc_get>
   1aa26:	7020      	strb	r0, [r4, #0]
   1aa28:	e7f4      	b.n	1aa14 <clock_lfclksrc_tweak+0x14>

0001aa2a <nrfx_clock_stop>:
{
   1aa2a:	b508      	push	{r3, lr}
    clock_stop(domain);
   1aa2c:	f7fa fe4a 	bl	156c4 <clock_stop>
}
   1aa30:	bd08      	pop	{r3, pc}

0001aa32 <nrf_gpiote_event_configure>:
{
   1aa32:	b410      	push	{r4}
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   1aa34:	f501 71a2 	add.w	r1, r1, #324	; 0x144
   1aa38:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
   1aa3c:	f424 344f 	bic.w	r4, r4, #211968	; 0x33c00
   1aa40:	f424 7440 	bic.w	r4, r4, #768	; 0x300
   1aa44:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1aa48:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
   1aa4c:	0212      	lsls	r2, r2, #8
   1aa4e:	f402 527c 	and.w	r2, r2, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
   1aa52:	041b      	lsls	r3, r3, #16
   1aa54:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1aa58:	431a      	orrs	r2, r3
   1aa5a:	4314      	orrs	r4, r2
   1aa5c:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
}
   1aa60:	bc10      	pop	{r4}
   1aa62:	4770      	bx	lr

0001aa64 <nrf_gpiote_task_configure>:
{
   1aa64:	b410      	push	{r4}
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
   1aa66:	f501 71a2 	add.w	r1, r1, #324	; 0x144
   1aa6a:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
   1aa6e:	f424 1499 	bic.w	r4, r4, #1253376	; 0x132000
   1aa72:	f424 54f8 	bic.w	r4, r4, #7936	; 0x1f00
   1aa76:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1aa7a:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
   1aa7e:	0212      	lsls	r2, r2, #8
   1aa80:	f402 527c 	and.w	r2, r2, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
   1aa84:	041b      	lsls	r3, r3, #16
   1aa86:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1aa8a:	431a      	orrs	r2, r3
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
   1aa8c:	f89d 3004 	ldrb.w	r3, [sp, #4]
   1aa90:	051b      	lsls	r3, r3, #20
   1aa92:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
   1aa96:	431a      	orrs	r2, r3
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1aa98:	4314      	orrs	r4, r2
   1aa9a:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
}
   1aa9e:	bc10      	pop	{r4}
   1aaa0:	4770      	bx	lr

0001aaa2 <nrf_gpio_cfg_sense_set>:
{
   1aaa2:	b500      	push	{lr}
   1aaa4:	b085      	sub	sp, #20
   1aaa6:	f88d 100f 	strb.w	r1, [sp, #15]
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   1aaaa:	f10d 030f 	add.w	r3, sp, #15
   1aaae:	9301      	str	r3, [sp, #4]
   1aab0:	2100      	movs	r1, #0
   1aab2:	9100      	str	r1, [sp, #0]
   1aab4:	460b      	mov	r3, r1
   1aab6:	460a      	mov	r2, r1
   1aab8:	f7fa ff54 	bl	15964 <nrf_gpio_reconfigure>
}
   1aabc:	b005      	add	sp, #20
   1aabe:	f85d fb04 	ldr.w	pc, [sp], #4

0001aac2 <pin_is_task_output>:
{
   1aac2:	b510      	push	{r4, lr}
   1aac4:	4604      	mov	r4, r0
    return pin_is_output(pin) && pin_in_use_by_te(pin);
   1aac6:	f7fa ffff 	bl	15ac8 <pin_is_output>
   1aaca:	b128      	cbz	r0, 1aad8 <pin_is_task_output+0x16>
   1aacc:	4620      	mov	r0, r4
   1aace:	f7fa ffe5 	bl	15a9c <pin_in_use_by_te>
   1aad2:	b118      	cbz	r0, 1aadc <pin_is_task_output+0x1a>
   1aad4:	2001      	movs	r0, #1
   1aad6:	e000      	b.n	1aada <pin_is_task_output+0x18>
   1aad8:	2000      	movs	r0, #0
}
   1aada:	bd10      	pop	{r4, pc}
    return pin_is_output(pin) && pin_in_use_by_te(pin);
   1aadc:	2000      	movs	r0, #0
   1aade:	e7fc      	b.n	1aada <pin_is_task_output+0x18>

0001aae0 <pin_is_input>:
{
   1aae0:	b508      	push	{r3, lr}
    return !pin_is_output(pin);
   1aae2:	f7fa fff1 	bl	15ac8 <pin_is_output>
   1aae6:	f080 0001 	eor.w	r0, r0, #1
}
   1aaea:	b2c0      	uxtb	r0, r0
   1aaec:	bd08      	pop	{r3, pc}

0001aaee <gpiote_polarity_to_trigger>:
}
   1aaee:	4770      	bx	lr

0001aaf0 <gpiote_trigger_to_polarity>:
}
   1aaf0:	4770      	bx	lr

0001aaf2 <is_level>:
}
   1aaf2:	2803      	cmp	r0, #3
   1aaf4:	bf94      	ite	ls
   1aaf6:	2000      	movls	r0, #0
   1aaf8:	2001      	movhi	r0, #1
   1aafa:	4770      	bx	lr

0001aafc <latch_pending_read_and_check>:
{
   1aafc:	b510      	push	{r4, lr}
   1aafe:	4604      	mov	r4, r0
    nrf_gpio_latches_read_and_clear(0, GPIO_COUNT, latch);
   1ab00:	4602      	mov	r2, r0
   1ab02:	2102      	movs	r1, #2
   1ab04:	2000      	movs	r0, #0
   1ab06:	f7fa ff9f 	bl	15a48 <nrf_gpio_latches_read_and_clear>
    for (uint32_t port_idx = 0; port_idx < GPIO_COUNT; port_idx++)
   1ab0a:	2300      	movs	r3, #0
   1ab0c:	2b01      	cmp	r3, #1
   1ab0e:	d804      	bhi.n	1ab1a <latch_pending_read_and_check+0x1e>
        if (latch[port_idx])
   1ab10:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
   1ab14:	b91a      	cbnz	r2, 1ab1e <latch_pending_read_and_check+0x22>
    for (uint32_t port_idx = 0; port_idx < GPIO_COUNT; port_idx++)
   1ab16:	3301      	adds	r3, #1
   1ab18:	e7f8      	b.n	1ab0c <latch_pending_read_and_check+0x10>
    return false;
   1ab1a:	2000      	movs	r0, #0
}
   1ab1c:	bd10      	pop	{r4, pc}
            return true;
   1ab1e:	2001      	movs	r0, #1
   1ab20:	e7fc      	b.n	1ab1c <latch_pending_read_and_check+0x20>

0001ab22 <xfer_completeness_check>:
{
   1ab22:	4603      	mov	r3, r0
    switch (p_cb->xfer_desc.type)
   1ab24:	7b0a      	ldrb	r2, [r1, #12]
   1ab26:	2a03      	cmp	r2, #3
   1ab28:	d838      	bhi.n	1ab9c <xfer_completeness_check+0x7a>
   1ab2a:	e8df f002 	tbb	[pc, r2]
   1ab2e:	3029      	.short	0x3029
   1ab30:	0216      	.short	0x0216
            if (((p_cb->int_mask & NRF_TWIM_INT_SUSPENDED_MASK) &&
   1ab32:	688a      	ldr	r2, [r1, #8]
   1ab34:	f412 2f80 	tst.w	r2, #262144	; 0x40000
   1ab38:	d004      	beq.n	1ab44 <xfer_completeness_check+0x22>
}

NRF_STATIC_INLINE size_t nrf_twim_txd_amount_get(NRF_TWIM_Type const * p_reg)
{
    return p_reg->TXD.AMOUNT;
   1ab3a:	f8d3 254c 	ldr.w	r2, [r3, #1356]	; 0x54c
                 (nrf_twim_txd_amount_get(p_twim) != p_cb->xfer_desc.primary_length)) ||
   1ab3e:	6908      	ldr	r0, [r1, #16]
            if (((p_cb->int_mask & NRF_TWIM_INT_SUSPENDED_MASK) &&
   1ab40:	4290      	cmp	r0, r2
   1ab42:	d10f      	bne.n	1ab64 <xfer_completeness_check+0x42>
                (!(p_cb->int_mask & NRF_TWIM_INT_SUSPENDED_MASK) &&
   1ab44:	688a      	ldr	r2, [r1, #8]
                 (nrf_twim_txd_amount_get(p_twim) != p_cb->xfer_desc.primary_length)) ||
   1ab46:	f412 2f80 	tst.w	r2, #262144	; 0x40000
   1ab4a:	d129      	bne.n	1aba0 <xfer_completeness_check+0x7e>
   1ab4c:	f8d3 254c 	ldr.w	r2, [r3, #1356]	; 0x54c
                 (nrf_twim_txd_amount_get(p_twim) != p_cb->xfer_desc.secondary_length)))
   1ab50:	6949      	ldr	r1, [r1, #20]
                (!(p_cb->int_mask & NRF_TWIM_INT_SUSPENDED_MASK) &&
   1ab52:	4291      	cmp	r1, r2
   1ab54:	d106      	bne.n	1ab64 <xfer_completeness_check+0x42>
    bool transfer_complete = true;
   1ab56:	2001      	movs	r0, #1
   1ab58:	4770      	bx	lr
   1ab5a:	f8d3 254c 	ldr.w	r2, [r3, #1356]	; 0x54c
            if ((nrf_twim_txd_amount_get(p_twim) != p_cb->xfer_desc.primary_length) ||
   1ab5e:	6908      	ldr	r0, [r1, #16]
   1ab60:	4290      	cmp	r0, r2
   1ab62:	d006      	beq.n	1ab72 <xfer_completeness_check+0x50>
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Disabled << TWIM_ENABLE_ENABLE_Pos);
   1ab64:	2000      	movs	r0, #0
   1ab66:	f8c3 0500 	str.w	r0, [r3, #1280]	; 0x500
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Enabled << TWIM_ENABLE_ENABLE_Pos);
   1ab6a:	2206      	movs	r2, #6
   1ab6c:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
}
   1ab70:	4770      	bx	lr
}

NRF_STATIC_INLINE size_t nrf_twim_rxd_amount_get(NRF_TWIM_Type const * p_reg)
{
    return p_reg->RXD.AMOUNT;
   1ab72:	f8d3 253c 	ldr.w	r2, [r3, #1340]	; 0x53c
                (nrf_twim_rxd_amount_get(p_twim) != p_cb->xfer_desc.secondary_length))
   1ab76:	6949      	ldr	r1, [r1, #20]
            if ((nrf_twim_txd_amount_get(p_twim) != p_cb->xfer_desc.primary_length) ||
   1ab78:	4291      	cmp	r1, r2
   1ab7a:	d1f3      	bne.n	1ab64 <xfer_completeness_check+0x42>
    bool transfer_complete = true;
   1ab7c:	2001      	movs	r0, #1
   1ab7e:	4770      	bx	lr
    return p_reg->TXD.AMOUNT;
   1ab80:	f8d3 254c 	ldr.w	r2, [r3, #1356]	; 0x54c
            if (nrf_twim_txd_amount_get(p_twim) != p_cb->xfer_desc.primary_length)
   1ab84:	6909      	ldr	r1, [r1, #16]
   1ab86:	4291      	cmp	r1, r2
   1ab88:	d1ec      	bne.n	1ab64 <xfer_completeness_check+0x42>
    bool transfer_complete = true;
   1ab8a:	2001      	movs	r0, #1
   1ab8c:	4770      	bx	lr
    return p_reg->RXD.AMOUNT;
   1ab8e:	f8d3 253c 	ldr.w	r2, [r3, #1340]	; 0x53c
            if (nrf_twim_rxd_amount_get(p_twim) != p_cb->xfer_desc.primary_length)
   1ab92:	6909      	ldr	r1, [r1, #16]
   1ab94:	4291      	cmp	r1, r2
   1ab96:	d1e5      	bne.n	1ab64 <xfer_completeness_check+0x42>
    bool transfer_complete = true;
   1ab98:	2001      	movs	r0, #1
}
   1ab9a:	4770      	bx	lr
    switch (p_cb->xfer_desc.type)
   1ab9c:	2001      	movs	r0, #1
   1ab9e:	4770      	bx	lr
    bool transfer_complete = true;
   1aba0:	2001      	movs	r0, #1
   1aba2:	4770      	bx	lr

0001aba4 <twim_list_enable_handle>:
    if (NRFX_TWIM_FLAG_TX_POSTINC & flags)
   1aba4:	f011 0f01 	tst.w	r1, #1
   1aba8:	d009      	beq.n	1abbe <twim_list_enable_handle+0x1a>
}

NRF_STATIC_INLINE void nrf_twim_tx_list_enable(NRF_TWIM_Type * p_reg)
{
    p_reg->TXD.LIST = TWIM_TXD_LIST_LIST_ArrayList << TWIM_TXD_LIST_LIST_Pos;
   1abaa:	2301      	movs	r3, #1
   1abac:	f8c0 3550 	str.w	r3, [r0, #1360]	; 0x550
    if (NRFX_TWIM_FLAG_RX_POSTINC & flags)
   1abb0:	f011 0f02 	tst.w	r1, #2
   1abb4:	d007      	beq.n	1abc6 <twim_list_enable_handle+0x22>
    p_reg->TXD.LIST = TWIM_TXD_LIST_LIST_Disabled << TWIM_TXD_LIST_LIST_Pos;
}

NRF_STATIC_INLINE void nrf_twim_rx_list_enable(NRF_TWIM_Type * p_reg)
{
    p_reg->RXD.LIST = TWIM_RXD_LIST_LIST_ArrayList << TWIM_RXD_LIST_LIST_Pos;
   1abb6:	2301      	movs	r3, #1
   1abb8:	f8c0 3540 	str.w	r3, [r0, #1344]	; 0x540
}
   1abbc:	4770      	bx	lr
    p_reg->TXD.LIST = TWIM_TXD_LIST_LIST_Disabled << TWIM_TXD_LIST_LIST_Pos;
   1abbe:	2300      	movs	r3, #0
   1abc0:	f8c0 3550 	str.w	r3, [r0, #1360]	; 0x550
}
   1abc4:	e7f4      	b.n	1abb0 <twim_list_enable_handle+0xc>

NRF_STATIC_INLINE void nrf_twim_rx_list_disable(NRF_TWIM_Type * p_reg)
{
    p_reg->RXD.LIST = TWIM_RXD_LIST_LIST_Disabled << TWIM_RXD_LIST_LIST_Pos;
   1abc6:	2300      	movs	r3, #0
   1abc8:	f8c0 3540 	str.w	r3, [r0, #1344]	; 0x540
}
   1abcc:	4770      	bx	lr

0001abce <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
   1abce:	b160      	cbz	r0, 1abea <z_device_is_ready+0x1c>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
   1abd0:	68c3      	ldr	r3, [r0, #12]
   1abd2:	785a      	ldrb	r2, [r3, #1]
   1abd4:	f012 0f01 	tst.w	r2, #1
   1abd8:	d003      	beq.n	1abe2 <z_device_is_ready+0x14>
   1abda:	781b      	ldrb	r3, [r3, #0]
   1abdc:	b11b      	cbz	r3, 1abe6 <z_device_is_ready+0x18>
   1abde:	2000      	movs	r0, #0
   1abe0:	4770      	bx	lr
   1abe2:	2000      	movs	r0, #0
   1abe4:	4770      	bx	lr
   1abe6:	2001      	movs	r0, #1
   1abe8:	4770      	bx	lr
		return false;
   1abea:	2000      	movs	r0, #0
}
   1abec:	4770      	bx	lr

0001abee <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   1abee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1abf0:	4605      	mov	r5, r0
   1abf2:	460e      	mov	r6, r1
	__asm__ volatile(
   1abf4:	f04f 0320 	mov.w	r3, #32
   1abf8:	f3ef 8711 	mrs	r7, BASEPRI
   1abfc:	f383 8812 	msr	BASEPRI_MAX, r3
   1ac00:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
   1ac04:	f7fc fd80 	bl	17708 <z_impl_z_current_get>
   1ac08:	4604      	mov	r4, r0

#ifndef CONFIG_XTENSA
	coredump(reason, esf, thread);
#endif

	k_sys_fatal_error_handler(reason, esf);
   1ac0a:	4631      	mov	r1, r6
   1ac0c:	4628      	mov	r0, r5
   1ac0e:	f7ff fe9e 	bl	1a94e <k_sys_fatal_error_handler>
	__asm__ volatile(
   1ac12:	f387 8811 	msr	BASEPRI, r7
   1ac16:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   1ac1a:	4620      	mov	r0, r4
   1ac1c:	f7f9 f9c6 	bl	13fac <z_impl_k_thread_abort>
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
   1ac20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001ac22 <z_early_memset>:
{
   1ac22:	b508      	push	{r3, lr}
__ssp_bos_icheck3(memmove, void *, const void *)
__ssp_bos_icheck3_restrict(mempcpy, void *, const void *)
__ssp_bos_icheck3(memset, void *, int)
   1ac24:	f000 f9d9 	bl	1afda <memset>
}
   1ac28:	bd08      	pop	{r3, pc}

0001ac2a <z_early_memcpy>:
{
   1ac2a:	b508      	push	{r3, lr}
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1ac2c:	f000 f9c8 	bl	1afc0 <memcpy>
}
   1ac30:	bd08      	pop	{r3, pc}

0001ac32 <setup_thread_stack>:
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   1ac32:	3207      	adds	r2, #7
   1ac34:	f022 0207 	bic.w	r2, r2, #7
	new_thread->stack_info.start = (uintptr_t)stack_buf_start;
   1ac38:	6641      	str	r1, [r0, #100]	; 0x64
	new_thread->stack_info.size = stack_buf_size;
   1ac3a:	6682      	str	r2, [r0, #104]	; 0x68
	new_thread->stack_info.delta = delta;
   1ac3c:	2300      	movs	r3, #0
   1ac3e:	66c3      	str	r3, [r0, #108]	; 0x6c
}
   1ac40:	1888      	adds	r0, r1, r2
   1ac42:	4770      	bx	lr

0001ac44 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   1ac44:	f3ef 8005 	mrs	r0, IPSR
}
   1ac48:	3800      	subs	r0, #0
   1ac4a:	bf18      	it	ne
   1ac4c:	2001      	movne	r0, #1
   1ac4e:	4770      	bx	lr

0001ac50 <z_impl_k_thread_start>:
{
   1ac50:	b508      	push	{r3, lr}
	z_sched_start(thread);
   1ac52:	f7fc fb1d 	bl	17290 <z_sched_start>
}
   1ac56:	bd08      	pop	{r3, pc}

0001ac58 <z_init_thread_base>:
#endif

void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
   1ac58:	b410      	push	{r4}
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
   1ac5a:	2400      	movs	r4, #0
   1ac5c:	6084      	str	r4, [r0, #8]
	thread_base->user_options = (uint8_t)options;
   1ac5e:	7303      	strb	r3, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   1ac60:	7342      	strb	r2, [r0, #13]

	thread_base->prio = priority;
   1ac62:	7381      	strb	r1, [r0, #14]

	thread_base->sched_locked = 0U;
   1ac64:	73c4      	strb	r4, [r0, #15]
	node->next = NULL;
   1ac66:	6184      	str	r4, [r0, #24]
	node->prev = NULL;
   1ac68:	61c4      	str	r4, [r0, #28]
#endif

	/* swap_data does not need to be initialized */

	z_init_thread_timeout(thread_base);
}
   1ac6a:	bc10      	pop	{r4}
   1ac6c:	4770      	bx	lr

0001ac6e <z_pm_save_idle_exit>:
{
   1ac6e:	b508      	push	{r3, lr}
	pm_system_resume();
   1ac70:	f7f8 fdae 	bl	137d0 <pm_system_resume>
	sys_clock_idle_exit();
   1ac74:	f7ff fddb 	bl	1a82e <sys_clock_idle_exit>
}
   1ac78:	bd08      	pop	{r3, pc}

0001ac7a <new_prio_for_inheritance>:
	int new_prio = z_is_prio_higher(target, limit) ? target : limit;
   1ac7a:	4288      	cmp	r0, r1
   1ac7c:	da00      	bge.n	1ac80 <new_prio_for_inheritance+0x6>
   1ac7e:	4601      	mov	r1, r0
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
   1ac80:	f111 0f7f 	cmn.w	r1, #127	; 0x7f
   1ac84:	db01      	blt.n	1ac8a <new_prio_for_inheritance+0x10>
   1ac86:	4608      	mov	r0, r1
   1ac88:	4770      	bx	lr
   1ac8a:	f06f 007e 	mvn.w	r0, #126	; 0x7e
}
   1ac8e:	4770      	bx	lr

0001ac90 <adjust_owner_prio>:
{
   1ac90:	b508      	push	{r3, lr}
	if (mutex->owner->base.prio != new_prio) {
   1ac92:	6880      	ldr	r0, [r0, #8]
   1ac94:	f990 300e 	ldrsb.w	r3, [r0, #14]
   1ac98:	428b      	cmp	r3, r1
   1ac9a:	d101      	bne.n	1aca0 <adjust_owner_prio+0x10>
	return false;
   1ac9c:	2000      	movs	r0, #0
}
   1ac9e:	bd08      	pop	{r3, pc}
		return z_set_prio(mutex->owner, new_prio);
   1aca0:	f7fc fb4c 	bl	1733c <z_set_prio>
   1aca4:	e7fb      	b.n	1ac9e <adjust_owner_prio+0xe>

0001aca6 <z_impl_k_mutex_init>:
{
   1aca6:	4603      	mov	r3, r0
	mutex->owner = NULL;
   1aca8:	2000      	movs	r0, #0
   1acaa:	6098      	str	r0, [r3, #8]
	mutex->lock_count = 0U;
   1acac:	60d8      	str	r0, [r3, #12]
	list->head = (sys_dnode_t *)list;
   1acae:	601b      	str	r3, [r3, #0]
	list->tail = (sys_dnode_t *)list;
   1acb0:	605b      	str	r3, [r3, #4]
}
   1acb2:	4770      	bx	lr

0001acb4 <thread_active_elsewhere>:
}
   1acb4:	2000      	movs	r0, #0
   1acb6:	4770      	bx	lr

0001acb8 <pended_on_thread>:
}
   1acb8:	6880      	ldr	r0, [r0, #8]
   1acba:	4770      	bx	lr

0001acbc <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
   1acbc:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   1acc0:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
   1acc4:	4283      	cmp	r3, r0
   1acc6:	d001      	beq.n	1accc <z_sched_prio_cmp+0x10>
		return b2 - b1;
   1acc8:	1ac0      	subs	r0, r0, r3
   1acca:	4770      	bx	lr
	return 0;
   1accc:	2000      	movs	r0, #0
}
   1acce:	4770      	bx	lr

0001acd0 <z_reschedule_irqlock>:
{
   1acd0:	b508      	push	{r3, lr}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   1acd2:	4603      	mov	r3, r0
   1acd4:	b928      	cbnz	r0, 1ace2 <z_reschedule_irqlock+0x12>
   1acd6:	f3ef 8205 	mrs	r2, IPSR
   1acda:	b912      	cbnz	r2, 1ace2 <z_reschedule_irqlock+0x12>
	ret = arch_swap(key);
   1acdc:	f7f8 fee0 	bl	13aa0 <arch_swap>
	return ret;
   1ace0:	e003      	b.n	1acea <z_reschedule_irqlock+0x1a>
   1ace2:	f383 8811 	msr	BASEPRI, r3
   1ace6:	f3bf 8f6f 	isb	sy
}
   1acea:	bd08      	pop	{r3, pc}

0001acec <z_reschedule_unlocked>:
{
   1acec:	b508      	push	{r3, lr}
	__asm__ volatile(
   1acee:	f04f 0320 	mov.w	r3, #32
   1acf2:	f3ef 8011 	mrs	r0, BASEPRI
   1acf6:	f383 8812 	msr	BASEPRI_MAX, r3
   1acfa:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   1acfe:	f7ff ffe7 	bl	1acd0 <z_reschedule_irqlock>
}
   1ad02:	bd08      	pop	{r3, pc}

0001ad04 <z_priq_dumb_remove>:
 * @param node the node to remove
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
   1ad04:	684a      	ldr	r2, [r1, #4]
	sys_dnode_t *const next = node->next;
   1ad06:	680b      	ldr	r3, [r1, #0]

	prev->next = next;
   1ad08:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   1ad0a:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1ad0c:	2300      	movs	r3, #0
   1ad0e:	600b      	str	r3, [r1, #0]
	node->prev = NULL;
   1ad10:	604b      	str	r3, [r1, #4]
}
   1ad12:	4770      	bx	lr

0001ad14 <unpend_thread_no_timeout>:
{
   1ad14:	b510      	push	{r4, lr}
   1ad16:	4604      	mov	r4, r0
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   1ad18:	f7ff ffce 	bl	1acb8 <pended_on_thread>
   1ad1c:	4621      	mov	r1, r4
   1ad1e:	f7ff fff1 	bl	1ad04 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   1ad22:	7b63      	ldrb	r3, [r4, #13]
   1ad24:	f023 0302 	bic.w	r3, r3, #2
   1ad28:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   1ad2a:	2300      	movs	r3, #0
   1ad2c:	60a3      	str	r3, [r4, #8]
}
   1ad2e:	bd10      	pop	{r4, pc}

0001ad30 <z_priq_dumb_best>:
{
   1ad30:	4603      	mov	r3, r0
	return list->head == list;
   1ad32:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1ad34:	4283      	cmp	r3, r0
   1ad36:	d000      	beq.n	1ad3a <z_priq_dumb_best+0xa>
}
   1ad38:	4770      	bx	lr
	struct k_thread *thread = NULL;
   1ad3a:	2000      	movs	r0, #0
	return thread;
   1ad3c:	e7fc      	b.n	1ad38 <z_priq_dumb_best+0x8>

0001ad3e <z_ready_thread>:
{
   1ad3e:	b538      	push	{r3, r4, r5, lr}
   1ad40:	4604      	mov	r4, r0
	LOCKED(&sched_spinlock) {
   1ad42:	2300      	movs	r3, #0
   1ad44:	f04f 0220 	mov.w	r2, #32
   1ad48:	f3ef 8511 	mrs	r5, BASEPRI
   1ad4c:	f382 8812 	msr	BASEPRI_MAX, r2
   1ad50:	f3bf 8f6f 	isb	sy
   1ad54:	e004      	b.n	1ad60 <z_ready_thread+0x22>
	__asm__ volatile(
   1ad56:	f385 8811 	msr	BASEPRI, r5
   1ad5a:	f3bf 8f6f 	isb	sy
   1ad5e:	2301      	movs	r3, #1
   1ad60:	b943      	cbnz	r3, 1ad74 <z_ready_thread+0x36>
		if (!thread_active_elsewhere(thread)) {
   1ad62:	4620      	mov	r0, r4
   1ad64:	f7ff ffa6 	bl	1acb4 <thread_active_elsewhere>
   1ad68:	2800      	cmp	r0, #0
   1ad6a:	d1f4      	bne.n	1ad56 <z_ready_thread+0x18>
			ready_thread(thread);
   1ad6c:	4620      	mov	r0, r4
   1ad6e:	f7fc fa53 	bl	17218 <ready_thread>
   1ad72:	e7f0      	b.n	1ad56 <z_ready_thread+0x18>
}
   1ad74:	bd38      	pop	{r3, r4, r5, pc}

0001ad76 <z_thread_timeout>:
{
   1ad76:	b570      	push	{r4, r5, r6, lr}
   1ad78:	4604      	mov	r4, r0
	struct k_thread *thread = CONTAINER_OF(timeout,
   1ad7a:	f1a0 0618 	sub.w	r6, r0, #24
	LOCKED(&sched_spinlock) {
   1ad7e:	2300      	movs	r3, #0
	__asm__ volatile(
   1ad80:	f04f 0220 	mov.w	r2, #32
   1ad84:	f3ef 8511 	mrs	r5, BASEPRI
   1ad88:	f382 8812 	msr	BASEPRI_MAX, r2
   1ad8c:	f3bf 8f6f 	isb	sy
   1ad90:	e011      	b.n	1adb6 <z_thread_timeout+0x40>
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1ad92:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
   1ad96:	f023 0204 	bic.w	r2, r3, #4
   1ad9a:	f804 2c0b 	strb.w	r2, [r4, #-11]
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   1ad9e:	f023 0314 	bic.w	r3, r3, #20
   1ada2:	f804 3c0b 	strb.w	r3, [r4, #-11]
			ready_thread(thread);
   1ada6:	4630      	mov	r0, r6
   1ada8:	f7fc fa36 	bl	17218 <ready_thread>
	__asm__ volatile(
   1adac:	f385 8811 	msr	BASEPRI, r5
   1adb0:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   1adb4:	2301      	movs	r3, #1
   1adb6:	b963      	cbnz	r3, 1add2 <z_thread_timeout+0x5c>
		bool killed = ((thread->base.thread_state & _THREAD_DEAD) ||
   1adb8:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
		if (!killed) {
   1adbc:	f013 0f28 	tst.w	r3, #40	; 0x28
   1adc0:	d1f4      	bne.n	1adac <z_thread_timeout+0x36>
			if (thread->base.pended_on != NULL) {
   1adc2:	f854 3c10 	ldr.w	r3, [r4, #-16]
   1adc6:	2b00      	cmp	r3, #0
   1adc8:	d0e3      	beq.n	1ad92 <z_thread_timeout+0x1c>
				unpend_thread_no_timeout(thread);
   1adca:	4630      	mov	r0, r6
   1adcc:	f7ff ffa2 	bl	1ad14 <unpend_thread_no_timeout>
   1add0:	e7df      	b.n	1ad92 <z_thread_timeout+0x1c>
}
   1add2:	bd70      	pop	{r4, r5, r6, pc}

0001add4 <unpend_all>:
{
   1add4:	b538      	push	{r3, r4, r5, lr}
   1add6:	4605      	mov	r5, r0
	return list->head == list;
   1add8:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1adda:	42a5      	cmp	r5, r4
   1addc:	d00d      	beq.n	1adfa <unpend_all+0x26>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   1adde:	b164      	cbz	r4, 1adfa <unpend_all+0x26>
		unpend_thread_no_timeout(thread);
   1ade0:	4620      	mov	r0, r4
   1ade2:	f7ff ff97 	bl	1ad14 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
   1ade6:	f104 0018 	add.w	r0, r4, #24
   1adea:	f000 f87b 	bl	1aee4 <z_abort_timeout>
   1adee:	2300      	movs	r3, #0
   1adf0:	67a3      	str	r3, [r4, #120]	; 0x78
		ready_thread(thread);
   1adf2:	4620      	mov	r0, r4
   1adf4:	f7fc fa10 	bl	17218 <ready_thread>
   1adf8:	e7ee      	b.n	1add8 <unpend_all+0x4>
}
   1adfa:	bd38      	pop	{r3, r4, r5, pc}

0001adfc <add_to_waitq_locked>:
{
   1adfc:	b570      	push	{r4, r5, r6, lr}
   1adfe:	4605      	mov	r5, r0
   1ae00:	460e      	mov	r6, r1
	unready_thread(thread);
   1ae02:	f7fc fa63 	bl	172cc <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   1ae06:	7b6b      	ldrb	r3, [r5, #13]
   1ae08:	f043 0302 	orr.w	r3, r3, #2
   1ae0c:	736b      	strb	r3, [r5, #13]
	if (wait_q != NULL) {
   1ae0e:	b1fe      	cbz	r6, 1ae50 <add_to_waitq_locked+0x54>
		thread->base.pended_on = wait_q;
   1ae10:	60ae      	str	r6, [r5, #8]
	return list->head == list;
   1ae12:	6834      	ldr	r4, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1ae14:	42a6      	cmp	r6, r4
   1ae16:	d108      	bne.n	1ae2a <add_to_waitq_locked+0x2e>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1ae18:	2400      	movs	r4, #0
   1ae1a:	e006      	b.n	1ae2a <add_to_waitq_locked+0x2e>
	sys_dnode_t *const prev = successor->prev;
   1ae1c:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
   1ae1e:	606b      	str	r3, [r5, #4]
	node->next = successor;
   1ae20:	602c      	str	r4, [r5, #0]
	prev->next = node;
   1ae22:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   1ae24:	6065      	str	r5, [r4, #4]
}
   1ae26:	e013      	b.n	1ae50 <add_to_waitq_locked+0x54>
   1ae28:	2400      	movs	r4, #0
   1ae2a:	b164      	cbz	r4, 1ae46 <add_to_waitq_locked+0x4a>
		if (z_sched_prio_cmp(thread, t) > 0) {
   1ae2c:	4621      	mov	r1, r4
   1ae2e:	4628      	mov	r0, r5
   1ae30:	f7ff ff44 	bl	1acbc <z_sched_prio_cmp>
   1ae34:	2800      	cmp	r0, #0
   1ae36:	dcf1      	bgt.n	1ae1c <add_to_waitq_locked+0x20>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1ae38:	2c00      	cmp	r4, #0
   1ae3a:	d0f6      	beq.n	1ae2a <add_to_waitq_locked+0x2e>
	return (node == list->tail) ? NULL : node->next;
   1ae3c:	6873      	ldr	r3, [r6, #4]
   1ae3e:	429c      	cmp	r4, r3
   1ae40:	d0f2      	beq.n	1ae28 <add_to_waitq_locked+0x2c>
   1ae42:	6824      	ldr	r4, [r4, #0]
   1ae44:	e7f1      	b.n	1ae2a <add_to_waitq_locked+0x2e>
	sys_dnode_t *const tail = list->tail;
   1ae46:	6873      	ldr	r3, [r6, #4]
	node->next = list;
   1ae48:	602e      	str	r6, [r5, #0]
	node->prev = tail;
   1ae4a:	606b      	str	r3, [r5, #4]
	tail->next = node;
   1ae4c:	601d      	str	r5, [r3, #0]
	list->tail = node;
   1ae4e:	6075      	str	r5, [r6, #4]
}
   1ae50:	bd70      	pop	{r4, r5, r6, pc}

0001ae52 <pend_locked>:
{
   1ae52:	b570      	push	{r4, r5, r6, lr}
   1ae54:	4604      	mov	r4, r0
   1ae56:	4616      	mov	r6, r2
   1ae58:	461d      	mov	r5, r3
	add_to_waitq_locked(thread, wait_q);
   1ae5a:	f7ff ffcf 	bl	1adfc <add_to_waitq_locked>
	add_thread_timeout(thread, timeout);
   1ae5e:	4632      	mov	r2, r6
   1ae60:	462b      	mov	r3, r5
   1ae62:	4620      	mov	r0, r4
   1ae64:	f7fc f88c 	bl	16f80 <add_thread_timeout>
}
   1ae68:	bd70      	pop	{r4, r5, r6, pc}

0001ae6a <z_unpend_first_thread>:
{
   1ae6a:	b570      	push	{r4, r5, r6, lr}
   1ae6c:	4606      	mov	r6, r0
	LOCKED(&sched_spinlock) {
   1ae6e:	2300      	movs	r3, #0
	__asm__ volatile(
   1ae70:	f04f 0220 	mov.w	r2, #32
   1ae74:	f3ef 8511 	mrs	r5, BASEPRI
   1ae78:	f382 8812 	msr	BASEPRI_MAX, r2
   1ae7c:	f3bf 8f6f 	isb	sy
	struct k_thread *thread = NULL;
   1ae80:	461c      	mov	r4, r3
   1ae82:	e004      	b.n	1ae8e <z_unpend_first_thread+0x24>
	__asm__ volatile(
   1ae84:	f385 8811 	msr	BASEPRI, r5
   1ae88:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   1ae8c:	2301      	movs	r3, #1
   1ae8e:	b963      	cbnz	r3, 1aeaa <z_unpend_first_thread+0x40>
		thread = _priq_wait_best(&wait_q->waitq);
   1ae90:	4630      	mov	r0, r6
   1ae92:	f7ff ff4d 	bl	1ad30 <z_priq_dumb_best>
		if (thread != NULL) {
   1ae96:	4604      	mov	r4, r0
   1ae98:	2800      	cmp	r0, #0
   1ae9a:	d0f3      	beq.n	1ae84 <z_unpend_first_thread+0x1a>
			unpend_thread_no_timeout(thread);
   1ae9c:	f7ff ff3a 	bl	1ad14 <unpend_thread_no_timeout>
   1aea0:	f104 0018 	add.w	r0, r4, #24
   1aea4:	f000 f81e 	bl	1aee4 <z_abort_timeout>
   1aea8:	e7ec      	b.n	1ae84 <z_unpend_first_thread+0x1a>
}
   1aeaa:	4620      	mov	r0, r4
   1aeac:	bd70      	pop	{r4, r5, r6, pc}

0001aeae <init_ready_q>:
	sys_dlist_init(&rq->runq);
   1aeae:	1d03      	adds	r3, r0, #4
	list->head = (sys_dnode_t *)list;
   1aeb0:	6043      	str	r3, [r0, #4]
	list->tail = (sys_dnode_t *)list;
   1aeb2:	6083      	str	r3, [r0, #8]
}
   1aeb4:	4770      	bx	lr

0001aeb6 <remove_timeout>:
{
   1aeb6:	b510      	push	{r4, lr}
   1aeb8:	4604      	mov	r4, r0
	if (next(t) != NULL) {
   1aeba:	f7fc fc87 	bl	177cc <next>
   1aebe:	b148      	cbz	r0, 1aed4 <remove_timeout+0x1e>
   1aec0:	4602      	mov	r2, r0
		next(t)->dticks += t->dticks;
   1aec2:	6903      	ldr	r3, [r0, #16]
   1aec4:	6941      	ldr	r1, [r0, #20]
   1aec6:	6920      	ldr	r0, [r4, #16]
   1aec8:	181b      	adds	r3, r3, r0
   1aeca:	6960      	ldr	r0, [r4, #20]
   1aecc:	eb41 0100 	adc.w	r1, r1, r0
   1aed0:	6113      	str	r3, [r2, #16]
   1aed2:	6151      	str	r1, [r2, #20]
	sys_dnode_t *const prev = node->prev;
   1aed4:	6862      	ldr	r2, [r4, #4]
	sys_dnode_t *const next = node->next;
   1aed6:	6823      	ldr	r3, [r4, #0]
	prev->next = next;
   1aed8:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   1aeda:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1aedc:	2300      	movs	r3, #0
   1aede:	6023      	str	r3, [r4, #0]
	node->prev = NULL;
   1aee0:	6063      	str	r3, [r4, #4]
}
   1aee2:	bd10      	pop	{r4, pc}

0001aee4 <z_abort_timeout>:
{
   1aee4:	b570      	push	{r4, r5, r6, lr}
   1aee6:	4604      	mov	r4, r0
	LOCKED(&timeout_lock) {
   1aee8:	2300      	movs	r3, #0
	__asm__ volatile(
   1aeea:	f04f 0220 	mov.w	r2, #32
   1aeee:	f3ef 8611 	mrs	r6, BASEPRI
   1aef2:	f382 8812 	msr	BASEPRI_MAX, r2
   1aef6:	f3bf 8f6f 	isb	sy
	int ret = -EINVAL;
   1aefa:	f06f 0015 	mvn.w	r0, #21
   1aefe:	e004      	b.n	1af0a <z_abort_timeout+0x26>
	__asm__ volatile(
   1af00:	f386 8811 	msr	BASEPRI, r6
   1af04:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   1af08:	2301      	movs	r3, #1
   1af0a:	461d      	mov	r5, r3
   1af0c:	b93b      	cbnz	r3, 1af1e <z_abort_timeout+0x3a>
	return node->next != NULL;
   1af0e:	6823      	ldr	r3, [r4, #0]
		if (sys_dnode_is_linked(&to->node)) {
   1af10:	2b00      	cmp	r3, #0
   1af12:	d0f5      	beq.n	1af00 <z_abort_timeout+0x1c>
			remove_timeout(to);
   1af14:	4620      	mov	r0, r4
   1af16:	f7ff ffce 	bl	1aeb6 <remove_timeout>
			ret = 0;
   1af1a:	4628      	mov	r0, r5
   1af1c:	e7f0      	b.n	1af00 <z_abort_timeout+0x1c>
}
   1af1e:	bd70      	pop	{r4, r5, r6, pc}

0001af20 <z_get_next_timeout_expiry>:
{
   1af20:	b510      	push	{r4, lr}
	LOCKED(&timeout_lock) {
   1af22:	2300      	movs	r3, #0
	__asm__ volatile(
   1af24:	f04f 0220 	mov.w	r2, #32
   1af28:	f3ef 8411 	mrs	r4, BASEPRI
   1af2c:	f382 8812 	msr	BASEPRI_MAX, r2
   1af30:	f3bf 8f6f 	isb	sy
	int32_t ret = (int32_t) K_TICKS_FOREVER;
   1af34:	f04f 30ff 	mov.w	r0, #4294967295
   1af38:	e006      	b.n	1af48 <z_get_next_timeout_expiry+0x28>
		ret = next_timeout();
   1af3a:	f7fc fc5f 	bl	177fc <next_timeout>
	__asm__ volatile(
   1af3e:	f384 8811 	msr	BASEPRI, r4
   1af42:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   1af46:	2301      	movs	r3, #1
   1af48:	2b00      	cmp	r3, #0
   1af4a:	d0f6      	beq.n	1af3a <z_get_next_timeout_expiry+0x1a>
}
   1af4c:	bd10      	pop	{r4, pc}

0001af4e <z_set_timeout_expiry>:
{
   1af4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1af50:	4606      	mov	r6, r0
   1af52:	460f      	mov	r7, r1
	LOCKED(&timeout_lock) {
   1af54:	2300      	movs	r3, #0
	__asm__ volatile(
   1af56:	f04f 0220 	mov.w	r2, #32
   1af5a:	f3ef 8511 	mrs	r5, BASEPRI
   1af5e:	f382 8812 	msr	BASEPRI_MAX, r2
   1af62:	f3bf 8f6f 	isb	sy
   1af66:	e00a      	b.n	1af7e <z_set_timeout_expiry+0x30>
			      || (ticks <= next_to);
   1af68:	2401      	movs	r4, #1
		bool sooner = (next_to == K_TICKS_FOREVER)
   1af6a:	f004 0401 	and.w	r4, r4, #1
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   1af6e:	2801      	cmp	r0, #1
   1af70:	dd00      	ble.n	1af74 <z_set_timeout_expiry+0x26>
   1af72:	b97c      	cbnz	r4, 1af94 <z_set_timeout_expiry+0x46>
	__asm__ volatile(
   1af74:	f385 8811 	msr	BASEPRI, r5
   1af78:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   1af7c:	2301      	movs	r3, #1
   1af7e:	461c      	mov	r4, r3
   1af80:	b97b      	cbnz	r3, 1afa2 <z_set_timeout_expiry+0x54>
		int next_to = next_timeout();
   1af82:	f7fc fc3b 	bl	177fc <next_timeout>
			      || (ticks <= next_to);
   1af86:	f1b0 3fff 	cmp.w	r0, #4294967295
   1af8a:	d0ed      	beq.n	1af68 <z_set_timeout_expiry+0x1a>
   1af8c:	42b0      	cmp	r0, r6
   1af8e:	dbec      	blt.n	1af6a <z_set_timeout_expiry+0x1c>
   1af90:	2401      	movs	r4, #1
   1af92:	e7ea      	b.n	1af6a <z_set_timeout_expiry+0x1c>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
   1af94:	4639      	mov	r1, r7
   1af96:	42b0      	cmp	r0, r6
   1af98:	bfa8      	it	ge
   1af9a:	4630      	movge	r0, r6
   1af9c:	f7fa f918 	bl	151d0 <sys_clock_set_timeout>
   1afa0:	e7e8      	b.n	1af74 <z_set_timeout_expiry+0x26>
}
   1afa2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001afa4 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   1afa4:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   1afa6:	f7fc fd3b 	bl	17a20 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   1afaa:	bd08      	pop	{r3, pc}

0001afac <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
   1afac:	b508      	push	{r3, lr}
	return sys_clock_tick_get();
   1afae:	f7fc fd37 	bl	17a20 <sys_clock_tick_get>
}
   1afb2:	bd08      	pop	{r3, pc}

0001afb4 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
   1afb4:	b900      	cbnz	r0, 1afb8 <z_impl_k_busy_wait+0x4>
   1afb6:	4770      	bx	lr
{
   1afb8:	b508      	push	{r3, lr}
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
   1afba:	f7fe fe92 	bl	19ce2 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
   1afbe:	bd08      	pop	{r3, pc}

0001afc0 <memcpy>:
   1afc0:	440a      	add	r2, r1
   1afc2:	1e43      	subs	r3, r0, #1
   1afc4:	4291      	cmp	r1, r2
   1afc6:	d100      	bne.n	1afca <memcpy+0xa>
   1afc8:	4770      	bx	lr
   1afca:	b510      	push	{r4, lr}
   1afcc:	f811 4b01 	ldrb.w	r4, [r1], #1
   1afd0:	4291      	cmp	r1, r2
   1afd2:	f803 4f01 	strb.w	r4, [r3, #1]!
   1afd6:	d1f9      	bne.n	1afcc <memcpy+0xc>
   1afd8:	bd10      	pop	{r4, pc}

0001afda <memset>:
   1afda:	4402      	add	r2, r0
   1afdc:	4603      	mov	r3, r0
   1afde:	4293      	cmp	r3, r2
   1afe0:	d100      	bne.n	1afe4 <memset+0xa>
   1afe2:	4770      	bx	lr
   1afe4:	f803 1b01 	strb.w	r1, [r3], #1
   1afe8:	e7f9      	b.n	1afde <memset+0x4>

0001afea <_calloc_r>:
   1afea:	b538      	push	{r3, r4, r5, lr}
   1afec:	fb02 f501 	mul.w	r5, r2, r1
   1aff0:	4629      	mov	r1, r5
   1aff2:	f7fc fe73 	bl	17cdc <_malloc_r>
   1aff6:	4604      	mov	r4, r0
   1aff8:	b118      	cbz	r0, 1b002 <_calloc_r+0x18>
   1affa:	462a      	mov	r2, r5
   1affc:	2100      	movs	r1, #0
   1affe:	f7ff ffec 	bl	1afda <memset>
   1b002:	4620      	mov	r0, r4
   1b004:	bd38      	pop	{r3, r4, r5, pc}

0001b006 <__cvt>:
   1b006:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b00a:	b089      	sub	sp, #36	; 0x24
   1b00c:	2b00      	cmp	r3, #0
   1b00e:	461d      	mov	r5, r3
   1b010:	4614      	mov	r4, r2
   1b012:	bfba      	itte	lt
   1b014:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
   1b018:	4614      	movlt	r4, r2
   1b01a:	2300      	movge	r3, #0
   1b01c:	9a14      	ldr	r2, [sp, #80]	; 0x50
   1b01e:	bfbc      	itt	lt
   1b020:	461d      	movlt	r5, r3
   1b022:	232d      	movlt	r3, #45	; 0x2d
   1b024:	e9dd 9815 	ldrd	r9, r8, [sp, #84]	; 0x54
   1b028:	e9dd 6b12 	ldrd	r6, fp, [sp, #72]	; 0x48
   1b02c:	f028 0a20 	bic.w	sl, r8, #32
   1b030:	7013      	strb	r3, [r2, #0]
   1b032:	f1ba 0f46 	cmp.w	sl, #70	; 0x46
   1b036:	d005      	beq.n	1b044 <__cvt+0x3e>
   1b038:	f1ba 0f45 	cmp.w	sl, #69	; 0x45
   1b03c:	d100      	bne.n	1b040 <__cvt+0x3a>
   1b03e:	3601      	adds	r6, #1
   1b040:	2302      	movs	r3, #2
   1b042:	e000      	b.n	1b046 <__cvt+0x40>
   1b044:	2303      	movs	r3, #3
   1b046:	aa07      	add	r2, sp, #28
   1b048:	9204      	str	r2, [sp, #16]
   1b04a:	aa06      	add	r2, sp, #24
   1b04c:	e9cd 3600 	strd	r3, r6, [sp]
   1b050:	e9cd 9202 	strd	r9, r2, [sp, #8]
   1b054:	462b      	mov	r3, r5
   1b056:	4622      	mov	r2, r4
   1b058:	f7f6 f9b6 	bl	113c8 <_dtoa_r>
   1b05c:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
   1b060:	4607      	mov	r7, r0
   1b062:	d119      	bne.n	1b098 <__cvt+0x92>
   1b064:	f01b 0f01 	tst.w	fp, #1
   1b068:	d00e      	beq.n	1b088 <__cvt+0x82>
   1b06a:	eb07 0806 	add.w	r8, r7, r6
   1b06e:	2200      	movs	r2, #0
   1b070:	2300      	movs	r3, #0
   1b072:	4620      	mov	r0, r4
   1b074:	4629      	mov	r1, r5
   1b076:	f7f5 fd47 	bl	10b08 <__aeabi_dcmpeq>
   1b07a:	b108      	cbz	r0, 1b080 <__cvt+0x7a>
   1b07c:	f8cd 801c 	str.w	r8, [sp, #28]
   1b080:	2230      	movs	r2, #48	; 0x30
   1b082:	9b07      	ldr	r3, [sp, #28]
   1b084:	4543      	cmp	r3, r8
   1b086:	d321      	bcc.n	1b0cc <__cvt+0xc6>
   1b088:	9b07      	ldr	r3, [sp, #28]
   1b08a:	4638      	mov	r0, r7
   1b08c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   1b08e:	1bdb      	subs	r3, r3, r7
   1b090:	6013      	str	r3, [r2, #0]
   1b092:	b009      	add	sp, #36	; 0x24
   1b094:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b098:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
   1b09c:	d0e2      	beq.n	1b064 <__cvt+0x5e>
   1b09e:	f1ba 0f46 	cmp.w	sl, #70	; 0x46
   1b0a2:	eb00 0806 	add.w	r8, r0, r6
   1b0a6:	d1e2      	bne.n	1b06e <__cvt+0x68>
   1b0a8:	7803      	ldrb	r3, [r0, #0]
   1b0aa:	2b30      	cmp	r3, #48	; 0x30
   1b0ac:	d10a      	bne.n	1b0c4 <__cvt+0xbe>
   1b0ae:	2200      	movs	r2, #0
   1b0b0:	2300      	movs	r3, #0
   1b0b2:	4620      	mov	r0, r4
   1b0b4:	4629      	mov	r1, r5
   1b0b6:	f7f5 fd27 	bl	10b08 <__aeabi_dcmpeq>
   1b0ba:	b918      	cbnz	r0, 1b0c4 <__cvt+0xbe>
   1b0bc:	f1c6 0601 	rsb	r6, r6, #1
   1b0c0:	f8c9 6000 	str.w	r6, [r9]
   1b0c4:	f8d9 3000 	ldr.w	r3, [r9]
   1b0c8:	4498      	add	r8, r3
   1b0ca:	e7d0      	b.n	1b06e <__cvt+0x68>
   1b0cc:	1c59      	adds	r1, r3, #1
   1b0ce:	9107      	str	r1, [sp, #28]
   1b0d0:	701a      	strb	r2, [r3, #0]
   1b0d2:	e7d6      	b.n	1b082 <__cvt+0x7c>

0001b0d4 <__exponent>:
   1b0d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1b0d6:	2900      	cmp	r1, #0
   1b0d8:	7002      	strb	r2, [r0, #0]
   1b0da:	bfba      	itte	lt
   1b0dc:	4249      	neglt	r1, r1
   1b0de:	232d      	movlt	r3, #45	; 0x2d
   1b0e0:	232b      	movge	r3, #43	; 0x2b
   1b0e2:	2909      	cmp	r1, #9
   1b0e4:	7043      	strb	r3, [r0, #1]
   1b0e6:	dd28      	ble.n	1b13a <__exponent+0x66>
   1b0e8:	f10d 0307 	add.w	r3, sp, #7
   1b0ec:	270a      	movs	r7, #10
   1b0ee:	461d      	mov	r5, r3
   1b0f0:	461a      	mov	r2, r3
   1b0f2:	3b01      	subs	r3, #1
   1b0f4:	fbb1 f6f7 	udiv	r6, r1, r7
   1b0f8:	fb07 1416 	mls	r4, r7, r6, r1
   1b0fc:	3430      	adds	r4, #48	; 0x30
   1b0fe:	f802 4c01 	strb.w	r4, [r2, #-1]
   1b102:	460c      	mov	r4, r1
   1b104:	4631      	mov	r1, r6
   1b106:	2c63      	cmp	r4, #99	; 0x63
   1b108:	dcf2      	bgt.n	1b0f0 <__exponent+0x1c>
   1b10a:	3130      	adds	r1, #48	; 0x30
   1b10c:	1e94      	subs	r4, r2, #2
   1b10e:	f803 1c01 	strb.w	r1, [r3, #-1]
   1b112:	1c41      	adds	r1, r0, #1
   1b114:	4623      	mov	r3, r4
   1b116:	42ab      	cmp	r3, r5
   1b118:	d30a      	bcc.n	1b130 <__exponent+0x5c>
   1b11a:	f10d 0309 	add.w	r3, sp, #9
   1b11e:	1a9b      	subs	r3, r3, r2
   1b120:	42ac      	cmp	r4, r5
   1b122:	bf88      	it	hi
   1b124:	2300      	movhi	r3, #0
   1b126:	3302      	adds	r3, #2
   1b128:	4403      	add	r3, r0
   1b12a:	1a18      	subs	r0, r3, r0
   1b12c:	b003      	add	sp, #12
   1b12e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1b130:	f813 6b01 	ldrb.w	r6, [r3], #1
   1b134:	f801 6f01 	strb.w	r6, [r1, #1]!
   1b138:	e7ed      	b.n	1b116 <__exponent+0x42>
   1b13a:	2330      	movs	r3, #48	; 0x30
   1b13c:	3130      	adds	r1, #48	; 0x30
   1b13e:	7083      	strb	r3, [r0, #2]
   1b140:	1d03      	adds	r3, r0, #4
   1b142:	70c1      	strb	r1, [r0, #3]
   1b144:	e7f1      	b.n	1b12a <__exponent+0x56>

0001b146 <_printf_common>:
   1b146:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1b14a:	4616      	mov	r6, r2
   1b14c:	4698      	mov	r8, r3
   1b14e:	688a      	ldr	r2, [r1, #8]
   1b150:	4607      	mov	r7, r0
   1b152:	690b      	ldr	r3, [r1, #16]
   1b154:	460c      	mov	r4, r1
   1b156:	f8dd 9020 	ldr.w	r9, [sp, #32]
   1b15a:	4293      	cmp	r3, r2
   1b15c:	bfb8      	it	lt
   1b15e:	4613      	movlt	r3, r2
   1b160:	6033      	str	r3, [r6, #0]
   1b162:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
   1b166:	b10a      	cbz	r2, 1b16c <_printf_common+0x26>
   1b168:	3301      	adds	r3, #1
   1b16a:	6033      	str	r3, [r6, #0]
   1b16c:	6823      	ldr	r3, [r4, #0]
   1b16e:	0699      	lsls	r1, r3, #26
   1b170:	bf42      	ittt	mi
   1b172:	6833      	ldrmi	r3, [r6, #0]
   1b174:	3302      	addmi	r3, #2
   1b176:	6033      	strmi	r3, [r6, #0]
   1b178:	6825      	ldr	r5, [r4, #0]
   1b17a:	f015 0506 	ands.w	r5, r5, #6
   1b17e:	d106      	bne.n	1b18e <_printf_common+0x48>
   1b180:	f104 0a19 	add.w	sl, r4, #25
   1b184:	68e3      	ldr	r3, [r4, #12]
   1b186:	6832      	ldr	r2, [r6, #0]
   1b188:	1a9b      	subs	r3, r3, r2
   1b18a:	42ab      	cmp	r3, r5
   1b18c:	dc2b      	bgt.n	1b1e6 <_printf_common+0xa0>
   1b18e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
   1b192:	6822      	ldr	r2, [r4, #0]
   1b194:	3b00      	subs	r3, #0
   1b196:	bf18      	it	ne
   1b198:	2301      	movne	r3, #1
   1b19a:	0692      	lsls	r2, r2, #26
   1b19c:	d430      	bmi.n	1b200 <_printf_common+0xba>
   1b19e:	f104 0243 	add.w	r2, r4, #67	; 0x43
   1b1a2:	4641      	mov	r1, r8
   1b1a4:	4638      	mov	r0, r7
   1b1a6:	47c8      	blx	r9
   1b1a8:	3001      	adds	r0, #1
   1b1aa:	d023      	beq.n	1b1f4 <_printf_common+0xae>
   1b1ac:	6823      	ldr	r3, [r4, #0]
   1b1ae:	341a      	adds	r4, #26
   1b1b0:	f854 2c0a 	ldr.w	r2, [r4, #-10]
   1b1b4:	f003 0306 	and.w	r3, r3, #6
   1b1b8:	2b04      	cmp	r3, #4
   1b1ba:	bf0a      	itet	eq
   1b1bc:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
   1b1c0:	2500      	movne	r5, #0
   1b1c2:	6833      	ldreq	r3, [r6, #0]
   1b1c4:	f04f 0600 	mov.w	r6, #0
   1b1c8:	bf08      	it	eq
   1b1ca:	1aed      	subeq	r5, r5, r3
   1b1cc:	f854 3c12 	ldr.w	r3, [r4, #-18]
   1b1d0:	bf08      	it	eq
   1b1d2:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
   1b1d6:	4293      	cmp	r3, r2
   1b1d8:	bfc4      	itt	gt
   1b1da:	1a9b      	subgt	r3, r3, r2
   1b1dc:	18ed      	addgt	r5, r5, r3
   1b1de:	42b5      	cmp	r5, r6
   1b1e0:	d11a      	bne.n	1b218 <_printf_common+0xd2>
   1b1e2:	2000      	movs	r0, #0
   1b1e4:	e008      	b.n	1b1f8 <_printf_common+0xb2>
   1b1e6:	2301      	movs	r3, #1
   1b1e8:	4652      	mov	r2, sl
   1b1ea:	4641      	mov	r1, r8
   1b1ec:	4638      	mov	r0, r7
   1b1ee:	47c8      	blx	r9
   1b1f0:	3001      	adds	r0, #1
   1b1f2:	d103      	bne.n	1b1fc <_printf_common+0xb6>
   1b1f4:	f04f 30ff 	mov.w	r0, #4294967295
   1b1f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1b1fc:	3501      	adds	r5, #1
   1b1fe:	e7c1      	b.n	1b184 <_printf_common+0x3e>
   1b200:	18e1      	adds	r1, r4, r3
   1b202:	1c5a      	adds	r2, r3, #1
   1b204:	2030      	movs	r0, #48	; 0x30
   1b206:	3302      	adds	r3, #2
   1b208:	4422      	add	r2, r4
   1b20a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
   1b20e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
   1b212:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
   1b216:	e7c2      	b.n	1b19e <_printf_common+0x58>
   1b218:	2301      	movs	r3, #1
   1b21a:	4622      	mov	r2, r4
   1b21c:	4641      	mov	r1, r8
   1b21e:	4638      	mov	r0, r7
   1b220:	47c8      	blx	r9
   1b222:	3001      	adds	r0, #1
   1b224:	d0e6      	beq.n	1b1f4 <_printf_common+0xae>
   1b226:	3601      	adds	r6, #1
   1b228:	e7d9      	b.n	1b1de <_printf_common+0x98>

0001b22a <strnlen>:
   1b22a:	4602      	mov	r2, r0
   1b22c:	4401      	add	r1, r0
   1b22e:	b510      	push	{r4, lr}
   1b230:	428a      	cmp	r2, r1
   1b232:	4613      	mov	r3, r2
   1b234:	d003      	beq.n	1b23e <strnlen+0x14>
   1b236:	781c      	ldrb	r4, [r3, #0]
   1b238:	3201      	adds	r2, #1
   1b23a:	2c00      	cmp	r4, #0
   1b23c:	d1f8      	bne.n	1b230 <strnlen+0x6>
   1b23e:	1a18      	subs	r0, r3, r0
   1b240:	bd10      	pop	{r4, pc}

0001b242 <quorem>:
   1b242:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b246:	6903      	ldr	r3, [r0, #16]
   1b248:	4607      	mov	r7, r0
   1b24a:	690c      	ldr	r4, [r1, #16]
   1b24c:	42a3      	cmp	r3, r4
   1b24e:	f2c0 8083 	blt.w	1b358 <quorem+0x116>
   1b252:	3c01      	subs	r4, #1
   1b254:	f100 0514 	add.w	r5, r0, #20
   1b258:	f101 0814 	add.w	r8, r1, #20
   1b25c:	00a3      	lsls	r3, r4, #2
   1b25e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
   1b262:	eb08 0984 	add.w	r9, r8, r4, lsl #2
   1b266:	9300      	str	r3, [sp, #0]
   1b268:	eb05 0384 	add.w	r3, r5, r4, lsl #2
   1b26c:	9301      	str	r3, [sp, #4]
   1b26e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
   1b272:	3301      	adds	r3, #1
   1b274:	429a      	cmp	r2, r3
   1b276:	fbb2 f6f3 	udiv	r6, r2, r3
   1b27a:	d331      	bcc.n	1b2e0 <quorem+0x9e>
   1b27c:	f04f 0a00 	mov.w	sl, #0
   1b280:	46c4      	mov	ip, r8
   1b282:	46ae      	mov	lr, r5
   1b284:	46d3      	mov	fp, sl
   1b286:	f85c 3b04 	ldr.w	r3, [ip], #4
   1b28a:	b298      	uxth	r0, r3
   1b28c:	45e1      	cmp	r9, ip
   1b28e:	ea4f 4313 	mov.w	r3, r3, lsr #16
   1b292:	fb06 a000 	mla	r0, r6, r0, sl
   1b296:	ea4f 4210 	mov.w	r2, r0, lsr #16
   1b29a:	b280      	uxth	r0, r0
   1b29c:	fb06 2303 	mla	r3, r6, r3, r2
   1b2a0:	f8de 2000 	ldr.w	r2, [lr]
   1b2a4:	b292      	uxth	r2, r2
   1b2a6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
   1b2aa:	eba2 0200 	sub.w	r2, r2, r0
   1b2ae:	b29b      	uxth	r3, r3
   1b2b0:	f8de 0000 	ldr.w	r0, [lr]
   1b2b4:	445a      	add	r2, fp
   1b2b6:	ebc3 4322 	rsb	r3, r3, r2, asr #16
   1b2ba:	b292      	uxth	r2, r2
   1b2bc:	eb03 4310 	add.w	r3, r3, r0, lsr #16
   1b2c0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   1b2c4:	ea4f 4b23 	mov.w	fp, r3, asr #16
   1b2c8:	f84e 2b04 	str.w	r2, [lr], #4
   1b2cc:	d2db      	bcs.n	1b286 <quorem+0x44>
   1b2ce:	9b00      	ldr	r3, [sp, #0]
   1b2d0:	58eb      	ldr	r3, [r5, r3]
   1b2d2:	b92b      	cbnz	r3, 1b2e0 <quorem+0x9e>
   1b2d4:	9b01      	ldr	r3, [sp, #4]
   1b2d6:	3b04      	subs	r3, #4
   1b2d8:	429d      	cmp	r5, r3
   1b2da:	461a      	mov	r2, r3
   1b2dc:	d330      	bcc.n	1b340 <quorem+0xfe>
   1b2de:	613c      	str	r4, [r7, #16]
   1b2e0:	4638      	mov	r0, r7
   1b2e2:	f000 f8cd 	bl	1b480 <__mcmp>
   1b2e6:	2800      	cmp	r0, #0
   1b2e8:	db26      	blt.n	1b338 <quorem+0xf6>
   1b2ea:	4629      	mov	r1, r5
   1b2ec:	2000      	movs	r0, #0
   1b2ee:	f858 2b04 	ldr.w	r2, [r8], #4
   1b2f2:	f8d1 c000 	ldr.w	ip, [r1]
   1b2f6:	fa1f fe82 	uxth.w	lr, r2
   1b2fa:	45c1      	cmp	r9, r8
   1b2fc:	fa1f f38c 	uxth.w	r3, ip
   1b300:	ea4f 4212 	mov.w	r2, r2, lsr #16
   1b304:	eba3 030e 	sub.w	r3, r3, lr
   1b308:	4403      	add	r3, r0
   1b30a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
   1b30e:	b29b      	uxth	r3, r3
   1b310:	eb02 421c 	add.w	r2, r2, ip, lsr #16
   1b314:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   1b318:	ea4f 4022 	mov.w	r0, r2, asr #16
   1b31c:	f841 3b04 	str.w	r3, [r1], #4
   1b320:	d2e5      	bcs.n	1b2ee <quorem+0xac>
   1b322:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
   1b326:	eb05 0384 	add.w	r3, r5, r4, lsl #2
   1b32a:	b922      	cbnz	r2, 1b336 <quorem+0xf4>
   1b32c:	3b04      	subs	r3, #4
   1b32e:	429d      	cmp	r5, r3
   1b330:	461a      	mov	r2, r3
   1b332:	d30b      	bcc.n	1b34c <quorem+0x10a>
   1b334:	613c      	str	r4, [r7, #16]
   1b336:	3601      	adds	r6, #1
   1b338:	4630      	mov	r0, r6
   1b33a:	b003      	add	sp, #12
   1b33c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b340:	6812      	ldr	r2, [r2, #0]
   1b342:	3b04      	subs	r3, #4
   1b344:	2a00      	cmp	r2, #0
   1b346:	d1ca      	bne.n	1b2de <quorem+0x9c>
   1b348:	3c01      	subs	r4, #1
   1b34a:	e7c5      	b.n	1b2d8 <quorem+0x96>
   1b34c:	6812      	ldr	r2, [r2, #0]
   1b34e:	3b04      	subs	r3, #4
   1b350:	2a00      	cmp	r2, #0
   1b352:	d1ef      	bne.n	1b334 <quorem+0xf2>
   1b354:	3c01      	subs	r4, #1
   1b356:	e7ea      	b.n	1b32e <quorem+0xec>
   1b358:	2000      	movs	r0, #0
   1b35a:	e7ee      	b.n	1b33a <quorem+0xf8>

0001b35c <__sfmoreglue>:
   1b35c:	b570      	push	{r4, r5, r6, lr}
   1b35e:	2368      	movs	r3, #104	; 0x68
   1b360:	1e4d      	subs	r5, r1, #1
   1b362:	460e      	mov	r6, r1
   1b364:	435d      	muls	r5, r3
   1b366:	f105 0174 	add.w	r1, r5, #116	; 0x74
   1b36a:	f7fc fcb7 	bl	17cdc <_malloc_r>
   1b36e:	4604      	mov	r4, r0
   1b370:	b140      	cbz	r0, 1b384 <__sfmoreglue+0x28>
   1b372:	2100      	movs	r1, #0
   1b374:	f105 0268 	add.w	r2, r5, #104	; 0x68
   1b378:	e9c0 1600 	strd	r1, r6, [r0]
   1b37c:	300c      	adds	r0, #12
   1b37e:	60a0      	str	r0, [r4, #8]
   1b380:	f7ff fe2b 	bl	1afda <memset>
   1b384:	4620      	mov	r0, r4
   1b386:	bd70      	pop	{r4, r5, r6, pc}

0001b388 <_fwalk_reent>:
   1b388:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1b38c:	4606      	mov	r6, r0
   1b38e:	4688      	mov	r8, r1
   1b390:	f100 0448 	add.w	r4, r0, #72	; 0x48
   1b394:	2700      	movs	r7, #0
   1b396:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
   1b39a:	f1b9 0901 	subs.w	r9, r9, #1
   1b39e:	d505      	bpl.n	1b3ac <_fwalk_reent+0x24>
   1b3a0:	6824      	ldr	r4, [r4, #0]
   1b3a2:	2c00      	cmp	r4, #0
   1b3a4:	d1f7      	bne.n	1b396 <_fwalk_reent+0xe>
   1b3a6:	4638      	mov	r0, r7
   1b3a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1b3ac:	89ab      	ldrh	r3, [r5, #12]
   1b3ae:	2b01      	cmp	r3, #1
   1b3b0:	d907      	bls.n	1b3c2 <_fwalk_reent+0x3a>
   1b3b2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
   1b3b6:	3301      	adds	r3, #1
   1b3b8:	d003      	beq.n	1b3c2 <_fwalk_reent+0x3a>
   1b3ba:	4629      	mov	r1, r5
   1b3bc:	4630      	mov	r0, r6
   1b3be:	47c0      	blx	r8
   1b3c0:	4307      	orrs	r7, r0
   1b3c2:	3568      	adds	r5, #104	; 0x68
   1b3c4:	e7e9      	b.n	1b39a <_fwalk_reent+0x12>

0001b3c6 <memchr>:
   1b3c6:	b2c9      	uxtb	r1, r1
   1b3c8:	4603      	mov	r3, r0
   1b3ca:	4402      	add	r2, r0
   1b3cc:	b510      	push	{r4, lr}
   1b3ce:	4293      	cmp	r3, r2
   1b3d0:	4618      	mov	r0, r3
   1b3d2:	d101      	bne.n	1b3d8 <memchr+0x12>
   1b3d4:	2000      	movs	r0, #0
   1b3d6:	e003      	b.n	1b3e0 <memchr+0x1a>
   1b3d8:	7804      	ldrb	r4, [r0, #0]
   1b3da:	3301      	adds	r3, #1
   1b3dc:	428c      	cmp	r4, r1
   1b3de:	d1f6      	bne.n	1b3ce <memchr+0x8>
   1b3e0:	bd10      	pop	{r4, pc}

0001b3e2 <__hi0bits>:
   1b3e2:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
   1b3e6:	4603      	mov	r3, r0
   1b3e8:	bf36      	itet	cc
   1b3ea:	0403      	lslcc	r3, r0, #16
   1b3ec:	2000      	movcs	r0, #0
   1b3ee:	2010      	movcc	r0, #16
   1b3f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
   1b3f4:	bf3c      	itt	cc
   1b3f6:	021b      	lslcc	r3, r3, #8
   1b3f8:	3008      	addcc	r0, #8
   1b3fa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   1b3fe:	bf3c      	itt	cc
   1b400:	011b      	lslcc	r3, r3, #4
   1b402:	3004      	addcc	r0, #4
   1b404:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
   1b408:	d303      	bcc.n	1b412 <__hi0bits+0x30>
   1b40a:	2b00      	cmp	r3, #0
   1b40c:	db0a      	blt.n	1b424 <__hi0bits+0x42>
   1b40e:	3001      	adds	r0, #1
   1b410:	4770      	bx	lr
   1b412:	009b      	lsls	r3, r3, #2
   1b414:	d501      	bpl.n	1b41a <__hi0bits+0x38>
   1b416:	3002      	adds	r0, #2
   1b418:	4770      	bx	lr
   1b41a:	005b      	lsls	r3, r3, #1
   1b41c:	d501      	bpl.n	1b422 <__hi0bits+0x40>
   1b41e:	3003      	adds	r0, #3
   1b420:	4770      	bx	lr
   1b422:	2020      	movs	r0, #32
   1b424:	4770      	bx	lr

0001b426 <__lo0bits>:
   1b426:	6803      	ldr	r3, [r0, #0]
   1b428:	4602      	mov	r2, r0
   1b42a:	f013 0007 	ands.w	r0, r3, #7
   1b42e:	d00b      	beq.n	1b448 <__lo0bits+0x22>
   1b430:	07d9      	lsls	r1, r3, #31
   1b432:	d421      	bmi.n	1b478 <__lo0bits+0x52>
   1b434:	0798      	lsls	r0, r3, #30
   1b436:	bf47      	ittee	mi
   1b438:	085b      	lsrmi	r3, r3, #1
   1b43a:	2001      	movmi	r0, #1
   1b43c:	089b      	lsrpl	r3, r3, #2
   1b43e:	2002      	movpl	r0, #2
   1b440:	bf4c      	ite	mi
   1b442:	6013      	strmi	r3, [r2, #0]
   1b444:	6013      	strpl	r3, [r2, #0]
   1b446:	4770      	bx	lr
   1b448:	b299      	uxth	r1, r3
   1b44a:	b909      	cbnz	r1, 1b450 <__lo0bits+0x2a>
   1b44c:	0c1b      	lsrs	r3, r3, #16
   1b44e:	2010      	movs	r0, #16
   1b450:	b2d9      	uxtb	r1, r3
   1b452:	b909      	cbnz	r1, 1b458 <__lo0bits+0x32>
   1b454:	3008      	adds	r0, #8
   1b456:	0a1b      	lsrs	r3, r3, #8
   1b458:	0719      	lsls	r1, r3, #28
   1b45a:	bf04      	itt	eq
   1b45c:	091b      	lsreq	r3, r3, #4
   1b45e:	3004      	addeq	r0, #4
   1b460:	0799      	lsls	r1, r3, #30
   1b462:	bf04      	itt	eq
   1b464:	089b      	lsreq	r3, r3, #2
   1b466:	3002      	addeq	r0, #2
   1b468:	07d9      	lsls	r1, r3, #31
   1b46a:	d403      	bmi.n	1b474 <__lo0bits+0x4e>
   1b46c:	085b      	lsrs	r3, r3, #1
   1b46e:	f100 0001 	add.w	r0, r0, #1
   1b472:	d003      	beq.n	1b47c <__lo0bits+0x56>
   1b474:	6013      	str	r3, [r2, #0]
   1b476:	4770      	bx	lr
   1b478:	2000      	movs	r0, #0
   1b47a:	4770      	bx	lr
   1b47c:	2020      	movs	r0, #32
   1b47e:	4770      	bx	lr

0001b480 <__mcmp>:
   1b480:	4603      	mov	r3, r0
   1b482:	690a      	ldr	r2, [r1, #16]
   1b484:	6900      	ldr	r0, [r0, #16]
   1b486:	1a80      	subs	r0, r0, r2
   1b488:	b530      	push	{r4, r5, lr}
   1b48a:	d10e      	bne.n	1b4aa <__mcmp+0x2a>
   1b48c:	3314      	adds	r3, #20
   1b48e:	3114      	adds	r1, #20
   1b490:	eb03 0482 	add.w	r4, r3, r2, lsl #2
   1b494:	eb01 0182 	add.w	r1, r1, r2, lsl #2
   1b498:	f854 5d04 	ldr.w	r5, [r4, #-4]!
   1b49c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
   1b4a0:	4295      	cmp	r5, r2
   1b4a2:	d003      	beq.n	1b4ac <__mcmp+0x2c>
   1b4a4:	d205      	bcs.n	1b4b2 <__mcmp+0x32>
   1b4a6:	f04f 30ff 	mov.w	r0, #4294967295
   1b4aa:	bd30      	pop	{r4, r5, pc}
   1b4ac:	42a3      	cmp	r3, r4
   1b4ae:	d3f3      	bcc.n	1b498 <__mcmp+0x18>
   1b4b0:	e7fb      	b.n	1b4aa <__mcmp+0x2a>
   1b4b2:	2001      	movs	r0, #1
   1b4b4:	e7f9      	b.n	1b4aa <__mcmp+0x2a>

0001b4b6 <__sfputc_r>:
   1b4b6:	6893      	ldr	r3, [r2, #8]
   1b4b8:	3b01      	subs	r3, #1
   1b4ba:	2b00      	cmp	r3, #0
   1b4bc:	6093      	str	r3, [r2, #8]
   1b4be:	b410      	push	{r4}
   1b4c0:	da07      	bge.n	1b4d2 <__sfputc_r+0x1c>
   1b4c2:	6994      	ldr	r4, [r2, #24]
   1b4c4:	42a3      	cmp	r3, r4
   1b4c6:	db01      	blt.n	1b4cc <__sfputc_r+0x16>
   1b4c8:	290a      	cmp	r1, #10
   1b4ca:	d102      	bne.n	1b4d2 <__sfputc_r+0x1c>
   1b4cc:	bc10      	pop	{r4}
   1b4ce:	f7fd bd05 	b.w	18edc <__swbuf_r>
   1b4d2:	6813      	ldr	r3, [r2, #0]
   1b4d4:	1c58      	adds	r0, r3, #1
   1b4d6:	6010      	str	r0, [r2, #0]
   1b4d8:	4608      	mov	r0, r1
   1b4da:	7019      	strb	r1, [r3, #0]
   1b4dc:	bc10      	pop	{r4}
   1b4de:	4770      	bx	lr

0001b4e0 <__sfputs_r>:
   1b4e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b4e2:	4606      	mov	r6, r0
   1b4e4:	460f      	mov	r7, r1
   1b4e6:	4614      	mov	r4, r2
   1b4e8:	18d5      	adds	r5, r2, r3
   1b4ea:	42ac      	cmp	r4, r5
   1b4ec:	d101      	bne.n	1b4f2 <__sfputs_r+0x12>
   1b4ee:	2000      	movs	r0, #0
   1b4f0:	e007      	b.n	1b502 <__sfputs_r+0x22>
   1b4f2:	463a      	mov	r2, r7
   1b4f4:	f814 1b01 	ldrb.w	r1, [r4], #1
   1b4f8:	4630      	mov	r0, r6
   1b4fa:	f7ff ffdc 	bl	1b4b6 <__sfputc_r>
   1b4fe:	1c43      	adds	r3, r0, #1
   1b500:	d1f3      	bne.n	1b4ea <__sfputs_r+0xa>
   1b502:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001b504 <__sread>:
   1b504:	b510      	push	{r4, lr}
   1b506:	460c      	mov	r4, r1
   1b508:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   1b50c:	f7fd fe84 	bl	19218 <_read_r>
   1b510:	2800      	cmp	r0, #0
   1b512:	bfab      	itete	ge
   1b514:	6d63      	ldrge	r3, [r4, #84]	; 0x54
   1b516:	89a3      	ldrhlt	r3, [r4, #12]
   1b518:	181b      	addge	r3, r3, r0
   1b51a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
   1b51e:	bfac      	ite	ge
   1b520:	6563      	strge	r3, [r4, #84]	; 0x54
   1b522:	81a3      	strhlt	r3, [r4, #12]
   1b524:	bd10      	pop	{r4, pc}

0001b526 <__swrite>:
   1b526:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b52a:	461f      	mov	r7, r3
   1b52c:	898b      	ldrh	r3, [r1, #12]
   1b52e:	4605      	mov	r5, r0
   1b530:	460c      	mov	r4, r1
   1b532:	05db      	lsls	r3, r3, #23
   1b534:	4616      	mov	r6, r2
   1b536:	d505      	bpl.n	1b544 <__swrite+0x1e>
   1b538:	2302      	movs	r3, #2
   1b53a:	2200      	movs	r2, #0
   1b53c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   1b540:	f7fd fe18 	bl	19174 <_lseek_r>
   1b544:	89a3      	ldrh	r3, [r4, #12]
   1b546:	4632      	mov	r2, r6
   1b548:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   1b54c:	4628      	mov	r0, r5
   1b54e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   1b552:	81a3      	strh	r3, [r4, #12]
   1b554:	463b      	mov	r3, r7
   1b556:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1b55a:	f7fd bd11 	b.w	18f80 <_write_r>

0001b55e <__sseek>:
   1b55e:	b510      	push	{r4, lr}
   1b560:	460c      	mov	r4, r1
   1b562:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   1b566:	f7fd fe05 	bl	19174 <_lseek_r>
   1b56a:	1c43      	adds	r3, r0, #1
   1b56c:	89a3      	ldrh	r3, [r4, #12]
   1b56e:	bf15      	itete	ne
   1b570:	6560      	strne	r0, [r4, #84]	; 0x54
   1b572:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   1b576:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   1b57a:	81a3      	strheq	r3, [r4, #12]
   1b57c:	bf18      	it	ne
   1b57e:	81a3      	strhne	r3, [r4, #12]
   1b580:	bd10      	pop	{r4, pc}

0001b582 <__sclose>:
   1b582:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   1b586:	f7fd bd97 	b.w	190b8 <_close_r>

0001b58a <__sflush_r>:
   1b58a:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
   1b58e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b590:	0717      	lsls	r7, r2, #28
   1b592:	4605      	mov	r5, r0
   1b594:	460c      	mov	r4, r1
   1b596:	d456      	bmi.n	1b646 <__sflush_r+0xbc>
   1b598:	684b      	ldr	r3, [r1, #4]
   1b59a:	2b00      	cmp	r3, #0
   1b59c:	dc02      	bgt.n	1b5a4 <__sflush_r+0x1a>
   1b59e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
   1b5a0:	2b00      	cmp	r3, #0
   1b5a2:	dd3d      	ble.n	1b620 <__sflush_r+0x96>
   1b5a4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
   1b5a6:	2e00      	cmp	r6, #0
   1b5a8:	d03a      	beq.n	1b620 <__sflush_r+0x96>
   1b5aa:	2300      	movs	r3, #0
   1b5ac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
   1b5b0:	682f      	ldr	r7, [r5, #0]
   1b5b2:	6a21      	ldr	r1, [r4, #32]
   1b5b4:	602b      	str	r3, [r5, #0]
   1b5b6:	d025      	beq.n	1b604 <__sflush_r+0x7a>
   1b5b8:	6d62      	ldr	r2, [r4, #84]	; 0x54
   1b5ba:	89a3      	ldrh	r3, [r4, #12]
   1b5bc:	0758      	lsls	r0, r3, #29
   1b5be:	d505      	bpl.n	1b5cc <__sflush_r+0x42>
   1b5c0:	6863      	ldr	r3, [r4, #4]
   1b5c2:	1ad2      	subs	r2, r2, r3
   1b5c4:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1b5c6:	b10b      	cbz	r3, 1b5cc <__sflush_r+0x42>
   1b5c8:	6c23      	ldr	r3, [r4, #64]	; 0x40
   1b5ca:	1ad2      	subs	r2, r2, r3
   1b5cc:	6a21      	ldr	r1, [r4, #32]
   1b5ce:	2300      	movs	r3, #0
   1b5d0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
   1b5d2:	4628      	mov	r0, r5
   1b5d4:	47b0      	blx	r6
   1b5d6:	1c41      	adds	r1, r0, #1
   1b5d8:	d024      	beq.n	1b624 <__sflush_r+0x9a>
   1b5da:	2300      	movs	r3, #0
   1b5dc:	6063      	str	r3, [r4, #4]
   1b5de:	6923      	ldr	r3, [r4, #16]
   1b5e0:	6023      	str	r3, [r4, #0]
   1b5e2:	89a3      	ldrh	r3, [r4, #12]
   1b5e4:	04da      	lsls	r2, r3, #19
   1b5e6:	d500      	bpl.n	1b5ea <__sflush_r+0x60>
   1b5e8:	6560      	str	r0, [r4, #84]	; 0x54
   1b5ea:	6b61      	ldr	r1, [r4, #52]	; 0x34
   1b5ec:	602f      	str	r7, [r5, #0]
   1b5ee:	b1b9      	cbz	r1, 1b620 <__sflush_r+0x96>
   1b5f0:	f104 0344 	add.w	r3, r4, #68	; 0x44
   1b5f4:	4299      	cmp	r1, r3
   1b5f6:	d002      	beq.n	1b5fe <__sflush_r+0x74>
   1b5f8:	4628      	mov	r0, r5
   1b5fa:	f7fc fb25 	bl	17c48 <_free_r>
   1b5fe:	2300      	movs	r3, #0
   1b600:	6363      	str	r3, [r4, #52]	; 0x34
   1b602:	e00d      	b.n	1b620 <__sflush_r+0x96>
   1b604:	2301      	movs	r3, #1
   1b606:	4628      	mov	r0, r5
   1b608:	47b0      	blx	r6
   1b60a:	1c46      	adds	r6, r0, #1
   1b60c:	4602      	mov	r2, r0
   1b60e:	d1d4      	bne.n	1b5ba <__sflush_r+0x30>
   1b610:	682b      	ldr	r3, [r5, #0]
   1b612:	2b00      	cmp	r3, #0
   1b614:	d0d1      	beq.n	1b5ba <__sflush_r+0x30>
   1b616:	2b1d      	cmp	r3, #29
   1b618:	d001      	beq.n	1b61e <__sflush_r+0x94>
   1b61a:	2b16      	cmp	r3, #22
   1b61c:	d129      	bne.n	1b672 <__sflush_r+0xe8>
   1b61e:	602f      	str	r7, [r5, #0]
   1b620:	2000      	movs	r0, #0
   1b622:	e02d      	b.n	1b680 <__sflush_r+0xf6>
   1b624:	682a      	ldr	r2, [r5, #0]
   1b626:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1b62a:	b142      	cbz	r2, 1b63e <__sflush_r+0xb4>
   1b62c:	2a1d      	cmp	r2, #29
   1b62e:	d001      	beq.n	1b634 <__sflush_r+0xaa>
   1b630:	2a16      	cmp	r2, #22
   1b632:	d120      	bne.n	1b676 <__sflush_r+0xec>
   1b634:	2300      	movs	r3, #0
   1b636:	6063      	str	r3, [r4, #4]
   1b638:	6923      	ldr	r3, [r4, #16]
   1b63a:	6023      	str	r3, [r4, #0]
   1b63c:	e7d5      	b.n	1b5ea <__sflush_r+0x60>
   1b63e:	6062      	str	r2, [r4, #4]
   1b640:	6922      	ldr	r2, [r4, #16]
   1b642:	6022      	str	r2, [r4, #0]
   1b644:	e7ce      	b.n	1b5e4 <__sflush_r+0x5a>
   1b646:	690f      	ldr	r7, [r1, #16]
   1b648:	2f00      	cmp	r7, #0
   1b64a:	d0e9      	beq.n	1b620 <__sflush_r+0x96>
   1b64c:	0793      	lsls	r3, r2, #30
   1b64e:	680e      	ldr	r6, [r1, #0]
   1b650:	600f      	str	r7, [r1, #0]
   1b652:	bf0c      	ite	eq
   1b654:	694b      	ldreq	r3, [r1, #20]
   1b656:	2300      	movne	r3, #0
   1b658:	1bf6      	subs	r6, r6, r7
   1b65a:	608b      	str	r3, [r1, #8]
   1b65c:	2e00      	cmp	r6, #0
   1b65e:	dddf      	ble.n	1b620 <__sflush_r+0x96>
   1b660:	4633      	mov	r3, r6
   1b662:	463a      	mov	r2, r7
   1b664:	6a21      	ldr	r1, [r4, #32]
   1b666:	4628      	mov	r0, r5
   1b668:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
   1b66c:	47e0      	blx	ip
   1b66e:	2800      	cmp	r0, #0
   1b670:	dc07      	bgt.n	1b682 <__sflush_r+0xf8>
   1b672:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1b676:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1b67a:	f04f 30ff 	mov.w	r0, #4294967295
   1b67e:	81a3      	strh	r3, [r4, #12]
   1b680:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1b682:	4407      	add	r7, r0
   1b684:	1a36      	subs	r6, r6, r0
   1b686:	e7e9      	b.n	1b65c <__sflush_r+0xd2>

0001b688 <__swhatbuf_r>:
   1b688:	b570      	push	{r4, r5, r6, lr}
   1b68a:	460c      	mov	r4, r1
   1b68c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   1b690:	b096      	sub	sp, #88	; 0x58
   1b692:	4615      	mov	r5, r2
   1b694:	2900      	cmp	r1, #0
   1b696:	461e      	mov	r6, r3
   1b698:	da0c      	bge.n	1b6b4 <__swhatbuf_r+0x2c>
   1b69a:	89a3      	ldrh	r3, [r4, #12]
   1b69c:	2100      	movs	r1, #0
   1b69e:	f013 0f80 	tst.w	r3, #128	; 0x80
   1b6a2:	bf14      	ite	ne
   1b6a4:	2340      	movne	r3, #64	; 0x40
   1b6a6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
   1b6aa:	2000      	movs	r0, #0
   1b6ac:	6031      	str	r1, [r6, #0]
   1b6ae:	602b      	str	r3, [r5, #0]
   1b6b0:	b016      	add	sp, #88	; 0x58
   1b6b2:	bd70      	pop	{r4, r5, r6, pc}
   1b6b4:	466a      	mov	r2, sp
   1b6b6:	f7fd fdc1 	bl	1923c <_fstat_r>
   1b6ba:	2800      	cmp	r0, #0
   1b6bc:	dbed      	blt.n	1b69a <__swhatbuf_r+0x12>
   1b6be:	9901      	ldr	r1, [sp, #4]
   1b6c0:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
   1b6c4:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
   1b6c8:	4259      	negs	r1, r3
   1b6ca:	4159      	adcs	r1, r3
   1b6cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
   1b6d0:	e7eb      	b.n	1b6aa <__swhatbuf_r+0x22>

0001b6d2 <__ascii_mbtowc>:
   1b6d2:	b082      	sub	sp, #8
   1b6d4:	b901      	cbnz	r1, 1b6d8 <__ascii_mbtowc+0x6>
   1b6d6:	a901      	add	r1, sp, #4
   1b6d8:	b142      	cbz	r2, 1b6ec <__ascii_mbtowc+0x1a>
   1b6da:	b14b      	cbz	r3, 1b6f0 <__ascii_mbtowc+0x1e>
   1b6dc:	7813      	ldrb	r3, [r2, #0]
   1b6de:	600b      	str	r3, [r1, #0]
   1b6e0:	7812      	ldrb	r2, [r2, #0]
   1b6e2:	1e10      	subs	r0, r2, #0
   1b6e4:	bf18      	it	ne
   1b6e6:	2001      	movne	r0, #1
   1b6e8:	b002      	add	sp, #8
   1b6ea:	4770      	bx	lr
   1b6ec:	4610      	mov	r0, r2
   1b6ee:	e7fb      	b.n	1b6e8 <__ascii_mbtowc+0x16>
   1b6f0:	f06f 0001 	mvn.w	r0, #1
   1b6f4:	e7f8      	b.n	1b6e8 <__ascii_mbtowc+0x16>

0001b6f6 <__ascii_wctomb>:
   1b6f6:	4603      	mov	r3, r0
   1b6f8:	4608      	mov	r0, r1
   1b6fa:	b141      	cbz	r1, 1b70e <__ascii_wctomb+0x18>
   1b6fc:	2aff      	cmp	r2, #255	; 0xff
   1b6fe:	d904      	bls.n	1b70a <__ascii_wctomb+0x14>
   1b700:	228a      	movs	r2, #138	; 0x8a
   1b702:	f04f 30ff 	mov.w	r0, #4294967295
   1b706:	601a      	str	r2, [r3, #0]
   1b708:	4770      	bx	lr
   1b70a:	2001      	movs	r0, #1
   1b70c:	700a      	strb	r2, [r1, #0]
   1b70e:	4770      	bx	lr

0001b710 <abort>:
   1b710:	2006      	movs	r0, #6
   1b712:	b508      	push	{r3, lr}
   1b714:	f7fd fdb4 	bl	19280 <raise>
   1b718:	2001      	movs	r0, #1
   1b71a:	f7f8 fe21 	bl	14360 <_exit>

0001b71e <_raise_r>:
   1b71e:	291f      	cmp	r1, #31
   1b720:	b538      	push	{r3, r4, r5, lr}
   1b722:	4605      	mov	r5, r0
   1b724:	460c      	mov	r4, r1
   1b726:	d904      	bls.n	1b732 <_raise_r+0x14>
   1b728:	2316      	movs	r3, #22
   1b72a:	6003      	str	r3, [r0, #0]
   1b72c:	f04f 30ff 	mov.w	r0, #4294967295
   1b730:	bd38      	pop	{r3, r4, r5, pc}
   1b732:	6c42      	ldr	r2, [r0, #68]	; 0x44
   1b734:	b112      	cbz	r2, 1b73c <_raise_r+0x1e>
   1b736:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
   1b73a:	b94b      	cbnz	r3, 1b750 <_raise_r+0x32>
   1b73c:	4628      	mov	r0, r5
   1b73e:	f000 f816 	bl	1b76e <_getpid_r>
   1b742:	4622      	mov	r2, r4
   1b744:	4601      	mov	r1, r0
   1b746:	4628      	mov	r0, r5
   1b748:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1b74c:	f7fd bda0 	b.w	19290 <_kill_r>
   1b750:	2b01      	cmp	r3, #1
   1b752:	d00a      	beq.n	1b76a <_raise_r+0x4c>
   1b754:	1c59      	adds	r1, r3, #1
   1b756:	d103      	bne.n	1b760 <_raise_r+0x42>
   1b758:	2316      	movs	r3, #22
   1b75a:	6003      	str	r3, [r0, #0]
   1b75c:	2001      	movs	r0, #1
   1b75e:	e7e7      	b.n	1b730 <_raise_r+0x12>
   1b760:	2100      	movs	r1, #0
   1b762:	4620      	mov	r0, r4
   1b764:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
   1b768:	4798      	blx	r3
   1b76a:	2000      	movs	r0, #0
   1b76c:	e7e0      	b.n	1b730 <_raise_r+0x12>

0001b76e <_getpid_r>:
   1b76e:	f7fe bc07 	b.w	19f80 <_getpid>
	...
